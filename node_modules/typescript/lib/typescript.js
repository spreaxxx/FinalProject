/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


"use strict";
var ts = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };

  // src/compiler/corePublic.ts
  var versionMajorMinor, version, Comparison;
  var init_corePublic = __esm({
    "src/compiler/corePublic.ts"() {
      "use strict";
      versionMajorMinor = "5.0";
      version = "5.0.4";
      Comparison = /* @__PURE__ */ ((Comparison3) => {
        Comparison3[Comparison3["LessThan"] = -1] = "LessThan";
        Comparison3[Comparison3["EqualTo"] = 0] = "EqualTo";
        Comparison3[Comparison3["GreaterThan"] = 1] = "GreaterThan";
        return Comparison3;
      })(Comparison || {});
    }
  });

  // src/compiler/core.ts
  function length(array) {
    return array ? array.length : 0;
  }
  function forEach(array, callback) {
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const result = callback(array[i], i);
        if (result) {
          return result;
        }
      }
    }
    return void 0;
  }
  function forEachRight(array, callback) {
    if (array) {
      for (let i = array.length - 1; i >= 0; i--) {
        const result = callback(array[i], i);
        if (result) {
          return result;
        }
      }
    }
    return void 0;
  }
  function firstDefined(array, callback) {
    if (array === void 0) {
      return void 0;
    }
    for (let i = 0; i < array.length; i++) {
      const result = callback(array[i], i);
      if (result !== void 0) {
        return result;
      }
    }
    return void 0;
  }
  function firstDefinedIterator(iter, callback) {
    for (const value of iter) {
      const result = callback(value);
      if (result !== void 0) {
        return result;
      }
    }
    return void 0;
  }
  function reduceLeftIterator(iterator, f, initial) {
    let result = initial;
    if (iterator) {
      let pos = 0;
      for (const value of iterator) {
        result = f(result, value, pos);
        pos++;
      }
    }
    return result;
  }
  function zipWith(arrayA, arrayB, callback) {
    const result = [];
    Debug.assertEqual(arrayA.length, arrayB.length);
    for (let i = 0; i < arrayA.length; i++) {
      result.push(callback(arrayA[i], arrayB[i], i));
    }
    return result;
  }
  function intersperse(input, element) {
    if (input.length <= 1) {
      return input;
    }
    const result = [];
    for (let i = 0, n = input.length; i < n; i++) {
      if (i)
        result.push(element);
      result.push(input[i]);
    }
    return result;
  }
  function every(array, callback) {
    if (array) {
      for (let i = 0; i < array.length; i++) {
        if (!callback(array[i], i)) {
          return false;
        }
      }
    }
    return true;
  }
  function find(array, predicate, startIndex) {
    if (array === void 0)
      return void 0;
    for (let i = startIndex != null ? startIndex : 0; i < array.length; i++) {
      const value = array[i];
      if (predicate(value, i)) {
        return value;
      }
    }
    return void 0;
  }
  function findLast(array, predicate, startIndex) {
    if (array === void 0)
      return void 0;
    for (let i = startIndex != null ? startIndex : array.length - 1; i >= 0; i--) {
      const value = array[i];
      if (predicate(value, i)) {
        return value;
      }
    }
    return void 0;
  }
  function findIndex(array, predicate, startIndex) {
    if (array === void 0)
      return -1;
    for (let i = startIndex != null ? startIndex : 0; i < array.length; i++) {
      if (predicate(array[i], i)) {
        return i;
      }
    }
    return -1;
  }
  function findLastIndex(array, predicate, startIndex) {
    if (array === void 0)
      return -1;
    for (let i = startIndex != null ? startIndex : array.length - 1; i >= 0; i--) {
      if (predicate(array[i], i)) {
        return i;
      }
    }
    return -1;
  }
  function findMap(array, callback) {
    for (let i = 0; i < array.length; i++) {
      const result = callback(array[i], i);
      if (result) {
        return result;
      }
    }
    return Debug.fail();
  }
  function contains(array, value, equalityComparer = equateValues) {
    if (array) {
      for (const v of array) {
        if (equalityComparer(v, value)) {
          return true;
        }
      }
    }
    return false;
  }
  function arraysEqual(a, b, equalityComparer = equateValues) {
    return a.length === b.length && a.every((x, i) => equalityComparer(x, b[i]));
  }
  function indexOfAnyCharCode(text, charCodes, start) {
    for (let i = start || 0; i < text.length; i++) {
      if (contains(charCodes, text.charCodeAt(i))) {
        return i;
      }
    }
    return -1;
  }
  function countWhere(array, predicate) {
    let count = 0;
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const v = array[i];
        if (predicate(v, i)) {
          count++;
        }
      }
    }
    return count;
  }
  function filter(array, f) {
    if (array) {
      const len = array.length;
      let i = 0;
      while (i < len && f(array[i]))
        i++;
      if (i < len) {
        const result = array.slice(0, i);
        i++;
        while (i < len) {
          const item = array[i];
          if (f(item)) {
            result.push(item);
          }
          i++;
        }
        return result;
      }
    }
    return array;
  }
  function filterMutate(array, f) {
    let outIndex = 0;
    for (let i = 0; i < array.length; i++) {
      if (f(array[i], i, array)) {
        array[outIndex] = array[i];
        outIndex++;
      }
    }
    array.length = outIndex;
  }
  function clear(array) {
    array.length = 0;
  }
  function map(array, f) {
    let result;
    if (array) {
      result = [];
      for (let i = 0; i < array.length; i++) {
        result.push(f(array[i], i));
      }
    }
    return result;
  }
  function* mapIterator(iter, mapFn) {
    for (const x of iter) {
      yield mapFn(x);
    }
  }
  function sameMap(array, f) {
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const item = array[i];
        const mapped = f(item, i);
        if (item !== mapped) {
          const result = array.slice(0, i);
          result.push(mapped);
          for (i++; i < array.length; i++) {
            result.push(f(array[i], i));
          }
          return result;
        }
      }
    }
    return array;
  }
  function flatten(array) {
    const result = [];
    for (const v of array) {
      if (v) {
        if (isArray(v)) {
          addRange(result, v);
        } else {
          result.push(v);
        }
      }
    }
    return result;
  }
  function flatMap(array, mapfn) {
    let result;
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const v = mapfn(array[i], i);
        if (v) {
          if (isArray(v)) {
            result = addRange(result, v);
          } else {
            result = append(result, v);
          }
        }
      }
    }
    return result || emptyArray;
  }
  function flatMapToMutable(array, mapfn) {
    const result = [];
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const v = mapfn(array[i], i);
        if (v) {
          if (isArray(v)) {
            addRange(result, v);
          } else {
            result.push(v);
          }
        }
      }
    }
    return result;
  }
  function* flatMapIterator(iter, mapfn) {
    for (const x of iter) {
      const iter2 = mapfn(x);
      if (!iter2)
        continue;
      yield* iter2;
    }
  }
  function sameFlatMap(array, mapfn) {
    let result;
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const item = array[i];
        const mapped = mapfn(item, i);
        if (result || item !== mapped || isArray(mapped)) {
          if (!result) {
            result = array.slice(0, i);
          }
          if (isArray(mapped)) {
            addRange(result, mapped);
          } else {
            result.push(mapped);
          }
        }
      }
    }
    return result || array;
  }
  function mapAllOrFail(array, mapFn) {
    const result = [];
    for (let i = 0; i < array.length; i++) {
      const mapped = mapFn(array[i], i);
      if (mapped === void 0) {
        return void 0;
      }
      result.push(mapped);
    }
    return result;
  }
  function mapDefined(array, mapFn) {
    const result = [];
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const mapped = mapFn(array[i], i);
        if (mapped !== void 0) {
          result.push(mapped);
        }
      }
    }
    return result;
  }
  function* mapDefinedIterator(iter, mapFn) {
    for (const x of iter) {
      const value = mapFn(x);
      if (value !== void 0) {
        yield value;
      }
    }
  }
  function mapDefinedEntries(map2, f) {
    if (!map2) {
      return void 0;
    }
    const result = /* @__PURE__ */ new Map();
    map2.forEach((value, key) => {
      const entry = f(key, value);
      if (entry !== void 0) {
        const [newKey, newValue] = entry;
        if (newKey !== void 0 && newValue !== void 0) {
          result.set(newKey, newValue);
        }
      }
    });
    return result;
  }
  function getOrUpdate(map2, key, callback) {
    if (map2.has(key)) {
      return map2.get(key);
    }
    const value = callback();
    map2.set(key, value);
    return value;
  }
  function tryAddToSet(set, value) {
    if (!set.has(value)) {
      set.add(value);
      return true;
    }
    return false;
  }
  function* singleIterator(value) {
    yield value;
  }
  function spanMap(array, keyfn, mapfn) {
    let result;
    if (array) {
      result = [];
      const len = array.length;
      let previousKey;
      let key;
      let start = 0;
      let pos = 0;
      while (start < len) {
        while (pos < len) {
          const value = array[pos];
          key = keyfn(value, pos);
          if (pos === 0) {
            previousKey = key;
          } else if (key !== previousKey) {
            break;
          }
          pos++;
        }
        if (start < pos) {
          const v = mapfn(array.slice(start, pos), previousKey, start, pos);
          if (v) {
            result.push(v);
          }
          start = pos;
        }
        previousKey = key;
        pos++;
      }
    }
    return result;
  }
  function mapEntries(map2, f) {
    if (!map2) {
      return void 0;
    }
    const result = /* @__PURE__ */ new Map();
    map2.forEach((value, key) => {
      const [newKey, newValue] = f(key, value);
      result.set(newKey, newValue);
    });
    return result;
  }
  function some(array, predicate) {
    if (array) {
      if (predicate) {
        for (const v of array) {
          if (predicate(v)) {
            return true;
          }
        }
      } else {
        return array.length > 0;
      }
    }
    return false;
  }
  function getRangesWhere(arr, pred, cb) {
    let start;
    for (let i = 0; i < arr.length; i++) {
      if (pred(arr[i])) {
        start = start === void 0 ? i : start;
      } else {
        if (start !== void 0) {
          cb(start, i);
          start = void 0;
        }
      }
    }
    if (start !== void 0)
      cb(start, arr.length);
  }
  function concatenate(array1, array2) {
    if (!some(array2))
      return array1;
    if (!some(array1))
      return array2;
    return [...array1, ...array2];
  }
  function selectIndex(_, i) {
    return i;
  }
  function indicesOf(array) {
    return array.map(selectIndex);
  }
  function deduplicateRelational(array, equalityComparer, comparer) {
    const indices = indicesOf(array);
    stableSortIndices(array, indices, comparer);
    let last2 = array[indices[0]];
    const deduplicated = [indices[0]];
    for (let i = 1; i < indices.length; i++) {
      const index = indices[i];
      const item = array[index];
      if (!equalityComparer(last2, item)) {
        deduplicated.push(index);
        last2 = item;
      }
    }
    deduplicated.sort();
    return deduplicated.map((i) => array[i]);
  }
  function deduplicateEquality(array, equalityComparer) {
    const result = [];
    for (const item of array) {
      pushIfUnique(result, item, equalityComparer);
    }
    return result;
  }
  function deduplicate(array, equalityComparer, comparer) {
    return array.length === 0 ? [] : array.length === 1 ? array.slice() : comparer ? deduplicateRelational(array, equalityComparer, comparer) : deduplicateEquality(array, equalityComparer);
  }
  function deduplicateSorted(array, comparer) {
    if (array.length === 0)
      return emptyArray;
    let last2 = array[0];
    const deduplicated = [last2];
    for (let i = 1; i < array.length; i++) {
      const next = array[i];
      switch (comparer(next, last2)) {
        case true:
        case 0 /* EqualTo */:
          continue;
        case -1 /* LessThan */:
          return Debug.fail("Array is unsorted.");
      }
      deduplicated.push(last2 = next);
    }
    return deduplicated;
  }
  function createSortedArray() {
    return [];
  }
  function insertSorted(array, insert, compare, allowDuplicates) {
    if (array.length === 0) {
      array.push(insert);
      return true;
    }
    const insertIndex = binarySearch(array, insert, identity, compare);
    if (insertIndex < 0) {
      array.splice(~insertIndex, 0, insert);
      return true;
    }
    if (allowDuplicates) {
      array.splice(insertIndex, 0, insert);
      return true;
    }
    return false;
  }
  function sortAndDeduplicate(array, comparer, equalityComparer) {
    return deduplicateSorted(sort(array, comparer), equalityComparer || comparer || compareStringsCaseSensitive);
  }
  function arrayIsSorted(array, comparer) {
    if (array.length < 2)
      return true;
    for (let i = 1, len = array.length; i < len; i++) {
      if (comparer(array[i - 1], array[i]) === 1 /* GreaterThan */) {
        return false;
      }
    }
    return true;
  }
  function detectSortCaseSensitivity(array, getString, compareStringsCaseSensitive2, compareStringsCaseInsensitive2) {
    let kind = 3 /* Both */;
    if (array.length < 2)
      return kind;
    let prevElement = getString(array[0]);
    for (let i = 1, len = array.length; i < len && kind !== 0 /* None */; i++) {
      const element = getString(array[i]);
      if (kind & 1 /* CaseSensitive */ && compareStringsCaseSensitive2(prevElement, element) > 0) {
        kind &= ~1 /* CaseSensitive */;
      }
      if (kind & 2 /* CaseInsensitive */ && compareStringsCaseInsensitive2(prevElement, element) > 0) {
        kind &= ~2 /* CaseInsensitive */;
      }
      prevElement = element;
    }
    return kind;
  }
  function arrayIsEqualTo(array1, array2, equalityComparer = equateValues) {
    if (!array1 || !array2) {
      return array1 === array2;
    }
    if (array1.length !== array2.length) {
      return false;
    }
    for (let i = 0; i < array1.length; i++) {
      if (!equalityComparer(array1[i], array2[i], i)) {
        return false;
      }
    }
    return true;
  }
  function compact(array) {
    let result;
    if (array) {
      for (let i = 0; i < array.length; i++) {
        const v = array[i];
        if (result || !v) {
          if (!result) {
            result = array.slice(0, i);
          }
          if (v) {
            result.push(v);
          }
        }
      }
    }
    return result || array;
  }
  function relativeComplement(arrayA, arrayB, comparer) {
    if (!arrayB || !arrayA || arrayB.length === 0 || arrayA.length === 0)
      return arrayB;
    const result = [];
    loopB:
      for (let offsetA = 0, offsetB = 0; offsetB < arrayB.length; offsetB++) {
        if (offsetB > 0) {
          Debug.assertGreaterThanOrEqual(comparer(arrayB[offsetB], arrayB[offsetB - 1]), 0 /* EqualTo */);
        }
        loopA:
          for (const startA = offsetA; offsetA < arrayA.length; offsetA++) {
            if (offsetA > startA) {
              Debug.assertGreaterThanOrEqual(comparer(arrayA[offsetA], arrayA[offsetA - 1]), 0 /* EqualTo */);
            }
            switch (comparer(arrayB[offsetB], arrayA[offsetA])) {
              case -1 /* LessThan */:
                result.push(arrayB[offsetB]);
                continue loopB;
              case 0 /* EqualTo */:
                continue loopB;
              case 1 /* GreaterThan */:
                continue loopA;
            }
          }
      }
    return result;
  }
  function append(to, value) {
    if (value === void 0)
      return to;
    if (to === void 0)
      return [value];
    to.push(value);
    return to;
  }
  function combine(xs, ys) {
    if (xs === void 0)
      return ys;
    if (ys === void 0)
      return xs;
    if (isArray(xs))
      return isArray(ys) ? concatenate(xs, ys) : append(xs, ys);
    if (isArray(ys))
      return append(ys, xs);
    return [xs, ys];
  }
  function toOffset(array, offset) {
    return offset < 0 ? array.length + offset : offset;
  }
  function addRange(to, from, start, end) {
    if (from === void 0 || from.length === 0)
      return to;
    if (to === void 0)
      return from.slice(start, end);
    start = start === void 0 ? 0 : toOffset(from, start);
    end = end === void 0 ? from.length : toOffset(from, end);
    for (let i = start; i < end && i < from.length; i++) {
      if (from[i] !== void 0) {
        to.push(from[i]);
      }
    }
    return to;
  }
  function pushIfUnique(array, toAdd, equalityComparer) {
    if (contains(array, toAdd, equalityComparer)) {
      return false;
    } else {
      array.push(toAdd);
      return true;
    }
  }
  function appendIfUnique(array, toAdd, equalityComparer) {
    if (array) {
      pushIfUnique(array, toAdd, equalityComparer);
      return array;
    } else {
      return [toAdd];
    }
  }
  function stableSortIndices(array, indices, comparer) {
    indices.sort((x, y) => comparer(array[x], array[y]) || compareValues(x, y));
  }
  function sort(array, comparer) {
    return array.length === 0 ? array : array.slice().sort(comparer);
  }
  function* arrayReverseIterator(array) {
    for (let i = array.length - 1; i >= 0; i--) {
      yield array[i];
    }
  }
  function stableSort(array, comparer) {
    const indices = indicesOf(array);
    stableSortIndices(array, indices, comparer);
    return indices.map((i) => array[i]);
  }
  function rangeEquals(array1, array2, pos, end) {
    while (pos < end) {
      if (array1[pos] !== array2[pos]) {
        return false;
      }
      pos++;
    }
    return true;
  }
  function firstOrUndefined(array) {
    return array === void 0 || array.length === 0 ? void 0 : array[0];
  }
  function firstOrUndefinedIterator(iter) {
    if (iter) {
      for (const value of iter) {
        return value;
      }
    }
    return void 0;
  }
  function first(array) {
    Debug.assert(array.length !== 0);
    return array[0];
  }
  function firstIterator(iter) {
    for (const value of iter) {
      return value;
    }
    Debug.fail("iterator is empty");
  }
  function lastOrUndefined(array) {
    return array === void 0 || array.length === 0 ? void 0 : array[array.length - 1];
  }
  function last(array) {
    Debug.assert(array.length !== 0);
    return array[array.length - 1];
  }
  function singleOrUndefined(array) {
    return array && array.length === 1 ? array[0] : void 0;
  }
  function single(array) {
    return Debug.checkDefined(singleOrUndefined(array));
  }
  function singleOrMany(array) {
    return array && array.length === 1 ? array[0] : array;
  }
  function replaceElement(array, index, value) {
    const result = array.slice(0);
    result[index] = value;
    return result;
  }
  function binarySearch(array, value, keySelector, keyComparer, offset) {
    return binarySearchKey(array, keySelector(value), keySelector, keyComparer, offset);
  }
  function binarySearchKey(array, key, keySelector, keyComparer, offset) {
    if (!some(array)) {
      return -1;
    }
    let low = offset || 0;
    let high = array.length - 1;
    while (low <= high) {
      const middle = low + (high - low >> 1);
      const midKey = keySelector(array[middle], middle);
      switch (keyComparer(midKey, key)) {
        case -1 /* LessThan */:
          low = middle + 1;
          break;
        case 0 /* EqualTo */:
          return middle;
        case 1 /* GreaterThan */:
          high = middle - 1;
          break;
      }
    }
    return ~low;
  }
  function reduceLeft(array, f, initial, start, count) {
    if (array && array.length > 0) {
      const size = array.length;
      if (size > 0) {
        let pos = start === void 0 || start < 0 ? 0 : start;
        const end = count === void 0 || pos + count > size - 1 ? size - 1 : pos + count;
        let result;
        if (arguments.length <= 2) {
          result = array[pos];
          pos++;
        } else {
          result = initial;
        }
        while (pos <= end) {
          result = f(result, array[pos], pos);
          pos++;
        }
        return result;
      }
    }
    return initial;
  }
  function hasProperty(map2, key) {
    return hasOwnProperty.call(map2, key);
  }
  function getProperty(map2, key) {
    return hasOwnProperty.call(map2, key) ? map2[key] : void 0;
  }
  function getOwnKeys(map2) {
    const keys = [];
    for (const key in map2) {
      if (hasOwnProperty.call(map2, key)) {
        keys.push(key);
      }
    }
    return keys;
  }
  function getAllKeys(obj) {
    const result = [];
    do {
      const names = Object.getOwnPropertyNames(obj);
      for (const name of names) {
        pushIfUnique(result, name);
      }
    } while (obj = Object.getPrototypeOf(obj));
    return result;
  }
  function getOwnValues(collection) {
    const values = [];
    for (const key in collection) {
      if (hasOwnProperty.call(collection, key)) {
        values.push(collection[key]);
      }
    }
    return values;
  }
  function arrayOf(count, f) {
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = f(i);
    }
    return result;
  }
  function arrayFrom(iterator, map2) {
    const result = [];
    for (const value of iterator) {
      result.push(map2 ? map2(value) : value);
    }
    return result;
  }
  function assign(t, ...args) {
    for (const arg of args) {
      if (arg === void 0)
        continue;
      for (const p in arg) {
        if (hasProperty(arg, p)) {
          t[p] = arg[p];
        }
      }
    }
    return t;
  }
  function equalOwnProperties(left, right, equalityComparer = equateValues) {
    if (left === right)
      return true;
    if (!left || !right)
      return false;
    for (const key in left) {
      if (hasOwnProperty.call(left, key)) {
        if (!hasOwnProperty.call(right, key))
          return false;
        if (!equalityComparer(left[key], right[key]))
          return false;
      }
    }
    for (const key in right) {
      if (hasOwnProperty.call(right, key)) {
        if (!hasOwnProperty.call(left, key))
          return false;
      }
    }
    return true;
  }
  function arrayToMap(array, makeKey, makeValue = identity) {
    const result = /* @__PURE__ */ new Map();
    for (const value of array) {
      const key = makeKey(value);
      if (key !== void 0)
        result.set(key, makeValue(value));
    }
    return result;
  }
  function arrayToNumericMap(array, makeKey, makeValue = identity) {
    const result = [];
    for (const value of array) {
      result[makeKey(value)] = makeValue(value);
    }
    return result;
  }
  function arrayToMultiMap(values, makeKey, makeValue = identity) {
    const result = createMultiMap();
    for (const value of values) {
      result.add(makeKey(value), makeValue(value));
    }
    return result;
  }
  function group(values, getGroupId, resultSelector = identity) {
    return arrayFrom(arrayToMultiMap(values, getGroupId).values(), resultSelector);
  }
  function groupBy(values, keySelector) {
    var _a2;
    const result = {};
    if (values) {
      for (const value of values) {
        const key = `${keySelector(value)}`;
        const array = (_a2 = result[key]) != null ? _a2 : result[key] = [];
        array.push(value);
      }
    }
    return result;
  }
  function clone(object) {
    const result = {};
    for (const id in object) {
      if (hasOwnProperty.call(object, id)) {
        result[id] = object[id];
      }
    }
    return result;
  }
  function extend(first2, second) {
    const result = {};
    for (const id in second) {
      if (hasOwnProperty.call(second, id)) {
        result[id] = second[id];
      }
    }
    for (const id in first2) {
      if (hasOwnProperty.call(first2, id)) {
        result[id] = first2[id];
      }
    }
    return result;
  }
  function copyProperties(first2, second) {
    for (const id in second) {
      if (hasOwnProperty.call(second, id)) {
        first2[id] = second[id];
      }
    }
  }
  function maybeBind(obj, fn) {
    return fn ? fn.bind(obj) : void 0;
  }
  function createMultiMap() {
    const map2 = /* @__PURE__ */ new Map();
    map2.add = multiMapAdd;
    map2.remove = multiMapRemove;
    return map2;
  }
  function multiMapAdd(key, value) {
    let values = this.get(key);
    if (values) {
      values.push(value);
    } else {
      this.set(key, values = [value]);
    }
    return values;
  }
  function multiMapRemove(key, value) {
    const values = this.get(key);
    if (values) {
      unorderedRemoveItem(values, value);
      if (!values.length) {
        this.delete(key);
      }
    }
  }
  function createUnderscoreEscapedMultiMap() {
    return createMultiMap();
  }
  function createQueue(items) {
    const elements = (items == null ? void 0 : items.slice()) || [];
    let headIndex = 0;
    function isEmpty() {
      return headIndex === elements.length;
    }
    function enqueue(...items2) {
      elements.push(...items2);
    }
    function dequeue() {
      if (isEmpty()) {
        throw new Error("Queue is empty");
      }
      const result = elements[headIndex];
      elements[headIndex] = void 0;
      headIndex++;
      if (headIndex > 100 && headIndex > elements.length >> 1) {
        const newLength = elements.length - headIndex;
        elements.copyWithin(
          /*target*/
          0,
          /*start*/
          headIndex
        );
        elements.length = newLength;
        headIndex = 0;
      }
      return result;
    }
    return {
      enqueue,
      dequeue,
      isEmpty
    };
  }
  function createSet(getHashCode, equals) {
    const multiMap = /* @__PURE__ */ new Map();
    let size = 0;
    function* getElementIterator() {
      for (const value of multiMap.values()) {
        if (isArray(value)) {
          yield* value;
        } else {
          yield value;
        }
      }
    }
    const set = {
      has(element) {
        const hash = getHashCode(element);
        if (!multiMap.has(hash))
          return false;
        const candidates = multiMap.get(hash);
        if (!isArray(candidates))
          return equals(candidates, element);
        for (const candidate of candidates) {
          if (equals(candidate, element)) {
            return true;
          }
        }
        return false;
      },
      add(element) {
        const hash = getHashCode(element);
        if (multiMap.has(hash)) {
          const values = multiMap.get(hash);
          if (isArray(values)) {
            if (!contains(values, element, equals)) {
              values.push(element);
              size++;
            }
          } else {
            const value = values;
            if (!equals(value, element)) {
              multiMap.set(hash, [value, element]);
              size++;
            }
          }
        } else {
          multiMap.set(hash, element);
          size++;
        }
        return this;
      },
      delete(element) {
        const hash = getHashCode(element);
        if (!multiMap.has(hash))
          return false;
        const candidates = multiMap.get(hash);
        if (isArray(candidates)) {
          for (let i = 0; i < candidates.length; i++) {
            if (equals(candidates[i], element)) {
              if (candidates.length === 1) {
                multiMap.delete(hash);
              } else if (candidates.length === 2) {
                multiMap.set(hash, candidates[1 - i]);
              } else {
                unorderedRemoveItemAt(candidates, i);
              }
              size--;
              return true;
            }
          }
        } else {
          const candidate = candidates;
          if (equals(candidate, element)) {
            multiMap.delete(hash);
            size--;
            return true;
          }
        }
        return false;
      },
      clear() {
        multiMap.clear();
        size = 0;
      },
      get size() {
        return size;
      },
      forEach(action) {
        for (const elements of arrayFrom(multiMap.values())) {
          if (isArray(elements)) {
            for (const element of elements) {
              action(element, element, set);
            }
          } else {
            const element = elements;
            action(element, element, set);
          }
        }
      },
      keys() {
        return getElementIterator();
      },
      values() {
        return getElementIterator();
      },
      *entries() {
        for (const value of getElementIterator()) {
          yield [value, value];
        }
      },
      [Symbol.iterator]: () => {
        return getElementIterator();
      },
      [Symbol.toStringTag]: multiMap[Symbol.toStringTag]
    };
    return set;
  }
  function isArray(value) {
    return Array.isArray(value);
  }
  function toArray(value) {
    return isArray(value) ? value : [value];
  }
  function isString(text) {
    return typeof text === "string";
  }
  function isNumber(x) {
    return typeof x === "number";
  }
  function tryCast(value, test) {
    return value !== void 0 && test(value) ? value : void 0;
  }
  function cast(value, test) {
    if (value !== void 0 && test(value))
      return value;
    return Debug.fail(`Invalid cast. The supplied value ${value} did not pass the test '${Debug.getFunctionName(test)}'.`);
  }
  function noop(_) {
  }
  function returnFalse() {
    return false;
  }
  function returnTrue() {
    return true;
  }
  function returnUndefined() {
    return void 0;
  }
  function identity(x) {
    return x;
  }
  function toLowerCase(x) {
    return x.toLowerCase();
  }
  function toFileNameLowerCase(x) {
    return fileNameLowerCaseRegExp.test(x) ? x.replace(fileNameLowerCaseRegExp, toLowerCase) : x;
  }
  function notImplemented() {
    throw new Error("Not implemented");
  }
  function memoize(callback) {
    let value;
    return () => {
      if (callback) {
        value = callback();
        callback = void 0;
      }
      return value;
    };
  }
  function memoizeOne(callback) {
    const map2 = /* @__PURE__ */ new Map();
    return (arg) => {
      const key = `${typeof arg}:${arg}`;
      let value = map2.get(key);
      if (value === void 0 && !map2.has(key)) {
        value = callback(arg);
        map2.set(key, value);
      }
      return value;
    };
  }
  function memoizeWeak(callback) {
    const map2 = /* @__PURE__ */ new WeakMap();
    return (arg) => {
      let value = map2.get(arg);
      if (value === void 0 && !map2.has(arg)) {
        value = callback(arg);
        map2.set(arg, value);
      }
      return value;
    };
  }
  function memoizeCached(callback, cache) {
    return (...args) => {
      let value = cache.get(args);
      if (value === void 0 && !cache.has(args)) {
        value = callback(...args);
        cache.set(args, value);
      }
      return value;
    };
  }
  function compose(a, b, c, d, e) {
    if (!!e) {
      const args = [];
      for (let i = 0; i < arguments.length; i++) {
        args[i] = arguments[i];
      }
      return (t) => reduceLeft(args, (u, f) => f(u), t);
    } else if (d) {
      return (t) => d(c(b(a(t))));
    } else if (c) {
      return (t) => c(b(a(t)));
    } else if (b) {
      return (t) => b(a(t));
    } else if (a) {
      return (t) => a(t);
    } else {
      return (t) => t;
    }
  }
  function equateValues(a, b) {
    return a === b;
  }
  function equateStringsCaseInsensitive(a, b) {
    return a === b || a !== void 0 && b !== void 0 && a.toUpperCase() === b.toUpperCase();
  }
  function equateStringsCaseSensitive(a, b) {
    return equateValues(a, b);
  }
  function compareComparableValues(a, b) {
    return a === b ? 0 /* EqualTo */ : a === void 0 ? -1 /* LessThan */ : b === void 0 ? 1 /* GreaterThan */ : a < b ? -1 /* LessThan */ : 1 /* GreaterThan */;
  }
  function compareValues(a, b) {
    return compareComparableValues(a, b);
  }
  function compareTextSpans(a, b) {
    return compareValues(a == null ? void 0 : a.start, b == null ? void 0 : b.start) || compareValues(a == null ? void 0 : a.length, b == null ? void 0 : b.length);
  }
  function min(items, compare) {
    return reduceLeft(items, (x, y) => compare(x, y) === -1 /* LessThan */ ? x : y);
  }
  function compareStringsCaseInsensitive(a, b) {
    if (a === b)
      return 0 /* EqualTo */;
    if (a === void 0)
      return -1 /* LessThan */;
    if (b === void 0)
      return 1 /* GreaterThan */;
    a = a.toUpperCase();
    b = b.toUpperCase();
    return a < b ? -1 /* LessThan */ : a > b ? 1 /* GreaterThan */ : 0 /* EqualTo */;
  }
  function compareStringsCaseInsensitiveEslintCompatible(a, b) {
    if (a === b)
      return 0 /* EqualTo */;
    if (a === void 0)
      return -1 /* LessThan */;
    if (b === void 0)
      return 1 /* GreaterThan */;
    a = a.toLowerCase();
    b = b.toLowerCase();
    return a < b ? -1 /* LessThan */ : a > b ? 1 /* GreaterThan */ : 0 /* EqualTo */;
  }
  function compareStringsCaseSensitive(a, b) {
    return compareComparableValues(a, b);
  }
  function getStringComparer(ignoreCase) {
    return ignoreCase ? compareStringsCaseInsensitive : compareStringsCaseSensitive;
  }
  function getUILocale() {
    return uiLocale;
  }
  function setUILocale(value) {
    if (uiLocale !== value) {
      uiLocale = value;
      uiComparerCaseSensitive = void 0;
    }
  }
  function compareStringsCaseSensitiveUI(a, b) {
    const comparer = uiComparerCaseSensitive || (uiComparerCaseSensitive = createUIStringComparer(uiLocale));
    return comparer(a, b);
  }
  function compareProperties(a, b, key, comparer) {
    return a === b ? 0 /* EqualTo */ : a === void 0 ? -1 /* LessThan */ : b === void 0 ? 1 /* GreaterThan */ : comparer(a[key], b[key]);
  }
  function compareBooleans(a, b) {
    return compareValues(a ? 1 : 0, b ? 1 : 0);
  }
  function getSpellingSuggestion(name, candidates, getName) {
    const maximumLengthDifference = Math.max(2, Math.floor(name.length * 0.34));
    let bestDistance = Math.floor(name.length * 0.4) + 1;
    let bestCandidate;
    for (const candidate of candidates) {
      const candidateName = getName(candidate);
      if (candidateName !== void 0 && Math.abs(candidateName.length - name.length) <= maximumLengthDifference) {
        if (candidateName === name) {
          continue;
        }
        if (candidateName.length < 3 && candidateName.toLowerCase() !== name.toLowerCase()) {
          continue;
        }
        const distance = levenshteinWithMax(name, candidateName, bestDistance - 0.1);
        if (distance === void 0) {
          continue;
        }
        Debug.assert(distance < bestDistance);
        bestDistance = distance;
        bestCandidate = candidate;
      }
    }
    return bestCandidate;
  }
  function levenshteinWithMax(s1, s2, max) {
    let previous = new Array(s2.length + 1);
    let current = new Array(s2.length + 1);
    const big = max + 0.01;
    for (let i = 0; i <= s2.length; i++) {
      previous[i] = i;
    }
    for (let i = 1; i <= s1.length; i++) {
      const c1 = s1.charCodeAt(i - 1);
      const minJ = Math.ceil(i > max ? i - max : 1);
      const maxJ = Math.floor(s2.length > max + i ? max + i : s2.length);
      current[0] = i;
      let colMin = i;
      for (let j = 1; j < minJ; j++) {
        current[j] = big;
      }
      for (let j = minJ; j <= maxJ; j++) {
        const substitutionDistance = s1[i - 1].toLowerCase() === s2[j - 1].toLowerCase() ? previous[j - 1] + 0.1 : previous[j - 1] + 2;
        const dist = c1 === s2.charCodeAt(j - 1) ? previous[j - 1] : Math.min(
          /*delete*/
          previous[j] + 1,
          /*insert*/
          current[j - 1] + 1,
          /*substitute*/
          substitutionDistance
        );
        current[j] = dist;
        colMin = Math.min(colMin, dist);
      }
      for (let j = maxJ + 1; j <= s2.length; j++) {
        current[j] = big;
      }
      if (colMin > max) {
        return void 0;
      }
      const temp = previous;
      previous = current;
      current = temp;
    }
    const res = previous[s2.length];
    return res > max ? void 0 : res;
  }
  function endsWith(str, suffix) {
    const expectedPos = str.length - suffix.length;
    return expectedPos >= 0 && str.indexOf(suffix, expectedPos) === expectedPos;
  }
  function removeSuffix(str, suffix) {
    return endsWith(str, suffix) ? str.slice(0, str.length - suffix.length) : str;
  }
  function tryRemoveSuffix(str, suffix) {
    return endsWith(str, suffix) ? str.slice(0, str.length - suffix.length) : void 0;
  }
  function stringContains(str, substring) {
    return str.indexOf(substring) !== -1;
  }
  function removeMinAndVersionNumbers(fileName) {
    let end = fileName.length;
    for (let pos = end - 1; pos > 0; pos--) {
      let ch = fileName.charCodeAt(pos);
      if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {
        do {
          --pos;
          ch = fileName.charCodeAt(pos);
        } while (pos > 0 && ch >= 48 /* _0 */ && ch <= 57 /* _9 */);
      } else if (pos > 4 && (ch === 110 /* n */ || ch === 78 /* N */)) {
        --pos;
        ch = fileName.charCodeAt(pos);
        if (ch !== 105 /* i */ && ch !== 73 /* I */) {
          break;
        }
        --pos;
        ch = fileName.charCodeAt(pos);
        if (ch !== 109 /* m */ && ch !== 77 /* M */) {
          break;
        }
        --pos;
        ch = fileName.charCodeAt(pos);
      } else {
        break;
      }
      if (ch !== 45 /* minus */ && ch !== 46 /* dot */) {
        break;
      }
      end = pos;
    }
    return end === fileName.length ? fileName : fileName.slice(0, end);
  }
  function orderedRemoveItem(array, item) {
    for (let i = 0; i < array.length; i++) {
      if (array[i] === item) {
        orderedRemoveItemAt(array, i);
        return true;
      }
    }
    return false;
  }
  function orderedRemoveItemAt(array, index) {
    for (let i = index; i < array.length - 1; i++) {
      array[i] = array[i + 1];
    }
    array.pop();
  }
  function unorderedRemoveItemAt(array, index) {
    array[index] = array[array.length - 1];
    array.pop();
  }
  function unorderedRemoveItem(array, item) {
    return unorderedRemoveFirstItemWhere(array, (element) => element === item);
  }
  function unorderedRemoveFirstItemWhere(array, predicate) {
    for (let i = 0; i < array.length; i++) {
      if (predicate(array[i])) {
        unorderedRemoveItemAt(array, i);
        return true;
      }
    }
    return false;
  }
  function createGetCanonicalFileName(useCaseSensitiveFileNames) {
    return useCaseSensitiveFileNames ? identity : toFileNameLowerCase;
  }
  function patternText({ prefix, suffix }) {
    return `${prefix}*${suffix}`;
  }
  function matchedText(pattern, candidate) {
    Debug.assert(isPatternMatch(pattern, candidate));
    return candidate.substring(pattern.prefix.length, candidate.length - pattern.suffix.length);
  }
  function findBestPatternMatch(values, getPattern, candidate) {
    let matchedValue;
    let longestMatchPrefixLength = -1;
    for (const v of values) {
      const pattern = getPattern(v);
      if (isPatternMatch(pattern, candidate) && pattern.prefix.length > longestMatchPrefixLength) {
        longestMatchPrefixLength = pattern.prefix.length;
        matchedValue = v;
      }
    }
    return matchedValue;
  }
  function startsWith(str, prefix) {
    return str.lastIndexOf(prefix, 0) === 0;
  }
  function removePrefix(str, prefix) {
    return startsWith(str, prefix) ? str.substr(prefix.length) : str;
  }
  function tryRemovePrefix(str, prefix, getCanonicalFileName = identity) {
    return startsWith(getCanonicalFileName(str), getCanonicalFileName(prefix)) ? str.substring(prefix.length) : void 0;
  }
  function isPatternMatch({ prefix, suffix }, candidate) {
    return candidate.length >= prefix.length + suffix.length && startsWith(candidate, prefix) && endsWith(candidate, suffix);
  }
  function and(f, g) {
    return (arg) => f(arg) && g(arg);
  }
  function or(...fs) {
    return (...args) => {
      let lastResult;
      for (const f of fs) {
        lastResult = f(...args);
        if (lastResult) {
          return lastResult;
        }
      }
      return lastResult;
    };
  }
  function not(fn) {
    return (...args) => !fn(...args);
  }
  function assertType(_) {
  }
  function singleElementArray(t) {
    return t === void 0 ? void 0 : [t];
  }
  function enumerateInsertsAndDeletes(newItems, oldItems, comparer, inserted, deleted, unchanged) {
    unchanged = unchanged || noop;
    let newIndex = 0;
    let oldIndex = 0;
    const newLen = newItems.length;
    const oldLen = oldItems.length;
    let hasChanges = false;
    while (newIndex < newLen && oldIndex < oldLen) {
      const newItem = newItems[newIndex];
      const oldItem = oldItems[oldIndex];
      const compareResult = comparer(newItem, oldItem);
      if (compareResult === -1 /* LessThan */) {
        inserted(newItem);
        newIndex++;
        hasChanges = true;
      } else if (compareResult === 1 /* GreaterThan */) {
        deleted(oldItem);
        oldIndex++;
        hasChanges = true;
      } else {
        unchanged(oldItem, newItem);
        newIndex++;
        oldIndex++;
      }
    }
    while (newIndex < newLen) {
      inserted(newItems[newIndex++]);
      hasChanges = true;
    }
    while (oldIndex < oldLen) {
      deleted(oldItems[oldIndex++]);
      hasChanges = true;
    }
    return hasChanges;
  }
  function cartesianProduct(arrays) {
    const result = [];
    cartesianProductWorker(
      arrays,
      result,
      /*outer*/
      void 0,
      0
    );
    return result;
  }
  function cartesianProductWorker(arrays, result, outer, index) {
    for (const element of arrays[index]) {
      let inner;
      if (outer) {
        inner = outer.slice();
        inner.push(element);
      } else {
        inner = [element];
      }
      if (index === arrays.length - 1) {
        result.push(inner);
      } else {
        cartesianProductWorker(arrays, result, inner, index + 1);
      }
    }
  }
  function padLeft(s, length2, padString = " ") {
    return length2 <= s.length ? s : padString.repeat(length2 - s.length) + s;
  }
  function padRight(s, length2, padString = " ") {
    return length2 <= s.length ? s : s + padString.repeat(length2 - s.length);
  }
  function takeWhile(array, predicate) {
    if (array) {
      const len = array.length;
      let index = 0;
      while (index < len && predicate(array[index])) {
        index++;
      }
      return array.slice(0, index);
    }
  }
  function skipWhile(array, predicate) {
    if (array) {
      const len = array.length;
      let index = 0;
      while (index < len && predicate(array[index])) {
        index++;
      }
      return array.slice(index);
    }
  }
  function trimEndImpl(s) {
    let end = s.length - 1;
    while (end >= 0) {
      if (!isWhiteSpaceLike(s.charCodeAt(end)))
        break;
      end--;
    }
    return s.slice(0, end + 1);
  }
  function isNodeLikeSystem() {
    return typeof process !== "undefined" && process.nextTick && !process.browser && typeof module === "object";
  }
  var emptyArray, emptyMap, emptySet, SortKind, elementAt, hasOwnProperty, noopPush, fileNameLowerCaseRegExp, AssertionLevel, createUIStringComparer, uiComparerCaseSensitive, uiLocale, trimString, trimStringEnd, trimStringStart;
  var init_core = __esm({
    "src/compiler/core.ts"() {
      "use strict";
      init_ts2();
      emptyArray = [];
      emptyMap = /* @__PURE__ */ new Map();
      emptySet = /* @__PURE__ */ new Set();
      SortKind = /* @__PURE__ */ ((SortKind2) => {
        SortKind2[SortKind2["None"] = 0] = "None";
        SortKind2[SortKind2["CaseSensitive"] = 1] = "CaseSensitive";
        SortKind2[SortKind2["CaseInsensitive"] = 2] = "CaseInsensitive";
        SortKind2[SortKind2["Both"] = 3] = "Both";
        return SortKind2;
      })(SortKind || {});
      elementAt = !!Array.prototype.at ? (array, offset) => array == null ? void 0 : array.at(offset) : (array, offset) => {
        if (array) {
          offset = toOffset(array, offset);
          if (offset < array.length) {
            return array[offset];
          }
        }
        return void 0;
      };
      hasOwnProperty = Object.prototype.hasOwnProperty;
      noopPush = {
        push: noop,
        length: 0
      };
      fileNameLowerCaseRegExp = /[^\u0130\u0131\u00DFa-z0-9\\/:\-_\. ]+/g;
      AssertionLevel = /* @__PURE__ */ ((AssertionLevel2) => {
        AssertionLevel2[AssertionLevel2["None"] = 0] = "None";
        AssertionLevel2[AssertionLevel2["Normal"] = 1] = "Normal";
        AssertionLevel2[AssertionLevel2["Aggressive"] = 2] = "Aggressive";
        AssertionLevel2[AssertionLevel2["VeryAggressive"] = 3] = "VeryAggressive";
        return AssertionLevel2;
      })(AssertionLevel || {});
      createUIStringComparer = (() => {
        let defaultComparer;
        let enUSComparer;
        const stringComparerFactory = getStringComparerFactory();
        return createStringComparer;
        function compareWithCallback(a, b, comparer) {
          if (a === b)
            return 0 /* EqualTo */;
          if (a === void 0)
            return -1 /* LessThan */;
          if (b === void 0)
            return 1 /* GreaterThan */;
          const value = comparer(a, b);
          return value < 0 ? -1 /* LessThan */ : value > 0 ? 1 /* GreaterThan */ : 0 /* EqualTo */;
        }
        function createIntlCollatorStringComparer(locale) {
          const comparer = new Intl.Collator(locale, { usage: "sort", sensitivity: "variant" }).compare;
          return (a, b) => compareWithCallback(a, b, comparer);
        }
        function createLocaleCompareStringComparer(locale) {
          if (locale !== void 0)
            return createFallbackStringComparer();
          return (a, b) => compareWithCallback(a, b, compareStrings);
          function compareStrings(a, b) {
            return a.localeCompare(b);
          }
        }
        function createFallbackStringComparer() {
          return (a, b) => compareWithCallback(a, b, compareDictionaryOrder);
          function compareDictionaryOrder(a, b) {
            return compareStrings(a.toUpperCase(), b.toUpperCase()) || compareStrings(a, b);
          }
          function compareStrings(a, b) {
            return a < b ? -1 /* LessThan */ : a > b ? 1 /* GreaterThan */ : 0 /* EqualTo */;
          }
        }
        function getStringComparerFactory() {
          if (typeof Intl === "object" && typeof Intl.Collator === "function") {
            return createIntlCollatorStringComparer;
          }
          if (typeof String.prototype.localeCompare === "function" && typeof String.prototype.toLocaleUpperCase === "function" && "a".localeCompare("B") < 0) {
            return createLocaleCompareStringComparer;
          }
          return createFallbackStringComparer;
        }
        function createStringComparer(locale) {
          if (locale === void 0) {
            return defaultComparer || (defaultComparer = stringComparerFactory(locale));
          } else if (locale === "en-US") {
            return enUSComparer || (enUSComparer = stringComparerFactory(locale));
          } else {
            return stringComparerFactory(locale);
          }
        }
      })();
      trimString = !!String.prototype.trim ? (s) => s.trim() : (s) => trimStringEnd(trimStringStart(s));
      trimStringEnd = !!String.prototype.trimEnd ? (s) => s.trimEnd() : trimEndImpl;
      trimStringStart = !!String.prototype.trimStart ? (s) => s.trimStart() : (s) => s.replace(/^\s+/g, "");
    }
  });

  // src/compiler/debug.ts
  var LogLevel, Debug;
  var init_debug = __esm({
    "src/compiler/debug.ts"() {
      "use strict";
      init_ts2();
      init_ts2();
      LogLevel = /* @__PURE__ */ ((LogLevel2) => {
        LogLevel2[LogLevel2["Off"] = 0] = "Off";
        LogLevel2[LogLevel2["Error"] = 1] = "Error";
        LogLevel2[LogLevel2["Warning"] = 2] = "Warning";
        LogLevel2[LogLevel2["Info"] = 3] = "Info";
        LogLevel2[LogLevel2["Verbose"] = 4] = "Verbose";
        return LogLevel2;
      })(LogLevel || {});
      ((Debug2) => {
        let currentAssertionLevel = 0 /* None */;
        Debug2.currentLogLevel = 2 /* Warning */;
        Debug2.isDebugging = false;
        function shouldLog(level) {
          return Debug2.currentLogLevel <= level;
        }
        Debug2.shouldLog = shouldLog;
        function logMessage(level, s) {
          if (Debug2.loggingHost && shouldLog(level)) {
            Debug2.loggingHost.log(level, s);
          }
        }
        function log(s) {
          logMessage(3 /* Info */, s);
        }
        Debug2.log = log;
        ((_log) => {
          function error(s) {
            logMessage(1 /* Error */, s);
          }
          _log.error = error;
          function warn(s) {
            logMessage(2 /* Warning */, s);
          }
          _log.warn = warn;
          function log2(s) {
            logMessage(3 /* Info */, s);
          }
          _log.log = log2;
          function trace2(s) {
            logMessage(4 /* Verbose */, s);
          }
          _log.trace = trace2;
        })(log = Debug2.log || (Debug2.log = {}));
        const assertionCache = {};
        function getAssertionLevel() {
          return currentAssertionLevel;
        }
        Debug2.getAssertionLevel = getAssertionLevel;
        function setAssertionLevel(level) {
          const prevAssertionLevel = currentAssertionLevel;
          currentAssertionLevel = level;
          if (level > prevAssertionLevel) {
            for (const key of getOwnKeys(assertionCache)) {
              const cachedFunc = assertionCache[key];
              if (cachedFunc !== void 0 && Debug2[key] !== cachedFunc.assertion && level >= cachedFunc.level) {
                Debug2[key] = cachedFunc;
                assertionCache[key] = void 0;
              }
            }
          }
        }
        Debug2.setAssertionLevel = setAssertionLevel;
        function shouldAssert(level) {
          return currentAssertionLevel >= level;
        }
        Debug2.shouldAssert = shouldAssert;
        function shouldAssertFunction(level, name) {
          if (!shouldAssert(level)) {
            assertionCache[name] = { level, assertion: Debug2[name] };
            Debug2[name] = noop;
            return false;
          }
          return true;
        }
        function fail(message, stackCrawlMark) {
          debugger;
          const e = new Error(message ? `Debug Failure. ${message}` : "Debug Failure.");
          if (Error.captureStackTrace) {
            Error.captureStackTrace(e, stackCrawlMark || fail);
          }
          throw e;
        }
        Debug2.fail = fail;
        function failBadSyntaxKind(node, message, stackCrawlMark) {
          return fail(
            `${message || "Unexpected node."}\r
Node ${formatSyntaxKind(node.kind)} was unexpected.`,
            stackCrawlMark || failBadSyntaxKind
          );
        }
        Debug2.failBadSyntaxKind = failBadSyntaxKind;
        function assert(expression, message, verboseDebugInfo, stackCrawlMark) {
          if (!expression) {
            message = message ? `False expression: ${message}` : "False expression.";
            if (verboseDebugInfo) {
              message += "\r\nVerbose Debug Information: " + (typeof verboseDebugInfo === "string" ? verboseDebugInfo : verboseDebugInfo());
            }
            fail(message, stackCrawlMark || assert);
          }
        }
        Debug2.assert = assert;
        function assertEqual(a, b, msg, msg2, stackCrawlMark) {
          if (a !== b) {
            const message = msg ? msg2 ? `${msg} ${msg2}` : msg : "";
            fail(`Expected ${a} === ${b}. ${message}`, stackCrawlMark || assertEqual);
          }
        }
        Debug2.assertEqual = assertEqual;
        function assertLessThan(a, b, msg, stackCrawlMark) {
          if (a >= b) {
            fail(`Expected ${a} < ${b}. ${msg || ""}`, stackCrawlMark || assertLessThan);
          }
        }
        Debug2.assertLessThan = assertLessThan;
        function assertLessThanOrEqual(a, b, stackCrawlMark) {
          if (a > b) {
            fail(`Expected ${a} <= ${b}`, stackCrawlMark || assertLessThanOrEqual);
          }
        }
        Debug2.assertLessThanOrEqual = assertLessThanOrEqual;
        function assertGreaterThanOrEqual(a, b, stackCrawlMark) {
          if (a < b) {
            fail(`Expected ${a} >= ${b}`, stackCrawlMark || assertGreaterThanOrEqual);
          }
        }
        Debug2.assertGreaterThanOrEqual = assertGreaterThanOrEqual;
        function assertIsDefined(value, message, stackCrawlMark) {
          if (value === void 0 || value === null) {
            fail(message, stackCrawlMark || assertIsDefined);
          }
        }
        Debug2.assertIsDefined = assertIsDefined;
        function checkDefined(value, message, stackCrawlMark) {
          assertIsDefined(value, message, stackCrawlMark || checkDefined);
          return value;
        }
        Debug2.checkDefined = checkDefined;
        function assertEachIsDefined(value, message, stackCrawlMark) {
          for (const v of value) {
            assertIsDefined(v, message, stackCrawlMark || assertEachIsDefined);
          }
        }
        Debug2.assertEachIsDefined = assertEachIsDefined;
        function checkEachDefined(value, message, stackCrawlMark) {
          assertEachIsDefined(value, message, stackCrawlMark || checkEachDefined);
          return value;
        }
        Debug2.checkEachDefined = checkEachDefined;
        function assertNever(member, message = "Illegal value:", stackCrawlMark) {
          const detail = typeof member === "object" && hasProperty(member, "kind") && hasProperty(member, "pos") ? "SyntaxKind: " + formatSyntaxKind(member.kind) : JSON.stringify(member);
          return fail(`${message} ${detail}`, stackCrawlMark || assertNever);
        }
        Debug2.assertNever = assertNever;
        function assertEachNode(nodes, test, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertEachNode")) {
            assert(
              test === void 0 || every(nodes, test),
              message || "Unexpected node.",
              () => `Node array did not pass test '${getFunctionName(test)}'.`,
              stackCrawlMark || assertEachNode
            );
          }
        }
        Debug2.assertEachNode = assertEachNode;
        function assertNode(node, test, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertNode")) {
            assert(
              node !== void 0 && (test === void 0 || test(node)),
              message || "Unexpected node.",
              () => `Node ${formatSyntaxKind(node == null ? void 0 : node.kind)} did not pass test '${getFunctionName(test)}'.`,
              stackCrawlMark || assertNode
            );
          }
        }
        Debug2.assertNode = assertNode;
        function assertNotNode(node, test, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertNotNode")) {
            assert(
              node === void 0 || test === void 0 || !test(node),
              message || "Unexpected node.",
              () => `Node ${formatSyntaxKind(node.kind)} should not have passed test '${getFunctionName(test)}'.`,
              stackCrawlMark || assertNotNode
            );
          }
        }
        Debug2.assertNotNode = assertNotNode;
        function assertOptionalNode(node, test, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertOptionalNode")) {
            assert(
              test === void 0 || node === void 0 || test(node),
              message || "Unexpected node.",
              () => `Node ${formatSyntaxKind(node == null ? void 0 : node.kind)} did not pass test '${getFunctionName(test)}'.`,
              stackCrawlMark || assertOptionalNode
            );
          }
        }
        Debug2.assertOptionalNode = assertOptionalNode;
        function assertOptionalToken(node, kind, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertOptionalToken")) {
            assert(
              kind === void 0 || node === void 0 || node.kind === kind,
              message || "Unexpected node.",
              () => `Node ${formatSyntaxKind(node == null ? void 0 : node.kind)} was not a '${formatSyntaxKind(kind)}' token.`,
              stackCrawlMark || assertOptionalToken
            );
          }
        }
        Debug2.assertOptionalToken = assertOptionalToken;
        function assertMissingNode(node, message, stackCrawlMark) {
          if (shouldAssertFunction(1 /* Normal */, "assertMissingNode")) {
            assert(
              node === void 0,
              message || "Unexpected node.",
              () => `Node ${formatSyntaxKind(node.kind)} was unexpected'.`,
              stackCrawlMark || assertMissingNode
            );
          }
        }
        Debug2.assertMissingNode = assertMissingNode;
        function type(_value) {
        }
        Debug2.type = type;
        function getFunctionName(func) {
          if (typeof func !== "function") {
            return "";
          } else if (hasProperty(func, "name")) {
            return func.name;
          } else {
            const text = Function.prototype.toString.call(func);
            const match = /^function\s+([\w\$]+)\s*\(/.exec(text);
            return match ? match[1] : "";
          }
        }
        Debug2.getFunctionName = getFunctionName;
        function formatSymbol(symbol) {
          return `{ name: ${unescapeLeadingUnderscores(symbol.escapedName)}; flags: ${formatSymbolFlags(symbol.flags)}; declarations: ${map(symbol.declarations, (node) => formatSyntaxKind(node.kind))} }`;
        }
        Debug2.formatSymbol = formatSymbol;
        function formatEnum(value = 0, enumObject, isFlags) {
          const members = getEnumMembers(enumObject);
          if (value === 0) {
            return members.length > 0 && members[0][0] === 0 ? members[0][1] : "0";
          }
          if (isFlags) {
            const result = [];
            let remainingFlags = value;
            for (const [enumValue, enumName] of members) {
              if (enumValue > value) {
                break;
              }
              if (enumValue !== 0 && enumValue & value) {
                result.push(enumName);
                remainingFlags &= ~enumValue;
              }
            }
            if (remainingFlags === 0) {
              return result.join("|");
            }
          } else {
            for (const [enumValue, enumName] of members) {
              if (enumValue === value) {
                return enumName;
              }
            }
          }
          return value.toString();
        }
        Debug2.formatEnum = formatEnum;
        const enumMemberCache = /* @__PURE__ */ new Map();
        function getEnumMembers(enumObject) {
          const existing = enumMemberCache.get(enumObject);
          if (existing) {
            return existing;
          }
          const result = [];
          for (const name in enumObject) {
            const value = enumObject[name];
            if (typeof value === "number") {
              result.push([value, name]);
            }
          }
          const sorted = stableSort(result, (x, y) => compareValues(x[0], y[0]));
          enumMemberCache.set(enumObject, sorted);
          return sorted;
        }
        function formatSyntaxKind(kind) {
          return formatEnum(
            kind,
            SyntaxKind,
            /*isFlags*/
            false
          );
        }
        Debug2.formatSyntaxKind = formatSyntaxKind;
        function formatSnippetKind(kind) {
          return formatEnum(
            kind,
            SnippetKind,
            /*isFlags*/
            false
          );
        }
        Debug2.formatSnippetKind = formatSnippetKind;
        function formatNodeFlags(flags) {
          return formatEnum(
            flags,
            NodeFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatNodeFlags = formatNodeFlags;
        function formatModifierFlags(flags) {
          return formatEnum(
            flags,
            ModifierFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatModifierFlags = formatModifierFlags;
        function formatTransformFlags(flags) {
          return formatEnum(
            flags,
            TransformFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatTransformFlags = formatTransformFlags;
        function formatEmitFlags(flags) {
          return formatEnum(
            flags,
            EmitFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatEmitFlags = formatEmitFlags;
        function formatSymbolFlags(flags) {
          return formatEnum(
            flags,
            SymbolFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatSymbolFlags = formatSymbolFlags;
        function formatTypeFlags(flags) {
          return formatEnum(
            flags,
            TypeFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatTypeFlags = formatTypeFlags;
        function formatSignatureFlags(flags) {
          return formatEnum(
            flags,
            SignatureFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatSignatureFlags = formatSignatureFlags;
        function formatObjectFlags(flags) {
          return formatEnum(
            flags,
            ObjectFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatObjectFlags = formatObjectFlags;
        function formatFlowFlags(flags) {
          return formatEnum(
            flags,
            FlowFlags,
            /*isFlags*/
            true
          );
        }
        Debug2.formatFlowFlags = formatFlowFlags;
        function formatRelationComparisonResult(result) {
          return formatEnum(
            result,
            RelationComparisonResult,
            /*isFlags*/
            true
          );
        }
        Debug2.formatRelationComparisonResult = formatRelationComparisonResult;
        function formatCheckMode(mode) {
          return formatEnum(
            mode,
            CheckMode,
            /*isFlags*/
            true
          );
        }
        Debug2.formatCheckMode = formatCheckMode;
        function formatSignatureCheckMode(mode) {
          return formatEnum(
            mode,
            SignatureCheckMode,
            /*isFlags*/
            true
          );
        }
        Debug2.formatSignatureCheckMode = formatSignatureCheckMode;
        function formatTypeFacts(facts) {
          return formatEnum(
            facts,
            TypeFacts,
            /*isFlags*/
            true
          );
        }
        Debug2.formatTypeFacts = formatTypeFacts;
        let isDebugInfoEnabled = false;
        let flowNodeProto;
        function attachFlowNodeDebugInfoWorker(flowNode) {
          if (!("__debugFlowFlags" in flowNode)) {
            Object.defineProperties(flowNode, {
              // for use with vscode-js-debug's new customDescriptionGenerator in launch.json
              __tsDebuggerDisplay: {
                value() {
                  const flowHeader = this.flags & 2 /* Start */ ? "FlowStart" : this.flags & 4 /* BranchLabel */ ? "FlowBranchLabel" : this.flags & 8 /* LoopLabel */ ? "FlowLoopLabel" : this.flags & 16 /* Assignment */ ? "FlowAssignment" : this.flags & 32 /* TrueCondition */ ? "FlowTrueCondition" : this.flags & 64 /* FalseCondition */ ? "FlowFalseCondition" : this.flags & 128 /* SwitchClause */ ? "FlowSwitchClause" : this.flags & 256 /* ArrayMutation */ ? "FlowArrayMutation" : this.flags & 512 /* Call */ ? "FlowCall" : this.flags & 1024 /* ReduceLabel */ ? "FlowReduceLabel" : this.flags & 1 /* Unreachable */ ? "FlowUnreachable" : "UnknownFlow";
                  const remainingFlags = this.flags & ~(2048 /* Referenced */ - 1);
                  return `${flowHeader}${remainingFlags ? ` (${formatFlowFlags(remainingFlags)})` : ""}`;
                }
              },
              __debugFlowFlags: { get() {
                return formatEnum(
                  this.flags,
                  FlowFlags,
                  /*isFlags*/
                  true
                );
              } },
              __debugToString: { value() {
                return formatControlFlowGraph(this);
              } }
            });
          }
        }
        function attachFlowNodeDebugInfo(flowNode) {
          if (isDebugInfoEnabled) {
            if (typeof Object.setPrototypeOf === "function") {
              if (!flowNodeProto) {
                flowNodeProto = Object.create(Object.prototype);
                attachFlowNodeDebugInfoWorker(flowNodeProto);
              }
              Object.setPrototypeOf(flowNode, flowNodeProto);
            } else {
              attachFlowNodeDebugInfoWorker(flowNode);
            }
          }
        }
        Debug2.attachFlowNodeDebugInfo = attachFlowNodeDebugInfo;
        let nodeArrayProto;
        function attachNodeArrayDebugInfoWorker(array) {
          if (!("__tsDebuggerDisplay" in array)) {
            Object.defineProperties(array, {
              __tsDebuggerDisplay: {
                value(defaultValue) {
                  defaultValue = String(defaultValue).replace(/(?:,[\s\w\d_]+:[^,]+)+\]$/, "]");
                  return `NodeArray ${defaultValue}`;
                }
              }
            });
          }
        }
        function attachNodeArrayDebugInfo(array) {
          if (isDebugInfoEnabled) {
            if (typeof Object.setPrototypeOf === "function") {
              if (!nodeArrayProto) {
                nodeArrayProto = Object.create(Array.prototype);
                attachNodeArrayDebugInfoWorker(nodeArrayProto);
              }
              Object.setPrototypeOf(array, nodeArrayProto);
            } else {
              attachNodeArrayDebugInfoWorker(array);
            }
          }
        }
        Debug2.attachNodeArrayDebugInfo = attachNodeArrayDebugInfo;
        function enableDebugInfo() {
          if (isDebugInfoEnabled)
            return;
          const weakTypeTextMap = /* @__PURE__ */ new WeakMap();
          const weakNodeTextMap = /* @__PURE__ */ new WeakMap();
          Object.defineProperties(objectAllocator.getSymbolConstructor().prototype, {
            // for use with vscode-js-debug's new customDescriptionGenerator in launch.json
            __tsDebuggerDisplay: {
              value() {
                const symbolHeader = this.flags & 33554432 /* Transient */ ? "TransientSymbol" : "Symbol";
                const remainingSymbolFlags = this.flags & ~33554432 /* Transient */;
                return `${symbolHeader} '${symbolName(this)}'${remainingSymbolFlags ? ` (${formatSymbolFlags(remainingSymbolFlags)})` : ""}`;
              }
            },
            __debugFlags: { get() {
              return formatSymbolFlags(this.flags);
            } }
          });
          Object.defineProperties(objectAllocator.getTypeConstructor().prototype, {
            // for use with vscode-js-debug's new customDescriptionGenerator in launch.json
            __tsDebuggerDisplay: {
              value() {
                const typeHeader = this.flags & 98304 /* Nullable */ ? "NullableType" : this.flags & 384 /* StringOrNumberLiteral */ ? `LiteralType ${JSON.stringify(this.value)}` : this.flags & 2048 /* BigIntLiteral */ ? `LiteralType ${this.value.negative ? "-" : ""}${this.value.base10Value}n` : this.flags & 8192 /* UniqueESSymbol */ ? "UniqueESSymbolType" : this.flags & 32 /* Enum */ ? "EnumType" : this.flags & 67359327 /* Intrinsic */ ? `IntrinsicType ${this.intrinsicName}` : this.flags & 1048576 /* Union */ ? "UnionType" : this.flags & 2097152 /* Intersection */ ? "IntersectionType" : this.flags & 4194304 /* Index */ ? "IndexType" : this.flags & 8388608 /* IndexedAccess */ ? "IndexedAccessType" : this.flags & 16777216 /* Conditional */ ? "ConditionalType" : this.flags & 33554432 /* Substitution */ ? "SubstitutionType" : this.flags & 262144 /* TypeParameter */ ? "TypeParameter" : this.flags & 524288 /* Object */ ? this.objectFlags & 3 /* ClassOrInterface */ ? "InterfaceType" : this.objectFlags & 4 /* Reference */ ? "TypeReference" : this.objectFlags & 8 /* Tuple */ ? "TupleType" : this.objectFlags & 16 /* Anonymous */ ? "AnonymousType" : this.objectFlags & 32 /* Mapped */ ? "MappedType" : this.objectFlags & 1024 /* ReverseMapped */ ? "ReverseMappedType" : this.objectFlags & 256 /* EvolvingArray */ ? "EvolvingArrayType" : "ObjectType" : "Type";
                const remainingObjectFlags = this.flags & 524288 /* Object */ ? this.objectFlags & ~1343 /* ObjectTypeKindMask */ : 0;
                return `${typeHeader}${this.symbol ? ` '${symbolName(this.symbol)}'` : ""}${remainingObjectFlags ? ` (${formatObjectFlags(remainingObjectFlags)})` : ""}`;
              }
            },
            __debugFlags: { get() {
              return formatTypeFlags(this.flags);
            } },
            __debugObjectFlags: { get() {
              return this.flags & 524288 /* Object */ ? formatObjectFlags(this.objectFlags) : "";
            } },
            __debugTypeToString: {
              value() {
                let text = weakTypeTextMap.get(this);
                if (text === void 0) {
                  text = this.checker.typeToString(this);
                  weakTypeTextMap.set(this, text);
                }
                return text;
              }
            }
          });
          Object.defineProperties(objectAllocator.getSignatureConstructor().prototype, {
            __debugFlags: { get() {
              return formatSignatureFlags(this.flags);
            } },
            __debugSignatureToString: { value() {
              var _a2;
              return (_a2 = this.checker) == null ? void 0 : _a2.signatureToString(this);
            } }
          });
          const nodeConstructors = [
            objectAllocator.getNodeConstructor(),
            objectAllocator.getIdentifierConstructor(),
            objectAllocator.getTokenConstructor(),
            objectAllocator.getSourceFileConstructor()
          ];
          for (const ctor of nodeConstructors) {
            if (!hasProperty(ctor.prototype, "__debugKind")) {
              Object.defineProperties(ctor.prototype, {
                // for use with vscode-js-debug's new customDescriptionGenerator in launch.json
                __tsDebuggerDisplay: {
                  value() {
                    const nodeHeader = isGeneratedIdentifier(this) ? "GeneratedIdentifier" : isIdentifier(this) ? `Identifier '${idText(this)}'` : isPrivateIdentifier(this) ? `PrivateIdentifier '${idText(this)}'` : isStringLiteral(this) ? `StringLiteral ${JSON.stringify(this.text.length < 10 ? this.text : this.text.slice(10) + "...")}` : isNumericLiteral(this) ? `NumericLiteral ${this.text}` : isBigIntLiteral(this) ? `BigIntLiteral ${this.text}n` : isTypeParameterDeclaration(this) ? "TypeParameterDeclaration" : isParameter(this) ? "ParameterDeclaration" : isConstructorDeclaration(this) ? "ConstructorDeclaration" : isGetAccessorDeclaration(this) ? "GetAccessorDeclaration" : isSetAccessorDeclaration(this) ? "SetAccessorDeclaration" : isCallSignatureDeclaration(this) ? "CallSignatureDeclaration" : isConstructSignatureDeclaration(this) ? "ConstructSignatureDeclaration" : isIndexSignatureDeclaration(this) ? "IndexSignatureDeclaration" : isTypePredicateNode(this) ? "TypePredicateNode" : isTypeReferenceNode(this) ? "TypeReferenceNode" : isFunctionTypeNode(this) ? "FunctionTypeNode" : isConstructorTypeNode(this) ? "ConstructorTypeNode" : isTypeQueryNode(this) ? "TypeQueryNode" : isTypeLiteralNode(this) ? "TypeLiteralNode" : isArrayTypeNode(this) ? "ArrayTypeNode" : isTupleTypeNode(this) ? "TupleTypeNode" : isOptionalTypeNode(this) ? "OptionalTypeNode" : isRestTypeNode(this) ? "RestTypeNode" : isUnionTypeNode(this) ? "UnionTypeNode" : isIntersectionTypeNode(this) ? "IntersectionTypeNode" : isConditionalTypeNode(this) ? "ConditionalTypeNode" : isInferTypeNode(this) ? "InferTypeNode" : isParenthesizedTypeNode(this) ? "ParenthesizedTypeNode" : isThisTypeNode(this) ? "ThisTypeNode" : isTypeOperatorNode(this) ? "TypeOperatorNode" : isIndexedAccessTypeNode(this) ? "IndexedAccessTypeNode" : isMappedTypeNode(this) ? "MappedTypeNode" : isLiteralTypeNode(this) ? "LiteralTypeNode" : isNamedTupleMember(this) ? "NamedTupleMember" : isImportTypeNode(this) ? "ImportTypeNode" : formatSyntaxKind(this.kind);
                    return `${nodeHeader}${this.flags ? ` (${formatNodeFlags(this.flags)})` : ""}`;
                  }
                },
                __debugKind: { get() {
                  return formatSyntaxKind(this.kind);
                } },
                __debugNodeFlags: { get() {
                  return formatNodeFlags(this.flags);
                } },
                __debugModifierFlags: { get() {
                  return formatModifierFlags(getEffectiveModifierFlagsNoCache(this));
                } },
                __debugTransformFlags: { get() {
                  return formatTransformFlags(this.transformFlags);
                } },
                __debugIsParseTreeNode: { get() {
                  return isParseTreeNode(this);
                } },
                __debugEmitFlags: { get() {
                  return formatEmitFlags(getEmitFlags(this));
                } },
                __debugGetText: {
                  value(includeTrivia) {
                    if (nodeIsSynthesized(this))
                      return "";
                    let text = weakNodeTextMap.get(this);
                    if (text === void 0) {
                      const parseNode = getParseTreeNode(this);
                      const sourceFile = parseNode && getSourceFileOfNode(parseNode);
                      text = sourceFile ? getSourceTextOfNodeFromSourceFile(sourceFile, parseNode, includeTrivia) : "";
                      weakNodeTextMap.set(this, text);
                    }
                    return text;
                  }
                }
              });
            }
          }
          isDebugInfoEnabled = true;
        }
        Debug2.enableDebugInfo = enableDebugInfo;
        function formatVariance(varianceFlags) {
          const variance = varianceFlags & 7 /* VarianceMask */;
          let result = variance === 0 /* Invariant */ ? "in out" : variance === 3 /* Bivariant */ ? "[bivariant]" : variance === 2 /* Contravariant */ ? "in" : variance === 1 /* Covariant */ ? "out" : variance === 4 /* Independent */ ? "[independent]" : "";
          if (varianceFlags & 8 /* Unmeasurable */) {
            result += " (unmeasurable)";
          } else if (varianceFlags & 16 /* Unreliable */) {
            result += " (unreliable)";
          }
          return result;
        }
        Debug2.formatVariance = formatVariance;
        class DebugTypeMapper {
          __debugToString() {
            var _a2;
            type(this);
            switch (this.kind) {
              case 3 /* Function */:
                return ((_a2 = this.debugInfo) == null ? void 0 : _a2.call(this)) || "(function mapper)";
              case 0 /* Simple */:
                return `${this.source.__debugTypeToString()} -> ${this.target.__debugTypeToString()}`;
              case 1 /* Array */:
                return zipWith(
                  this.sources,
                  this.targets || map(this.sources, () => "any"),
                  (s, t) => `${s.__debugTypeToString()} -> ${typeof t === "string" ? t : t.__debugTypeToString()}`
                ).join(", ");
              case 2 /* Deferred */:
                return zipWith(
                  this.sources,
                  this.targets,
                  (s, t) => `${s.__debugTypeToString()} -> ${t().__debugTypeToString()}`
                ).join(", ");
              case 5 /* Merged */:
              case 4 /* Composite */:
                return `m1: ${this.mapper1.__debugToString().split("\n").join("\n    ")}
m2: ${this.mapper2.__debugToString().split("\n").join("\n    ")}`;
              default:
                return assertNever(this);
            }
          }
        }
        Debug2.DebugTypeMapper = DebugTypeMapper;
        function attachDebugPrototypeIfDebug(mapper) {
          if (Debug2.isDebugging) {
            return Object.setPrototypeOf(mapper, DebugTypeMapper.prototype);
          }
          return mapper;
        }
        Debug2.attachDebugPrototypeIfDebug = attachDebugPrototypeIfDebug;
        function printControlFlowGraph(flowNode) {
          return console.log(formatControlFlowGraph(flowNode));
        }
        Debug2.printControlFlowGraph = printControlFlowGraph;
        function formatControlFlowGraph(flowNode) {
          let nextDebugFlowId = -1;
          function getDebugFlowNodeId(f) {
            if (!f.id) {
              f.id = nextDebugFlowId;
              nextDebugFlowId--;
            }
            return f.id;
          }
          let BoxCharacter;
          ((BoxCharacter2) => {
            BoxCharacter2["lr"] = "\u2500";
            BoxCharacter2["ud"] = "\u2502";
            BoxCharacter2["dr"] = "\u256D";
            BoxCharacter2["dl"] = "\u256E";
            BoxCharacter2["ul"] = "\u256F";
            BoxCharacter2["ur"] = "\u2570";
            BoxCharacter2["udr"] = "\u251C";
            BoxCharacter2["udl"] = "\u2524";
            BoxCharacter2["dlr"] = "\u252C";
            BoxCharacter2["ulr"] = "\u2534";
            BoxCharacter2["udlr"] = "\u256B";
          })(BoxCharacter || (BoxCharacter = {}));
          let Connection;
          ((Connection2) => {
            Connection2[Connection2["None"] = 0] = "None";
            Connection2[Connection2["Up"] = 1] = "Up";
            Connection2[Connection2["Down"] = 2] = "Down";
            Connection2[Connection2["Left"] = 4] = "Left";
            Connection2[Connection2["Right"] = 8] = "Right";
            Connection2[Connection2["UpDown"] = 3] = "UpDown";
            Connection2[Connection2["LeftRight"] = 12] = "LeftRight";
            Connection2[Connection2["UpLeft"] = 5] = "UpLeft";
            Connection2[Connection2["UpRight"] = 9] = "UpRight";
            Connection2[Connection2["DownLeft"] = 6] = "DownLeft";
            Connection2[Connection2["DownRight"] = 10] = "DownRight";
            Connection2[Connection2["UpDownLeft"] = 7] = "UpDownLeft";
            Connection2[Connection2["UpDownRight"] = 11] = "UpDownRight";
            Connection2[Connection2["UpLeftRight"] = 13] = "UpLeftRight";
            Connection2[Connection2["DownLeftRight"] = 14] = "DownLeftRight";
            Connection2[Connection2["UpDownLeftRight"] = 15] = "UpDownLeftRight";
            Connection2[Connection2["NoChildren"] = 16] = "NoChildren";
          })(Connection || (Connection = {}));
          const hasAntecedentFlags = 16 /* Assignment */ | 96 /* Condition */ | 128 /* SwitchClause */ | 256 /* ArrayMutation */ | 512 /* Call */ | 1024 /* ReduceLabel */;
          const hasNodeFlags = 2 /* Start */ | 16 /* Assignment */ | 512 /* Call */ | 96 /* Condition */ | 256 /* ArrayMutation */;
          const links = /* @__PURE__ */ Object.create(
            /*o*/
            null
          );
          const nodes = [];
          const edges = [];
          const root = buildGraphNode(flowNode, /* @__PURE__ */ new Set());
          for (const node of nodes) {
            node.text = renderFlowNode(node.flowNode, node.circular);
            computeLevel(node);
          }
          const height = computeHeight(root);
          const columnWidths = computeColumnWidths(height);
          computeLanes(root, 0);
          return renderGraph();
          function isFlowSwitchClause(f) {
            return !!(f.flags & 128 /* SwitchClause */);
          }
          function hasAntecedents(f) {
            return !!(f.flags & 12 /* Label */) && !!f.antecedents;
          }
          function hasAntecedent(f) {
            return !!(f.flags & hasAntecedentFlags);
          }
          function hasNode(f) {
            return !!(f.flags & hasNodeFlags);
          }
          function getChildren(node) {
            const children = [];
            for (const edge of node.edges) {
              if (edge.source === node) {
                children.push(edge.target);
              }
            }
            return children;
          }
          function getParents(node) {
            const parents = [];
            for (const edge of node.edges) {
              if (edge.target === node) {
                parents.push(edge.source);
              }
            }
            return parents;
          }
          function buildGraphNode(flowNode2, seen) {
            const id = getDebugFlowNodeId(flowNode2);
            let graphNode = links[id];
            if (graphNode && seen.has(flowNode2)) {
              graphNode.circular = true;
              graphNode = {
                id: -1,
                flowNode: flowNode2,
                edges: [],
                text: "",
                lane: -1,
                endLane: -1,
                level: -1,
                circular: "circularity"
              };
              nodes.push(graphNode);
              return graphNode;
            }
            seen.add(flowNode2);
            if (!graphNode) {
              links[id] = graphNode = { id, flowNode: flowNode2, edges: [], text: "", lane: -1, endLane: -1, level: -1, circular: false };
              nodes.push(graphNode);
              if (hasAntecedents(flowNode2)) {
                for (const antecedent of flowNode2.antecedents) {
                  buildGraphEdge(graphNode, antecedent, seen);
                }
              } else if (hasAntecedent(flowNode2)) {
                buildGraphEdge(graphNode, flowNode2.antecedent, seen);
              }
            }
            seen.delete(flowNode2);
            return graphNode;
          }
          function buildGraphEdge(source, antecedent, seen) {
            const target = buildGraphNode(antecedent, seen);
            const edge = { source, target };
            edges.push(edge);
            source.edges.push(edge);
            target.edges.push(edge);
          }
          function computeLevel(node) {
            if (node.level !== -1) {
              return node.level;
            }
            let level = 0;
            for (const parent2 of getParents(node)) {
              level = Math.max(level, computeLevel(parent2) + 1);
            }
            return node.level = level;
          }
          function computeHeight(node) {
            let height2 = 0;
            for (const child of getChildren(node)) {
              height2 = Math.max(height2, computeHeight(child));
            }
            return height2 + 1;
          }
          function computeColumnWidths(height2) {
            const columns = fill(Array(height2), 0);
            for (const node of nodes) {
              columns[node.level] = Math.max(columns[node.level], node.text.length);
            }
            return columns;
          }
          function computeLanes(node, lane) {
            if (node.lane === -1) {
              node.lane = lane;
              node.endLane = lane;
              const children = getChildren(node);
              for (let i = 0; i < children.length; i++) {
                if (i > 0)
                  lane++;
                const child = children[i];
                computeLanes(child, lane);
                if (child.endLane > node.endLane) {
                  lane = child.endLane;
                }
              }
              node.endLane = lane;
            }
          }
          function getHeader(flags) {
            if (flags & 2 /* Start */)
              return "Start";
            if (flags & 4 /* BranchLabel */)
              return "Branch";
            if (flags & 8 /* LoopLabel */)
              return "Loop";
            if (flags & 16 /* Assignment */)
              return "Assignment";
            if (flags & 32 /* TrueCondition */)
              return "True";
            if (flags & 64 /* FalseCondition */)
              return "False";
            if (flags & 128 /* SwitchClause */)
              return "SwitchClause";
            if (flags & 256 /* ArrayMutation */)
              return "ArrayMutation";
            if (flags & 512 /* Call */)
              return "Call";
            if (flags & 1024 /* ReduceLabel */)
              return "ReduceLabel";
            if (flags & 1 /* Unreachable */)
              return "Unreachable";
            throw new Error();
          }
          function getNodeText(node) {
            const sourceFile = getSourceFileOfNode(node);
            return getSourceTextOfNodeFromSourceFile(
              sourceFile,
              node,
              /*includeTrivia*/
              false
            );
          }
          function renderFlowNode(flowNode2, circular) {
            let text = getHeader(flowNode2.flags);
            if (circular) {
              text = `${text}#${getDebugFlowNodeId(flowNode2)}`;
            }
            if (hasNode(flowNode2)) {
              if (flowNode2.node) {
                text += ` (${getNodeText(flowNode2.node)})`;
              }
            } else if (isFlowSwitchClause(flowNode2)) {
              const clauses = [];
              for (let i = flowNode2.clauseStart; i < flowNode2.clauseEnd; i++) {
                const clause = flowNode2.switchStatement.caseBlock.clauses[i];
                if (isDefaultClause(clause)) {
                  clauses.push("default");
                } else {
                  clauses.push(getNodeText(clause.expression));
                }
              }
              text += ` (${clauses.join(", ")})`;
            }
            return circular === "circularity" ? `Circular(${text})` : text;
          }
          function renderGraph() {
            const columnCount = columnWidths.length;
            const laneCount = nodes.reduce((x, n) => Math.max(x, n.lane), 0) + 1;
            const lanes = fill(Array(laneCount), "");
            const grid = columnWidths.map(() => Array(laneCount));
            const connectors = columnWidths.map(() => fill(Array(laneCount), 0));
            for (const node of nodes) {
              grid[node.level][node.lane] = node;
              const children = getChildren(node);
              for (let i = 0; i < children.length; i++) {
                const child = children[i];
                let connector = 8 /* Right */;
                if (child.lane === node.lane)
                  connector |= 4 /* Left */;
                if (i > 0)
                  connector |= 1 /* Up */;
                if (i < children.length - 1)
                  connector |= 2 /* Down */;
                connectors[node.level][child.lane] |= connector;
              }
              if (children.length === 0) {
                connectors[node.level][node.lane] |= 16 /* NoChildren */;
              }
              const parents = getParents(node);
              for (let i = 0; i < parents.length; i++) {
                const parent2 = parents[i];
                let connector = 4 /* Left */;
                if (i > 0)
                  connector |= 1 /* Up */;
                if (i < parents.length - 1)
                  connector |= 2 /* Down */;
                connectors[node.level - 1][parent2.lane] |= connector;
              }
            }
            for (let column = 0; column < columnCount; column++) {
              for (let lane = 0; lane < laneCount; lane++) {
                const left = column > 0 ? connectors[column - 1][lane] : 0;
                const above = lane > 0 ? connectors[column][lane - 1] : 0;
                let connector = connectors[column][lane];
                if (!connector) {
                  if (left & 8 /* Right */)
                    connector |= 12 /* LeftRight */;
                  if (above & 2 /* Down */)
                    connector |= 3 /* UpDown */;
                  connectors[column][lane] = connector;
                }
              }
            }
            for (let column = 0; column < columnCount; column++) {
              for (let lane = 0; lane < lanes.length; lane++) {
                const connector = connectors[column][lane];
                const fill2 = connector & 4 /* Left */ ? "\u2500" /* lr */ : " ";
                const node = grid[column][lane];
                if (!node) {
                  if (column < columnCount - 1) {
                    writeLane(lane, repeat(fill2, columnWidths[column] + 1));
                  }
                } else {
                  writeLane(lane, node.text);
                  if (column < columnCount - 1) {
                    writeLane(lane, " ");
                    writeLane(lane, repeat(fill2, columnWidths[column] - node.text.length));
                  }
                }
                writeLane(lane, getBoxCharacter(connector));
                writeLane(lane, connector & 8 /* Right */ && column < columnCount - 1 && !grid[column + 1][lane] ? "\u2500" /* lr */ : " ");
              }
            }
            return `
${lanes.join("\n")}
`;
            function writeLane(lane, text) {
              lanes[lane] += text;
            }
          }
          function getBoxCharacter(connector) {
            switch (connector) {
              case 3 /* UpDown */:
                return "\u2502" /* ud */;
              case 12 /* LeftRight */:
                return "\u2500" /* lr */;
              case 5 /* UpLeft */:
                return "\u256F" /* ul */;
              case 9 /* UpRight */:
                return "\u2570" /* ur */;
              case 6 /* DownLeft */:
                return "\u256E" /* dl */;
              case 10 /* DownRight */:
                return "\u256D" /* dr */;
              case 7 /* UpDownLeft */:
                return "\u2524" /* udl */;
              case 11 /* UpDownRight */:
                return "\u251C" /* udr */;
              case 13 /* UpLeftRight */:
                return "\u2534" /* ulr */;
              case 14 /* DownLeftRight */:
                return "\u252C" /* dlr */;
              case 15 /* UpDownLeftRight */:
                return "\u256B" /* udlr */;
            }
            return " ";
          }
          function fill(array, value) {
            if (array.fill) {
              array.fill(value);
            } else {
              for (let i = 0; i < array.length; i++) {
                array[i] = value;
              }
            }
            return array;
          }
          function repeat(ch, length2) {
            if (ch.repeat) {
              return length2 > 0 ? ch.repeat(length2) : "";
            }
            let s = "";
            while (s.length < length2) {
              s += ch;
            }
            return s;
          }
        }
        Debug2.formatControlFlowGraph = formatControlFlowGraph;
      })(Debug || (Debug = {}));
    }
  });

  // src/compiler/semver.ts
  function tryParseComponents(text) {
    const match = versionRegExp.exec(text);
    if (!match)
      return void 0;
    const [, major, minor = "0", patch = "0", prerelease = "", build2 = ""] = match;
    if (prerelease && !prereleaseRegExp.test(prerelease))
      return void 0;
    if (build2 && !buildRegExp.test(build2))
      return void 0;
    return {
      major: parseInt(major, 10),
      minor: parseInt(minor, 10),
      patch: parseInt(patch, 10),
      prerelease,
      build: build2
    };
  }
  function comparePrereleaseIdentifiers(left, right) {
    if (left === right)
      return 0 /* EqualTo */;
    if (left.length === 0)
      return right.length === 0 ? 0 /* EqualTo */ : 1 /* GreaterThan */;
    if (right.length === 0)
      return -1 /* LessThan */;
    const length2 = Math.min(left.length, right.length);
    for (let i = 0; i < length2; i++) {
      const leftIdentifier = left[i];
      const rightIdentifier = right[i];
      if (leftIdentifier === rightIdentifier)
        continue;
      const leftIsNumeric = numericIdentifierRegExp.test(leftIdentifier);
      const rightIsNumeric = numericIdentifierRegExp.test(rightIdentifier);
      if (leftIsNumeric || rightIsNumeric) {
        if (leftIsNumeric !== rightIsNumeric)
          return leftIsNumeric ? -1 /* LessThan */ : 1 /* GreaterThan */;
        const result = compareValues(+leftIdentifier, +rightIdentifier);
        if (result)
          return result;
      } else {
        const result = compareStringsCaseSensitive(leftIdentifier, rightIdentifier);
        if (result)
          return result;
      }
    }
    return compareValues(left.length, right.length);
  }
  function parseRange(text) {
    const alternatives = [];
    for (let range of trimString(text).split(logicalOrRegExp)) {
      if (!range)
        continue;
      const comparators = [];
      range = trimString(range);
      const match = hyphenRegExp.exec(range);
      if (match) {
        if (!parseHyphen(match[1], match[2], comparators))
          return void 0;
      } else {
        for (const simple of range.split(whitespaceRegExp)) {
          const match2 = rangeRegExp.exec(trimString(simple));
          if (!match2 || !parseComparator(match2[1], match2[2], comparators))
            return void 0;
        }
      }
      alternatives.push(comparators);
    }
    return alternatives;
  }
  function parsePartial(text) {
    const match = partialRegExp.exec(text);
    if (!match)
      return void 0;
    const [, major, minor = "*", patch = "*", prerelease, build2] = match;
    const version2 = new Version(
      isWildcard(major) ? 0 : parseInt(major, 10),
      isWildcard(major) || isWildcard(minor) ? 0 : parseInt(minor, 10),
      isWildcard(major) || isWildcard(minor) || isWildcard(patch) ? 0 : parseInt(patch, 10),
      prerelease,
      build2
    );
    return { version: version2, major, minor, patch };
  }
  function parseHyphen(left, right, comparators) {
    const leftResult = parsePartial(left);
    if (!leftResult)
      return false;
    const rightResult = parsePartial(right);
    if (!rightResult)
      return false;
    if (!isWildcard(leftResult.major)) {
      comparators.push(createComparator(">=", leftResult.version));
    }
    if (!isWildcard(rightResult.major)) {
      comparators.push(
        isWildcard(rightResult.minor) ? createComparator("<", rightResult.version.increment("major")) : isWildcard(rightResult.patch) ? createComparator("<", rightResult.version.increment("minor")) : createComparator("<=", rightResult.version)
      );
    }
    return true;
  }
  function parseComparator(operator, text, comparators) {
    const result = parsePartial(text);
    if (!result)
      return false;
    const { version: version2, major, minor, patch } = result;
    if (!isWildcard(major)) {
      switch (operator) {
        case "~":
          comparators.push(createComparator(">=", version2));
          comparators.push(createComparator("<", version2.increment(
            isWildcard(minor) ? "major" : "minor"
          )));
          break;
        case "^":
          comparators.push(createComparator(">=", version2));
          comparators.push(createComparator("<", version2.increment(
            version2.major > 0 || isWildcard(minor) ? "major" : version2.minor > 0 || isWildcard(patch) ? "minor" : "patch"
          )));
          break;
        case "<":
        case ">=":
          comparators.push(
            isWildcard(minor) || isWildcard(patch) ? createComparator(operator, version2.with({ prerelease: "0" })) : createComparator(operator, version2)
          );
          break;
        case "<=":
        case ">":
          comparators.push(
            isWildcard(minor) ? createComparator(operator === "<=" ? "<" : ">=", version2.increment("major").with({ prerelease: "0" })) : isWildcard(patch) ? createComparator(operator === "<=" ? "<" : ">=", version2.increment("minor").with({ prerelease: "0" })) : createComparator(operator, version2)
          );
          break;
        case "=":
        case void 0:
          if (isWildcard(minor) || isWildcard(patch)) {
            comparators.push(createComparator(">=", version2.with({ prerelease: "0" })));
            comparators.push(createComparator("<", version2.increment(isWildcard(minor) ? "major" : "minor").with({ prerelease: "0" })));
          } else {
            comparators.push(createComparator("=", version2));
          }
          break;
        default:
          return false;
      }
    } else if (operator === "<" || operator === ">") {
      comparators.push(createComparator("<", Version.zero));
    }
    return true;
  }
  function isWildcard(part) {
    return part === "*" || part === "x" || part === "X";
  }
  function createComparator(operator, operand) {
    return { operator, operand };
  }
  function testDisjunction(version2, alternatives) {
    if (alternatives.length === 0)
      return true;
    for (const alternative of alternatives) {
      if (testAlternative(version2, alternative))
        return true;
    }
    return false;
  }
  function testAlternative(version2, comparators) {
    for (const comparator of comparators) {
      if (!testComparator(version2, comparator.operator, comparator.operand))
        return false;
    }
    return true;
  }
  function testComparator(version2, operator, operand) {
    const cmp = version2.compareTo(operand);
    switch (operator) {
      case "<":
        return cmp < 0;
      case "<=":
        return cmp <= 0;
      case ">":
        return cmp > 0;
      case ">=":
        return cmp >= 0;
      case "=":
        return cmp === 0;
      default:
        return Debug.assertNever(operator);
    }
  }
  function formatDisjunction(alternatives) {
    return map(alternatives, formatAlternative).join(" || ") || "*";
  }
  function formatAlternative(comparators) {
    return map(comparators, formatComparator).join(" ");
  }
  function formatComparator(comparator) {
    return `${comparator.operator}${comparator.operand}`;
  }
  var versionRegExp, prereleaseRegExp, prereleasePartRegExp, buildRegExp, buildPartRegExp, numericIdentifierRegExp, _Version, Version, VersionRange, logicalOrRegExp, whitespaceRegExp, partialRegExp, hyphenRegExp, rangeRegExp;
  var init_semver = __esm({
    "src/compiler/semver.ts"() {
      "use strict";
      init_ts2();
      versionRegExp = /^(0|[1-9]\d*)(?:\.(0|[1-9]\d*)(?:\.(0|[1-9]\d*)(?:\-([a-z0-9-.]+))?(?:\+([a-z0-9-.]+))?)?)?$/i;
      prereleaseRegExp = /^(?:0|[1-9]\d*|[a-z-][a-z0-9-]*)(?:\.(?:0|[1-9]\d*|[a-z-][a-z0-9-]*))*$/i;
      prereleasePartRegExp = /^(?:0|[1-9]\d*|[a-z-][a-z0-9-]*)$/i;
      buildRegExp = /^[a-z0-9-]+(?:\.[a-z0-9-]+)*$/i;
      buildPartRegExp = /^[a-z0-9-]+$/i;
      numericIdentifierRegExp = /^(0|[1-9]\d*)$/;
      _Version = class {
        constructor(major, minor = 0, patch = 0, prerelease = "", build2 = "") {
          if (typeof major === "string") {
            const result = Debug.checkDefined(tryParseComponents(major), "Invalid version");
            ({ major, minor, patch, prerelease, build: build2 } = result);
          }
          Debug.assert(major >= 0, "Invalid argument: major");
          Debug.assert(minor >= 0, "Invalid argument: minor");
          Debug.assert(patch >= 0, "Invalid argument: patch");
          const prereleaseArray = prerelease ? isArray(prerelease) ? prerelease : prerelease.split(".") : emptyArray;
          const buildArray = build2 ? isArray(build2) ? build2 : build2.split(".") : emptyArray;
          Debug.assert(every(prereleaseArray, (s) => prereleasePartRegExp.test(s)), "Invalid argument: prerelease");
          Debug.assert(every(buildArray, (s) => buildPartRegExp.test(s)), "Invalid argument: build");
          this.major = major;
          this.minor = minor;
          this.patch = patch;
          this.prerelease = prereleaseArray;
          this.build = buildArray;
        }
        static tryParse(text) {
          const result = tryParseComponents(text);
          if (!result)
            return void 0;
          const { major, minor, patch, prerelease, build: build2 } = result;
          return new _Version(major, minor, patch, prerelease, build2);
        }
        compareTo(other) {
          if (this === other)
            return 0 /* EqualTo */;
          if (other === void 0)
            return 1 /* GreaterThan */;
          return compareValues(this.major, other.major) || compareValues(this.minor, other.minor) || compareValues(this.patch, other.patch) || comparePrereleaseIdentifiers(this.prerelease, other.prerelease);
        }
        increment(field) {
          switch (field) {
            case "major":
              return new _Version(this.major + 1, 0, 0);
            case "minor":
              return new _Version(this.major, this.minor + 1, 0);
            case "patch":
              return new _Version(this.major, this.minor, this.patch + 1);
            default:
              return Debug.assertNever(field);
          }
        }
        with(fields) {
          const {
            major = this.major,
            minor = this.minor,
            patch = this.patch,
            prerelease = this.prerelease,
            build: build2 = this.build
          } = fields;
          return new _Version(major, minor, patch, prerelease, build2);
        }
        toString() {
          let result = `${this.major}.${this.minor}.${this.patch}`;
          if (some(this.prerelease))
            result += `-${this.prerelease.join(".")}`;
          if (some(this.build))
            result += `+${this.build.join(".")}`;
          return result;
        }
      };
      Version = _Version;
      Version.zero = new _Version(0, 0, 0, ["0"]);
      VersionRange = class {
        constructor(spec) {
          this._alternatives = spec ? Debug.checkDefined(parseRange(spec), "Invalid range spec.") : emptyArray;
        }
        static tryParse(text) {
          const sets = parseRange(text);
          if (sets) {
            const range = new VersionRange("");
            range._alternatives = sets;
            return range;
          }
          return void 0;
        }
        /**
         * Tests whether a version matches the range. This is equivalent to `satisfies(version, range, { includePrerelease: true })`.
         * in `node-semver`.
         */
        test(version2) {
          if (typeof version2 === "string")
            version2 = new Version(version2);
          return testDisjunction(version2, this._alternatives);
        }
        toString() {
          return formatDisjunction(this._alternatives);
        }
      };
      logicalOrRegExp = /\|\|/g;
      whitespaceRegExp = /\s+/g;
      partialRegExp = /^([xX*0]|[1-9]\d*)(?:\.([xX*0]|[1-9]\d*)(?:\.([xX*0]|[1-9]\d*)(?:-([a-z0-9-.]+))?(?:\+([a-z0-9-.]+))?)?)?$/i;
      hyphenRegExp = /^\s*([a-z0-9-+.*]+)\s+-\s+([a-z0-9-+.*]+)\s*$/i;
      rangeRegExp = /^(~|\^|<|<=|>|>=|=)?\s*([a-z0-9-+.*]+)$/i;
    }
  });

  // src/compiler/performanceCore.ts
  function hasRequiredAPI(performance2, PerformanceObserver2) {
    return typeof performance2 === "object" && typeof performance2.timeOrigin === "number" && typeof performance2.mark === "function" && typeof performance2.measure === "function" && typeof performance2.now === "function" && typeof performance2.clearMarks === "function" && typeof performance2.clearMeasures === "function" && typeof PerformanceObserver2 === "function";
  }
  function tryGetWebPerformanceHooks() {
    if (typeof performance === "object" && typeof PerformanceObserver === "function" && hasRequiredAPI(performance, PerformanceObserver)) {
      return {
        // For now we always write native performance events when running in the browser. We may
        // make this conditional in the future if we find that native web performance hooks
        // in the browser also slow down compilation.
        shouldWriteNativeEvents: true,
        performance,
        PerformanceObserver
      };
    }
  }
  function tryGetNodePerformanceHooks() {
    if (isNodeLikeSystem()) {
      try {
        let performance2;
        const { performance: nodePerformance, PerformanceObserver: PerformanceObserver2 } =   require("perf_hooks");
        if (hasRequiredAPI(nodePerformance, PerformanceObserver2)) {
          performance2 = nodePerformance;
          const version2 = new Version(process.versions.node);
          const range = new VersionRange("<12.16.3 || 13 <13.13");
          if (range.test(version2)) {
            performance2 = {
              get timeOrigin() {
                return nodePerformance.timeOrigin;
              },
              now() {
                return nodePerformance.now();
              },
              mark(name) {
                return nodePerformance.mark(name);
              },
              measure(name, start = "nodeStart", end) {
                if (end === void 0) {
                  end = "__performance.measure-fix__";
                  nodePerformance.mark(end);
                }
                nodePerformance.measure(name, start, end);
                if (end === "__performance.measure-fix__") {
                  nodePerformance.clearMarks("__performance.measure-fix__");
                }
              },
              clearMarks(name) {
                return nodePerformance.clearMarks(name);
              },
              clearMeasures(name) {
                return nodePerformance.clearMeasures(name);
              }
            };
          }
          return {
            // By default, only write native events when generating a cpu profile or using the v8 profiler.
            shouldWriteNativeEvents: false,
            performance: performance2,
            PerformanceObserver: PerformanceObserver2
          };
        }
      } catch (e) {
      }
    }
  }
  function tryGetNativePerformanceHooks() {
    return nativePerformanceHooks;
  }
  var nativePerformanceHooks, nativePerformance, timestamp;
  var init_performanceCore = __esm({
    "src/compiler/performanceCore.ts"() {
      "use strict";
      init_ts2();
      nativePerformanceHooks = tryGetWebPerformanceHooks() || tryGetNodePerformanceHooks();
      nativePerformance = nativePerformanceHooks == null ? void 0 : nativePerformanceHooks.performance;
      timestamp = nativePerformance ? () => nativePerformance.now() : Date.now ? Date.now : () => +/* @__PURE__ */ new Date();
    }
  });

  // src/compiler/perfLogger.ts
  var nullLogger, etwModule, _a, perfLogger;
  var init_perfLogger = __esm({
    "src/compiler/perfLogger.ts"() {
      "use strict";
      init_ts2();
      nullLogger = {
        logEvent: noop,
        logErrEvent: noop,
        logPerfEvent: noop,
        logInfoEvent: noop,
        logStartCommand: noop,
        logStopCommand: noop,
        logStartUpdateProgram: noop,
        logStopUpdateProgram: noop,
        logStartUpdateGraph: noop,
        logStopUpdateGraph: noop,
        logStartResolveModule: noop,
        logStopResolveModule: noop,
        logStartParseSourceFile: noop,
        logStopParseSourceFile: noop,
        logStartReadFile: noop,
        logStopReadFile: noop,
        logStartBindFile: noop,
        logStopBindFile: noop,
        logStartScheduledOperation: noop,
        logStopScheduledOperation: noop
      };
      try {
        const etwModulePath = (_a = process.env.TS_ETW_MODULE_PATH) != null ? _a : "./node_modules/@microsoft/typescript-etw";
        etwModule =   require(etwModulePath);
      } catch (e) {
        etwModule = void 0;
      }
      perfLogger = (etwModule == null ? void 0 : etwModule.logEvent) ? etwModule : nullLogger;
    }
  });

  // src/compiler/performance.ts
  function createTimerIf(condition, measureName, startMarkName, endMarkName) {
    return condition ? createTimer(measureName, startMarkName, endMarkName) : nullTimer;
  }
  function createTimer(measureName, startMarkName, endMarkName) {
    let enterCount = 0;
    return {
      enter,
      exit
    };
    function enter() {
      if (++enterCount === 1) {
        mark(startMarkName);
      }
    }
    function exit() {
      if (--enterCount === 0) {
        mark(endMarkName);
        measure(measureName, startMarkName, endMarkName);
      } else if (enterCount < 0) {
        Debug.fail("enter/exit count does not match.");
      }
    }
  }
  function mark(markName) {
    var _a2;
    if (enabled) {
      const count = (_a2 = counts.get(markName)) != null ? _a2 : 0;
      counts.set(markName, count + 1);
      marks.set(markName, timestamp());
      performanceImpl == null ? void 0 : performanceImpl.mark(markName);
      if (typeof onProfilerEvent === "function") {
        onProfilerEvent(markName);
      }
    }
  }
  function measure(measureName, startMarkName, endMarkName) {
    var _a2, _b;
    if (enabled) {
      const end = (_a2 = endMarkName !== void 0 ? marks.get(endMarkName) : void 0) != null ? _a2 : timestamp();
      const start = (_b = startMarkName !== void 0 ? marks.get(startMarkName) : void 0) != null ? _b : timeorigin;
      const previousDuration = durations.get(measureName) || 0;
      durations.set(measureName, previousDuration + (end - start));
      performanceImpl == null ? void 0 : performanceImpl.measure(measureName, startMarkName, endMarkName);
    }
  }
  function getCount(markName) {
    return counts.get(markName) || 0;
  }
  function getDuration(measureName) {
    return durations.get(measureName) || 0;
  }
  function forEachMeasure(cb) {
    durations.forEach((duration, measureName) => cb(measureName, duration));
  }
  function forEachMark(cb) {
    marks.forEach((_time, markName) => cb(markName));
  }
  function clearMeasures(name) {
    if (name !== void 0)
      durations.delete(name);
    else
      durations.clear();
    performanceImpl == null ? void 0 : performanceImpl.clearMeasures(name);
  }
  function clearMarks(name) {
    if (name !== void 0) {
      counts.delete(name);
      marks.delete(name);
    } else {
      counts.clear();
      marks.clear();
    }
    performanceImpl == null ? void 0 : performanceImpl.clearMarks(name);
  }
  function isEnabled() {
    return enabled;
  }
  function enable(system = sys) {
    var _a2;
    if (!enabled) {
      enabled = true;
      perfHooks || (perfHooks = tryGetNativePerformanceHooks());
      if (perfHooks) {
        timeorigin = perfHooks.performance.timeOrigin;
        if (perfHooks.shouldWriteNativeEvents || ((_a2 = system == null ? void 0 : system.cpuProfilingEnabled) == null ? void 0 : _a2.call(system)) || (system == null ? void 0 : system.debugMode)) {
          performanceImpl = perfHooks.performance;
        }
      }
    }
    return true;
  }
  function disable() {
    if (enabled) {
      marks.clear();
      counts.clear();
      durations.clear();
      performanceImpl = void 0;
      enabled = false;
    }
  }
  var perfHooks, performanceImpl, nullTimer, enabled, timeorigin, marks, counts, durations;
  var init_performance = __esm({
    "src/compiler/performance.ts"() {
      "use strict";
      init_ts2();
      nullTimer = { enter: noop, exit: noop };
      enabled = false;
      timeorigin = timestamp();
      marks = /* @__PURE__ */ new Map();
      counts = /* @__PURE__ */ new Map();
      durations = /* @__PURE__ */ new Map();
    }
  });

  // src/compiler/_namespaces/ts.performance.ts
  var ts_performance_exports = {};
  __export(ts_performance_exports, {
    clearMarks: () => clearMarks,
    clearMeasures: () => clearMeasures,
    createTimer: () => createTimer,
    createTimerIf: () => createTimerIf,
    disable: () => disable,
    enable: () => enable,
    forEachMark: () => forEachMark,
    forEachMeasure: () => forEachMeasure,
    getCount: () => getCount,
    getDuration: () => getDuration,
    isEnabled: () => isEnabled,
    mark: () => mark,
    measure: () => measure,
    nullTimer: () => nullTimer
  });
  var init_ts_performance = __esm({
    "src/compiler/_namespaces/ts.performance.ts"() {
      "use strict";
      init_performance();
    }
  });

  // src/compiler/tracing.ts
  var tracing, tracingEnabled, startTracing, dumpTracingLegend;
  var init_tracing = __esm({
    "src/compiler/tracing.ts"() {
      "use strict";
      init_ts2();
      init_ts_performance();
      ((tracingEnabled2) => {
        let fs;
        let traceCount = 0;
        let traceFd = 0;
        let mode;
        const typeCatalog = [];
        let legendPath;
        const legend = [];
        function startTracing2(tracingMode, traceDir, configFilePath) {
          Debug.assert(!tracing, "Tracing already started");
          if (fs === void 0) {
            try {
              fs =   require("fs");
            } catch (e) {
              throw new Error(`tracing requires having fs
(original error: ${e.message || e})`);
            }
          }
          mode = tracingMode;
          typeCatalog.length = 0;
          if (legendPath === void 0) {
            legendPath = combinePaths(traceDir, "legend.json");
          }
          if (!fs.existsSync(traceDir)) {
            fs.mkdirSync(traceDir, { recursive: true });
          }
          const countPart = mode === "build" ? `.${process.pid}-${++traceCount}` : mode === "server" ? `.${process.pid}` : ``;
          const tracePath = combinePaths(traceDir, `trace${countPart}.json`);
          const typesPath = combinePaths(traceDir, `types${countPart}.json`);
          legend.push({
            configFilePath,
            tracePath,
            typesPath
          });
          traceFd = fs.openSync(tracePath, "w");
          tracing = tracingEnabled2;
          const meta = { cat: "__metadata", ph: "M", ts: 1e3 * timestamp(), pid: 1, tid: 1 };
          fs.writeSync(
            traceFd,
            "[\n" + [
              { name: "process_name", args: { name: "tsc" }, ...meta },
              { name: "thread_name", args: { name: "Main" }, ...meta },
              { name: "TracingStartedInBrowser", ...meta, cat: "disabled-by-default-devtools.timeline" }
            ].map((v) => JSON.stringify(v)).join(",\n")
          );
        }
        tracingEnabled2.startTracing = startTracing2;
        function stopTracing() {
          Debug.assert(tracing, "Tracing is not in progress");
          Debug.assert(!!typeCatalog.length === (mode !== "server"));
          fs.writeSync(traceFd, `
]
`);
          fs.closeSync(traceFd);
          tracing = void 0;
          if (typeCatalog.length) {
            dumpTypes(typeCatalog);
          } else {
            legend[legend.length - 1].typesPath = void 0;
          }
        }
        tracingEnabled2.stopTracing = stopTracing;
        function recordType(type) {
          if (mode !== "server") {
            typeCatalog.push(type);
          }
        }
        tracingEnabled2.recordType = recordType;
        let Phase;
        ((Phase2) => {
          Phase2["Parse"] = "parse";
          Phase2["Program"] = "program";
          Phase2["Bind"] = "bind";
          Phase2["Check"] = "check";
          Phase2["CheckTypes"] = "checkTypes";
          Phase2["Emit"] = "emit";
          Phase2["Session"] = "session";
        })(Phase = tracingEnabled2.Phase || (tracingEnabled2.Phase = {}));
        function instant(phase, name, args) {
          writeEvent("I", phase, name, args, `"s":"g"`);
        }
        tracingEnabled2.instant = instant;
        const eventStack = [];
        function push(phase, name, args, separateBeginAndEnd = false) {
          if (separateBeginAndEnd) {
            writeEvent("B", phase, name, args);
          }
          eventStack.push({ phase, name, args, time: 1e3 * timestamp(), separateBeginAndEnd });
        }
        tracingEnabled2.push = push;
        function pop(results) {
          Debug.assert(eventStack.length > 0);
          writeStackEvent(eventStack.length - 1, 1e3 * timestamp(), results);
          eventStack.length--;
        }
        tracingEnabled2.pop = pop;
        function popAll() {
          const endTime = 1e3 * timestamp();
          for (let i = eventStack.length - 1; i >= 0; i--) {
            writeStackEvent(i, endTime);
          }
          eventStack.length = 0;
        }
        tracingEnabled2.popAll = popAll;
        const sampleInterval = 1e3 * 10;
        function writeStackEvent(index, endTime, results) {
          const { phase, name, args, time, separateBeginAndEnd } = eventStack[index];
          if (separateBeginAndEnd) {
            Debug.assert(!results, "`results` are not supported for events with `separateBeginAndEnd`");
            writeEvent(
              "E",
              phase,
              name,
              args,
              /*extras*/
              void 0,
              endTime
            );
          } else if (sampleInterval - time % sampleInterval <= endTime - time) {
            writeEvent("X", phase, name, { ...args, results }, `"dur":${endTime - time}`, time);
          }
        }
        function writeEvent(eventType, phase, name, args, extras, time = 1e3 * timestamp()) {
          if (mode === "server" && phase === "checkTypes" /* CheckTypes */)
            return;
          mark("beginTracing");
          fs.writeSync(traceFd, `,
{"pid":1,"tid":1,"ph":"${eventType}","cat":"${phase}","ts":${time},"name":"${name}"`);
          if (extras)
            fs.writeSync(traceFd, `,${extras}`);
          if (args)
            fs.writeSync(traceFd, `,"args":${JSON.stringify(args)}`);
          fs.writeSync(traceFd, `}`);
          mark("endTracing");
          measure("Tracing", "beginTracing", "endTracing");
        }
        function getLocation(node) {
          const file = getSourceFileOfNode(node);
          return !file ? void 0 : {
            path: file.path,
            start: indexFromOne(getLineAndCharacterOfPosition(file, node.pos)),
            end: indexFromOne(getLineAndCharacterOfPosition(file, node.end))
          };
          function indexFromOne(lc) {
            return {
              line: lc.line + 1,
              character: lc.character + 1
            };
          }
        }
        function dumpTypes(types) {
          var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v;
          mark("beginDumpTypes");
          const typesPath = legend[legend.length - 1].typesPath;
          const typesFd = fs.openSync(typesPath, "w");
          const recursionIdentityMap = /* @__PURE__ */ new Map();
          fs.writeSync(typesFd, "[");
          const numTypes = types.length;
          for (let i = 0; i < numTypes; i++) {
            const type = types[i];
            const objectFlags = type.objectFlags;
            const symbol = (_a2 = type.aliasSymbol) != null ? _a2 : type.symbol;
            let display;
            if (objectFlags & 16 /* Anonymous */ | type.flags & 2944 /* Literal */) {
              try {
                display = (_b = type.checker) == null ? void 0 : _b.typeToString(type);
              } catch (e) {
                display = void 0;
              }
            }
            let indexedAccessProperties = {};
            if (type.flags & 8388608 /* IndexedAccess */) {
              const indexedAccessType = type;
              indexedAccessProperties = {
                indexedAccessObjectType: (_c = indexedAccessType.objectType) == null ? void 0 : _c.id,
                indexedAccessIndexType: (_d = indexedAccessType.indexType) == null ? void 0 : _d.id
              };
            }
            let referenceProperties = {};
            if (objectFlags & 4 /* Reference */) {
              const referenceType = type;
              referenceProperties = {
                instantiatedType: (_e = referenceType.target) == null ? void 0 : _e.id,
                typeArguments: (_f = referenceType.resolvedTypeArguments) == null ? void 0 : _f.map((t) => t.id),
                referenceLocation: getLocation(referenceType.node)
              };
            }
            let conditionalProperties = {};
            if (type.flags & 16777216 /* Conditional */) {
              const conditionalType = type;
              conditionalProperties = {
                conditionalCheckType: (_g = conditionalType.checkType) == null ? void 0 : _g.id,
                conditionalExtendsType: (_h = conditionalType.extendsType) == null ? void 0 : _h.id,
                conditionalTrueType: (_j = (_i = conditionalType.resolvedTrueType) == null ? void 0 : _i.id) != null ? _j : -1,
                conditionalFalseType: (_l = (_k = conditionalType.resolvedFalseType) == null ? void 0 : _k.id) != null ? _l : -1
              };
            }
            let substitutionProperties = {};
            if (type.flags & 33554432 /* Substitution */) {
              const substitutionType = type;
              substitutionProperties = {
                substitutionBaseType: (_m = substitutionType.baseType) == null ? void 0 : _m.id,
                constraintType: (_n = substitutionType.constraint) == null ? void 0 : _n.id
              };
            }
            let reverseMappedProperties = {};
            if (objectFlags & 1024 /* ReverseMapped */) {
              const reverseMappedType = type;
              reverseMappedProperties = {
                reverseMappedSourceType: (_o = reverseMappedType.source) == null ? void 0 : _o.id,
                reverseMappedMappedType: (_p = reverseMappedType.mappedType) == null ? void 0 : _p.id,
                reverseMappedConstraintType: (_q = reverseMappedType.constraintType) == null ? void 0 : _q.id
              };
            }
            let evolvingArrayProperties = {};
            if (objectFlags & 256 /* EvolvingArray */) {
              const evolvingArrayType = type;
              evolvingArrayProperties = {
                evolvingArrayElementType: evolvingArrayType.elementType.id,
                evolvingArrayFinalType: (_r = evolvingArrayType.finalArrayType) == null ? void 0 : _r.id
              };
            }
            let recursionToken;
            const recursionIdentity = type.checker.getRecursionIdentity(type);
            if (recursionIdentity) {
              recursionToken = recursionIdentityMap.get(recursionIdentity);
              if (!recursionToken) {
                recursionToken = recursionIdentityMap.size;
                recursionIdentityMap.set(recursionIdentity, recursionToken);
              }
            }
            const descriptor = {
              id: type.id,
              intrinsicName: type.intrinsicName,
              symbolName: (symbol == null ? void 0 : symbol.escapedName) && unescapeLeadingUnderscores(symbol.escapedName),
              recursionId: recursionToken,
              isTuple: objectFlags & 8 /* Tuple */ ? true : void 0,
              unionTypes: type.flags & 1048576 /* Union */ ? (_s = type.types) == null ? void 0 : _s.map((t) => t.id) : void 0,
              intersectionTypes: type.flags & 2097152 /* Intersection */ ? type.types.map((t) => t.id) : void 0,
              aliasTypeArguments: (_t = type.aliasTypeArguments) == null ? void 0 : _t.map((t) => t.id),
              keyofType: type.flags & 4194304 /* Index */ ? (_u = type.type) == null ? void 0 : _u.id : void 0,
              ...indexedAccessProperties,
              ...referenceProperties,
              ...conditionalProperties,
              ...substitutionProperties,
              ...reverseMappedProperties,
              ...evolvingArrayProperties,
              destructuringPattern: getLocation(type.pattern),
              firstDeclaration: getLocation((_v = symbol == null ? void 0 : symbol.declarations) == null ? void 0 : _v[0]),
              flags: Debug.formatTypeFlags(type.flags).split("|"),
              display
            };
            fs.writeSync(typesFd, JSON.stringify(descriptor));
            if (i < numTypes - 1) {
              fs.writeSync(typesFd, ",\n");
            }
          }
          fs.writeSync(typesFd, "]\n");
          fs.closeSync(typesFd);
          mark("endDumpTypes");
          measure("Dump types", "beginDumpTypes", "endDumpTypes");
        }
        function dumpLegend() {
          if (!legendPath) {
            return;
          }
          fs.writeFileSync(legendPath, JSON.stringify(legend));
        }
        tracingEnabled2.dumpLegend = dumpLegend;
      })(tracingEnabled || (tracingEnabled = {}));
      startTracing = tracingEnabled.startTracing;
      dumpTracingLegend = tracingEnabled.dumpLegend;
    }
  });

  // src/compiler/types.ts
  function diagnosticCategoryName(d, lowerCase = true) {
    const name = DiagnosticCategory[d.category];
    return lowerCase ? name.toLowerCase() : name;
  }
  var SyntaxKind, NodeFlags, ModifierFlags, JsxFlags, RelationComparisonResult, GeneratedIdentifierFlags, TokenFlags, FlowFlags, CommentDirectiveType, OperationCanceledException, FileIncludeKind, FilePreprocessingDiagnosticsKind, EmitOnly, StructureIsReused, ExitStatus, MemberOverrideStatus, UnionReduction, ContextFlags, NodeBuilderFlags, TypeFormatFlags, SymbolFormatFlags, SymbolAccessibility, SyntheticSymbolKind, TypePredicateKind, TypeReferenceSerializationKind, SymbolFlags, EnumKind, CheckFlags, InternalSymbolName, NodeCheckFlags, TypeFlags, ObjectFlags, VarianceFlags, ElementFlags, AccessFlags, JsxReferenceKind, SignatureKind, SignatureFlags, IndexKind, TypeMapKind, InferencePriority, InferenceFlags, Ternary, AssignmentDeclarationKind, DiagnosticCategory, ModuleResolutionKind, ModuleDetectionKind, WatchFileKind, WatchDirectoryKind, PollingWatchKind, ModuleKind, JsxEmit, ImportsNotUsedAsValues, NewLineKind, ScriptKind, ScriptTarget, LanguageVariant, WatchDirectoryFlags, CharacterCodes, Extension, TransformFlags, SnippetKind, EmitFlags, InternalEmitFlags, ExternalEmitHelpers, EmitHint, OuterExpressionKinds, LexicalEnvironmentFlags, BundleFileSectionKind, ListFormat, PragmaKindFlags, commentPragmas;
  var init_types = __esm({
    "src/compiler/types.ts"() {
      "use strict";
      SyntaxKind = /* @__PURE__ */ ((SyntaxKind5) => {
        SyntaxKind5[SyntaxKind5["Unknown"] = 0] = "Unknown";
        SyntaxKind5[SyntaxKind5["EndOfFileToken"] = 1] = "EndOfFileToken";
        SyntaxKind5[SyntaxKind5["SingleLineCommentTrivia"] = 2] = "SingleLineCommentTrivia";
        SyntaxKind5[SyntaxKind5["MultiLineCommentTrivia"] = 3] = "MultiLineCommentTrivia";
        SyntaxKind5[SyntaxKind5["NewLineTrivia"] = 4] = "NewLineTrivia";
        SyntaxKind5[SyntaxKind5["WhitespaceTrivia"] = 5] = "WhitespaceTrivia";
        SyntaxKind5[SyntaxKind5["ShebangTrivia"] = 6] = "ShebangTrivia";
        SyntaxKind5[SyntaxKind5["ConflictMarkerTrivia"] = 7] = "ConflictMarkerTrivia";
        SyntaxKind5[SyntaxKind5["NumericLiteral"] = 8] = "NumericLiteral";
        SyntaxKind5[SyntaxKind5["BigIntLiteral"] = 9] = "BigIntLiteral";
        SyntaxKind5[SyntaxKind5["StringLiteral"] = 10] = "StringLiteral";
        SyntaxKind5[SyntaxKind5["JsxText"] = 11] = "JsxText";
        SyntaxKind5[SyntaxKind5["JsxTextAllWhiteSpaces"] = 12] = "JsxTextAllWhiteSpaces";
        SyntaxKind5[SyntaxKind5["RegularExpressionLiteral"] = 13] = "RegularExpressionLiteral";
        SyntaxKind5[SyntaxKind5["NoSubstitutionTemplateLiteral"] = 14] = "NoSubstitutionTemplateLiteral";
        SyntaxKind5[SyntaxKind5["TemplateHead"] = 15] = "TemplateHead";
        SyntaxKind5[SyntaxKind5["TemplateMiddle"] = 16] = "TemplateMiddle";
        SyntaxKind5[SyntaxKind5["TemplateTail"] = 17] = "TemplateTail";
        SyntaxKind5[SyntaxKind5["OpenBraceToken"] = 18] = "OpenBraceToken";
        SyntaxKind5[SyntaxKind5["CloseBraceToken"] = 19] = "CloseBraceToken";
        SyntaxKind5[SyntaxKind5["OpenParenToken"] = 20] = "OpenParenToken";
        SyntaxKind5[SyntaxKind5["CloseParenToken"] = 21] = "CloseParenToken";
        SyntaxKind5[SyntaxKind5["OpenBracketToken"] = 22] = "OpenBracketToken";
        SyntaxKind5[SyntaxKind5["CloseBracketToken"] = 23] = "CloseBracketToken";
        SyntaxKind5[SyntaxKind5["DotToken"] = 24] = "DotToken";
        SyntaxKind5[SyntaxKind5["DotDotDotToken"] = 25] = "DotDotDotToken";
        SyntaxKind5[SyntaxKind5["SemicolonToken"] = 26] = "SemicolonToken";
        SyntaxKind5[SyntaxKind5["CommaToken"] = 27] = "CommaToken";
        SyntaxKind5[SyntaxKind5["QuestionDotToken"] = 28] = "QuestionDotToken";
        SyntaxKind5[SyntaxKind5["LessThanToken"] = 29] = "LessThanToken";
        SyntaxKind5[SyntaxKind5["LessThanSlashToken"] = 30] = "LessThanSlashToken";
        SyntaxKind5[SyntaxKind5["GreaterThanToken"] = 31] = "GreaterThanToken";
        SyntaxKind5[SyntaxKind5["LessThanEqualsToken"] = 32] = "LessThanEqualsToken";
        SyntaxKind5[SyntaxKind5["GreaterThanEqualsToken"] = 33] = "GreaterThanEqualsToken";
        SyntaxKind5[SyntaxKind5["EqualsEqualsToken"] = 34] = "EqualsEqualsToken";
        SyntaxKind5[SyntaxKind5["ExclamationEqualsToken"] = 35] = "ExclamationEqualsToken";
        SyntaxKind5[SyntaxKind5["EqualsEqualsEqualsToken"] = 36] = "EqualsEqualsEqualsToken";
        SyntaxKind5[SyntaxKind5["ExclamationEqualsEqualsToken"] = 37] = "ExclamationEqualsEqualsToken";
        SyntaxKind5[SyntaxKind5["EqualsGreaterThanToken"] = 38] = "EqualsGreaterThanToken";
        SyntaxKind5[SyntaxKind5["PlusToken"] = 39] = "PlusToken";
        SyntaxKind5[SyntaxKind5["MinusToken"] = 40] = "MinusToken";
        SyntaxKind5[SyntaxKind5["AsteriskToken"] = 41] = "AsteriskToken";
        SyntaxKind5[SyntaxKind5["AsteriskAsteriskToken"] = 42] = "AsteriskAsteriskToken";
        SyntaxKind5[SyntaxKind5["SlashToken"] = 43] = "SlashToken";
        SyntaxKind5[SyntaxKind5["PercentToken"] = 44] = "PercentToken";
        SyntaxKind5[SyntaxKind5["PlusPlusToken"] = 45] = "PlusPlusToken";
        SyntaxKind5[SyntaxKind5["MinusMinusToken"] = 46] = "MinusMinusToken";
        SyntaxKind5[SyntaxKind5["LessThanLessThanToken"] = 47] = "LessThanLessThanToken";
        SyntaxKind5[SyntaxKind5["GreaterThanGreaterThanToken"] = 48] = "GreaterThanGreaterThanToken";
        SyntaxKind5[SyntaxKind5["GreaterThanGreaterThanGreaterThanToken"] = 49] = "GreaterThanGreaterThanGreaterThanToken";
        SyntaxKind5[SyntaxKind5["AmpersandToken"] = 50] = "AmpersandToken";
        SyntaxKind5[SyntaxKind5["BarToken"] = 51] = "BarToken";
        SyntaxKind5[SyntaxKind5["CaretToken"] = 52] = "CaretToken";
        SyntaxKind5[SyntaxKind5["ExclamationToken"] = 53] = "ExclamationToken";
        SyntaxKind5[SyntaxKind5["TildeToken"] = 54] = "TildeToken";
        SyntaxKind5[SyntaxKind5["AmpersandAmpersandToken"] = 55] = "AmpersandAmpersandToken";
        SyntaxKind5[SyntaxKind5["BarBarToken"] = 56] = "BarBarToken";
        SyntaxKind5[SyntaxKind5["QuestionToken"] = 57] = "QuestionToken";
        SyntaxKind5[SyntaxKind5["ColonToken"] = 58] = "ColonToken";
        SyntaxKind5[SyntaxKind5["AtToken"] = 59] = "AtToken";
        SyntaxKind5[SyntaxKind5["QuestionQuestionToken"] = 60] = "QuestionQuestionToken";
        SyntaxKind5[SyntaxKind5["BacktickToken"] = 61] = "BacktickToken";
        SyntaxKind5[SyntaxKind5["HashToken"] = 62] = "HashToken";
        SyntaxKind5[SyntaxKind5["EqualsToken"] = 63] = "EqualsToken";
        SyntaxKind5[SyntaxKind5["PlusEqualsToken"] = 64] = "PlusEqualsToken";
        SyntaxKind5[SyntaxKind5["MinusEqualsToken"] = 65] = "MinusEqualsToken";
        SyntaxKind5[SyntaxKind5["AsteriskEqualsToken"] = 66] = "AsteriskEqualsToken";
        SyntaxKind5[SyntaxKind5["AsteriskAsteriskEqualsToken"] = 67] = "AsteriskAsteriskEqualsToken";
        SyntaxKind5[SyntaxKind5["SlashEqualsToken"] = 68] = "SlashEqualsToken";
        SyntaxKind5[SyntaxKind5["PercentEqualsToken"] = 69] = "PercentEqualsToken";
        SyntaxKind5[SyntaxKind5["LessThanLessThanEqualsToken"] = 70] = "LessThanLessThanEqualsToken";
        SyntaxKind5[SyntaxKind5["GreaterThanGreaterThanEqualsToken"] = 71] = "GreaterThanGreaterThanEqualsToken";
        SyntaxKind5[SyntaxKind5["GreaterThanGreaterThanGreaterThanEqualsToken"] = 72] = "GreaterThanGreaterThanGreaterThanEqualsToken";
        SyntaxKind5[SyntaxKind5["AmpersandEqualsToken"] = 73] = "AmpersandEqualsToken";
        SyntaxKind5[SyntaxKind5["BarEqualsToken"] = 74] = "BarEqualsToken";
        SyntaxKind5[SyntaxKind5["BarBarEqualsToken"] = 75] = "BarBarEqualsToken";
        SyntaxKind5[SyntaxKind5["AmpersandAmpersandEqualsToken"] = 76] = "AmpersandAmpersandEqualsToken";
        SyntaxKind5[SyntaxKind5["QuestionQuestionEqualsToken"] = 77] = "QuestionQuestionEqualsToken";
        SyntaxKind5[SyntaxKind5["CaretEqualsToken"] = 78] = "CaretEqualsToken";
        SyntaxKind5[SyntaxKind5["Identifier"] = 79] = "Identifier";
        SyntaxKind5[SyntaxKind5["PrivateIdentifier"] = 80] = "PrivateIdentifier";
        SyntaxKind5[SyntaxKind5["BreakKeyword"] = 81] = "BreakKeyword";
        SyntaxKind5[SyntaxKind5["CaseKeyword"] = 82] = "CaseKeyword";
        SyntaxKind5[SyntaxKind5["CatchKeyword"] = 83] = "CatchKeyword";
        SyntaxKind5[SyntaxKind5["ClassKeyword"] = 84] = "ClassKeyword";
        SyntaxKind5[SyntaxKind5["ConstKeyword"] = 85] = "ConstKeyword";
        SyntaxKind5[SyntaxKind5["ContinueKeyword"] = 86] = "ContinueKeyword";
        SyntaxKind5[SyntaxKind5["DebuggerKeyword"] = 87] = "DebuggerKeyword";
        SyntaxKind5[SyntaxKind5["DefaultKeyword"] = 88] = "DefaultKeyword";
        SyntaxKind5[SyntaxKind5["DeleteKeyword"] = 89] = "DeleteKeyword";
        SyntaxKind5[SyntaxKind5["DoKeyword"] = 90] = "DoKeyword";
        SyntaxKind5[SyntaxKind5["ElseKeyword"] = 91] = "ElseKeyword";
        SyntaxKind5[SyntaxKind5["EnumKeyword"] = 92] = "EnumKeyword";
        SyntaxKind5[SyntaxKind5["ExportKeyword"] = 93] = "ExportKeyword";
        SyntaxKind5[SyntaxKind5["ExtendsKeyword"] = 94] = "ExtendsKeyword";
        SyntaxKind5[SyntaxKind5["FalseKeyword"] = 95] = "FalseKeyword";
        SyntaxKind5[SyntaxKind5["FinallyKeyword"] = 96] = "FinallyKeyword";
        SyntaxKind5[SyntaxKind5["ForKeyword"] = 97] = "ForKeyword";
        SyntaxKind5[SyntaxKind5["FunctionKeyword"] = 98] = "FunctionKeyword";
        SyntaxKind5[SyntaxKind5["IfKeyword"] = 99] = "IfKeyword";
        SyntaxKind5[SyntaxKind5["ImportKeyword"] = 100] = "ImportKeyword";
        SyntaxKind5[SyntaxKind5["InKeyword"] = 101] = "InKeyword";
        SyntaxKind5[SyntaxKind5["InstanceOfKeyword"] = 102] = "InstanceOfKeyword";
        SyntaxKind5[SyntaxKind5["NewKeyword"] = 103] = "NewKeyword";
        SyntaxKind5[SyntaxKind5["NullKeyword"] = 104] = "NullKeyword";
        SyntaxKind5[SyntaxKind5["ReturnKeyword"] = 105] = "ReturnKeyword";
        SyntaxKind5[SyntaxKind5["SuperKeyword"] = 106] = "SuperKeyword";
        SyntaxKind5[SyntaxKind5["SwitchKeyword"] = 107] = "SwitchKeyword";
        SyntaxKind5[SyntaxKind5["ThisKeyword"] = 108] = "ThisKeyword";
        SyntaxKind5[SyntaxKind5["ThrowKeyword"] = 109] = "ThrowKeyword";
        SyntaxKind5[SyntaxKind5["TrueKeyword"] = 110] = "TrueKeyword";
        SyntaxKind5[SyntaxKind5["TryKeyword"] = 111] = "TryKeyword";
        SyntaxKind5[SyntaxKind5["TypeOfKeyword"] = 112] = "TypeOfKeyword";
        SyntaxKind5[SyntaxKind5["VarKeyword"] = 113] = "VarKeyword";
        SyntaxKind5[SyntaxKind5["VoidKeyword"] = 114] = "VoidKeyword";
        SyntaxKind5[SyntaxKind5["WhileKeyword"] = 115] = "WhileKeyword";
        SyntaxKind5[SyntaxKind5["WithKeyword"] = 116] = "WithKeyword";
        SyntaxKind5[SyntaxKind5["ImplementsKeyword"] = 117] = "ImplementsKeyword";
        SyntaxKind5[SyntaxKind5["InterfaceKeyword"] = 118] = "InterfaceKeyword";
        SyntaxKind5[SyntaxKind5["LetKeyword"] = 119] = "LetKeyword";
        SyntaxKind5[SyntaxKind5["PackageKeyword"] = 120] = "PackageKeyword";
        SyntaxKind5[SyntaxKind5["PrivateKeyword"] = 121] = "PrivateKeyword";
        SyntaxKind5[SyntaxKind5["ProtectedKeyword"] = 122] = "ProtectedKeyword";
        SyntaxKind5[SyntaxKind5["PublicKeyword"] = 123] = "PublicKeyword";
        SyntaxKind5[SyntaxKind5["StaticKeyword"] = 124] = "StaticKeyword";
        SyntaxKind5[SyntaxKind5["YieldKeyword"] = 125] = "YieldKeyword";
        SyntaxKind5[SyntaxKind5["AbstractKeyword"] = 126] = "AbstractKeyword";
        SyntaxKind5[SyntaxKind5["AccessorKeyword"] = 127] = "AccessorKeyword";
        SyntaxKind5[SyntaxKind5["AsKeyword"] = 128] = "AsKeyword";
        SyntaxKind5[SyntaxKind5["AssertsKeyword"] = 129] = "AssertsKeyword";
        SyntaxKind5[SyntaxKind5["AssertKeyword"] = 130] = "AssertKeyword";
        SyntaxKind5[SyntaxKind5["AnyKeyword"] = 131] = "AnyKeyword";
        SyntaxKind5[SyntaxKind5["AsyncKeyword"] = 132] = "AsyncKeyword";
        SyntaxKind5[SyntaxKind5["AwaitKeyword"] = 133] = "AwaitKeyword";
        SyntaxKind5[SyntaxKind5["BooleanKeyword"] = 134] = "BooleanKeyword";
        SyntaxKind5[SyntaxKind5["ConstructorKeyword"] = 135] = "ConstructorKeyword";
        SyntaxKind5[SyntaxKind5["DeclareKeyword"] = 136] = "DeclareKeyword";
        SyntaxKind5[SyntaxKind5["GetKeyword"] = 137] = "GetKeyword";
        SyntaxKind5[SyntaxKind5["InferKeyword"] = 138] = "InferKeyword";
        SyntaxKind5[SyntaxKind5["IntrinsicKeyword"] = 139] = "IntrinsicKeyword";
        SyntaxKind5[SyntaxKind5["IsKeyword"] = 140] = "IsKeyword";
        SyntaxKind5[SyntaxKind5["KeyOfKeyword"] = 141] = "KeyOfKeyword";
        SyntaxKind5[SyntaxKind5["ModuleKeyword"] = 142] = "ModuleKeyword";
        SyntaxKind5[SyntaxKind5["NamespaceKeyword"] = 143] = "NamespaceKeyword";
        SyntaxKind5[SyntaxKind5["NeverKeyword"] = 144] = "NeverKeyword";
        SyntaxKind5[SyntaxKind5["OutKeyword"] = 145] = "OutKeyword";
        SyntaxKind5[SyntaxKind5["ReadonlyKeyword"] = 146] = "ReadonlyKeyword";
        SyntaxKind5[SyntaxKind5["RequireKeyword"] = 147] = "RequireKeyword";
        SyntaxKind5[SyntaxKind5["NumberKeyword"] = 148] = "NumberKeyword";
        SyntaxKind5[SyntaxKind5["ObjectKeyword"] = 149] = "ObjectKeyword";
        SyntaxKind5[SyntaxKind5["SatisfiesKeyword"] = 150] = "SatisfiesKeyword";
        SyntaxKind5[SyntaxKind5["SetKeyword"] = 151] = "SetKeyword";
        SyntaxKind5[SyntaxKind5["StringKeyword"] = 152] = "StringKeyword";
        SyntaxKind5[SyntaxKind5["SymbolKeyword"] = 153] = "SymbolKeyword";
        SyntaxKind5[SyntaxKind5["TypeKeyword"] = 154] = "TypeKeyword";
        SyntaxKind5[SyntaxKind5["UndefinedKeyword"] = 155] = "UndefinedKeyword";
        SyntaxKind5[SyntaxKind5["UniqueKeyword"] = 156] = "UniqueKeyword";
        SyntaxKind5[SyntaxKind5["UnknownKeyword"] = 157] = "UnknownKeyword";
        SyntaxKind5[SyntaxKind5["FromKeyword"] = 158] = "FromKeyword";
        SyntaxKind5[SyntaxKind5["GlobalKeyword"] = 159] = "GlobalKeyword";
        SyntaxKind5[SyntaxKind5["BigIntKeyword"] = 160] = "BigIntKeyword";
        SyntaxKind5[SyntaxKind5["OverrideKeyword"] = 161] = "OverrideKeyword";
        SyntaxKind5[SyntaxKind5["OfKeyword"] = 162] = "OfKeyword";
        SyntaxKind5[SyntaxKind5["QualifiedName"] = 163] = "QualifiedName";
        SyntaxKind5[SyntaxKind5["ComputedPropertyName"] = 164] = "ComputedPropertyName";
        SyntaxKind5[SyntaxKind5["TypeParameter"] = 165] = "TypeParameter";
        SyntaxKind5[SyntaxKind5["Parameter"] = 166] = "Parameter";
        SyntaxKind5[SyntaxKind5["Decorator"] = 167] = "Decorator";
        SyntaxKind5[SyntaxKind5["PropertySignature"] = 168] = "PropertySignature";
        SyntaxKind5[SyntaxKind5["PropertyDeclaration"] = 169] = "PropertyDeclaration";
        SyntaxKind5[SyntaxKind5["MethodSignature"] = 170] = "MethodSignature";
        SyntaxKind5[SyntaxKind5["MethodDeclaration"] = 171] = "MethodDeclaration";
        SyntaxKind5[SyntaxKind5["ClassStaticBlockDeclaration"] = 172] = "ClassStaticBlockDeclaration";
        SyntaxKind5[SyntaxKind5["Constructor"] = 173] = "Constructor";
        SyntaxKind5[SyntaxKind5["GetAccessor"] = 174] = "GetAccessor";
        SyntaxKind5[SyntaxKind5["SetAccessor"] = 175] = "SetAccessor";
        SyntaxKind5[SyntaxKind5["CallSignature"] = 176] = "CallSignature";
        SyntaxKind5[SyntaxKind5["ConstructSignature"] = 177] = "ConstructSignature";
        SyntaxKind5[SyntaxKind5["IndexSignature"] = 178] = "IndexSignature";
        SyntaxKind5[SyntaxKind5["TypePredicate"] = 179] = "TypePredicate";
        SyntaxKind5[SyntaxKind5["TypeReference"] = 180] = "TypeReference";
        SyntaxKind5[SyntaxKind5["FunctionType"] = 181] = "FunctionType";
        SyntaxKind5[SyntaxKind5["ConstructorType"] = 182] = "ConstructorType";
        SyntaxKind5[SyntaxKind5["TypeQuery"] = 183] = "TypeQuery";
        SyntaxKind5[SyntaxKind5["TypeLiteral"] = 184] = "TypeLiteral";
        SyntaxKind5[SyntaxKind5["ArrayType"] = 185] = "ArrayType";
        SyntaxKind5[SyntaxKind5["TupleType"] = 186] = "TupleType";
        SyntaxKind5[SyntaxKind5["OptionalType"] = 187] = "OptionalType";
        SyntaxKind5[SyntaxKind5["RestType"] = 188] = "RestType";
        SyntaxKind5[SyntaxKind5["UnionType"] = 189] = "UnionType";
        SyntaxKind5[SyntaxKind5["IntersectionType"] = 190] = "IntersectionType";
        SyntaxKind5[SyntaxKind5["ConditionalType"] = 191] = "ConditionalType";
        SyntaxKind5[SyntaxKind5["InferType"] = 192] = "InferType";
        SyntaxKind5[SyntaxKind5["ParenthesizedType"] = 193] = "ParenthesizedType";
        SyntaxKind5[SyntaxKind5["ThisType"] = 194] = "ThisType";
        SyntaxKind5[SyntaxKind5["TypeOperator"] = 195] = "TypeOperator";
        SyntaxKind5[SyntaxKind5["IndexedAccessType"] = 196] = "IndexedAccessType";
        SyntaxKind5[SyntaxKind5["MappedType"] = 197] = "MappedType";
        SyntaxKind5[SyntaxKind5["LiteralType"] = 198] = "LiteralType";
        SyntaxKind5[SyntaxKind5["NamedTupleMember"] = 199] = "NamedTupleMember";
        SyntaxKind5[SyntaxKind5["TemplateLiteralType"] = 200] = "TemplateLiteralType";
        SyntaxKind5[SyntaxKind5["TemplateLiteralTypeSpan"] = 201] = "TemplateLiteralTypeSpan";
        SyntaxKind5[SyntaxKind5["ImportType"] = 202] = "ImportType";
        SyntaxKind5[SyntaxKind5["ObjectBindingPattern"] = 203] = "ObjectBindingPattern";
        SyntaxKind5[SyntaxKind5["ArrayBindingPattern"] = 204] = "ArrayBindingPattern";
        SyntaxKind5[SyntaxKind5["BindingElement"] = 205] = "BindingElement";
        SyntaxKind5[SyntaxKind5["ArrayLiteralExpression"] = 206] = "ArrayLiteralExpression";
        SyntaxKind5[SyntaxKind5["ObjectLiteralExpression"] = 207] = "ObjectLiteralExpression";
        SyntaxKind5[SyntaxKind5["PropertyAccessExpression"] = 208] = "PropertyAccessExpression";
        SyntaxKind5[SyntaxKind5["ElementAccessExpression"] = 209] = "ElementAccessExpression";
        SyntaxKind5[SyntaxKind5["CallExpression"] = 210] = "CallExpression";
        SyntaxKind5[SyntaxKind5["NewExpression"] = 211] = "NewExpression";
        SyntaxKind5[SyntaxKind5["TaggedTemplateExpression"] = 212] = "TaggedTemplateExpression";
        SyntaxKind5[SyntaxKind5["TypeAssertionExpression"] = 213] = "TypeAssertionExpression";
        SyntaxKind5[SyntaxKind5["ParenthesizedExpression"] = 214] = "ParenthesizedExpression";
        SyntaxKind5[SyntaxKind5["FunctionExpression"] = 215] = "FunctionExpression";
        SyntaxKind5[SyntaxKind5["ArrowFunction"] = 216] = "ArrowFunction";
        SyntaxKind5[SyntaxKind5["DeleteExpression"] = 217] = "DeleteExpression";
        SyntaxKind5[SyntaxKind5["TypeOfExpression"] = 218] = "TypeOfExpression";
        SyntaxKind5[SyntaxKind5["VoidExpression"] = 219] = "VoidExpression";
        SyntaxKind5[SyntaxKind5["AwaitExpression"] = 220] = "AwaitExpression";
        SyntaxKind5[SyntaxKind5["PrefixUnaryExpression"] = 221] = "PrefixUnaryExpression";
        SyntaxKind5[SyntaxKind5["PostfixUnaryExpression"] = 222] = "PostfixUnaryExpression";
        SyntaxKind5[SyntaxKind5["BinaryExpression"] = 223] = "BinaryExpression";
        SyntaxKind5[SyntaxKind5["ConditionalExpression"] = 224] = "ConditionalExpression";
        SyntaxKind5[SyntaxKind5["TemplateExpression"] = 225] = "TemplateExpression";
        SyntaxKind5[SyntaxKind5["YieldExpression"] = 226] = "YieldExpression";
        SyntaxKind5[SyntaxKind5["SpreadElement"] = 227] = "SpreadElement";
        SyntaxKind5[SyntaxKind5["ClassExpression"] = 228] = "ClassExpression";
        SyntaxKind5[SyntaxKind5["OmittedExpression"] = 229] = "OmittedExpression";
        SyntaxKind5[SyntaxKind5["ExpressionWithTypeArguments"] = 230] = "ExpressionWithTypeArguments";
        SyntaxKind5[SyntaxKind5["AsExpression"] = 231] = "AsExpression";
        SyntaxKind5[SyntaxKind5["NonNullExpression"] = 232] = "NonNullExpression";
        SyntaxKind5[SyntaxKind5["MetaProperty"] = 233] = "MetaProperty";
        SyntaxKind5[SyntaxKind5["SyntheticExpression"] = 234] = "SyntheticExpression";
        SyntaxKind5[SyntaxKind5["SatisfiesExpression"] = 235] = "SatisfiesExpression";
        SyntaxKind5[SyntaxKind5["TemplateSpan"] = 236] = "TemplateSpan";
        SyntaxKind5[SyntaxKind5["SemicolonClassElement"] = 237] = "SemicolonClassElement";
        SyntaxKind5[SyntaxKind5["Block"] = 238] = "Block";
        SyntaxKind5[SyntaxKind5["EmptyStatement"] = 239] = "EmptyStatement";
        SyntaxKind5[SyntaxKind5["VariableStatement"] = 240] = "VariableStatement";
        SyntaxKind5[SyntaxKind5["ExpressionStatement"] = 241] = "ExpressionStatement";
        SyntaxKind5[SyntaxKind5["IfStatement"] = 242] = "IfStatement";
        SyntaxKind5[SyntaxKind5["DoStatement"] = 243] = "DoStatement";
        SyntaxKind5[SyntaxKind5["WhileStatement"] = 244] = "WhileStatement";
        SyntaxKind5[SyntaxKind5["ForStatement"] = 245] = "ForStatement";
        SyntaxKind5[SyntaxKind5["ForInStatement"] = 246] = "ForInStatement";
        SyntaxKind5[SyntaxKind5["ForOfStatement"] = 247] = "ForOfStatement";
        SyntaxKind5[SyntaxKind5["ContinueStatement"] = 248] = "ContinueStatement";
        SyntaxKind5[SyntaxKind5["BreakStatement"] = 249] = "BreakStatement";
        SyntaxKind5[SyntaxKind5["ReturnStatement"] = 250] = "ReturnStatement";
        SyntaxKind5[SyntaxKind5["WithStatement"] = 251] = "WithStatement";
        SyntaxKind5[SyntaxKind5["SwitchStatement"] = 252] = "SwitchStatement";
        SyntaxKind5[SyntaxKind5["LabeledStatement"] = 253] = "LabeledStatement";
        SyntaxKind5[SyntaxKind5["ThrowStatement"] = 254] = "ThrowStatement";
        SyntaxKind5[SyntaxKind5["TryStatement"] = 255] = "TryStatement";
        SyntaxKind5[SyntaxKind5["DebuggerStatement"] = 256] = "DebuggerStatement";
        SyntaxKind5[SyntaxKind5["VariableDeclaration"] = 257] = "VariableDeclaration";
        SyntaxKind5[SyntaxKind5["VariableDeclarationList"] = 258] = "VariableDeclarationList";
        SyntaxKind5[SyntaxKind5["FunctionDeclaration"] = 259] = "FunctionDeclaration";
        SyntaxKind5[SyntaxKind5["ClassDeclaration"] = 260] = "ClassDeclaration";
        SyntaxKind5[SyntaxKind5["InterfaceDeclaration"] = 261] = "InterfaceDeclaration";
        SyntaxKind5[SyntaxKind5["TypeAliasDeclaration"] = 262] = "TypeAliasDeclaration";
        SyntaxKind5[SyntaxKind5["EnumDeclaration"] = 263] = "EnumDeclaration";
        SyntaxKind5[SyntaxKind5["ModuleDeclaration"] = 264] = "ModuleDeclaration";
        SyntaxKind5[SyntaxKind5["ModuleBlock"] = 265] = "ModuleBlock";
        SyntaxKind5[SyntaxKind5["CaseBlock"] = 266] = "CaseBlock";
        SyntaxKind5[SyntaxKind5["NamespaceExportDeclaration"] = 267] = "NamespaceExportDeclaration";
        SyntaxKind5[SyntaxKind5["ImportEqualsDeclaration"] = 268] = "ImportEqualsDeclaration";
        SyntaxKind5[SyntaxKind5["ImportDeclaration"] = 269] = "ImportDeclaration";
        SyntaxKind5[SyntaxKind5["ImportClause"] = 270] = "ImportClause";
        SyntaxKind5[SyntaxKind5["NamespaceImport"] = 271] = "NamespaceImport";
        SyntaxKind5[SyntaxKind5["NamedImports"] = 272] = "NamedImports";
        SyntaxKind5[SyntaxKind5["ImportSpecifier"] = 273] = "ImportSpecifier";
        SyntaxKind5[SyntaxKind5["ExportAssignment"] = 274] = "ExportAssignment";
        SyntaxKind5[SyntaxKind5["ExportDeclaration"] = 275] = "ExportDeclaration";
        SyntaxKind5[SyntaxKind5["NamedExports"] = 276] = "NamedExports";
        SyntaxKind5[SyntaxKind5["NamespaceExport"] = 277] = "NamespaceExport";
        SyntaxKind5[SyntaxKind5["ExportSpecifier"] = 278] = "ExportSpecifier";
        SyntaxKind5[SyntaxKind5["MissingDeclaration"] = 279] = "MissingDeclaration";
        SyntaxKind5[SyntaxKind5["ExternalModuleReference"] = 280] = "ExternalModuleReference";
        SyntaxKind5[SyntaxKind5["JsxElement"] = 281] = "JsxElement";
        SyntaxKind5[SyntaxKind5["JsxSelfClosingElement"] = 282] = "JsxSelfClosingElement";
        SyntaxKind5[SyntaxKind5["JsxOpeningElement"] = 283] = "JsxOpeningElement";
        SyntaxKind5[SyntaxKind5["JsxClosingElement"] = 284] = "JsxClosingElement";
        SyntaxKind5[SyntaxKind5["JsxFragment"] = 285] = "JsxFragment";
        SyntaxKind5[SyntaxKind5["JsxOpeningFragment"] = 286] = "JsxOpeningFragment";
        SyntaxKind5[SyntaxKind5["JsxClosingFragment"] = 287] = "JsxClosingFragment";
        SyntaxKind5[SyntaxKind5["JsxAttribute"] = 288] = "JsxAttribute";
        SyntaxKind5[SyntaxKind5["JsxAttributes"] = 289] = "JsxAttributes";
        SyntaxKind5[SyntaxKind5["JsxSpreadAttribute"] = 290] = "JsxSpreadAttribute";
        SyntaxKind5[SyntaxKind5["JsxExpression"] = 291] = "JsxExpression";
        SyntaxKind5[SyntaxKind5["CaseClause"] = 292] = "CaseClause";
        SyntaxKind5[SyntaxKind5["DefaultClause"] = 293] = "DefaultClause";
        SyntaxKind5[SyntaxKind5["HeritageClause"] = 294] = "HeritageClause";
        SyntaxKind5[SyntaxKind5["CatchClause"] = 295] = "CatchClause";
        SyntaxKind5[SyntaxKind5["AssertClause"] = 296] = "AssertClause";
        SyntaxKind5[SyntaxKind5["AssertEntry"] = 297] = "AssertEntry";
        SyntaxKind5[SyntaxKind5["ImportTypeAssertionContainer"] = 298] = "ImportTypeAssertionContainer";
        SyntaxKind5[SyntaxKind5["PropertyAssignment"] = 299] = "PropertyAssignment";
        SyntaxKind5[SyntaxKind5["ShorthandPropertyAssignment"] = 300] = "ShorthandPropertyAssignment";
        SyntaxKind5[SyntaxKind5["SpreadAssignment"] = 301] = "SpreadAssignment";
        SyntaxKind5[SyntaxKind5["EnumMember"] = 302] = "EnumMember";
        SyntaxKind5[SyntaxKind5["UnparsedPrologue"] = 303] = "UnparsedPrologue";
        SyntaxKind5[SyntaxKind5["UnparsedPrepend"] = 304] = "UnparsedPrepend";
        SyntaxKind5[SyntaxKind5["UnparsedText"] = 305] = "UnparsedText";
        SyntaxKind5[SyntaxKind5["UnparsedInternalText"] = 306] = "UnparsedInternalText";
        SyntaxKind5[SyntaxKind5["UnparsedSyntheticReference"] = 307] = "UnparsedSyntheticReference";
        SyntaxKind5[SyntaxKind5["SourceFile"] = 308] = "SourceFile";
        SyntaxKind5[SyntaxKind5["Bundle"] = 309] = "Bundle";
        SyntaxKind5[SyntaxKind5["UnparsedSource"] = 310] = "UnparsedSource";
        SyntaxKind5[SyntaxKind5["InputFiles"] = 311] = "InputFiles";
        SyntaxKind5[SyntaxKind5["JSDocTypeExpression"] = 312] = "JSDocTypeExpression";
        SyntaxKind5[SyntaxKind5["JSDocNameReference"] = 313] = "JSDocNameReference";
        SyntaxKind5[SyntaxKind5["JSDocMemberName"] = 314] = "JSDocMemberName";
        SyntaxKind5[SyntaxKind5["JSDocAllType"] = 315] = "JSDocAllType";
        SyntaxKind5[SyntaxKind5["JSDocUnknownType"] = 316] = "JSDocUnknownType";
        SyntaxKind5[SyntaxKind5["JSDocNullableType"] = 317] = "JSDocNullableType";
        SyntaxKind5[SyntaxKind5["JSDocNonNullableType"] = 318] = "JSDocNonNullableType";
        SyntaxKind5[SyntaxKind5["JSDocOptionalType"] = 319] = "JSDocOptionalType";
        SyntaxKind5[SyntaxKind5["JSDocFunctionType"] = 320] = "JSDocFunctionType";
        SyntaxKind5[SyntaxKind5["JSDocVariadicType"] = 321] = "JSDocVariadicType";
        SyntaxKind5[SyntaxKind5["JSDocNamepathType"] = 322] = "JSDocNamepathType";
        SyntaxKind5[SyntaxKind5["JSDoc"] = 323] = "JSDoc";
        SyntaxKind5[SyntaxKind5["JSDocComment"] = 323 /* JSDoc */] = "JSDocComment";
        SyntaxKind5[SyntaxKind5["JSDocText"] = 324] = "JSDocText";
        SyntaxKind5[SyntaxKind5["JSDocTypeLiteral"] = 325] = "JSDocTypeLiteral";
        SyntaxKind5[SyntaxKind5["JSDocSignature"] = 326] = "JSDocSignature";
        SyntaxKind5[SyntaxKind5["JSDocLink"] = 327] = "JSDocLink";
        SyntaxKind5[SyntaxKind5["JSDocLinkCode"] = 328] = "JSDocLinkCode";
        SyntaxKind5[SyntaxKind5["JSDocLinkPlain"] = 329] = "JSDocLinkPlain";
        SyntaxKind5[SyntaxKind5["JSDocTag"] = 330] = "JSDocTag";
        SyntaxKind5[SyntaxKind5["JSDocAugmentsTag"] = 331] = "JSDocAugmentsTag";
        SyntaxKind5[SyntaxKind5["JSDocImplementsTag"] = 332] = "JSDocImplementsTag";
        SyntaxKind5[SyntaxKind5["JSDocAuthorTag"] = 333] = "JSDocAuthorTag";
        SyntaxKind5[SyntaxKind5["JSDocDeprecatedTag"] = 334] = "JSDocDeprecatedTag";
        SyntaxKind5[SyntaxKind5["JSDocClassTag"] = 335] = "JSDocClassTag";
        SyntaxKind5[SyntaxKind5["JSDocPublicTag"] = 336] = "JSDocPublicTag";
        SyntaxKind5[SyntaxKind5["JSDocPrivateTag"] = 337] = "JSDocPrivateTag";
        SyntaxKind5[SyntaxKind5["JSDocProtectedTag"] = 338] = "JSDocProtectedTag";
        SyntaxKind5[SyntaxKind5["JSDocReadonlyTag"] = 339] = "JSDocReadonlyTag";
        SyntaxKind5[SyntaxKind5["JSDocOverrideTag"] = 340] = "JSDocOverrideTag";
        SyntaxKind5[SyntaxKind5["JSDocCallbackTag"] = 341] = "JSDocCallbackTag";
        SyntaxKind5[SyntaxKind5["JSDocOverloadTag"] = 342] = "JSDocOverloadTag";
        SyntaxKind5[SyntaxKind5["JSDocEnumTag"] = 343] = "JSDocEnumTag";
        SyntaxKind5[SyntaxKind5["JSDocParameterTag"] = 344] = "JSDocParameterTag";
        SyntaxKind5[SyntaxKind5["JSDocReturnTag"] = 345] = "JSDocReturnTag";
        SyntaxKind5[SyntaxKind5["JSDocThisTag"] = 346] = "JSDocThisTag";
        SyntaxKind5[SyntaxKind5["JSDocTypeTag"] = 347] = "JSDocTypeTag";
        SyntaxKind5[SyntaxKind5["JSDocTemplateTag"] = 348] = "JSDocTemplateTag";
        SyntaxKind5[SyntaxKind5["JSDocTypedefTag"] = 349] = "JSDocTypedefTag";
        SyntaxKind5[SyntaxKind5["JSDocSeeTag"] = 350] = "JSDocSeeTag";
        SyntaxKind5[SyntaxKind5["JSDocPropertyTag"] = 351] = "JSDocPropertyTag";
        SyntaxKind5[SyntaxKind5["JSDocThrowsTag"] = 352] = "JSDocThrowsTag";
        SyntaxKind5[SyntaxKind5["JSDocSatisfiesTag"] = 353] = "JSDocSatisfiesTag";
        SyntaxKind5[SyntaxKind5["SyntaxList"] = 354] = "SyntaxList";
        SyntaxKind5[SyntaxKind5["NotEmittedStatement"] = 355] = "NotEmittedStatement";
        SyntaxKind5[SyntaxKind5["PartiallyEmittedExpression"] = 356] = "PartiallyEmittedExpression";
        SyntaxKind5[SyntaxKind5["CommaListExpression"] = 357] = "CommaListExpression";
        SyntaxKind5[SyntaxKind5["MergeDeclarationMarker"] = 358] = "MergeDeclarationMarker";
        SyntaxKind5[SyntaxKind5["EndOfDeclarationMarker"] = 359] = "EndOfDeclarationMarker";
        SyntaxKind5[SyntaxKind5["SyntheticReferenceExpression"] = 360] = "SyntheticReferenceExpression";
        SyntaxKind5[SyntaxKind5["Count"] = 361] = "Count";
        SyntaxKind5[SyntaxKind5["FirstAssignment"] = 63 /* EqualsToken */] = "FirstAssignment";
        SyntaxKind5[SyntaxKind5["LastAssignment"] = 78 /* CaretEqualsToken */] = "LastAssignment";
        SyntaxKind5[SyntaxKind5["FirstCompoundAssignment"] = 64 /* PlusEqualsToken */] = "FirstCompoundAssignment";
        SyntaxKind5[SyntaxKind5["LastCompoundAssignment"] = 78 /* CaretEqualsToken */] = "LastCompoundAssignment";
        SyntaxKind5[SyntaxKind5["FirstReservedWord"] = 81 /* BreakKeyword */] = "FirstReservedWord";
        SyntaxKind5[SyntaxKind5["LastReservedWord"] = 116 /* WithKeyword */] = "LastReservedWord";
        SyntaxKind5[SyntaxKind5["FirstKeyword"] = 81 /* BreakKeyword */] = "FirstKeyword";
        SyntaxKind5[SyntaxKind5["LastKeyword"] = 162 /* OfKeyword */] = "LastKeyword";
        SyntaxKind5[SyntaxKind5["FirstFutureReservedWord"] = 117 /* ImplementsKeyword */] = "FirstFutureReservedWord";
        SyntaxKind5[SyntaxKind5["LastFutureReservedWord"] = 125 /* YieldKeyword */] = "LastFutureReservedWord";
        SyntaxKind5[SyntaxKind5["FirstTypeNode"] = 179 /* TypePredicate */] = "FirstTypeNode";
        SyntaxKind5[SyntaxKind5["LastTypeNode"] = 202 /* ImportType */] = "LastTypeNode";
        SyntaxKind5[SyntaxKind5["FirstPunctuation"] = 18 /* OpenBraceToken */] = "FirstPunctuation";
        SyntaxKind5[SyntaxKind5["LastPunctuation"] = 78 /* CaretEqualsToken */] = "LastPunctuation";
        SyntaxKind5[SyntaxKind5["FirstToken"] = 0 /* Unknown */] = "FirstToken";
        SyntaxKind5[SyntaxKind5["LastToken"] = 162 /* LastKeyword */] = "LastToken";
        SyntaxKind5[SyntaxKind5["FirstTriviaToken"] = 2 /* SingleLineCommentTrivia */] = "FirstTriviaToken";
        SyntaxKind5[SyntaxKind5["LastTriviaToken"] = 7 /* ConflictMarkerTrivia */] = "LastTriviaToken";
        SyntaxKind5[SyntaxKind5["FirstLiteralToken"] = 8 /* NumericLiteral */] = "FirstLiteralToken";
        SyntaxKind5[SyntaxKind5["LastLiteralToken"] = 14 /* NoSubstitutionTemplateLiteral */] = "LastLiteralToken";
        SyntaxKind5[SyntaxKind5["FirstTemplateToken"] = 14 /* NoSubstitutionTemplateLiteral */] = "FirstTemplateToken";
        SyntaxKind5[SyntaxKind5["LastTemplateToken"] = 17 /* TemplateTail */] = "LastTemplateToken";
        SyntaxKind5[SyntaxKind5["FirstBinaryOperator"] = 29 /* LessThanToken */] = "FirstBinaryOperator";
        SyntaxKind5[SyntaxKind5["LastBinaryOperator"] = 78 /* CaretEqualsToken */] = "LastBinaryOperator";
        SyntaxKind5[SyntaxKind5["FirstStatement"] = 240 /* VariableStatement */] = "FirstStatement";
        SyntaxKind5[SyntaxKind5["LastStatement"] = 256 /* DebuggerStatement */] = "LastStatement";
        SyntaxKind5[SyntaxKind5["FirstNode"] = 163 /* QualifiedName */] = "FirstNode";
        SyntaxKind5[SyntaxKind5["FirstJSDocNode"] = 312 /* JSDocTypeExpression */] = "FirstJSDocNode";
        SyntaxKind5[SyntaxKind5["LastJSDocNode"] = 353 /* JSDocSatisfiesTag */] = "LastJSDocNode";
        SyntaxKind5[SyntaxKind5["FirstJSDocTagNode"] = 330 /* JSDocTag */] = "FirstJSDocTagNode";
        SyntaxKind5[SyntaxKind5["LastJSDocTagNode"] = 353 /* JSDocSatisfiesTag */] = "LastJSDocTagNode";
        SyntaxKind5[SyntaxKind5["FirstContextualKeyword"] = 126 /* AbstractKeyword */] = "FirstContextualKeyword";
        SyntaxKind5[SyntaxKind5["LastContextualKeyword"] = 162 /* OfKeyword */] = "LastContextualKeyword";
        return SyntaxKind5;
      })(SyntaxKind || {});
      NodeFlags = /* @__PURE__ */ ((NodeFlags3) => {
        NodeFlags3[NodeFlags3["None"] = 0] = "None";
        NodeFlags3[NodeFlags3["Let"] = 1] = "Let";
        NodeFlags3[NodeFlags3["Const"] = 2] = "Const";
        NodeFlags3[NodeFlags3["NestedNamespace"] = 4] = "NestedNamespace";
        NodeFlags3[NodeFlags3["Synthesized"] = 8] = "Synthesized";
        NodeFlags3[NodeFlags3["Namespace"] = 16] = "Namespace";
        NodeFlags3[NodeFlags3["OptionalChain"] = 32] = "OptionalChain";
        NodeFlags3[NodeFlags3["ExportContext"] = 64] = "ExportContext";
        NodeFlags3[NodeFlags3["ContainsThis"] = 128] = "ContainsThis";
        NodeFlags3[NodeFlags3["HasImplicitReturn"] = 256] = "HasImplicitReturn";
        NodeFlags3[NodeFlags3["HasExplicitReturn"] = 512] = "HasExplicitReturn";
        NodeFlags3[NodeFlags3["GlobalAugmentation"] = 1024] = "GlobalAugmentation";
        NodeFlags3[NodeFlags3["HasAsyncFunctions"] = 2048] = "HasAsyncFunctions";
        NodeFlags3[NodeFlags3["DisallowInContext"] = 4096] = "DisallowInContext";
        NodeFlags3[NodeFlags3["YieldContext"] = 8192] = "YieldContext";
        NodeFlags3[NodeFlags3["DecoratorContext"] = 16384] = "DecoratorContext";
        NodeFlags3[NodeFlags3["AwaitContext"] = 32768] = "AwaitContext";
        NodeFlags3[NodeFlags3["DisallowConditionalTypesContext"] = 65536] = "DisallowConditionalTypesContext";
        NodeFlags3[NodeFlags3["ThisNodeHasError"] = 131072] = "ThisNodeHasError";
        NodeFlags3[NodeFlags3["JavaScriptFile"] = 262144] = "JavaScriptFile";
        NodeFlags3[NodeFlags3["ThisNodeOrAnySubNodesHasError"] = 524288] = "ThisNodeOrAnySubNodesHasError";
        NodeFlags3[NodeFlags3["HasAggregatedChildData"] = 1048576] = "HasAggregatedChildData";
        NodeFlags3[NodeFlags3["PossiblyContainsDynamicImport"] = 2097152] = "PossiblyContainsDynamicImport";
        NodeFlags3[NodeFlags3["PossiblyContainsImportMeta"] = 4194304] = "PossiblyContainsImportMeta";
        NodeFlags3[NodeFlags3["JSDoc"] = 8388608] = "JSDoc";
        NodeFlags3[NodeFlags3["Ambient"] = 16777216] = "Ambient";
        NodeFlags3[NodeFlags3["InWithStatement"] = 33554432] = "InWithStatement";
        NodeFlags3[NodeFlags3["JsonFile"] = 67108864] = "JsonFile";
        NodeFlags3[NodeFlags3["TypeCached"] = 134217728] = "TypeCached";
        NodeFlags3[NodeFlags3["Deprecated"] = 268435456] = "Deprecated";
        NodeFlags3[NodeFlags3["BlockScoped"] = 3] = "BlockScoped";
        NodeFlags3[NodeFlags3["ReachabilityCheckFlags"] = 768] = "ReachabilityCheckFlags";
        NodeFlags3[NodeFlags3["ReachabilityAndEmitFlags"] = 2816] = "ReachabilityAndEmitFlags";
        NodeFlags3[NodeFlags3["ContextFlags"] = 50720768] = "ContextFlags";
        NodeFlags3[NodeFlags3["TypeExcludesFlags"] = 40960] = "TypeExcludesFlags";
        NodeFlags3[NodeFlags3["PermanentlySetIncrementalFlags"] = 6291456] = "PermanentlySetIncrementalFlags";
        NodeFlags3[NodeFlags3["IdentifierHasExtendedUnicodeEscape"] = 128 /* ContainsThis */] = "IdentifierHasExtendedUnicodeEscape";
        NodeFlags3[NodeFlags3["IdentifierIsInJSDocNamespace"] = 2048 /* HasAsyncFunctions */] = "IdentifierIsInJSDocNamespace";
        return NodeFlags3;
      })(NodeFlags || {});
      ModifierFlags = /* @__PURE__ */ ((ModifierFlags3) => {
        ModifierFlags3[ModifierFlags3["None"] = 0] = "None";
        ModifierFlags3[ModifierFlags3["Export"] = 1] = "Export";
        ModifierFlags3[ModifierFlags3["Ambient"] = 2] = "Ambient";
        ModifierFlags3[ModifierFlags3["Public"] = 4] = "Public";
        ModifierFlags3[ModifierFlags3["Private"] = 8] = "Private";
        ModifierFlags3[ModifierFlags3["Protected"] = 16] = "Protected";
        ModifierFlags3[ModifierFlags3["Static"] = 32] = "Static";
        ModifierFlags3[ModifierFlags3["Readonly"] = 64] = "Readonly";
        ModifierFlags3[ModifierFlags3["Accessor"] = 128] = "Accessor";
        ModifierFlags3[ModifierFlags3["Abstract"] = 256] = "Abstract";
        ModifierFlags3[ModifierFlags3["Async"] = 512] = "Async";
        ModifierFlags3[ModifierFlags3["Default"] = 1024] = "Default";
        ModifierFlags3[ModifierFlags3["Const"] = 2048] = "Const";
        ModifierFlags3[ModifierFlags3["HasComputedJSDocModifiers"] = 4096] = "HasComputedJSDocModifiers";
        ModifierFlags3[ModifierFlags3["Deprecated"] = 8192] = "Deprecated";
        ModifierFlags3[ModifierFlags3["Override"] = 16384] = "Override";
        ModifierFlags3[ModifierFlags3["In"] = 32768] = "In";
        ModifierFlags3[ModifierFlags3["Out"] = 65536] = "Out";
        ModifierFlags3[ModifierFlags3["Decorator"] = 131072] = "Decorator";
        ModifierFlags3[ModifierFlags3["HasComputedFlags"] = 536870912] = "HasComputedFlags";
        ModifierFlags3[ModifierFlags3["AccessibilityModifier"] = 28] = "AccessibilityModifier";
        ModifierFlags3[ModifierFlags3["ParameterPropertyModifier"] = 16476] = "ParameterPropertyModifier";
        ModifierFlags3[ModifierFlags3["NonPublicAccessibilityModifier"] = 24] = "NonPublicAccessibilityModifier";
        ModifierFlags3[ModifierFlags3["TypeScriptModifier"] = 117086] = "TypeScriptModifier";
        ModifierFlags3[ModifierFlags3["ExportDefault"] = 1025] = "ExportDefault";
        ModifierFlags3[ModifierFlags3["All"] = 258047] = "All";
        ModifierFlags3[ModifierFlags3["Modifier"] = 126975] = "Modifier";
        return ModifierFlags3;
      })(ModifierFlags || {});
      JsxFlags = /* @__PURE__ */ ((JsxFlags2) => {
        JsxFlags2[JsxFlags2["None"] = 0] = "None";
        JsxFlags2[JsxFlags2["IntrinsicNamedElement"] = 1] = "IntrinsicNamedElement";
        JsxFlags2[JsxFlags2["IntrinsicIndexedElement"] = 2] = "IntrinsicIndexedElement";
        JsxFlags2[JsxFlags2["IntrinsicElement"] = 3] = "IntrinsicElement";
        return JsxFlags2;
      })(JsxFlags || {});
      RelationComparisonResult = /* @__PURE__ */ ((RelationComparisonResult3) => {
        RelationComparisonResult3[RelationComparisonResult3["Succeeded"] = 1] = "Succeeded";
        RelationComparisonResult3[RelationComparisonResult3["Failed"] = 2] = "Failed";
        RelationComparisonResult3[RelationComparisonResult3["Reported"] = 4] = "Reported";
        RelationComparisonResult3[RelationComparisonResult3["ReportsUnmeasurable"] = 8] = "ReportsUnmeasurable";
        RelationComparisonResult3[RelationComparisonResult3["ReportsUnreliable"] = 16] = "ReportsUnreliable";
        RelationComparisonResult3[RelationComparisonResult3["ReportsMask"] = 24] = "ReportsMask";
        return RelationComparisonResult3;
      })(RelationComparisonResult || {});
      GeneratedIdentifierFlags = /* @__PURE__ */ ((GeneratedIdentifierFlags2) => {
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["None"] = 0] = "None";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["Auto"] = 1] = "Auto";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["Loop"] = 2] = "Loop";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["Unique"] = 3] = "Unique";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["Node"] = 4] = "Node";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["KindMask"] = 7] = "KindMask";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["ReservedInNestedScopes"] = 8] = "ReservedInNestedScopes";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["Optimistic"] = 16] = "Optimistic";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["FileLevel"] = 32] = "FileLevel";
        GeneratedIdentifierFlags2[GeneratedIdentifierFlags2["AllowNameSubstitution"] = 64] = "AllowNameSubstitution";
        return GeneratedIdentifierFlags2;
      })(GeneratedIdentifierFlags || {});
      TokenFlags = /* @__PURE__ */ ((TokenFlags2) => {
        TokenFlags2[TokenFlags2["None"] = 0] = "None";
        TokenFlags2[TokenFlags2["PrecedingLineBreak"] = 1] = "PrecedingLineBreak";
        TokenFlags2[TokenFlags2["PrecedingJSDocComment"] = 2] = "PrecedingJSDocComment";
        TokenFlags2[TokenFlags2["Unterminated"] = 4] = "Unterminated";
        TokenFlags2[TokenFlags2["ExtendedUnicodeEscape"] = 8] = "ExtendedUnicodeEscape";
        TokenFlags2[TokenFlags2["Scientific"] = 16] = "Scientific";
        TokenFlags2[TokenFlags2["Octal"] = 32] = "Octal";
        TokenFlags2[TokenFlags2["HexSpecifier"] = 64] = "HexSpecifier";
        TokenFlags2[TokenFlags2["BinarySpecifier"] = 128] = "BinarySpecifier";
        TokenFlags2[TokenFlags2["OctalSpecifier"] = 256] = "OctalSpecifier";
        TokenFlags2[TokenFlags2["ContainsSeparator"] = 512] = "ContainsSeparator";
        TokenFlags2[TokenFlags2["UnicodeEscape"] = 1024] = "UnicodeEscape";
        TokenFlags2[TokenFlags2["ContainsInvalidEscape"] = 2048] = "ContainsInvalidEscape";
        TokenFlags2[TokenFlags2["BinaryOrOctalSpecifier"] = 384] = "BinaryOrOctalSpecifier";
        TokenFlags2[TokenFlags2["NumericLiteralFlags"] = 1008] = "NumericLiteralFlags";
        TokenFlags2[TokenFlags2["TemplateLiteralLikeFlags"] = 2048 /* ContainsInvalidEscape */] = "TemplateLiteralLikeFlags";
        return TokenFlags2;
      })(TokenFlags || {});
      FlowFlags = /* @__PURE__ */ ((FlowFlags2) => {
        FlowFlags2[FlowFlags2["Unreachable"] = 1] = "Unreachable";
        FlowFlags2[FlowFlags2["Start"] = 2] = "Start";
        FlowFlags2[FlowFlags2["BranchLabel"] = 4] = "BranchLabel";
        FlowFlags2[FlowFlags2["LoopLabel"] = 8] = "LoopLabel";
        FlowFlags2[FlowFlags2["Assignment"] = 16] = "Assignment";
        FlowFlags2[FlowFlags2["TrueCondition"] = 32] = "TrueCondition";
        FlowFlags2[FlowFlags2["FalseCondition"] = 64] = "FalseCondition";
        FlowFlags2[FlowFlags2["SwitchClause"] = 128] = "SwitchClause";
        FlowFlags2[FlowFlags2["ArrayMutation"] = 256] = "ArrayMutation";
        FlowFlags2[FlowFlags2["Call"] = 512] = "Call";
        FlowFlags2[FlowFlags2["ReduceLabel"] = 1024] = "ReduceLabel";
        FlowFlags2[FlowFlags2["Referenced"] = 2048] = "Referenced";
        FlowFlags2[FlowFlags2["Shared"] = 4096] = "Shared";
        FlowFlags2[FlowFlags2["Label"] = 12] = "Label";
        FlowFlags2[FlowFlags2["Condition"] = 96] = "Condition";
        return FlowFlags2;
      })(FlowFlags || {});
      CommentDirectiveType = /* @__PURE__ */ ((CommentDirectiveType2) => {
        CommentDirectiveType2[CommentDirectiveType2["ExpectError"] = 0] = "ExpectError";
        CommentDirectiveType2[CommentDirectiveType2["Ignore"] = 1] = "Ignore";
        return CommentDirectiveType2;
      })(CommentDirectiveType || {});
      OperationCanceledException = class {
      };
      FileIncludeKind = /* @__PURE__ */ ((FileIncludeKind2) => {
        FileIncludeKind2[FileIncludeKind2["RootFile"] = 0] = "RootFile";
        FileIncludeKind2[FileIncludeKind2["SourceFromProjectReference"] = 1] = "SourceFromProjectReference";
        FileIncludeKind2[FileIncludeKind2["OutputFromProjectReference"] = 2] = "OutputFromProjectReference";
        FileIncludeKind2[FileIncludeKind2["Import"] = 3] = "Import";
        FileIncludeKind2[FileIncludeKind2["ReferenceFile"] = 4] = "ReferenceFile";
        FileIncludeKind2[FileIncludeKind2["TypeReferenceDirective"] = 5] = "TypeReferenceDirective";
        FileIncludeKind2[FileIncludeKind2["LibFile"] = 6] = "LibFile";
        FileIncludeKind2[FileIncludeKind2["LibReferenceDirective"] = 7] = "LibReferenceDirective";
        FileIncludeKind2[FileIncludeKind2["AutomaticTypeDirectiveFile"] = 8] = "AutomaticTypeDirectiveFile";
        return FileIncludeKind2;
      })(FileIncludeKind || {});
      FilePreprocessingDiagnosticsKind = /* @__PURE__ */ ((FilePreprocessingDiagnosticsKind2) => {
        FilePreprocessingDiagnosticsKind2[FilePreprocessingDiagnosticsKind2["FilePreprocessingReferencedDiagnostic"] = 0] = "FilePreprocessingReferencedDiagnostic";
        FilePreprocessingDiagnosticsKind2[FilePreprocessingDiagnosticsKind2["FilePreprocessingFileExplainingDiagnostic"] = 1] = "FilePreprocessingFileExplainingDiagnostic";
        FilePreprocessingDiagnosticsKind2[FilePreprocessingDiagnosticsKind2["ResolutionDiagnostics"] = 2] = "ResolutionDiagnostics";
        return FilePreprocessingDiagnosticsKind2;
      })(FilePreprocessingDiagnosticsKind || {});
      EmitOnly = /* @__PURE__ */ ((EmitOnly4) => {
        EmitOnly4[EmitOnly4["Js"] = 0] = "Js";
        EmitOnly4[EmitOnly4["Dts"] = 1] = "Dts";
        return EmitOnly4;
      })(EmitOnly || {});
      StructureIsReused = /* @__PURE__ */ ((StructureIsReused2) => {
        StructureIsReused2[StructureIsReused2["Not"] = 0] = "Not";
        StructureIsReused2[StructureIsReused2["SafeModules"] = 1] = "SafeModules";
        StructureIsReused2[StructureIsReused2["Completely"] = 2] = "Completely";
        return StructureIsReused2;
      })(StructureIsReused || {});
      ExitStatus = /* @__PURE__ */ ((ExitStatus2) => {
        ExitStatus2[ExitStatus2["Success"] = 0] = "Success";
        ExitStatus2[ExitStatus2["DiagnosticsPresent_OutputsSkipped"] = 1] = "DiagnosticsPresent_OutputsSkipped";
        ExitStatus2[ExitStatus2["DiagnosticsPresent_OutputsGenerated"] = 2] = "DiagnosticsPresent_OutputsGenerated";
        ExitStatus2[ExitStatus2["InvalidProject_OutputsSkipped"] = 3] = "InvalidProject_OutputsSkipped";
        ExitStatus2[ExitStatus2["ProjectReferenceCycle_OutputsSkipped"] = 4] = "ProjectReferenceCycle_OutputsSkipped";
        return ExitStatus2;
      })(ExitStatus || {});
      MemberOverrideStatus = /* @__PURE__ */ ((MemberOverrideStatus2) => {
        MemberOverrideStatus2[MemberOverrideStatus2["Ok"] = 0] = "Ok";
        MemberOverrideStatus2[MemberOverrideStatus2["NeedsOverride"] = 1] = "NeedsOverride";
        MemberOverrideStatus2[MemberOverrideStatus2["HasInvalidOverride"] = 2] = "HasInvalidOverride";
        return MemberOverrideStatus2;
      })(MemberOverrideStatus || {});
      UnionReduction = /* @__PURE__ */ ((UnionReduction2) => {
        UnionReduction2[UnionReduction2["None"] = 0] = "None";
        UnionReduction2[UnionReduction2["Literal"] = 1] = "Literal";
        UnionReduction2[UnionReduction2["Subtype"] = 2] = "Subtype";
        return UnionReduction2;
      })(UnionReduction || {});
      ContextFlags = /* @__PURE__ */ ((ContextFlags3) => {
        ContextFlags3[ContextFlags3["None"] = 0] = "None";
        ContextFlags3[ContextFlags3["Signature"] = 1] = "Signature";
        ContextFlags3[ContextFlags3["NoConstraints"] = 2] = "NoConstraints";
        ContextFlags3[ContextFlags3["Completions"] = 4] = "Completions";
        ContextFlags3[ContextFlags3["SkipBindingPatterns"] = 8] = "SkipBindingPatterns";
        return ContextFlags3;
      })(ContextFlags || {});
      NodeBuilderFlags = /* @__PURE__ */ ((NodeBuilderFlags2) => {
        NodeBuilderFlags2[NodeBuilderFlags2["None"] = 0] = "None";
        NodeBuilderFlags2[NodeBuilderFlags2["NoTruncation"] = 1] = "NoTruncation";
        NodeBuilderFlags2[NodeBuilderFlags2["WriteArrayAsGenericType"] = 2] = "WriteArrayAsGenericType";
        NodeBuilderFlags2[NodeBuilderFlags2["GenerateNamesForShadowedTypeParams"] = 4] = "GenerateNamesForShadowedTypeParams";
        NodeBuilderFlags2[NodeBuilderFlags2["UseStructuralFallback"] = 8] = "UseStructuralFallback";
        NodeBuilderFlags2[NodeBuilderFlags2["ForbidIndexedAccessSymbolReferences"] = 16] = "ForbidIndexedAccessSymbolReferences";
        NodeBuilderFlags2[NodeBuilderFlags2["WriteTypeArgumentsOfSignature"] = 32] = "WriteTypeArgumentsOfSignature";
        NodeBuilderFlags2[NodeBuilderFlags2["UseFullyQualifiedType"] = 64] = "UseFullyQualifiedType";
        NodeBuilderFlags2[NodeBuilderFlags2["UseOnlyExternalAliasing"] = 128] = "UseOnlyExternalAliasing";
        NodeBuilderFlags2[NodeBuilderFlags2["SuppressAnyReturnType"] = 256] = "SuppressAnyReturnType";
        NodeBuilderFlags2[NodeBuilderFlags2["WriteTypeParametersInQualifiedName"] = 512] = "WriteTypeParametersInQualifiedName";
        NodeBuilderFlags2[NodeBuilderFlags2["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";
        NodeBuilderFlags2[NodeBuilderFlags2["WriteClassExpressionAsTypeLiteral"] = 2048] = "WriteClassExpressionAsTypeLiteral";
        NodeBuilderFlags2[NodeBuilderFlags2["UseTypeOfFunction"] = 4096] = "UseTypeOfFunction";
        NodeBuilderFlags2[NodeBuilderFlags2["OmitParameterModifiers"] = 8192] = "OmitParameterModifiers";
        NodeBuilderFlags2[NodeBuilderFlags2["UseAliasDefinedOutsideCurrentScope"] = 16384] = "UseAliasDefinedOutsideCurrentScope";
        NodeBuilderFlags2[NodeBuilderFlags2["UseSingleQuotesForStringLiteralType"] = 268435456] = "UseSingleQuotesForStringLiteralType";
        NodeBuilderFlags2[NodeBuilderFlags2["NoTypeReduction"] = 536870912] = "NoTypeReduction";
        NodeBuilderFlags2[NodeBuilderFlags2["OmitThisParameter"] = 33554432] = "OmitThisParameter";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowThisInObjectLiteral"] = 32768] = "AllowThisInObjectLiteral";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowQualifiedNameInPlaceOfIdentifier"] = 65536] = "AllowQualifiedNameInPlaceOfIdentifier";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowAnonymousIdentifier"] = 131072] = "AllowAnonymousIdentifier";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowEmptyUnionOrIntersection"] = 262144] = "AllowEmptyUnionOrIntersection";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowEmptyTuple"] = 524288] = "AllowEmptyTuple";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowUniqueESSymbolType"] = 1048576] = "AllowUniqueESSymbolType";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowEmptyIndexInfoType"] = 2097152] = "AllowEmptyIndexInfoType";
        NodeBuilderFlags2[NodeBuilderFlags2["WriteComputedProps"] = 1073741824] = "WriteComputedProps";
        NodeBuilderFlags2[NodeBuilderFlags2["AllowNodeModulesRelativePaths"] = 67108864] = "AllowNodeModulesRelativePaths";
        NodeBuilderFlags2[NodeBuilderFlags2["DoNotIncludeSymbolChain"] = 134217728] = "DoNotIncludeSymbolChain";
        NodeBuilderFlags2[NodeBuilderFlags2["IgnoreErrors"] = 70221824] = "IgnoreErrors";
        NodeBuilderFlags2[NodeBuilderFlags2["InObjectTypeLiteral"] = 4194304] = "InObjectTypeLiteral";
        NodeBuilderFlags2[NodeBuilderFlags2["InTypeAlias"] = 8388608] = "InTypeAlias";
        NodeBuilderFlags2[NodeBuilderFlags2["InInitialEntityName"] = 16777216] = "InInitialEntityName";
        return NodeBuilderFlags2;
      })(NodeBuilderFlags || {});
      TypeFormatFlags = /* @__PURE__ */ ((TypeFormatFlags2) => {
        TypeFormatFlags2[TypeFormatFlags2["None"] = 0] = "None";
        TypeFormatFlags2[TypeFormatFlags2["NoTruncation"] = 1] = "NoTruncation";
        TypeFormatFlags2[TypeFormatFlags2["WriteArrayAsGenericType"] = 2] = "WriteArrayAsGenericType";
        TypeFormatFlags2[TypeFormatFlags2["UseStructuralFallback"] = 8] = "UseStructuralFallback";
        TypeFormatFlags2[TypeFormatFlags2["WriteTypeArgumentsOfSignature"] = 32] = "WriteTypeArgumentsOfSignature";
        TypeFormatFlags2[TypeFormatFlags2["UseFullyQualifiedType"] = 64] = "UseFullyQualifiedType";
        TypeFormatFlags2[TypeFormatFlags2["SuppressAnyReturnType"] = 256] = "SuppressAnyReturnType";
        TypeFormatFlags2[TypeFormatFlags2["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";
        TypeFormatFlags2[TypeFormatFlags2["WriteClassExpressionAsTypeLiteral"] = 2048] = "WriteClassExpressionAsTypeLiteral";
        TypeFormatFlags2[TypeFormatFlags2["UseTypeOfFunction"] = 4096] = "UseTypeOfFunction";
        TypeFormatFlags2[TypeFormatFlags2["OmitParameterModifiers"] = 8192] = "OmitParameterModifiers";
        TypeFormatFlags2[TypeFormatFlags2["UseAliasDefinedOutsideCurrentScope"] = 16384] = "UseAliasDefinedOutsideCurrentScope";
        TypeFormatFlags2[TypeFormatFlags2["UseSingleQuotesForStringLiteralType"] = 268435456] = "UseSingleQuotesForStringLiteralType";
        TypeFormatFlags2[TypeFormatFlags2["NoTypeReduction"] = 536870912] = "NoTypeReduction";
        TypeFormatFlags2[TypeFormatFlags2["OmitThisParameter"] = 33554432] = "OmitThisParameter";
        TypeFormatFlags2[TypeFormatFlags2["AllowUniqueESSymbolType"] = 1048576] = "AllowUniqueESSymbolType";
        TypeFormatFlags2[TypeFormatFlags2["AddUndefined"] = 131072] = "AddUndefined";
        TypeFormatFlags2[TypeFormatFlags2["WriteArrowStyleSignature"] = 262144] = "WriteArrowStyleSignature";
        TypeFormatFlags2[TypeFormatFlags2["InArrayType"] = 524288] = "InArrayType";
        TypeFormatFlags2[TypeFormatFlags2["InElementType"] = 2097152] = "InElementType";
        TypeFormatFlags2[TypeFormatFlags2["InFirstTypeArgument"] = 4194304] = "InFirstTypeArgument";
        TypeFormatFlags2[TypeFormatFlags2["InTypeAlias"] = 8388608] = "InTypeAlias";
        TypeFormatFlags2[TypeFormatFlags2["NodeBuilderFlagsMask"] = 848330091] = "NodeBuilderFlagsMask";
        return TypeFormatFlags2;
      })(TypeFormatFlags || {});
      SymbolFormatFlags = /* @__PURE__ */ ((SymbolFormatFlags2) => {
        SymbolFormatFlags2[SymbolFormatFlags2["None"] = 0] = "None";
        SymbolFormatFlags2[SymbolFormatFlags2["WriteTypeParametersOrArguments"] = 1] = "WriteTypeParametersOrArguments";
        SymbolFormatFlags2[SymbolFormatFlags2["UseOnlyExternalAliasing"] = 2] = "UseOnlyExternalAliasing";
        SymbolFormatFlags2[SymbolFormatFlags2["AllowAnyNodeKind"] = 4] = "AllowAnyNodeKind";
        SymbolFormatFlags2[SymbolFormatFlags2["UseAliasDefinedOutsideCurrentScope"] = 8] = "UseAliasDefinedOutsideCurrentScope";
        SymbolFormatFlags2[SymbolFormatFlags2["WriteComputedProps"] = 16] = "WriteComputedProps";
        SymbolFormatFlags2[SymbolFormatFlags2["DoNotIncludeSymbolChain"] = 32] = "DoNotIncludeSymbolChain";
        return SymbolFormatFlags2;
      })(SymbolFormatFlags || {});
      SymbolAccessibility = /* @__PURE__ */ ((SymbolAccessibility2) => {
        SymbolAccessibility2[SymbolAccessibility2["Accessible"] = 0] = "Accessible";
        SymbolAccessibility2[SymbolAccessibility2["NotAccessible"] = 1] = "NotAccessible";
        SymbolAccessibility2[SymbolAccessibility2["CannotBeNamed"] = 2] = "CannotBeNamed";
        return SymbolAccessibility2;
      })(SymbolAccessibility || {});
      SyntheticSymbolKind = /* @__PURE__ */ ((SyntheticSymbolKind2) => {
        SyntheticSymbolKind2[SyntheticSymbolKind2["UnionOrIntersection"] = 0] = "UnionOrIntersection";
        SyntheticSymbolKind2[SyntheticSymbolKind2["Spread"] = 1] = "Spread";
        return SyntheticSymbolKind2;
      })(SyntheticSymbolKind || {});
      TypePredicateKind = /* @__PURE__ */ ((TypePredicateKind2) => {
        TypePredicateKind2[TypePredicateKind2["This"] = 0] = "This";
        TypePredicateKind2[TypePredicateKind2["Identifier"] = 1] = "Identifier";
        TypePredicateKind2[TypePredicateKind2["AssertsThis"] = 2] = "AssertsThis";
        TypePredicateKind2[TypePredicateKind2["AssertsIdentifier"] = 3] = "AssertsIdentifier";
        return TypePredicateKind2;
      })(TypePredicateKind || {});
      TypeReferenceSerializationKind = /* @__PURE__ */ ((TypeReferenceSerializationKind2) => {
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["Unknown"] = 0] = "Unknown";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["TypeWithConstructSignatureAndValue"] = 1] = "TypeWithConstructSignatureAndValue";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["VoidNullableOrNeverType"] = 2] = "VoidNullableOrNeverType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["NumberLikeType"] = 3] = "NumberLikeType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["BigIntLikeType"] = 4] = "BigIntLikeType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["StringLikeType"] = 5] = "StringLikeType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["BooleanType"] = 6] = "BooleanType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["ArrayLikeType"] = 7] = "ArrayLikeType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["ESSymbolType"] = 8] = "ESSymbolType";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["Promise"] = 9] = "Promise";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["TypeWithCallSignature"] = 10] = "TypeWithCallSignature";
        TypeReferenceSerializationKind2[TypeReferenceSerializationKind2["ObjectType"] = 11] = "ObjectType";
        return TypeReferenceSerializationKind2;
      })(TypeReferenceSerializationKind || {});
      SymbolFlags = /* @__PURE__ */ ((SymbolFlags3) => {
        SymbolFlags3[SymbolFlags3["None"] = 0] = "None";
        SymbolFlags3[SymbolFlags3["FunctionScopedVariable"] = 1] = "FunctionScopedVariable";
        SymbolFlags3[SymbolFlags3["BlockScopedVariable"] = 2] = "BlockScopedVariable";
        SymbolFlags3[SymbolFlags3["Property"] = 4] = "Property";
        SymbolFlags3[SymbolFlags3["EnumMember"] = 8] = "EnumMember";
        SymbolFlags3[SymbolFlags3["Function"] = 16] = "Function";
        SymbolFlags3[SymbolFlags3["Class"] = 32] = "Class";
        SymbolFlags3[SymbolFlags3["Interface"] = 64] = "Interface";
        SymbolFlags3[SymbolFlags3["ConstEnum"] = 128] = "ConstEnum";
        SymbolFlags3[SymbolFlags3["RegularEnum"] = 256] = "RegularEnum";
        SymbolFlags3[SymbolFlags3["ValueModule"] = 512] = "ValueModule";
        SymbolFlags3[SymbolFlags3["NamespaceModule"] = 1024] = "NamespaceModule";
        SymbolFlags3[SymbolFlags3["TypeLiteral"] = 2048] = "TypeLiteral";
        SymbolFlags3[SymbolFlags3["ObjectLiteral"] = 4096] = "ObjectLiteral";
        SymbolFlags3[SymbolFlags3["Method"] = 8192] = "Method";
        SymbolFlags3[SymbolFlags3["Constructor"] = 16384] = "Constructor";
        SymbolFlags3[SymbolFlags3["GetAccessor"] = 32768] = "GetAccessor";
        SymbolFlags3[SymbolFlags3["SetAccessor"] = 65536] = "SetAccessor";
        SymbolFlags3[SymbolFlags3["Signature"] = 131072] = "Signature";
        SymbolFlags3[SymbolFlags3["TypeParameter"] = 262144] = "TypeParameter";
        SymbolFlags3[SymbolFlags3["TypeAlias"] = 524288] = "TypeAlias";
        SymbolFlags3[SymbolFlags3["ExportValue"] = 1048576] = "ExportValue";
        SymbolFlags3[SymbolFlags3["Alias"] = 2097152] = "Alias";
        SymbolFlags3[SymbolFlags3["Prototype"] = 4194304] = "Prototype";
        SymbolFlags3[SymbolFlags3["ExportStar"] = 8388608] = "ExportStar";
        SymbolFlags3[SymbolFlags3["Optional"] = 16777216] = "Optional";
        SymbolFlags3[SymbolFlags3["Transient"] = 33554432] = "Transient";
        SymbolFlags3[SymbolFlags3["Assignment"] = 67108864] = "Assignment";
        SymbolFlags3[SymbolFlags3["ModuleExports"] = 134217728] = "ModuleExports";
        SymbolFlags3[SymbolFlags3["All"] = 67108863] = "All";
        SymbolFlags3[SymbolFlags3["Enum"] = 384] = "Enum";
        SymbolFlags3[SymbolFlags3["Variable"] = 3] = "Variable";
        SymbolFlags3[SymbolFlags3["Value"] = 111551] = "Value";
        SymbolFlags3[SymbolFlags3["Type"] = 788968] = "Type";
        SymbolFlags3[SymbolFlags3["Namespace"] = 1920] = "Namespace";
        SymbolFlags3[SymbolFlags3["Module"] = 1536] = "Module";
        SymbolFlags3[SymbolFlags3["Accessor"] = 98304] = "Accessor";
        SymbolFlags3[SymbolFlags3["FunctionScopedVariableExcludes"] = 111550] = "FunctionScopedVariableExcludes";
        SymbolFlags3[SymbolFlags3["BlockScopedVariableExcludes"] = 111551 /* Value */] = "BlockScopedVariableExcludes";
        SymbolFlags3[SymbolFlags3["ParameterExcludes"] = 111551 /* Value */] = "ParameterExcludes";
        SymbolFlags3[SymbolFlags3["PropertyExcludes"] = 0 /* None */] = "PropertyExcludes";
        SymbolFlags3[SymbolFlags3["EnumMemberExcludes"] = 900095] = "EnumMemberExcludes";
        SymbolFlags3[SymbolFlags3["FunctionExcludes"] = 110991] = "FunctionExcludes";
        SymbolFlags3[SymbolFlags3["ClassExcludes"] = 899503] = "ClassExcludes";
        SymbolFlags3[SymbolFlags3["InterfaceExcludes"] = 788872] = "InterfaceExcludes";
        SymbolFlags3[SymbolFlags3["RegularEnumExcludes"] = 899327] = "RegularEnumExcludes";
        SymbolFlags3[SymbolFlags3["ConstEnumExcludes"] = 899967] = "ConstEnumExcludes";
        SymbolFlags3[SymbolFlags3["ValueModuleExcludes"] = 110735] = "ValueModuleExcludes";
        SymbolFlags3[SymbolFlags3["NamespaceModuleExcludes"] = 0] = "NamespaceModuleExcludes";
        SymbolFlags3[SymbolFlags3["MethodExcludes"] = 103359] = "MethodExcludes";
        SymbolFlags3[SymbolFlags3["GetAccessorExcludes"] = 46015] = "GetAccessorExcludes";
        SymbolFlags3[SymbolFlags3["SetAccessorExcludes"] = 78783] = "SetAccessorExcludes";
        SymbolFlags3[SymbolFlags3["AccessorExcludes"] = 13247] = "AccessorExcludes";
        SymbolFlags3[SymbolFlags3["TypeParameterExcludes"] = 526824] = "TypeParameterExcludes";
        SymbolFlags3[SymbolFlags3["TypeAliasExcludes"] = 788968 /* Type */] = "TypeAliasExcludes";
        SymbolFlags3[SymbolFlags3["AliasExcludes"] = 2097152 /* Alias */] = "AliasExcludes";
        SymbolFlags3[SymbolFlags3["ModuleMember"] = 2623475] = "ModuleMember";
        SymbolFlags3[SymbolFlags3["ExportHasLocal"] = 944] = "ExportHasLocal";
        SymbolFlags3[SymbolFlags3["BlockScoped"] = 418] = "BlockScoped";
        SymbolFlags3[SymbolFlags3["PropertyOrAccessor"] = 98308] = "PropertyOrAccessor";
        SymbolFlags3[SymbolFlags3["ClassMember"] = 106500] = "ClassMember";
        SymbolFlags3[SymbolFlags3["ExportSupportsDefaultModifier"] = 112] = "ExportSupportsDefaultModifier";
        SymbolFlags3[SymbolFlags3["ExportDoesNotSupportDefaultModifier"] = -113] = "ExportDoesNotSupportDefaultModifier";
        SymbolFlags3[SymbolFlags3["Classifiable"] = 2885600] = "Classifiable";
        SymbolFlags3[SymbolFlags3["LateBindingContainer"] = 6256] = "LateBindingContainer";
        return SymbolFlags3;
      })(SymbolFlags || {});
      EnumKind = /* @__PURE__ */ ((EnumKind2) => {
        EnumKind2[EnumKind2["Numeric"] = 0] = "Numeric";
        EnumKind2[EnumKind2["Literal"] = 1] = "Literal";
        return EnumKind2;
      })(EnumKind || {});
      CheckFlags = /* @__PURE__ */ ((CheckFlags2) => {
        CheckFlags2[CheckFlags2["None"] = 0] = "None";
        CheckFlags2[CheckFlags2["Instantiated"] = 1] = "Instantiated";
        CheckFlags2[CheckFlags2["SyntheticProperty"] = 2] = "SyntheticProperty";
        CheckFlags2[CheckFlags2["SyntheticMethod"] = 4] = "SyntheticMethod";
        CheckFlags2[CheckFlags2["Readonly"] = 8] = "Readonly";
        CheckFlags2[CheckFlags2["ReadPartial"] = 16] = "ReadPartial";
        CheckFlags2[CheckFlags2["WritePartial"] = 32] = "WritePartial";
        CheckFlags2[CheckFlags2["HasNonUniformType"] = 64] = "HasNonUniformType";
        CheckFlags2[CheckFlags2["HasLiteralType"] = 128] = "HasLiteralType";
        CheckFlags2[CheckFlags2["ContainsPublic"] = 256] = "ContainsPublic";
        CheckFlags2[CheckFlags2["ContainsProtected"] = 512] = "ContainsProtected";
        CheckFlags2[CheckFlags2["ContainsPrivate"] = 1024] = "ContainsPrivate";
        CheckFlags2[CheckFlags2["ContainsStatic"] = 2048] = "ContainsStatic";
        CheckFlags2[CheckFlags2["Late"] = 4096] = "Late";
        CheckFlags2[CheckFlags2["ReverseMapped"] = 8192] = "ReverseMapped";
        CheckFlags2[CheckFlags2["OptionalParameter"] = 16384] = "OptionalParameter";
        CheckFlags2[CheckFlags2["RestParameter"] = 32768] = "RestParameter";
        CheckFlags2[CheckFlags2["DeferredType"] = 65536] = "DeferredType";
        CheckFlags2[CheckFlags2["HasNeverType"] = 131072] = "HasNeverType";
        CheckFlags2[CheckFlags2["Mapped"] = 262144] = "Mapped";
        CheckFlags2[CheckFlags2["StripOptional"] = 524288] = "StripOptional";
        CheckFlags2[CheckFlags2["Unresolved"] = 1048576] = "Unresolved";
        CheckFlags2[CheckFlags2["Synthetic"] = 6] = "Synthetic";
        CheckFlags2[CheckFlags2["Discriminant"] = 192] = "Discriminant";
        CheckFlags2[CheckFlags2["Partial"] = 48] = "Partial";
        return CheckFlags2;
      })(CheckFlags || {});
      InternalSymbolName = /* @__PURE__ */ ((InternalSymbolName2) => {
        InternalSymbolName2["Call"] = "__call";
        InternalSymbolName2["Constructor"] = "__constructor";
        InternalSymbolName2["New"] = "__new";
        InternalSymbolName2["Index"] = "__index";
        InternalSymbolName2["ExportStar"] = "__export";
        InternalSymbolName2["Global"] = "__global";
        InternalSymbolName2["Missing"] = "__missing";
        InternalSymbolName2["Type"] = "__type";
        InternalSymbolName2["Object"] = "__object";
        InternalSymbolName2["JSXAttributes"] = "__jsxAttributes";
        InternalSymbolName2["Class"] = "__class";
        InternalSymbolName2["Function"] = "__function";
        InternalSymbolName2["Computed"] = "__computed";
        InternalSymbolName2["Resolving"] = "__resolving__";
        InternalSymbolName2["ExportEquals"] = "export=";
        InternalSymbolName2["Default"] = "default";
        InternalSymbolName2["This"] = "this";
        return InternalSymbolName2;
      })(InternalSymbolName || {});
      NodeCheckFlags = /* @__PURE__ */ ((NodeCheckFlags2) => {
        NodeCheckFlags2[NodeCheckFlags2["None"] = 0] = "None";
        NodeCheckFlags2[NodeCheckFlags2["TypeChecked"] = 1] = "TypeChecked";
        NodeCheckFlags2[NodeCheckFlags2["LexicalThis"] = 2] = "LexicalThis";
        NodeCheckFlags2[NodeCheckFlags2["CaptureThis"] = 4] = "CaptureThis";
        NodeCheckFlags2[NodeCheckFlags2["CaptureNewTarget"] = 8] = "CaptureNewTarget";
        NodeCheckFlags2[NodeCheckFlags2["SuperInstance"] = 16] = "SuperInstance";
        NodeCheckFlags2[NodeCheckFlags2["SuperStatic"] = 32] = "SuperStatic";
        NodeCheckFlags2[NodeCheckFlags2["ContextChecked"] = 64] = "ContextChecked";
        NodeCheckFlags2[NodeCheckFlags2["MethodWithSuperPropertyAccessInAsync"] = 128] = "MethodWithSuperPropertyAccessInAsync";
        NodeCheckFlags2[NodeCheckFlags2["MethodWithSuperPropertyAssignmentInAsync"] = 256] = "MethodWithSuperPropertyAssignmentInAsync";
        NodeCheckFlags2[NodeCheckFlags2["CaptureArguments"] = 512] = "CaptureArguments";
        NodeCheckFlags2[NodeCheckFlags2["EnumValuesComputed"] = 1024] = "EnumValuesComputed";
        NodeCheckFlags2[NodeCheckFlags2["LexicalModuleMergesWithClass"] = 2048] = "LexicalModuleMergesWithClass";
        NodeCheckFlags2[NodeCheckFlags2["LoopWithCapturedBlockScopedBinding"] = 4096] = "LoopWithCapturedBlockScopedBinding";
        NodeCheckFlags2[NodeCheckFlags2["ContainsCapturedBlockScopeBinding"] = 8192] = "ContainsCapturedBlockScopeBinding";
        NodeCheckFlags2[NodeCheckFlags2["CapturedBlockScopedBinding"] = 16384] = "CapturedBlockScopedBinding";
        NodeCheckFlags2[NodeCheckFlags2["BlockScopedBindingInLoop"] = 32768] = "BlockScopedBindingInLoop";
        NodeCheckFlags2[NodeCheckFlags2["ClassWithBodyScopedClassBinding"] = 65536] = "ClassWithBodyScopedClassBinding";
        NodeCheckFlags2[NodeCheckFlags2["BodyScopedClassBinding"] = 131072] = "BodyScopedClassBinding";
        NodeCheckFlags2[NodeCheckFlags2["NeedsLoopOutParameter"] = 262144] = "NeedsLoopOutParameter";
        NodeCheckFlags2[NodeCheckFlags2["AssignmentsMarked"] = 524288] = "AssignmentsMarked";
        NodeCheckFlags2[NodeCheckFlags2["ClassWithConstructorReference"] = 1048576] = "ClassWithConstructorReference";
        NodeCheckFlags2[NodeCheckFlags2["ConstructorReferenceInClass"] = 2097152] = "ConstructorReferenceInClass";
        NodeCheckFlags2[NodeCheckFlags2["ContainsClassWithPrivateIdentifiers"] = 4194304] = "ContainsClassWithPrivateIdentifiers";
        NodeCheckFlags2[NodeCheckFlags2["ContainsSuperPropertyInStaticInitializer"] = 8388608] = "ContainsSuperPropertyInStaticInitializer";
        NodeCheckFlags2[NodeCheckFlags2["InCheckIdentifier"] = 16777216] = "InCheckIdentifier";
        return NodeCheckFlags2;
      })(NodeCheckFlags || {});
      TypeFlags = /* @__PURE__ */ ((TypeFlags2) => {
        TypeFlags2[TypeFlags2["Any"] = 1] = "Any";
        TypeFlags2[TypeFlags2["Unknown"] = 2] = "Unknown";
        TypeFlags2[TypeFlags2["String"] = 4] = "String";
        TypeFlags2[TypeFlags2["Number"] = 8] = "Number";
        TypeFlags2[TypeFlags2["Boolean"] = 16] = "Boolean";
        TypeFlags2[TypeFlags2["Enum"] = 32] = "Enum";
        TypeFlags2[TypeFlags2["BigInt"] = 64] = "BigInt";
        TypeFlags2[TypeFlags2["StringLiteral"] = 128] = "StringLiteral";
        TypeFlags2[TypeFlags2["NumberLiteral"] = 256] = "NumberLiteral";
        TypeFlags2[TypeFlags2["BooleanLiteral"] = 512] = "BooleanLiteral";
        TypeFlags2[TypeFlags2["EnumLiteral"] = 1024] = "EnumLiteral";
        TypeFlags2[TypeFlags2["BigIntLiteral"] = 2048] = "BigIntLiteral";
        TypeFlags2[TypeFlags2["ESSymbol"] = 4096] = "ESSymbol";
        TypeFlags2[TypeFlags2["UniqueESSymbol"] = 8192] = "UniqueESSymbol";
        TypeFlags2[TypeFlags2["Void"] = 16384] = "Void";
        TypeFlags2[TypeFlags2["Undefined"] = 32768] = "Undefined";
        TypeFlags2[TypeFlags2["Null"] = 65536] = "Null";
        TypeFlags2[TypeFlags2["Never"] = 131072] = "Never";
        TypeFlags2[TypeFlags2["TypeParameter"] = 262144] = "TypeParameter";
        TypeFlags2[TypeFlags2["Object"] = 524288] = "Object";
        TypeFlags2[TypeFlags2["Union"] = 1048576] = "Union";
        TypeFlags2[TypeFlags2["Intersection"] = 2097152] = "Intersection";
        TypeFlags2[TypeFlags2["Index"] = 4194304] = "Index";
        TypeFlags2[TypeFlags2["IndexedAccess"] = 8388608] = "IndexedAccess";
        TypeFlags2[TypeFlags2["Conditional"] = 16777216] = "Conditional";
        TypeFlags2[TypeFlags2["Substitution"] = 33554432] = "Substitution";
        TypeFlags2[TypeFlags2["NonPrimitive"] = 67108864] = "NonPrimitive";
        TypeFlags2[TypeFlags2["TemplateLiteral"] = 134217728] = "TemplateLiteral";
        TypeFlags2[TypeFlags2["StringMapping"] = 268435456] = "StringMapping";
        TypeFlags2[TypeFlags2["AnyOrUnknown"] = 3] = "AnyOrUnknown";
        TypeFlags2[TypeFlags2["Nullable"] = 98304] = "Nullable";
        TypeFlags2[TypeFlags2["Literal"] = 2944] = "Literal";
        TypeFlags2[TypeFlags2["Unit"] = 109472] = "Unit";
        TypeFlags2[TypeFlags2["Freshable"] = 2976] = "Freshable";
        TypeFlags2[TypeFlags2["StringOrNumberLiteral"] = 384] = "StringOrNumberLiteral";
        TypeFlags2[TypeFlags2["StringOrNumberLiteralOrUnique"] = 8576] = "StringOrNumberLiteralOrUnique";
        TypeFlags2[TypeFlags2["DefinitelyFalsy"] = 117632] = "DefinitelyFalsy";
        TypeFlags2[TypeFlags2["PossiblyFalsy"] = 117724] = "PossiblyFalsy";
        TypeFlags2[TypeFlags2["Intrinsic"] = 67359327] = "Intrinsic";
        TypeFlags2[TypeFlags2["Primitive"] = 134348796] = "Primitive";
        TypeFlags2[TypeFlags2["StringLike"] = 402653316] = "StringLike";
        TypeFlags2[TypeFlags2["NumberLike"] = 296] = "NumberLike";
        TypeFlags2[TypeFlags2["BigIntLike"] = 2112] = "BigIntLike";
        TypeFlags2[TypeFlags2["BooleanLike"] = 528] = "BooleanLike";
        TypeFlags2[TypeFlags2["EnumLike"] = 1056] = "EnumLike";
        TypeFlags2[TypeFlags2["ESSymbolLike"] = 12288] = "ESSymbolLike";
        TypeFlags2[TypeFlags2["VoidLike"] = 49152] = "VoidLike";
        TypeFlags2[TypeFlags2["DefinitelyNonNullable"] = 470302716] = "DefinitelyNonNullable";
        TypeFlags2[TypeFlags2["DisjointDomains"] = 469892092] = "DisjointDomains";
        TypeFlags2[TypeFlags2["UnionOrIntersection"] = 3145728] = "UnionOrIntersection";
        TypeFlags2[TypeFlags2["StructuredType"] = 3670016] = "StructuredType";
        TypeFlags2[TypeFlags2["TypeVariable"] = 8650752] = "TypeVariable";
        TypeFlags2[TypeFlags2["InstantiableNonPrimitive"] = 58982400] = "InstantiableNonPrimitive";
        TypeFlags2[TypeFlags2["InstantiablePrimitive"] = 406847488] = "InstantiablePrimitive";
        TypeFlags2[TypeFlags2["Instantiable"] = 465829888] = "Instantiable";
        TypeFlags2[TypeFlags2["StructuredOrInstantiable"] = 469499904] = "StructuredOrInstantiable";
        TypeFlags2[TypeFlags2["ObjectFlagsType"] = 3899393] = "ObjectFlagsType";
        TypeFlags2[TypeFlags2["Simplifiable"] = 25165824] = "Simplifiable";
        TypeFlags2[TypeFlags2["Singleton"] = 67358815] = "Singleton";
        TypeFlags2[TypeFlags2["Narrowable"] = 536624127] = "Narrowable";
        TypeFlags2[TypeFlags2["IncludesMask"] = 205258751] = "IncludesMask";
        TypeFlags2[TypeFlags2["IncludesMissingType"] = 262144 /* TypeParameter */] = "IncludesMissingType";
        TypeFlags2[TypeFlags2["IncludesNonWideningType"] = 4194304 /* Index */] = "IncludesNonWideningType";
        TypeFlags2[TypeFlags2["IncludesWildcard"] = 8388608 /* IndexedAccess */] = "IncludesWildcard";
        TypeFlags2[TypeFlags2["IncludesEmptyObject"] = 16777216 /* Conditional */] = "IncludesEmptyObject";
        TypeFlags2[TypeFlags2["IncludesInstantiable"] = 33554432 /* Substitution */] = "IncludesInstantiable";
        TypeFlags2[TypeFlags2["NotPrimitiveUnion"] = 36323363] = "NotPrimitiveUnion";
        return TypeFlags2;
      })(TypeFlags || {});
      ObjectFlags = /* @__PURE__ */ ((ObjectFlags3) => {
        ObjectFlags3[ObjectFlags3["None"] = 0] = "None";
        ObjectFlags3[ObjectFlags3["Class"] = 1] = "Class";
        ObjectFlags3[ObjectFlags3["Interface"] = 2] = "Interface";
        ObjectFlags3[ObjectFlags3["Reference"] = 4] = "Reference";
        ObjectFlags3[ObjectFlags3["Tuple"] = 8] = "Tuple";
        ObjectFlags3[ObjectFlags3["Anonymous"] = 16] = "Anonymous";
        ObjectFlags3[ObjectFlags3["Mapped"] = 32] = "Mapped";
        ObjectFlags3[ObjectFlags3["Instantiated"] = 64] = "Instantiated";
        ObjectFlags3[ObjectFlags3["ObjectLiteral"] = 128] = "ObjectLiteral";
        ObjectFlags3[ObjectFlags3["EvolvingArray"] = 256] = "EvolvingArray";
        ObjectFlags3[ObjectFlags3["ObjectLiteralPatternWithComputedProperties"] = 512] = "ObjectLiteralPatternWithComputedProperties";
        ObjectFlags3[ObjectFlags3["ReverseMapped"] = 1024] = "ReverseMapped";
        ObjectFlags3[ObjectFlags3["JsxAttributes"] = 2048] = "JsxAttributes";
        ObjectFlags3[ObjectFlags3["JSLiteral"] = 4096] = "JSLiteral";
        ObjectFlags3[ObjectFlags3["FreshLiteral"] = 8192] = "FreshLiteral";
        ObjectFlags3[ObjectFlags3["ArrayLiteral"] = 16384] = "ArrayLiteral";
        ObjectFlags3[ObjectFlags3["PrimitiveUnion"] = 32768] = "PrimitiveUnion";
        ObjectFlags3[ObjectFlags3["ContainsWideningType"] = 65536] = "ContainsWideningType";
        ObjectFlags3[ObjectFlags3["ContainsObjectOrArrayLiteral"] = 131072] = "ContainsObjectOrArrayLiteral";
        ObjectFlags3[ObjectFlags3["NonInferrableType"] = 262144] = "NonInferrableType";
        ObjectFlags3[ObjectFlags3["CouldContainTypeVariablesComputed"] = 524288] = "CouldContainTypeVariablesComputed";
        ObjectFlags3[ObjectFlags3["CouldContainTypeVariables"] = 1048576] = "CouldContainTypeVariables";
        ObjectFlags3[ObjectFlags3["ClassOrInterface"] = 3] = "ClassOrInterface";
        ObjectFlags3[ObjectFlags3["RequiresWidening"] = 196608] = "RequiresWidening";
        ObjectFlags3[ObjectFlags3["PropagatingFlags"] = 458752] = "PropagatingFlags";
        ObjectFlags3[ObjectFlags3["ObjectTypeKindMask"] = 1343] = "ObjectTypeKindMask";
        ObjectFlags3[ObjectFlags3["ContainsSpread"] = 2097152] = "ContainsSpread";
        ObjectFlags3[ObjectFlags3["ObjectRestType"] = 4194304] = "ObjectRestType";
        ObjectFlags3[ObjectFlags3["InstantiationExpressionType"] = 8388608] = "InstantiationExpressionType";
        ObjectFlags3[ObjectFlags3["IsClassInstanceClone"] = 16777216] = "IsClassInstanceClone";
        ObjectFlags3[ObjectFlags3["IdenticalBaseTypeCalculated"] = 33554432] = "IdenticalBaseTypeCalculated";
        ObjectFlags3[ObjectFlags3["IdenticalBaseTypeExists"] = 67108864] = "IdenticalBaseTypeExists";
        ObjectFlags3[ObjectFlags3["IsGenericTypeComputed"] = 2097152] = "IsGenericTypeComputed";
        ObjectFlags3[ObjectFlags3["IsGenericObjectType"] = 4194304] = "IsGenericObjectType";
        ObjectFlags3[ObjectFlags3["IsGenericIndexType"] = 8388608] = "IsGenericIndexType";
        ObjectFlags3[ObjectFlags3["IsGenericType"] = 12582912] = "IsGenericType";
        ObjectFlags3[ObjectFlags3["ContainsIntersections"] = 16777216] = "ContainsIntersections";
        ObjectFlags3[ObjectFlags3["IsUnknownLikeUnionComputed"] = 33554432] = "IsUnknownLikeUnionComputed";
        ObjectFlags3[ObjectFlags3["IsUnknownLikeUnion"] = 67108864] = "IsUnknownLikeUnion";
        ObjectFlags3[ObjectFlags3["IsNeverIntersectionComputed"] = 16777216] = "IsNeverIntersectionComputed";
        ObjectFlags3[ObjectFlags3["IsNeverIntersection"] = 33554432] = "IsNeverIntersection";
        return ObjectFlags3;
      })(ObjectFlags || {});
      VarianceFlags = /* @__PURE__ */ ((VarianceFlags2) => {
        VarianceFlags2[VarianceFlags2["Invariant"] = 0] = "Invariant";
        VarianceFlags2[VarianceFlags2["Covariant"] = 1] = "Covariant";
        VarianceFlags2[VarianceFlags2["Contravariant"] = 2] = "Contravariant";
        VarianceFlags2[VarianceFlags2["Bivariant"] = 3] = "Bivariant";
        VarianceFlags2[VarianceFlags2["Independent"] = 4] = "Independent";
        VarianceFlags2[VarianceFlags2["VarianceMask"] = 7] = "VarianceMask";
        VarianceFlags2[VarianceFlags2["Unmeasurable"] = 8] = "Unmeasurable";
        VarianceFlags2[VarianceFlags2["Unreliable"] = 16] = "Unreliable";
        VarianceFlags2[VarianceFlags2["AllowsStructuralFallback"] = 24] = "AllowsStructuralFallback";
        return VarianceFlags2;
      })(VarianceFlags || {});
      ElementFlags = /* @__PURE__ */ ((ElementFlags2) => {
        ElementFlags2[ElementFlags2["Required"] = 1] = "Required";
        ElementFlags2[ElementFlags2["Optional"] = 2] = "Optional";
        ElementFlags2[ElementFlags2["Rest"] = 4] = "Rest";
        ElementFlags2[ElementFlags2["Variadic"] = 8] = "Variadic";
        ElementFlags2[ElementFlags2["Fixed"] = 3] = "Fixed";
        ElementFlags2[ElementFlags2["Variable"] = 12] = "Variable";
        ElementFlags2[ElementFlags2["NonRequired"] = 14] = "NonRequired";
        ElementFlags2[ElementFlags2["NonRest"] = 11] = "NonRest";
        return ElementFlags2;
      })(ElementFlags || {});
      AccessFlags = /* @__PURE__ */ ((AccessFlags2) => {
        AccessFlags2[AccessFlags2["None"] = 0] = "None";
        AccessFlags2[AccessFlags2["IncludeUndefined"] = 1] = "IncludeUndefined";
        AccessFlags2[AccessFlags2["NoIndexSignatures"] = 2] = "NoIndexSignatures";
        AccessFlags2[AccessFlags2["Writing"] = 4] = "Writing";
        AccessFlags2[AccessFlags2["CacheSymbol"] = 8] = "CacheSymbol";
        AccessFlags2[AccessFlags2["NoTupleBoundsCheck"] = 16] = "NoTupleBoundsCheck";
        AccessFlags2[AccessFlags2["ExpressionPosition"] = 32] = "ExpressionPosition";
        AccessFlags2[AccessFlags2["ReportDeprecated"] = 64] = "ReportDeprecated";
        AccessFlags2[AccessFlags2["SuppressNoImplicitAnyError"] = 128] = "SuppressNoImplicitAnyError";
        AccessFlags2[AccessFlags2["Contextual"] = 256] = "Contextual";
        AccessFlags2[AccessFlags2["Persistent"] = 1 /* IncludeUndefined */] = "Persistent";
        return AccessFlags2;
      })(AccessFlags || {});
      JsxReferenceKind = /* @__PURE__ */ ((JsxReferenceKind2) => {
        JsxReferenceKind2[JsxReferenceKind2["Component"] = 0] = "Component";
        JsxReferenceKind2[JsxReferenceKind2["Function"] = 1] = "Function";
        JsxReferenceKind2[JsxReferenceKind2["Mixed"] = 2] = "Mixed";
        return JsxReferenceKind2;
      })(JsxReferenceKind || {});
      SignatureKind = /* @__PURE__ */ ((SignatureKind2) => {
        SignatureKind2[SignatureKind2["Call"] = 0] = "Call";
        SignatureKind2[SignatureKind2["Construct"] = 1] = "Construct";
        return SignatureKind2;
      })(SignatureKind || {});
      SignatureFlags = /* @__PURE__ */ ((SignatureFlags5) => {
        SignatureFlags5[SignatureFlags5["None"] = 0] = "None";
        SignatureFlags5[SignatureFlags5["HasRestParameter"] = 1] = "HasRestParameter";
        SignatureFlags5[SignatureFlags5["HasLiteralTypes"] = 2] = "HasLiteralTypes";
        SignatureFlags5[SignatureFlags5["Abstract"] = 4] = "Abstract";
        SignatureFlags5[SignatureFlags5["IsInnerCallChain"] = 8] = "IsInnerCallChain";
        SignatureFlags5[SignatureFlags5["IsOuterCallChain"] = 16] = "IsOuterCallChain";
        SignatureFlags5[SignatureFlags5["IsUntypedSignatureInJSFile"] = 32] = "IsUntypedSignatureInJSFile";
        SignatureFlags5[SignatureFlags5["PropagatingFlags"] = 39] = "PropagatingFlags";
        SignatureFlags5[SignatureFlags5["CallChainFlags"] = 24] = "CallChainFlags";
        return SignatureFlags5;
      })(SignatureFlags || {});
      IndexKind = /* @__PURE__ */ ((IndexKind2) => {
        IndexKind2[IndexKind2["String"] = 0] = "String";
        IndexKind2[IndexKind2["Number"] = 1] = "Number";
        return IndexKind2;
      })(IndexKind || {});
      TypeMapKind = /* @__PURE__ */ ((TypeMapKind2) => {
        TypeMapKind2[TypeMapKind2["Simple"] = 0] = "Simple";
        TypeMapKind2[TypeMapKind2["Array"] = 1] = "Array";
        TypeMapKind2[TypeMapKind2["Deferred"] = 2] = "Deferred";
        TypeMapKind2[TypeMapKind2["Function"] = 3] = "Function";
        TypeMapKind2[TypeMapKind2["Composite"] = 4] = "Composite";
        TypeMapKind2[TypeMapKind2["Merged"] = 5] = "Merged";
        return TypeMapKind2;
      })(TypeMapKind || {});
      InferencePriority = /* @__PURE__ */ ((InferencePriority2) => {
        InferencePriority2[InferencePriority2["None"] = 0] = "None";
        InferencePriority2[InferencePriority2["NakedTypeVariable"] = 1] = "NakedTypeVariable";
        InferencePriority2[InferencePriority2["SpeculativeTuple"] = 2] = "SpeculativeTuple";
        InferencePriority2[InferencePriority2["SubstituteSource"] = 4] = "SubstituteSource";
        InferencePriority2[InferencePriority2["HomomorphicMappedType"] = 8] = "HomomorphicMappedType";
        InferencePriority2[InferencePriority2["PartialHomomorphicMappedType"] = 16] = "PartialHomomorphicMappedType";
        InferencePriority2[InferencePriority2["MappedTypeConstraint"] = 32] = "MappedTypeConstraint";
        InferencePriority2[InferencePriority2["ContravariantConditional"] = 64] = "ContravariantConditional";
        InferencePriority2[InferencePriority2["ReturnType"] = 128] = "ReturnType";
        InferencePriority2[InferencePriority2["LiteralKeyof"] = 256] = "LiteralKeyof";
        InferencePriority2[InferencePriority2["NoConstraints"] = 512] = "NoConstraints";
        InferencePriority2[InferencePriority2["AlwaysStrict"] = 1024] = "AlwaysStrict";
        InferencePriority2[InferencePriority2["MaxValue"] = 2048] = "MaxValue";
        InferencePriority2[InferencePriority2["PriorityImpliesCombination"] = 416] = "PriorityImpliesCombination";
        InferencePriority2[InferencePriority2["Circularity"] = -1] = "Circularity";
        return InferencePriority2;
      })(InferencePriority || {});
      InferenceFlags = /* @__PURE__ */ ((InferenceFlags2) => {
        InferenceFlags2[InferenceFlags2["None"] = 0] = "None";
        InferenceFlags2[InferenceFlags2["NoDefault"] = 1] = "NoDefault";
        InferenceFlags2[InferenceFlags2["AnyDefault"] = 2] = "AnyDefault";
        InferenceFlags2[InferenceFlags2["SkippedGenericFunction"] = 4] = "SkippedGenericFunction";
        return InferenceFlags2;
      })(InferenceFlags || {});
      Ternary = /* @__PURE__ */ ((Ternary2) => {
        Ternary2[Ternary2["False"] = 0] = "False";
        Ternary2[Ternary2["Unknown"] = 1] = "Unknown";
        Ternary2[Ternary2["Maybe"] = 3] = "Maybe";
        Ternary2[Ternary2["True"] = -1] = "True";
        return Ternary2;
      })(Ternary || {});
      AssignmentDeclarationKind = /* @__PURE__ */ ((AssignmentDeclarationKind2) => {
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["None"] = 0] = "None";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ExportsProperty"] = 1] = "ExportsProperty";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ModuleExports"] = 2] = "ModuleExports";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["PrototypeProperty"] = 3] = "PrototypeProperty";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ThisProperty"] = 4] = "ThisProperty";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["Property"] = 5] = "Property";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["Prototype"] = 6] = "Prototype";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ObjectDefinePropertyValue"] = 7] = "ObjectDefinePropertyValue";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ObjectDefinePropertyExports"] = 8] = "ObjectDefinePropertyExports";
        AssignmentDeclarationKind2[AssignmentDeclarationKind2["ObjectDefinePrototypeProperty"] = 9] = "ObjectDefinePrototypeProperty";
        return AssignmentDeclarationKind2;
      })(AssignmentDeclarationKind || {});
      DiagnosticCategory = /* @__PURE__ */ ((DiagnosticCategory2) => {
        DiagnosticCategory2[DiagnosticCategory2["Warning"] = 0] = "Warning";
        DiagnosticCategory2[DiagnosticCategory2["Error"] = 1] = "Error";
        DiagnosticCategory2[DiagnosticCategory2["Suggestion"] = 2] = "Suggestion";
        DiagnosticCategory2[DiagnosticCategory2["Message"] = 3] = "Message";
        return DiagnosticCategory2;
      })(DiagnosticCategory || {});
      ModuleResolutionKind = /* @__PURE__ */ ((ModuleResolutionKind2) => {
        ModuleResolutionKind2[ModuleResolutionKind2["Classic"] = 1] = "Classic";
        ModuleResolutionKind2[ModuleResolutionKind2["NodeJs"] = 2] = "NodeJs";
        ModuleResolutionKind2[ModuleResolutionKind2["Node10"] = 2] = "Node10";
        ModuleResolutionKind2[ModuleResolutionKind2["Node16"] = 3] = "Node16";
        ModuleResolutionKind2[ModuleResolutionKind2["NodeNext"] = 99] = "NodeNext";
        ModuleResolutionKind2[ModuleResolutionKind2["Bundler"] = 100] = "Bundler";
        return ModuleResolutionKind2;
      })(ModuleResolutionKind || {});
      ModuleDetectionKind = /* @__PURE__ */ ((ModuleDetectionKind2) => {
        ModuleDetectionKind2[ModuleDetectionKind2["Legacy"] = 1] = "Legacy";
        ModuleDetectionKind2[ModuleDetectionKind2["Auto"] = 2] = "Auto";
        ModuleDetectionKind2[ModuleDetectionKind2["Force"] = 3] = "Force";
        return ModuleDetectionKind2;
      })(ModuleDetectionKind || {});
      WatchFileKind = /* @__PURE__ */ ((WatchFileKind2) => {
        WatchFileKind2[WatchFileKind2["FixedPollingInterval"] = 0] = "FixedPollingInterval";
        WatchFileKind2[WatchFileKind2["PriorityPollingInterval"] = 1] = "PriorityPollingInterval";
        WatchFileKind2[WatchFileKind2["DynamicPriorityPolling"] = 2] = "DynamicPriorityPolling";
        WatchFileKind2[WatchFileKind2["FixedChunkSizePolling"] = 3] = "FixedChunkSizePolling";
        WatchFileKind2[WatchFileKind2["UseFsEvents"] = 4] = "UseFsEvents";
        WatchFileKind2[WatchFileKind2["UseFsEventsOnParentDirectory"] = 5] = "UseFsEventsOnParentDirectory";
        return WatchFileKind2;
      })(WatchFileKind || {});
      WatchDirectoryKind = /* @__PURE__ */ ((WatchDirectoryKind2) => {
        WatchDirectoryKind2[WatchDirectoryKind2["UseFsEvents"] = 0] = "UseFsEvents";
        WatchDirectoryKind2[WatchDirectoryKind2["FixedPollingInterval"] = 1] = "FixedPollingInterval";
        WatchDirectoryKind2[WatchDirectoryKind2["DynamicPriorityPolling"] = 2] = "DynamicPriorityPolling";
        WatchDirectoryKind2[WatchDirectoryKind2["FixedChunkSizePolling"] = 3] = "FixedChunkSizePolling";
        return WatchDirectoryKind2;
      })(WatchDirectoryKind || {});
      PollingWatchKind = /* @__PURE__ */ ((PollingWatchKind2) => {
        PollingWatchKind2[PollingWatchKind2["FixedInterval"] = 0] = "FixedInterval";
        PollingWatchKind2[PollingWatchKind2["PriorityInterval"] = 1] = "PriorityInterval";
        PollingWatchKind2[PollingWatchKind2["DynamicPriority"] = 2] = "DynamicPriority";
        PollingWatchKind2[PollingWatchKind2["FixedChunkSize"] = 3] = "FixedChunkSize";
        return PollingWatchKind2;
      })(PollingWatchKind || {});
      ModuleKind = /* @__PURE__ */ ((ModuleKind2) => {
        ModuleKind2[ModuleKind2["None"] = 0] = "None";
        ModuleKind2[ModuleKind2["CommonJS"] = 1] = "CommonJS";
        ModuleKind2[ModuleKind2["AMD"] = 2] = "AMD";
        ModuleKind2[ModuleKind2["UMD"] = 3] = "UMD";
        ModuleKind2[ModuleKind2["System"] = 4] = "System";
        ModuleKind2[ModuleKind2["ES2015"] = 5] = "ES2015";
        ModuleKind2[ModuleKind2["ES2020"] = 6] = "ES2020";
        ModuleKind2[ModuleKind2["ES2022"] = 7] = "ES2022";
        ModuleKind2[ModuleKind2["ESNext"] = 99] = "ESNext";
        ModuleKind2[ModuleKind2["Node16"] = 100] = "Node16";
        ModuleKind2[ModuleKind2["NodeNext"] = 199] = "NodeNext";
        return ModuleKind2;
      })(ModuleKind || {});
      JsxEmit = /* @__PURE__ */ ((JsxEmit2) => {
        JsxEmit2[JsxEmit2["None"] = 0] = "None";
        JsxEmit2[JsxEmit2["Preserve"] = 1] = "Preserve";
        JsxEmit2[JsxEmit2["React"] = 2] = "React";
        JsxEmit2[JsxEmit2["ReactNative"] = 3] = "ReactNative";
        JsxEmit2[JsxEmit2["ReactJSX"] = 4] = "ReactJSX";
        JsxEmit2[JsxEmit2["ReactJSXDev"] = 5] = "ReactJSXDev";
        return JsxEmit2;
      })(JsxEmit || {});
      ImportsNotUsedAsValues = /* @__PURE__ */ ((ImportsNotUsedAsValues2) => {
        ImportsNotUsedAsValues2[ImportsNotUsedAsValues2["Remove"] = 0] = "Remove";
        ImportsNotUsedAsValues2[ImportsNotUsedAsValues2["Preserve"] = 1] = "Preserve";
        ImportsNotUsedAsValues2[ImportsNotUsedAsValues2["Error"] = 2] = "Error";
        return ImportsNotUsedAsValues2;
      })(ImportsNotUsedAsValues || {});
      NewLineKind = /* @__PURE__ */ ((NewLineKind2) => {
        NewLineKind2[NewLineKind2["CarriageReturnLineFeed"] = 0] = "CarriageReturnLineFeed";
        NewLineKind2[NewLineKind2["LineFeed"] = 1] = "LineFeed";
        return NewLineKind2;
      })(NewLineKind || {});
      ScriptKind = /* @__PURE__ */ ((ScriptKind5) => {
        ScriptKind5[ScriptKind5["Unknown"] = 0] = "Unknown";
        ScriptKind5[ScriptKind5["JS"] = 1] = "JS";
        ScriptKind5[ScriptKind5["JSX"] = 2] = "JSX";
        ScriptKind5[ScriptKind5["TS"] = 3] = "TS";
        ScriptKind5[ScriptKind5["TSX"] = 4] = "TSX";
        ScriptKind5[ScriptKind5["External"] = 5] = "External";
        ScriptKind5[ScriptKind5["JSON"] = 6] = "JSON";
        ScriptKind5[ScriptKind5["Deferred"] = 7] = "Deferred";
        return ScriptKind5;
      })(ScriptKind || {});
      ScriptTarget = /* @__PURE__ */ ((ScriptTarget10) => {
        ScriptTarget10[ScriptTarget10["ES3"] = 0] = "ES3";
        ScriptTarget10[ScriptTarget10["ES5"] = 1] = "ES5";
        ScriptTarget10[ScriptTarget10["ES2015"] = 2] = "ES2015";
        ScriptTarget10[ScriptTarget10["ES2016"] = 3] = "ES2016";
        ScriptTarget10[ScriptTarget10["ES2017"] = 4] = "ES2017";
        ScriptTarget10[ScriptTarget10["ES2018"] = 5] = "ES2018";
        ScriptTarget10[ScriptTarget10["ES2019"] = 6] = "ES2019";
        ScriptTarget10[ScriptTarget10["ES2020"] = 7] = "ES2020";
        ScriptTarget10[ScriptTarget10["ES2021"] = 8] = "ES2021";
        ScriptTarget10[ScriptTarget10["ES2022"] = 9] = "ES2022";
        ScriptTarget10[ScriptTarget10["ESNext"] = 99] = "ESNext";
        ScriptTarget10[ScriptTarget10["JSON"] = 100] = "JSON";
        ScriptTarget10[ScriptTarget10["Latest"] = 99 /* ESNext */] = "Latest";
        return ScriptTarget10;
      })(ScriptTarget || {});
      LanguageVariant = /* @__PURE__ */ ((LanguageVariant4) => {
        LanguageVariant4[LanguageVariant4["Standard"] = 0] = "Standard";
        LanguageVariant4[LanguageVariant4["JSX"] = 1] = "JSX";
        return LanguageVariant4;
      })(LanguageVariant || {});
      WatchDirectoryFlags = /* @__PURE__ */ ((WatchDirectoryFlags3) => {
        WatchDirectoryFlags3[WatchDirectoryFlags3["None"] = 0] = "None";
        WatchDirectoryFlags3[WatchDirectoryFlags3["Recursive"] = 1] = "Recursive";
        return WatchDirectoryFlags3;
      })(WatchDirectoryFlags || {});
      CharacterCodes = /* @__PURE__ */ ((CharacterCodes2) => {
        CharacterCodes2[CharacterCodes2["nullCharacter"] = 0] = "nullCharacter";
        CharacterCodes2[CharacterCodes2["maxAsciiCharacter"] = 127] = "maxAsciiCharacter";
        CharacterCodes2[CharacterCodes2["lineFeed"] = 10] = "lineFeed";
        CharacterCodes2[CharacterCodes2["carriageReturn"] = 13] = "carriageReturn";
        CharacterCodes2[CharacterCodes2["lineSeparator"] = 8232] = "lineSeparator";
        CharacterCodes2[CharacterCodes2["paragraphSeparator"] = 8233] = "paragraphSeparator";
        CharacterCodes2[CharacterCodes2["nextLine"] = 133] = "nextLine";
        CharacterCodes2[CharacterCodes2["space"] = 32] = "space";
        CharacterCodes2[CharacterCodes2["nonBreakingSpace"] = 160] = "nonBreakingSpace";
        CharacterCodes2[CharacterCodes2["enQuad"] = 8192] = "enQuad";
        CharacterCodes2[CharacterCodes2["emQuad"] = 8193] = "emQuad";
        CharacterCodes2[CharacterCodes2["enSpace"] = 8194] = "enSpace";
        CharacterCodes2[CharacterCodes2["emSpace"] = 8195] = "emSpace";
        CharacterCodes2[CharacterCodes2["threePerEmSpace"] = 8196] = "threePerEmSpace";
        CharacterCodes2[CharacterCodes2["fourPerEmSpace"] = 8197] = "fourPerEmSpace";
        CharacterCodes2[CharacterCodes2["sixPerEmSpace"] = 8198] = "sixPerEmSpace";
        CharacterCodes2[CharacterCodes2["figureSpace"] = 8199] = "figureSpace";
        CharacterCodes2[CharacterCodes2["punctuationSpace"] = 8200] = "punctuationSpace";
        CharacterCodes2[CharacterCodes2["thinSpace"] = 8201] = "thinSpace";
        CharacterCodes2[CharacterCodes2["hairSpace"] = 8202] = "hairSpace";
        CharacterCodes2[CharacterCodes2["zeroWidthSpace"] = 8203] = "zeroWidthSpace";
        CharacterCodes2[CharacterCodes2["narrowNoBreakSpace"] = 8239] = "narrowNoBreakSpace";
        CharacterCodes2[CharacterCodes2["ideographicSpace"] = 12288] = "ideographicSpace";
        CharacterCodes2[CharacterCodes2["mathematicalSpace"] = 8287] = "mathematicalSpace";
        CharacterCodes2[CharacterCodes2["ogham"] = 5760] = "ogham";
        CharacterCodes2[CharacterCodes2["_"] = 95] = "_";
        CharacterCodes2[CharacterCodes2["$"] = 36] = "$";
        CharacterCodes2[CharacterCodes2["_0"] = 48] = "_0";
        CharacterCodes2[CharacterCodes2["_1"] = 49] = "_1";
        CharacterCodes2[CharacterCodes2["_2"] = 50] = "_2";
        CharacterCodes2[CharacterCodes2["_3"] = 51] = "_3";
        CharacterCodes2[CharacterCodes2["_4"] = 52] = "_4";
        CharacterCodes2[CharacterCodes2["_5"] = 53] = "_5";
        CharacterCodes2[CharacterCodes2["_6"] = 54] = "_6";
        CharacterCodes2[CharacterCodes2["_7"] = 55] = "_7";
        CharacterCodes2[CharacterCodes2["_8"] = 56] = "_8";
        CharacterCodes2[CharacterCodes2["_9"] = 57] = "_9";
        CharacterCodes2[CharacterCodes2["a"] = 97] = "a";
        CharacterCodes2[CharacterCodes2["b"] = 98] = "b";
        CharacterCodes2[CharacterCodes2["c"] = 99] = "c";
        CharacterCodes2[CharacterCodes2["d"] = 100] = "d";
        CharacterCodes2[CharacterCodes2["e"] = 101] = "e";
        CharacterCodes2[CharacterCodes2["f"] = 102] = "f";
        CharacterCodes2[CharacterCodes2["g"] = 103] = "g";
        CharacterCodes2[CharacterCodes2["h"] = 104] = "h";
        CharacterCodes2[CharacterCodes2["i"] = 105] = "i";
        CharacterCodes2[CharacterCodes2["j"] = 106] = "j";
        CharacterCodes2[CharacterCodes2["k"] = 107] = "k";
        CharacterCodes2[CharacterCodes2["l"] = 108] = "l";
        CharacterCodes2[CharacterCodes2["m"] = 109] = "m";
        CharacterCodes2[CharacterCodes2["n"] = 110] = "n";
        CharacterCodes2[CharacterCodes2["o"] = 111] = "o";
        CharacterCodes2[CharacterCodes2["p"] = 112] = "p";
        CharacterCodes2[CharacterCodes2["q"] = 113] = "q";
        CharacterCodes2[CharacterCodes2["r"] = 114] = "r";
        CharacterCodes2[CharacterCodes2["s"] = 115] = "s";
        CharacterCodes2[CharacterCodes2["t"] = 116] = "t";
        CharacterCodes2[CharacterCodes2["u"] = 117] = "u";
        CharacterCodes2[CharacterCodes2["v"] = 118] = "v";
        CharacterCodes2[CharacterCodes2["w"] = 119] = "w";
        CharacterCodes2[CharacterCodes2["x"] = 120] = "x";
        CharacterCodes2[CharacterCodes2["y"] = 121] = "y";
        CharacterCodes2[CharacterCodes2["z"] = 122] = "z";
        CharacterCodes2[CharacterCodes2["A"] = 65] = "A";
        CharacterCodes2[CharacterCodes2["B"] = 66] = "B";
        CharacterCodes2[CharacterCodes2["C"] = 67] = "C";
        CharacterCodes2[CharacterCodes2["D"] = 68] = "D";
        CharacterCodes2[CharacterCodes2["E"] = 69] = "E";
        CharacterCodes2[CharacterCodes2["F"] = 70] = "F";
        CharacterCodes2[CharacterCodes2["G"] = 71] = "G";
        CharacterCodes2[CharacterCodes2["H"] = 72] = "H";
        CharacterCodes2[CharacterCodes2["I"] = 73] = "I";
        CharacterCodes2[CharacterCodes2["J"] = 74] = "J";
        CharacterCodes2[CharacterCodes2["K"] = 75] = "K";
        CharacterCodes2[CharacterCodes2["L"] = 76] = "L";
        CharacterCodes2[CharacterCodes2["M"] = 77] = "M";
        CharacterCodes2[CharacterCodes2["N"] = 78] = "N";
        CharacterCodes2[CharacterCodes2["O"] = 79] = "O";
        CharacterCodes2[CharacterCodes2["P"] = 80] = "P";
        CharacterCodes2[CharacterCodes2["Q"] = 81] = "Q";
        CharacterCodes2[CharacterCodes2["R"] = 82] = "R";
        CharacterCodes2[CharacterCodes2["S"] = 83] = "S";
        CharacterCodes2[CharacterCodes2["T"] = 84] = "T";
        CharacterCodes2[CharacterCodes2["U"] = 85] = "U";
        CharacterCodes2[CharacterCodes2["V"] = 86] = "V";
        CharacterCodes2[CharacterCodes2["W"] = 87] = "W";
        CharacterCodes2[CharacterCodes2["X"] = 88] = "X";
        CharacterCodes2[CharacterCodes2["Y"] = 89] = "Y";
        CharacterCodes2[CharacterCodes2["Z"] = 90] = "Z";
        CharacterCodes2[CharacterCodes2["ampersand"] = 38] = "ampersand";
        CharacterCodes2[CharacterCodes2["asterisk"] = 42] = "asterisk";
        CharacterCodes2[CharacterCodes2["at"] = 64] = "at";
        CharacterCodes2[CharacterCodes2["backslash"] = 92] = "backslash";
        CharacterCodes2[CharacterCodes2["backtick"] = 96] = "backtick";
        CharacterCodes2[CharacterCodes2["bar"] = 124] = "bar";
        CharacterCodes2[CharacterCodes2["caret"] = 94] = "caret";
        CharacterCodes2[CharacterCodes2["closeBrace"] = 125] = "closeBrace";
        CharacterCodes2[CharacterCodes2["closeBracket"] = 93] = "closeBracket";
        CharacterCodes2[CharacterCodes2["closeParen"] = 41] = "closeParen";
        CharacterCodes2[CharacterCodes2["colon"] = 58] = "colon";
        CharacterCodes2[CharacterCodes2["comma"] = 44] = "comma";
        CharacterCodes2[CharacterCodes2["dot"] = 46] = "dot";
        CharacterCodes2[CharacterCodes2["doubleQuote"] = 34] = "doubleQuote";
        CharacterCodes2[CharacterCodes2["equals"] = 61] = "equals";
        CharacterCodes2[CharacterCodes2["exclamation"] = 33] = "exclamation";
        CharacterCodes2[CharacterCodes2["greaterThan"] = 62] = "greaterThan";
        CharacterCodes2[CharacterCodes2["hash"] = 35] = "hash";
        CharacterCodes2[CharacterCodes2["lessThan"] = 60] = "lessThan";
        CharacterCodes2[CharacterCodes2["minus"] = 45] = "minus";
        CharacterCodes2[CharacterCodes2["openBrace"] = 123] = "openBrace";
        CharacterCodes2[CharacterCodes2["openBracket"] = 91] = "openBracket";
        CharacterCodes2[CharacterCodes2["openParen"] = 40] = "openParen";
        CharacterCodes2[CharacterCodes2["percent"] = 37] = "percent";
        CharacterCodes2[CharacterCodes2["plus"] = 43] = "plus";
        CharacterCodes2[CharacterCodes2["question"] = 63] = "question";
        CharacterCodes2[CharacterCodes2["semicolon"] = 59] = "semicolon";
        CharacterCodes2[CharacterCodes2["singleQuote"] = 39] = "singleQuote";
        CharacterCodes2[CharacterCodes2["slash"] = 47] = "slash";
        CharacterCodes2[CharacterCodes2["tilde"] = 126] = "tilde";
        CharacterCodes2[CharacterCodes2["backspace"] = 8] = "backspace";
        CharacterCodes2[CharacterCodes2["formFeed"] = 12] = "formFeed";
        CharacterCodes2[CharacterCodes2["byteOrderMark"] = 65279] = "byteOrderMark";
        CharacterCodes2[CharacterCodes2["tab"] = 9] = "tab";
        CharacterCodes2[CharacterCodes2["verticalTab"] = 11] = "verticalTab";
        return CharacterCodes2;
      })(CharacterCodes || {});
      Extension = /* @__PURE__ */ ((Extension2) => {
        Extension2["Ts"] = ".ts";
        Extension2["Tsx"] = ".tsx";
        Extension2["Dts"] = ".d.ts";
        Extension2["Js"] = ".js";
        Extension2["Jsx"] = ".jsx";
        Extension2["Json"] = ".json";
        Extension2["TsBuildInfo"] = ".tsbuildinfo";
        Extension2["Mjs"] = ".mjs";
        Extension2["Mts"] = ".mts";
        Extension2["Dmts"] = ".d.mts";
        Extension2["Cjs"] = ".cjs";
        Extension2["Cts"] = ".cts";
        Extension2["Dcts"] = ".d.cts";
        return Extension2;
      })(Extension || {});
      TransformFlags = /* @__PURE__ */ ((TransformFlags3) => {
        TransformFlags3[TransformFlags3["None"] = 0] = "None";
        TransformFlags3[TransformFlags3["ContainsTypeScript"] = 1] = "ContainsTypeScript";
        TransformFlags3[TransformFlags3["ContainsJsx"] = 2] = "ContainsJsx";
        TransformFlags3[TransformFlags3["ContainsESNext"] = 4] = "ContainsESNext";
        TransformFlags3[TransformFlags3["ContainsES2022"] = 8] = "ContainsES2022";
        TransformFlags3[TransformFlags3["ContainsES2021"] = 16] = "ContainsES2021";
        TransformFlags3[TransformFlags3["ContainsES2020"] = 32] = "ContainsES2020";
        TransformFlags3[TransformFlags3["ContainsES2019"] = 64] = "ContainsES2019";
        TransformFlags3[TransformFlags3["ContainsES2018"] = 128] = "ContainsES2018";
        TransformFlags3[TransformFlags3["ContainsES2017"] = 256] = "ContainsES2017";
        TransformFlags3[TransformFlags3["ContainsES2016"] = 512] = "ContainsES2016";
        TransformFlags3[TransformFlags3["ContainsES2015"] = 1024] = "ContainsES2015";
        TransformFlags3[TransformFlags3["ContainsGenerator"] = 2048] = "ContainsGenerator";
        TransformFlags3[TransformFlags3["ContainsDestructuringAssignment"] = 4096] = "ContainsDestructuringAssignment";
        TransformFlags3[TransformFlags3["ContainsTypeScriptClassSyntax"] = 8192] = "ContainsTypeScriptClassSyntax";
        TransformFlags3[TransformFlags3["ContainsLexicalThis"] = 16384] = "ContainsLexicalThis";
        TransformFlags3[TransformFlags3["ContainsRestOrSpread"] = 32768] = "ContainsRestOrSpread";
        TransformFlags3[TransformFlags3["ContainsObjectRestOrSpread"] = 65536] = "ContainsObjectRestOrSpread";
        TransformFlags3[TransformFlags3["ContainsComputedPropertyName"] = 131072] = "ContainsComputedPropertyName";
        TransformFlags3[TransformFlags3["ContainsBlockScopedBinding"] = 262144] = "ContainsBlockScopedBinding";
        TransformFlags3[TransformFlags3["ContainsBindingPattern"] = 524288] = "ContainsBindingPattern";
        TransformFlags3[TransformFlags3["ContainsYield"] = 1048576] = "ContainsYield";
        TransformFlags3[TransformFlags3["ContainsAwait"] = 2097152] = "ContainsAwait";
        TransformFlags3[TransformFlags3["ContainsHoistedDeclarationOrCompletion"] = 4194304] = "ContainsHoistedDeclarationOrCompletion";
        TransformFlags3[TransformFlags3["ContainsDynamicImport"] = 8388608] = "ContainsDynamicImport";
        TransformFlags3[TransformFlags3["ContainsClassFields"] = 16777216] = "ContainsClassFields";
        TransformFlags3[TransformFlags3["ContainsDecorators"] = 33554432] = "ContainsDecorators";
        TransformFlags3[TransformFlags3["ContainsPossibleTopLevelAwait"] = 67108864] = "ContainsPossibleTopLevelAwait";
        TransformFlags3[TransformFlags3["ContainsLexicalSuper"] = 134217728] = "ContainsLexicalSuper";
        TransformFlags3[TransformFlags3["ContainsUpdateExpressionForIdentifier"] = 268435456] = "ContainsUpdateExpressionForIdentifier";
        TransformFlags3[TransformFlags3["ContainsPrivateIdentifierInExpression"] = 536870912] = "ContainsPrivateIdentifierInExpression";
        TransformFlags3[TransformFlags3["HasComputedFlags"] = -2147483648] = "HasComputedFlags";
        TransformFlags3[TransformFlags3["AssertTypeScript"] = 1 /* ContainsTypeScript */] = "AssertTypeScript";
        TransformFlags3[TransformFlags3["AssertJsx"] = 2 /* ContainsJsx */] = "AssertJsx";
        TransformFlags3[TransformFlags3["AssertESNext"] = 4 /* ContainsESNext */] = "AssertESNext";
        TransformFlags3[TransformFlags3["AssertES2022"] = 8 /* ContainsES2022 */] = "AssertES2022";
        TransformFlags3[TransformFlags3["AssertES2021"] = 16 /* ContainsES2021 */] = "AssertES2021";
        TransformFlags3[TransformFlags3["AssertES2020"] = 32 /* ContainsES2020 */] = "AssertES2020";
        TransformFlags3[TransformFlags3["AssertES2019"] = 64 /* ContainsES2019 */] = "AssertES2019";
        TransformFlags3[TransformFlags3["AssertES2018"] = 128 /* ContainsES2018 */] = "AssertES2018";
        TransformFlags3[TransformFlags3["AssertES2017"] = 256 /* ContainsES2017 */] = "AssertES2017";
        TransformFlags3[TransformFlags3["AssertES2016"] = 512 /* ContainsES2016 */] = "AssertES2016";
        TransformFlags3[TransformFlags3["AssertES2015"] = 1024 /* ContainsES2015 */] = "AssertES2015";
        TransformFlags3[TransformFlags3["AssertGenerator"] = 2048 /* ContainsGenerator */] = "AssertGenerator";
        TransformFlags3[TransformFlags3["AssertDestructuringAssignment"] = 4096 /* ContainsDestructuringAssignment */] = "AssertDestructuringAssignment";
        TransformFlags3[TransformFlags3["OuterExpressionExcludes"] = -2147483648 /* HasComputedFlags */] = "OuterExpressionExcludes";
        TransformFlags3[TransformFlags3["PropertyAccessExcludes"] = -2147483648 /* OuterExpressionExcludes */] = "PropertyAccessExcludes";
        TransformFlags3[TransformFlags3["NodeExcludes"] = -2147483648 /* PropertyAccessExcludes */] = "NodeExcludes";
        TransformFlags3[TransformFlags3["ArrowFunctionExcludes"] = -2072174592] = "ArrowFunctionExcludes";
        TransformFlags3[TransformFlags3["FunctionExcludes"] = -1937940480] = "FunctionExcludes";
        TransformFlags3[TransformFlags3["ConstructorExcludes"] = -1937948672] = "ConstructorExcludes";
        TransformFlags3[TransformFlags3["MethodOrAccessorExcludes"] = -2005057536] = "MethodOrAccessorExcludes";
        TransformFlags3[TransformFlags3["PropertyExcludes"] = -2013249536] = "PropertyExcludes";
        TransformFlags3[TransformFlags3["ClassExcludes"] = -2147344384] = "ClassExcludes";
        TransformFlags3[TransformFlags3["ModuleExcludes"] = -1941676032] = "ModuleExcludes";
        TransformFlags3[TransformFlags3["TypeExcludes"] = -2] = "TypeExcludes";
        TransformFlags3[TransformFlags3["ObjectLiteralExcludes"] = -2147278848] = "ObjectLiteralExcludes";
        TransformFlags3[TransformFlags3["ArrayLiteralOrCallOrNewExcludes"] = -2147450880] = "ArrayLiteralOrCallOrNewExcludes";
        TransformFlags3[TransformFlags3["VariableDeclarationListExcludes"] = -2146893824] = "VariableDeclarationListExcludes";
        TransformFlags3[TransformFlags3["ParameterExcludes"] = -2147483648 /* NodeExcludes */] = "ParameterExcludes";
        TransformFlags3[TransformFlags3["CatchClauseExcludes"] = -2147418112] = "CatchClauseExcludes";
        TransformFlags3[TransformFlags3["BindingPatternExcludes"] = -2147450880] = "BindingPatternExcludes";
        TransformFlags3[TransformFlags3["ContainsLexicalThisOrSuper"] = 134234112] = "ContainsLexicalThisOrSuper";
        TransformFlags3[TransformFlags3["PropertyNamePropagatingFlags"] = 134234112] = "PropertyNamePropagatingFlags";
        return TransformFlags3;
      })(TransformFlags || {});
      SnippetKind = /* @__PURE__ */ ((SnippetKind3) => {
        SnippetKind3[SnippetKind3["TabStop"] = 0] = "TabStop";
        SnippetKind3[SnippetKind3["Placeholder"] = 1] = "Placeholder";
        SnippetKind3[SnippetKind3["Choice"] = 2] = "Choice";
        SnippetKind3[SnippetKind3["Variable"] = 3] = "Variable";
        return SnippetKind3;
      })(SnippetKind || {});
      EmitFlags = /* @__PURE__ */ ((EmitFlags3) => {
        EmitFlags3[EmitFlags3["None"] = 0] = "None";
        EmitFlags3[EmitFlags3["SingleLine"] = 1] = "SingleLine";
        EmitFlags3[EmitFlags3["MultiLine"] = 2] = "MultiLine";
        EmitFlags3[EmitFlags3["AdviseOnEmitNode"] = 4] = "AdviseOnEmitNode";
        EmitFlags3[EmitFlags3["NoSubstitution"] = 8] = "NoSubstitution";
        EmitFlags3[EmitFlags3["CapturesThis"] = 16] = "CapturesThis";
        EmitFlags3[EmitFlags3["NoLeadingSourceMap"] = 32] = "NoLeadingSourceMap";
        EmitFlags3[EmitFlags3["NoTrailingSourceMap"] = 64] = "NoTrailingSourceMap";
        EmitFlags3[EmitFlags3["NoSourceMap"] = 96] = "NoSourceMap";
        EmitFlags3[EmitFlags3["NoNestedSourceMaps"] = 128] = "NoNestedSourceMaps";
        EmitFlags3[EmitFlags3["NoTokenLeadingSourceMaps"] = 256] = "NoTokenLeadingSourceMaps";
        EmitFlags3[EmitFlags3["NoTokenTrailingSourceMaps"] = 512] = "NoTokenTrailingSourceMaps";
        EmitFlags3[EmitFlags3["NoTokenSourceMaps"] = 768] = "NoTokenSourceMaps";
        EmitFlags3[EmitFlags3["NoLeadingComments"] = 1024] = "NoLeadingComments";
        EmitFlags3[EmitFlags3["NoTrailingComments"] = 2048] = "NoTrailingComments";
        EmitFlags3[EmitFlags3["NoComments"] = 3072] = "NoComments";
        EmitFlags3[EmitFlags3["NoNestedComments"] = 4096] = "NoNestedComments";
        EmitFlags3[EmitFlags3["HelperName"] = 8192] = "HelperName";
        EmitFlags3[EmitFlags3["ExportName"] = 16384] = "ExportName";
        EmitFlags3[EmitFlags3["LocalName"] = 32768] = "LocalName";
        EmitFlags3[EmitFlags3["InternalName"] = 65536] = "InternalName";
        EmitFlags3[EmitFlags3["Indented"] = 131072] = "Indented";
        EmitFlags3[EmitFlags3["NoIndentation"] = 262144] = "NoIndentation";
        EmitFlags3[EmitFlags3["AsyncFunctionBody"] = 524288] = "AsyncFunctionBody";
        EmitFlags3[EmitFlags3["ReuseTempVariableScope"] = 1048576] = "ReuseTempVariableScope";
        EmitFlags3[EmitFlags3["CustomPrologue"] = 2097152] = "CustomPrologue";
        EmitFlags3[EmitFlags3["NoHoisting"] = 4194304] = "NoHoisting";
        EmitFlags3[EmitFlags3["HasEndOfDeclarationMarker"] = 8388608] = "HasEndOfDeclarationMarker";
        EmitFlags3[EmitFlags3["Iterator"] = 16777216] = "Iterator";
        EmitFlags3[EmitFlags3["NoAsciiEscaping"] = 33554432] = "NoAsciiEscaping";
        return EmitFlags3;
      })(EmitFlags || {});
      InternalEmitFlags = /* @__PURE__ */ ((InternalEmitFlags3) => {
        InternalEmitFlags3[InternalEmitFlags3["None"] = 0] = "None";
        InternalEmitFlags3[InternalEmitFlags3["TypeScriptClassWrapper"] = 1] = "TypeScriptClassWrapper";
        InternalEmitFlags3[InternalEmitFlags3["NeverApplyImportHelper"] = 2] = "NeverApplyImportHelper";
        InternalEmitFlags3[InternalEmitFlags3["IgnoreSourceNewlines"] = 4] = "IgnoreSourceNewlines";
        InternalEmitFlags3[InternalEmitFlags3["Immutable"] = 8] = "Immutable";
        InternalEmitFlags3[InternalEmitFlags3["IndirectCall"] = 16] = "IndirectCall";
        InternalEmitFlags3[InternalEmitFlags3["TransformPrivateStaticElements"] = 32] = "TransformPrivateStaticElements";
        return InternalEmitFlags3;
      })(InternalEmitFlags || {});
      ExternalEmitHelpers = /* @__PURE__ */ ((ExternalEmitHelpers2) => {
        ExternalEmitHelpers2[ExternalEmitHelpers2["Extends"] = 1] = "Extends";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Assign"] = 2] = "Assign";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Rest"] = 4] = "Rest";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Decorate"] = 8] = "Decorate";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ESDecorateAndRunInitializers"] = 8 /* Decorate */] = "ESDecorateAndRunInitializers";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Metadata"] = 16] = "Metadata";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Param"] = 32] = "Param";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Awaiter"] = 64] = "Awaiter";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Generator"] = 128] = "Generator";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Values"] = 256] = "Values";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Read"] = 512] = "Read";
        ExternalEmitHelpers2[ExternalEmitHelpers2["SpreadArray"] = 1024] = "SpreadArray";
        ExternalEmitHelpers2[ExternalEmitHelpers2["Await"] = 2048] = "Await";
        ExternalEmitHelpers2[ExternalEmitHelpers2["AsyncGenerator"] = 4096] = "AsyncGenerator";
        ExternalEmitHelpers2[ExternalEmitHelpers2["AsyncDelegator"] = 8192] = "AsyncDelegator";
        ExternalEmitHelpers2[ExternalEmitHelpers2["AsyncValues"] = 16384] = "AsyncValues";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ExportStar"] = 32768] = "ExportStar";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ImportStar"] = 65536] = "ImportStar";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ImportDefault"] = 131072] = "ImportDefault";
        ExternalEmitHelpers2[ExternalEmitHelpers2["MakeTemplateObject"] = 262144] = "MakeTemplateObject";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ClassPrivateFieldGet"] = 524288] = "ClassPrivateFieldGet";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ClassPrivateFieldSet"] = 1048576] = "ClassPrivateFieldSet";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ClassPrivateFieldIn"] = 2097152] = "ClassPrivateFieldIn";
        ExternalEmitHelpers2[ExternalEmitHelpers2["CreateBinding"] = 4194304] = "CreateBinding";
        ExternalEmitHelpers2[ExternalEmitHelpers2["SetFunctionName"] = 8388608] = "SetFunctionName";
        ExternalEmitHelpers2[ExternalEmitHelpers2["PropKey"] = 16777216] = "PropKey";
        ExternalEmitHelpers2[ExternalEmitHelpers2["FirstEmitHelper"] = 1 /* Extends */] = "FirstEmitHelper";
        ExternalEmitHelpers2[ExternalEmitHelpers2["LastEmitHelper"] = 16777216 /* PropKey */] = "LastEmitHelper";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ForOfIncludes"] = 256 /* Values */] = "ForOfIncludes";
        ExternalEmitHelpers2[ExternalEmitHelpers2["ForAwaitOfIncludes"] = 16384 /* AsyncValues */] = "ForAwaitOfIncludes";
        ExternalEmitHelpers2[ExternalEmitHelpers2["AsyncGeneratorIncludes"] = 6144] = "AsyncGeneratorIncludes";
        ExternalEmitHelpers2[ExternalEmitHelpers2["AsyncDelegatorIncludes"] = 26624] = "AsyncDelegatorIncludes";
        ExternalEmitHelpers2[ExternalEmitHelpers2["SpreadIncludes"] = 1536] = "SpreadIncludes";
        return ExternalEmitHelpers2;
      })(ExternalEmitHelpers || {});
      EmitHint = /* @__PURE__ */ ((EmitHint6) => {
        EmitHint6[EmitHint6["SourceFile"] = 0] = "SourceFile";
        EmitHint6[EmitHint6["Expression"] = 1] = "Expression";
        EmitHint6[EmitHint6["IdentifierName"] = 2] = "IdentifierName";
        EmitHint6[EmitHint6["MappedTypeParameter"] = 3] = "MappedTypeParameter";
        EmitHint6[EmitHint6["Unspecified"] = 4] = "Unspecified";
        EmitHint6[EmitHint6["EmbeddedStatement"] = 5] = "EmbeddedStatement";
        EmitHint6[EmitHint6["JsxAttributeValue"] = 6] = "JsxAttributeValue";
        return EmitHint6;
      })(EmitHint || {});
      OuterExpressionKinds = /* @__PURE__ */ ((OuterExpressionKinds2) => {
        OuterExpressionKinds2[OuterExpressionKinds2["Parentheses"] = 1] = "Parentheses";
        OuterExpressionKinds2[OuterExpressionKinds2["TypeAssertions"] = 2] = "TypeAssertions";
        OuterExpressionKinds2[OuterExpressionKinds2["NonNullAssertions"] = 4] = "NonNullAssertions";
        OuterExpressionKinds2[OuterExpressionKinds2["PartiallyEmittedExpressions"] = 8] = "PartiallyEmittedExpressions";
        OuterExpressionKinds2[OuterExpressionKinds2["Assertions"] = 6] = "Assertions";
        OuterExpressionKinds2[OuterExpressionKinds2["All"] = 15] = "All";
        OuterExpressionKinds2[OuterExpressionKinds2["ExcludeJSDocTypeAssertion"] = 16] = "ExcludeJSDocTypeAssertion";
        return OuterExpressionKinds2;
      })(OuterExpressionKinds || {});
      LexicalEnvironmentFlags = /* @__PURE__ */ ((LexicalEnvironmentFlags2) => {
        LexicalEnvironmentFlags2[LexicalEnvironmentFlags2["None"] = 0] = "None";
        LexicalEnvironmentFlags2[LexicalEnvironmentFlags2["InParameters"] = 1] = "InParameters";
        LexicalEnvironmentFlags2[LexicalEnvironmentFlags2["VariablesHoistedInParameters"] = 2] = "VariablesHoistedInParameters";
        return LexicalEnvironmentFlags2;
      })(LexicalEnvironmentFlags || {});
      BundleFileSectionKind = /* @__PURE__ */ ((BundleFileSectionKind2) => {
        BundleFileSectionKind2["Prologue"] = "prologue";
        BundleFileSectionKind2["EmitHelpers"] = "emitHelpers";
        BundleFileSectionKind2["NoDefaultLib"] = "no-default-lib";
        BundleFileSectionKind2["Reference"] = "reference";
        BundleFileSectionKind2["Type"] = "type";
        BundleFileSectionKind2["TypeResolutionModeRequire"] = "type-require";
        BundleFileSectionKind2["TypeResolutionModeImport"] = "type-import";
        BundleFileSectionKind2["Lib"] = "lib";
        BundleFileSectionKind2["Prepend"] = "prepend";
        BundleFileSectionKind2["Text"] = "text";
        BundleFileSectionKind2["Internal"] = "internal";
        return BundleFileSectionKind2;
      })(BundleFileSectionKind || {});
      ListFormat = /* @__PURE__ */ ((ListFormat2) => {
        ListFormat2[ListFormat2["None"] = 0] = "None";
        ListFormat2[ListFormat2["SingleLine"] = 0] = "SingleLine";
        ListFormat2[ListFormat2["MultiLine"] = 1] = "MultiLine";
        ListFormat2[ListFormat2["PreserveLines"] = 2] = "PreserveLines";
        ListFormat2[ListFormat2["LinesMask"] = 3] = "LinesMask";
        ListFormat2[ListFormat2["NotDelimited"] = 0] = "NotDelimited";
        ListFormat2[ListFormat2["BarDelimited"] = 4] = "BarDelimited";
        ListFormat2[ListFormat2["AmpersandDelimited"] = 8] = "AmpersandDelimited";
        ListFormat2[ListFormat2["CommaDelimited"] = 16] = "CommaDelimited";
        ListFormat2[ListFormat2["AsteriskDelimited"] = 32] = "AsteriskDelimited";
        ListFormat2[ListFormat2["DelimitersMask"] = 60] = "DelimitersMask";
        ListFormat2[ListFormat2["AllowTrailingComma"] = 64] = "AllowTrailingComma";
        ListFormat2[ListFormat2["Indented"] = 128] = "Indented";
        ListFormat2[ListFormat2["SpaceBetweenBraces"] = 256] = "SpaceBetweenBraces";
        ListFormat2[ListFormat2["SpaceBetweenSiblings"] = 512] = "SpaceBetweenSiblings";
        ListFormat2[ListFormat2["Braces"] = 1024] = "Braces";
        ListFormat2[ListFormat2["Parenthesis"] = 2048] = "Parenthesis";
        ListFormat2[ListFormat2["AngleBrackets"] = 4096] = "AngleBrackets";
        ListFormat2[ListFormat2["SquareBrackets"] = 8192] = "SquareBrackets";
        ListFormat2[ListFormat2["BracketsMask"] = 15360] = "BracketsMask";
        ListFormat2[ListFormat2["OptionalIfUndefined"] = 16384] = "OptionalIfUndefined";
        ListFormat2[ListFormat2["OptionalIfEmpty"] = 32768] = "OptionalIfEmpty";
        ListFormat2[ListFormat2["Optional"] = 49152] = "Optional";
        ListFormat2[ListFormat2["PreferNewLine"] = 65536] = "PreferNewLine";
        ListFormat2[ListFormat2["NoTrailingNewLine"] = 131072] = "NoTrailingNewLine";
        ListFormat2[ListFormat2["NoInterveningComments"] = 262144] = "NoInterveningComments";
        ListFormat2[ListFormat2["NoSpaceIfEmpty"] = 524288] = "NoSpaceIfEmpty";
        ListFormat2[ListFormat2["SingleElement"] = 1048576] = "SingleElement";
        ListFormat2[ListFormat2["SpaceAfterList"] = 2097152] = "SpaceAfterList";
        ListFormat2[ListFormat2["Modifiers"] = 2359808] = "Modifiers";
        ListFormat2[ListFormat2["HeritageClauses"] = 512] = "HeritageClauses";
        ListFormat2[ListFormat2["SingleLineTypeLiteralMembers"] = 768] = "SingleLineTypeLiteralMembers";
        ListFormat2[ListFormat2["MultiLineTypeLiteralMembers"] = 32897] = "MultiLineTypeLiteralMembers";
        ListFormat2[ListFormat2["SingleLineTupleTypeElements"] = 528] = "SingleLineTupleTypeElements";
        ListFormat2[ListFormat2["MultiLineTupleTypeElements"] = 657] = "MultiLineTupleTypeElements";
        ListFormat2[ListFormat2["UnionTypeConstituents"] = 516] = "UnionTypeConstituents";
        ListFormat2[ListFormat2["IntersectionTypeConstituents"] = 520] = "IntersectionTypeConstituents";
        ListFormat2[ListFormat2["ObjectBindingPatternElements"] = 525136] = "ObjectBindingPatternElements";
        ListFormat2[ListFormat2["ArrayBindingPatternElements"] = 524880] = "ArrayBindingPatternElements";
        ListFormat2[ListFormat2["ObjectLiteralExpressionProperties"] = 526226] = "ObjectLiteralExpressionProperties";
        ListFormat2[ListFormat2["ImportClauseEntries"] = 526226] = "ImportClauseEntries";
        ListFormat2[ListFormat2["ArrayLiteralExpressionElements"] = 8914] = "ArrayLiteralExpressionElements";
        ListFormat2[ListFormat2["CommaListElements"] = 528] = "CommaListElements";
        ListFormat2[ListFormat2["CallExpressionArguments"] = 2576] = "CallExpressionArguments";
        ListFormat2[ListFormat2["NewExpressionArguments"] = 18960] = "NewExpressionArguments";
        ListFormat2[ListFormat2["TemplateExpressionSpans"] = 262144] = "TemplateExpressionSpans";
        ListFormat2[ListFormat2["SingleLineBlockStatements"] = 768] = "SingleLineBlockStatements";
        ListFormat2[ListFormat2["MultiLineBlockStatements"] = 129] = "MultiLineBlockStatements";
        ListFormat2[ListFormat2["VariableDeclarationList"] = 528] = "VariableDeclarationList";
        ListFormat2[ListFormat2["SingleLineFunctionBodyStatements"] = 768] = "SingleLineFunctionBodyStatements";
        ListFormat2[ListFormat2["MultiLineFunctionBodyStatements"] = 1 /* MultiLine */] = "MultiLineFunctionBodyStatements";
        ListFormat2[ListFormat2["ClassHeritageClauses"] = 0 /* SingleLine */] = "ClassHeritageClauses";
        ListFormat2[ListFormat2["ClassMembers"] = 129] = "ClassMembers";
        ListFormat2[ListFormat2["InterfaceMembers"] = 129] = "InterfaceMembers";
        ListFormat2[ListFormat2["EnumMembers"] = 145] = "EnumMembers";
        ListFormat2[ListFormat2["CaseBlockClauses"] = 129] = "CaseBlockClauses";
        ListFormat2[ListFormat2["NamedImportsOrExportsElements"] = 525136] = "NamedImportsOrExportsElements";
        ListFormat2[ListFormat2["JsxElementOrFragmentChildren"] = 262144] = "JsxElementOrFragmentChildren";
        ListFormat2[ListFormat2["JsxElementAttributes"] = 262656] = "JsxElementAttributes";
        ListFormat2[ListFormat2["CaseOrDefaultClauseStatements"] = 163969] = "CaseOrDefaultClauseStatements";
        ListFormat2[ListFormat2["HeritageClauseTypes"] = 528] = "HeritageClauseTypes";
        ListFormat2[ListFormat2["SourceFileStatements"] = 131073] = "SourceFileStatements";
        ListFormat2[ListFormat2["Decorators"] = 2146305] = "Decorators";
        ListFormat2[ListFormat2["TypeArguments"] = 53776] = "TypeArguments";
        ListFormat2[ListFormat2["TypeParameters"] = 53776] = "TypeParameters";
        ListFormat2[ListFormat2["Parameters"] = 2576] = "Parameters";
        ListFormat2[ListFormat2["IndexSignatureParameters"] = 8848] = "IndexSignatureParameters";
        ListFormat2[ListFormat2["JSDocComment"] = 33] = "JSDocComment";
        return ListFormat2;
      })(ListFormat || {});
      PragmaKindFlags = /* @__PURE__ */ ((PragmaKindFlags2) => {
        PragmaKindFlags2[PragmaKindFlags2["None"] = 0] = "None";
        PragmaKindFlags2[PragmaKindFlags2["TripleSlashXML"] = 1] = "TripleSlashXML";
        PragmaKindFlags2[PragmaKindFlags2["SingleLine"] = 2] = "SingleLine";
        PragmaKindFlags2[PragmaKindFlags2["MultiLine"] = 4] = "MultiLine";
        PragmaKindFlags2[PragmaKindFlags2["All"] = 7] = "All";
        PragmaKindFlags2[PragmaKindFlags2["Default"] = 7 /* All */] = "Default";
        return PragmaKindFlags2;
      })(PragmaKindFlags || {});
      commentPragmas = {
        "reference": {
          args: [
            { name: "types", optional: true, captureSpan: true },
            { name: "lib", optional: true, captureSpan: true },
            { name: "path", optional: true, captureSpan: true },
            { name: "no-default-lib", optional: true },
            { name: "resolution-mode", optional: true }
          ],
          kind: 1 /* TripleSlashXML */
        },
        "amd-dependency": {
          args: [{ name: "path" }, { name: "name", optional: true }],
          kind: 1 /* TripleSlashXML */
        },
        "amd-module": {
          args: [{ name: "name" }],
          kind: 1 /* TripleSlashXML */
        },
        "ts-check": {
          kind: 2 /* SingleLine */
        },
        "ts-nocheck": {
          kind: 2 /* SingleLine */
        },
        "jsx": {
          args: [{ name: "factory" }],
          kind: 4 /* MultiLine */
        },
        "jsxfrag": {
          args: [{ name: "factory" }],
          kind: 4 /* MultiLine */
        },
        "jsximportsource": {
          args: [{ name: "factory" }],
          kind: 4 /* MultiLine */
        },
        "jsxruntime": {
          args: [{ name: "factory" }],
          kind: 4 /* MultiLine */
        }
      };
    }
  });

  // src/compiler/sys.ts
  function generateDjb2Hash(data) {
    let acc = 5381;
    for (let i = 0; i < data.length; i++) {
      acc = (acc << 5) + acc + data.charCodeAt(i);
    }
    return acc.toString();
  }
  function setStackTraceLimit() {
    if (Error.stackTraceLimit < 100) {
      Error.stackTraceLimit = 100;
    }
  }
  function getModifiedTime(host, fileName) {
    return host.getModifiedTime(fileName) || missingFileModifiedTime;
  }
  function createPollingIntervalBasedLevels(levels) {
    return {
      [250 /* Low */]: levels.Low,
      [500 /* Medium */]: levels.Medium,
      [2e3 /* High */]: levels.High
    };
  }
  function setCustomPollingValues(system) {
    if (!system.getEnvironmentVariable) {
      return;
    }
    const pollingIntervalChanged = setCustomLevels("TSC_WATCH_POLLINGINTERVAL", PollingInterval);
    pollingChunkSize = getCustomPollingBasedLevels("TSC_WATCH_POLLINGCHUNKSIZE", defaultChunkLevels) || pollingChunkSize;
    unchangedPollThresholds = getCustomPollingBasedLevels("TSC_WATCH_UNCHANGEDPOLLTHRESHOLDS", defaultChunkLevels) || unchangedPollThresholds;
    function getLevel(envVar, level) {
      return system.getEnvironmentVariable(`${envVar}_${level.toUpperCase()}`);
    }
    function getCustomLevels(baseVariable) {
      let customLevels;
      setCustomLevel("Low");
      setCustomLevel("Medium");
      setCustomLevel("High");
      return customLevels;
      function setCustomLevel(level) {
        const customLevel = getLevel(baseVariable, level);
        if (customLevel) {
          (customLevels || (customLevels = {}))[level] = Number(customLevel);
        }
      }
    }
    function setCustomLevels(baseVariable, levels) {
      const customLevels = getCustomLevels(baseVariable);
      if (customLevels) {
        setLevel("Low");
        setLevel("Medium");
        setLevel("High");
        return true;
      }
      return false;
      function setLevel(level) {
        levels[level] = customLevels[level] || levels[level];
      }
    }
    function getCustomPollingBasedLevels(baseVariable, defaultLevels) {
      const customLevels = getCustomLevels(baseVariable);
      return (pollingIntervalChanged || customLevels) && createPollingIntervalBasedLevels(customLevels ? { ...defaultLevels, ...customLevels } : defaultLevels);
    }
  }
  function pollWatchedFileQueue(host, queue, pollIndex, chunkSize, callbackOnWatchFileStat) {
    let definedValueCopyToIndex = pollIndex;
    for (let canVisit = queue.length; chunkSize && canVisit; nextPollIndex(), canVisit--) {
      const watchedFile = queue[pollIndex];
      if (!watchedFile) {
        continue;
      } else if (watchedFile.isClosed) {
        queue[pollIndex] = void 0;
        continue;
      }
      chunkSize--;
      const fileChanged = onWatchedFileStat(watchedFile, getModifiedTime(host, watchedFile.fileName));
      if (watchedFile.isClosed) {
        queue[pollIndex] = void 0;
        continue;
      }
      callbackOnWatchFileStat == null ? void 0 : callbackOnWatchFileStat(watchedFile, pollIndex, fileChanged);
      if (queue[pollIndex]) {
        if (definedValueCopyToIndex < pollIndex) {
          queue[definedValueCopyToIndex] = watchedFile;
          queue[pollIndex] = void 0;
        }
        definedValueCopyToIndex++;
      }
    }
    return pollIndex;
    function nextPollIndex() {
      pollIndex++;
      if (pollIndex === queue.length) {
        if (definedValueCopyToIndex < pollIndex) {
          queue.length = definedValueCopyToIndex;
        }
        pollIndex = 0;
        definedValueCopyToIndex = 0;
      }
    }
  }
  function createDynamicPriorityPollingWatchFile(host) {
    const watchedFiles = [];
    const changedFilesInLastPoll = [];
    const lowPollingIntervalQueue = createPollingIntervalQueue(250 /* Low */);
    const mediumPollingIntervalQueue = createPollingIntervalQueue(500 /* Medium */);
    const highPollingIntervalQueue = createPollingIntervalQueue(2e3 /* High */);
    return watchFile2;
    function watchFile2(fileName, callback, defaultPollingInterval) {
      const file = {
        fileName,
        callback,
        unchangedPolls: 0,
        mtime: getModifiedTime(host, fileName)
      };
      watchedFiles.push(file);
      addToPollingIntervalQueue(file, defaultPollingInterval);
      return {
        close: () => {
          file.isClosed = true;
          unorderedRemoveItem(watchedFiles, file);
        }
      };
    }
    function createPollingIntervalQueue(pollingInterval) {
      const queue = [];
      queue.pollingInterval = pollingInterval;
      queue.pollIndex = 0;
      queue.pollScheduled = false;
      return queue;
    }
    function pollPollingIntervalQueue(queue) {
      queue.pollIndex = pollQueue(queue, queue.pollingInterval, queue.pollIndex, pollingChunkSize[queue.pollingInterval]);
      if (queue.length) {
        scheduleNextPoll(queue.pollingInterval);
      } else {
        Debug.assert(queue.pollIndex === 0);
        queue.pollScheduled = false;
      }
    }
    function pollLowPollingIntervalQueue(queue) {
      pollQueue(
        changedFilesInLastPoll,
        250 /* Low */,
        /*pollIndex*/
        0,
        changedFilesInLastPoll.length
      );
      pollPollingIntervalQueue(queue);
      if (!queue.pollScheduled && changedFilesInLastPoll.length) {
        scheduleNextPoll(250 /* Low */);
      }
    }
    function pollQueue(queue, pollingInterval, pollIndex, chunkSize) {
      return pollWatchedFileQueue(
        host,
        queue,
        pollIndex,
        chunkSize,
        onWatchFileStat
      );
      function onWatchFileStat(watchedFile, pollIndex2, fileChanged) {
        if (fileChanged) {
          watchedFile.unchangedPolls = 0;
          if (queue !== changedFilesInLastPoll) {
            queue[pollIndex2] = void 0;
            addChangedFileToLowPollingIntervalQueue(watchedFile);
          }
        } else if (watchedFile.unchangedPolls !== unchangedPollThresholds[pollingInterval]) {
          watchedFile.unchangedPolls++;
        } else if (queue === changedFilesInLastPoll) {
          watchedFile.unchangedPolls = 1;
          queue[pollIndex2] = void 0;
          addToPollingIntervalQueue(watchedFile, 250 /* Low */);
        } else if (pollingInterval !== 2e3 /* High */) {
          watchedFile.unchangedPolls++;
          queue[pollIndex2] = void 0;
          addToPollingIntervalQueue(watchedFile, pollingInterval === 250 /* Low */ ? 500 /* Medium */ : 2e3 /* High */);
        }
      }
    }
    function pollingIntervalQueue(pollingInterval) {
      switch (pollingInterval) {
        case 250 /* Low */:
          return lowPollingIntervalQueue;
        case 500 /* Medium */:
          return mediumPollingIntervalQueue;
        case 2e3 /* High */:
          return highPollingIntervalQueue;
      }
    }
    function addToPollingIntervalQueue(file, pollingInterval) {
      pollingIntervalQueue(pollingInterval).push(file);
      scheduleNextPollIfNotAlreadyScheduled(pollingInterval);
    }
    function addChangedFileToLowPollingIntervalQueue(file) {
      changedFilesInLastPoll.push(file);
      scheduleNextPollIfNotAlreadyScheduled(250 /* Low */);
    }
    function scheduleNextPollIfNotAlreadyScheduled(pollingInterval) {
      if (!pollingIntervalQueue(pollingInterval).pollScheduled) {
        scheduleNextPoll(pollingInterval);
      }
    }
    function scheduleNextPoll(pollingInterval) {
      pollingIntervalQueue(pollingInterval).pollScheduled = host.setTimeout(pollingInterval === 250 /* Low */ ? pollLowPollingIntervalQueue : pollPollingIntervalQueue, pollingInterval, pollingIntervalQueue(pollingInterval));
    }
  }
  function createUseFsEventsOnParentDirectoryWatchFile(fsWatch, useCaseSensitiveFileNames) {
    const fileWatcherCallbacks = createMultiMap();
    const dirWatchers = /* @__PURE__ */ new Map();
    const toCanonicalName = createGetCanonicalFileName(useCaseSensitiveFileNames);
    return nonPollingWatchFile;
    function nonPollingWatchFile(fileName, callback, _pollingInterval, fallbackOptions) {
      const filePath = toCanonicalName(fileName);
      fileWatcherCallbacks.add(filePath, callback);
      const dirPath = getDirectoryPath(filePath) || ".";
      const watcher = dirWatchers.get(dirPath) || createDirectoryWatcher(getDirectoryPath(fileName) || ".", dirPath, fallbackOptions);
      watcher.referenceCount++;
      return {
        close: () => {
          if (watcher.referenceCount === 1) {
            watcher.close();
            dirWatchers.delete(dirPath);
          } else {
            watcher.referenceCount--;
          }
          fileWatcherCallbacks.remove(filePath, callback);
        }
      };
    }
    function createDirectoryWatcher(dirName, dirPath, fallbackOptions) {
      const watcher = fsWatch(
        dirName,
        1 /* Directory */,
        (_eventName, relativeFileName, modifiedTime) => {
          if (!isString(relativeFileName))
            return;
          const fileName = getNormalizedAbsolutePath(relativeFileName, dirName);
          const callbacks = fileName && fileWatcherCallbacks.get(toCanonicalName(fileName));
          if (callbacks) {
            for (const fileCallback of callbacks) {
              fileCallback(fileName, 1 /* Changed */, modifiedTime);
            }
          }
        },
        /*recursive*/
        false,
        500 /* Medium */,
        fallbackOptions
      );
      watcher.referenceCount = 0;
      dirWatchers.set(dirPath, watcher);
      return watcher;
    }
  }
  function createFixedChunkSizePollingWatchFile(host) {
    const watchedFiles = [];
    let pollIndex = 0;
    let pollScheduled;
    return watchFile2;
    function watchFile2(fileName, callback) {
      const file = {
        fileName,
        callback,
        mtime: getModifiedTime(host, fileName)
      };
      watchedFiles.push(file);
      scheduleNextPoll();
      return {
        close: () => {
          file.isClosed = true;
          unorderedRemoveItem(watchedFiles, file);
        }
      };
    }
    function pollQueue() {
      pollScheduled = void 0;
      pollIndex = pollWatchedFileQueue(host, watchedFiles, pollIndex, pollingChunkSize[250 /* Low */]);
      scheduleNextPoll();
    }
    function scheduleNextPoll() {
      if (!watchedFiles.length || pollScheduled)
        return;
      pollScheduled = host.setTimeout(pollQueue, 2e3 /* High */);
    }
  }
  function createSingleWatcherPerName(cache, useCaseSensitiveFileNames, name, callback, createWatcher) {
    const toCanonicalFileName = createGetCanonicalFileName(useCaseSensitiveFileNames);
    const path = toCanonicalFileName(name);
    const existing = cache.get(path);
    if (existing) {
      existing.callbacks.push(callback);
    } else {
      cache.set(path, {
        watcher: createWatcher(
          // Cant infer types correctly so lets satisfy checker
          (param1, param2, param3) => {
            var _a2;
            return (_a2 = cache.get(path)) == null ? void 0 : _a2.callbacks.slice().forEach((cb) => cb(param1, param2, param3));
          }
        ),
        callbacks: [callback]
      });
    }
    return {
      close: () => {
        const watcher = cache.get(path);
        if (!watcher)
          return;
        if (!orderedRemoveItem(watcher.callbacks, callback) || watcher.callbacks.length)
          return;
        cache.delete(path);
        closeFileWatcherOf(watcher);
      }
    };
  }
  function onWatchedFileStat(watchedFile, modifiedTime) {
    const oldTime = watchedFile.mtime.getTime();
    const newTime = modifiedTime.getTime();
    if (oldTime !== newTime) {
      watchedFile.mtime = modifiedTime;
      watchedFile.callback(watchedFile.fileName, getFileWatcherEventKind(oldTime, newTime), modifiedTime);
      return true;
    }
    return false;
  }
  function getFileWatcherEventKind(oldTime, newTime) {
    return oldTime === 0 ? 0 /* Created */ : newTime === 0 ? 2 /* Deleted */ : 1 /* Changed */;
  }
  function sysLog(s) {
    return curSysLog(s);
  }
  function setSysLog(logger) {
    curSysLog = logger;
  }
  function createDirectoryWatcherSupportingRecursive({
    watchDirectory,
    useCaseSensitiveFileNames,
    getCurrentDirectory,
    getAccessibleSortedChildDirectories,
    fileSystemEntryExists,
    realpath,
    setTimeout: setTimeout2,
    clearTimeout: clearTimeout2
  }) {
    const cache = /* @__PURE__ */ new Map();
    const callbackCache = createMultiMap();
    const cacheToUpdateChildWatches = /* @__PURE__ */ new Map();
    let timerToUpdateChildWatches;
    const filePathComparer = getStringComparer(!useCaseSensitiveFileNames);
    const toCanonicalFilePath = createGetCanonicalFileName(useCaseSensitiveFileNames);
    return (dirName, callback, recursive, options) => recursive ? createDirectoryWatcher(dirName, options, callback) : watchDirectory(dirName, callback, recursive, options);
    function createDirectoryWatcher(dirName, options, callback) {
      const dirPath = toCanonicalFilePath(dirName);
      let directoryWatcher = cache.get(dirPath);
      if (directoryWatcher) {
        directoryWatcher.refCount++;
      } else {
        directoryWatcher = {
          watcher: watchDirectory(
            dirName,
            (fileName) => {
              if (isIgnoredPath(fileName, options))
                return;
              if (options == null ? void 0 : options.synchronousWatchDirectory) {
                invokeCallbacks(dirPath, fileName);
                updateChildWatches(dirName, dirPath, options);
              } else {
                nonSyncUpdateChildWatches(dirName, dirPath, fileName, options);
              }
            },
            /*recursive*/
            false,
            options
          ),
          refCount: 1,
          childWatches: emptyArray
        };
        cache.set(dirPath, directoryWatcher);
        updateChildWatches(dirName, dirPath, options);
      }
      const callbackToAdd = callback && { dirName, callback };
      if (callbackToAdd) {
        callbackCache.add(dirPath, callbackToAdd);
      }
      return {
        dirName,
        close: () => {
          const directoryWatcher2 = Debug.checkDefined(cache.get(dirPath));
          if (callbackToAdd)
            callbackCache.remove(dirPath, callbackToAdd);
          directoryWatcher2.refCount--;
          if (directoryWatcher2.refCount)
            return;
          cache.delete(dirPath);
          closeFileWatcherOf(directoryWatcher2);
          directoryWatcher2.childWatches.forEach(closeFileWatcher);
        }
      };
    }
    function invokeCallbacks(dirPath, fileNameOrInvokeMap, fileNames) {
      let fileName;
      let invokeMap;
      if (isString(fileNameOrInvokeMap)) {
        fileName = fileNameOrInvokeMap;
      } else {
        invokeMap = fileNameOrInvokeMap;
      }
      callbackCache.forEach((callbacks, rootDirName) => {
        if (invokeMap && invokeMap.get(rootDirName) === true)
          return;
        if (rootDirName === dirPath || startsWith(dirPath, rootDirName) && dirPath[rootDirName.length] === directorySeparator) {
          if (invokeMap) {
            if (fileNames) {
              const existing = invokeMap.get(rootDirName);
              if (existing) {
                existing.push(...fileNames);
              } else {
                invokeMap.set(rootDirName, fileNames.slice());
              }
            } else {
              invokeMap.set(rootDirName, true);
            }
          } else {
            callbacks.forEach(({ callback }) => callback(fileName));
          }
        }
      });
    }
    function nonSyncUpdateChildWatches(dirName, dirPath, fileName, options) {
      const parentWatcher = cache.get(dirPath);
      if (parentWatcher && fileSystemEntryExists(dirName, 1 /* Directory */)) {
        scheduleUpdateChildWatches(dirName, dirPath, fileName, options);
        return;
      }
      invokeCallbacks(dirPath, fileName);
      removeChildWatches(parentWatcher);
    }
    function scheduleUpdateChildWatches(dirName, dirPath, fileName, options) {
      const existing = cacheToUpdateChildWatches.get(dirPath);
      if (existing) {
        existing.fileNames.push(fileName);
      } else {
        cacheToUpdateChildWatches.set(dirPath, { dirName, options, fileNames: [fileName] });
      }
      if (timerToUpdateChildWatches) {
        clearTimeout2(timerToUpdateChildWatches);
        timerToUpdateChildWatches = void 0;
      }
      timerToUpdateChildWatches = setTimeout2(onTimerToUpdateChildWatches, 1e3);
    }
    function onTimerToUpdateChildWatches() {
      timerToUpdateChildWatches = void 0;
      sysLog(`sysLog:: onTimerToUpdateChildWatches:: ${cacheToUpdateChildWatches.size}`);
      const start = timestamp();
      const invokeMap = /* @__PURE__ */ new Map();
      while (!timerToUpdateChildWatches && cacheToUpdateChildWatches.size) {
        const result = cacheToUpdateChildWatches.entries().next();
        Debug.assert(!result.done);
        const { value: [dirPath, { dirName, options, fileNames }] } = result;
        cacheToUpdateChildWatches.delete(dirPath);
        const hasChanges = updateChildWatches(dirName, dirPath, options);
        invokeCallbacks(dirPath, invokeMap, hasChanges ? void 0 : fileNames);
      }
      sysLog(`sysLog:: invokingWatchers:: Elapsed:: ${timestamp() - start}ms:: ${cacheToUpdateChildWatches.size}`);
      callbackCache.forEach((callbacks, rootDirName) => {
        const existing = invokeMap.get(rootDirName);
        if (existing) {
          callbacks.forEach(({ callback, dirName }) => {
            if (isArray(existing)) {
              existing.forEach(callback);
            } else {
              callback(dirName);
            }
          });
        }
      });
      const elapsed = timestamp() - start;
      sysLog(`sysLog:: Elapsed:: ${elapsed}ms:: onTimerToUpdateChildWatches:: ${cacheToUpdateChildWatches.size} ${timerToUpdateChildWatches}`);
    }
    function removeChildWatches(parentWatcher) {
      if (!parentWatcher)
        return;
      const existingChildWatches = parentWatcher.childWatches;
      parentWatcher.childWatches = emptyArray;
      for (const childWatcher of existingChildWatches) {
        childWatcher.close();
        removeChildWatches(cache.get(toCanonicalFilePath(childWatcher.dirName)));
      }
    }
    function updateChildWatches(parentDir, parentDirPath, options) {
      const parentWatcher = cache.get(parentDirPath);
      if (!parentWatcher)
        return false;
      let newChildWatches;
      const hasChanges = enumerateInsertsAndDeletes(
        fileSystemEntryExists(parentDir, 1 /* Directory */) ? mapDefined(getAccessibleSortedChildDirectories(parentDir), (child) => {
          const childFullName = getNormalizedAbsolutePath(child, parentDir);
          return !isIgnoredPath(childFullName, options) && filePathComparer(childFullName, normalizePath(realpath(childFullName))) === 0 /* EqualTo */ ? childFullName : void 0;
        }) : emptyArray,
        parentWatcher.childWatches,
        (child, childWatcher) => filePathComparer(child, childWatcher.dirName),
        createAndAddChildDirectoryWatcher,
        closeFileWatcher,
        addChildDirectoryWatcher
      );
      parentWatcher.childWatches = newChildWatches || emptyArray;
      return hasChanges;
      function createAndAddChildDirectoryWatcher(childName) {
        const result = createDirectoryWatcher(childName, options);
        addChildDirectoryWatcher(result);
      }
      function addChildDirectoryWatcher(childWatcher) {
        (newChildWatches || (newChildWatches = [])).push(childWatcher);
      }
    }
    function isIgnoredPath(path, options) {
      return some(ignoredPaths, (searchPath) => isInPath(path, searchPath)) || isIgnoredByWatchOptions(path, options, useCaseSensitiveFileNames, getCurrentDirectory);
    }
    function isInPath(path, searchPath) {
      if (stringContains(path, searchPath))
        return true;
      if (useCaseSensitiveFileNames)
        return false;
      return stringContains(toCanonicalFilePath(path), searchPath);
    }
  }
  function createFileWatcherCallback(callback) {
    return (_fileName, eventKind, modifiedTime) => callback(eventKind === 1 /* Changed */ ? "change" : "rename", "", modifiedTime);
  }
  function createFsWatchCallbackForFileWatcherCallback(fileName, callback, getModifiedTime3) {
    return (eventName, _relativeFileName, modifiedTime) => {
      if (eventName === "rename") {
        modifiedTime || (modifiedTime = getModifiedTime3(fileName) || missingFileModifiedTime);
        callback(fileName, modifiedTime !== missingFileModifiedTime ? 0 /* Created */ : 2 /* Deleted */, modifiedTime);
      } else {
        callback(fileName, 1 /* Changed */, modifiedTime);
      }
    };
  }
  function isIgnoredByWatchOptions(pathToCheck, options, useCaseSensitiveFileNames, getCurrentDirectory) {
    return ((options == null ? void 0 : options.excludeDirectories) || (options == null ? void 0 : options.excludeFiles)) && (matchesExclude(pathToCheck, options == null ? void 0 : options.excludeFiles, useCaseSensitiveFileNames, getCurrentDirectory()) || matchesExclude(pathToCheck, options == null ? void 0 : options.excludeDirectories, useCaseSensitiveFileNames, getCurrentDirectory()));
  }
  function createFsWatchCallbackForDirectoryWatcherCallback(directoryName, callback, options, useCaseSensitiveFileNames, getCurrentDirectory) {
    return (eventName, relativeFileName) => {
      if (eventName === "rename") {
        const fileName = !relativeFileName ? directoryName : normalizePath(combinePaths(directoryName, relativeFileName));
        if (!relativeFileName || !isIgnoredByWatchOptions(fileName, options, useCaseSensitiveFileNames, getCurrentDirectory)) {
          callback(fileName);
        }
      }
    };
  }
  function createSystemWatchFunctions({
    pollingWatchFileWorker,
    getModifiedTime: getModifiedTime3,
    setTimeout: setTimeout2,
    clearTimeout: clearTimeout2,
    fsWatchWorker,
    fileSystemEntryExists,
    useCaseSensitiveFileNames,
    getCurrentDirectory,
    fsSupportsRecursiveFsWatch,
    getAccessibleSortedChildDirectories,
    realpath,
    tscWatchFile,
    useNonPollingWatchers,
    tscWatchDirectory,
    inodeWatching,
    sysLog: sysLog2
  }) {
    const pollingWatches = /* @__PURE__ */ new Map();
    const fsWatches = /* @__PURE__ */ new Map();
    const fsWatchesRecursive = /* @__PURE__ */ new Map();
    let dynamicPollingWatchFile;
    let fixedChunkSizePollingWatchFile;
    let nonPollingWatchFile;
    let hostRecursiveDirectoryWatcher;
    let hitSystemWatcherLimit = false;
    return {
      watchFile: watchFile2,
      watchDirectory
    };
    function watchFile2(fileName, callback, pollingInterval, options) {
      options = updateOptionsForWatchFile(options, useNonPollingWatchers);
      const watchFileKind = Debug.checkDefined(options.watchFile);
      switch (watchFileKind) {
        case 0 /* FixedPollingInterval */:
          return pollingWatchFile(
            fileName,
            callback,
            250 /* Low */,
            /*options*/
            void 0
          );
        case 1 /* PriorityPollingInterval */:
          return pollingWatchFile(
            fileName,
            callback,
            pollingInterval,
            /*options*/
            void 0
          );
        case 2 /* DynamicPriorityPolling */:
          return ensureDynamicPollingWatchFile()(
            fileName,
            callback,
            pollingInterval,
            /*options*/
            void 0
          );
        case 3 /* FixedChunkSizePolling */:
          return ensureFixedChunkSizePollingWatchFile()(
            fileName,
            callback,
            /* pollingInterval */
            void 0,
            /*options*/
            void 0
          );
        case 4 /* UseFsEvents */:
          return fsWatch(
            fileName,
            0 /* File */,
            createFsWatchCallbackForFileWatcherCallback(fileName, callback, getModifiedTime3),
            /*recursive*/
            false,
            pollingInterval,
            getFallbackOptions(options)
          );
        case 5 /* UseFsEventsOnParentDirectory */:
          if (!nonPollingWatchFile) {
            nonPollingWatchFile = createUseFsEventsOnParentDirectoryWatchFile(fsWatch, useCaseSensitiveFileNames);
          }
          return nonPollingWatchFile(fileName, callback, pollingInterval, getFallbackOptions(options));
        default:
          Debug.assertNever(watchFileKind);
      }
    }
    function ensureDynamicPollingWatchFile() {
      return dynamicPollingWatchFile || (dynamicPollingWatchFile = createDynamicPriorityPollingWatchFile({ getModifiedTime: getModifiedTime3, setTimeout: setTimeout2 }));
    }
    function ensureFixedChunkSizePollingWatchFile() {
      return fixedChunkSizePollingWatchFile || (fixedChunkSizePollingWatchFile = createFixedChunkSizePollingWatchFile({ getModifiedTime: getModifiedTime3, setTimeout: setTimeout2 }));
    }
    function updateOptionsForWatchFile(options, useNonPollingWatchers2) {
      if (options && options.watchFile !== void 0)
        return options;
      switch (tscWatchFile) {
        case "PriorityPollingInterval":
          return { watchFile: 1 /* PriorityPollingInterval */ };
        case "DynamicPriorityPolling":
          return { watchFile: 2 /* DynamicPriorityPolling */ };
        case "UseFsEvents":
          return generateWatchFileOptions(4 /* UseFsEvents */, 1 /* PriorityInterval */, options);
        case "UseFsEventsWithFallbackDynamicPolling":
          return generateWatchFileOptions(4 /* UseFsEvents */, 2 /* DynamicPriority */, options);
        case "UseFsEventsOnParentDirectory":
          useNonPollingWatchers2 = true;
        default:
          return useNonPollingWatchers2 ? (
            // Use notifications from FS to watch with falling back to fs.watchFile
            generateWatchFileOptions(5 /* UseFsEventsOnParentDirectory */, 1 /* PriorityInterval */, options)
          ) : (
            // Default to using fs events
            { watchFile: 4 /* UseFsEvents */ }
          );
      }
    }
    function generateWatchFileOptions(watchFile3, fallbackPolling, options) {
      const defaultFallbackPolling = options == null ? void 0 : options.fallbackPolling;
      return {
        watchFile: watchFile3,
        fallbackPolling: defaultFallbackPolling === void 0 ? fallbackPolling : defaultFallbackPolling
      };
    }
    function watchDirectory(directoryName, callback, recursive, options) {
      if (fsSupportsRecursiveFsWatch) {
        return fsWatch(
          directoryName,
          1 /* Directory */,
          createFsWatchCallbackForDirectoryWatcherCallback(directoryName, callback, options, useCaseSensitiveFileNames, getCurrentDirectory),
          recursive,
          500 /* Medium */,
          getFallbackOptions(options)
        );
      }
      if (!hostRecursiveDirectoryWatcher) {
        hostRecursiveDirectoryWatcher = createDirectoryWatcherSupportingRecursive({
          useCaseSensitiveFileNames,
          getCurrentDirectory,
          fileSystemEntryExists,
          getAccessibleSortedChildDirectories,
          watchDirectory: nonRecursiveWatchDirectory,
          realpath,
          setTimeout: setTimeout2,
          clearTimeout: clearTimeout2
        });
      }
      return hostRecursiveDirectoryWatcher(directoryName, callback, recursive, options);
    }
    function nonRecursiveWatchDirectory(directoryName, callback, recursive, options) {
      Debug.assert(!recursive);
      const watchDirectoryOptions = updateOptionsForWatchDirectory(options);
      const watchDirectoryKind = Debug.checkDefined(watchDirectoryOptions.watchDirectory);
      switch (watchDirectoryKind) {
        case 1 /* FixedPollingInterval */:
          return pollingWatchFile(
            directoryName,
            () => callback(directoryName),
            500 /* Medium */,
            /*options*/
            void 0
          );
        case 2 /* DynamicPriorityPolling */:
          return ensureDynamicPollingWatchFile()(
            directoryName,
            () => callback(directoryName),
            500 /* Medium */,
            /*options*/
            void 0
          );
        case 3 /* FixedChunkSizePolling */:
          return ensureFixedChunkSizePollingWatchFile()(
            directoryName,
            () => callback(directoryName),
            /* pollingInterval */
            void 0,
            /*options*/
            void 0
          );
        case 0 /* UseFsEvents */:
          return fsWatch(
            directoryName,
            1 /* Directory */,
            createFsWatchCallbackForDirectoryWatcherCallback(directoryName, callback, options, useCaseSensitiveFileNames, getCurrentDirectory),
            recursive,
            500 /* Medium */,
            getFallbackOptions(watchDirectoryOptions)
          );
        default:
          Debug.assertNever(watchDirectoryKind);
      }
    }
    function updateOptionsForWatchDirectory(options) {
      if (options && options.watchDirectory !== void 0)
        return options;
      switch (tscWatchDirectory) {
        case "RecursiveDirectoryUsingFsWatchFile":
          return { watchDirectory: 1 /* FixedPollingInterval */ };
        case "RecursiveDirectoryUsingDynamicPriorityPolling":
          return { watchDirectory: 2 /* DynamicPriorityPolling */ };
        default:
          const defaultFallbackPolling = options == null ? void 0 : options.fallbackPolling;
          return {
            watchDirectory: 0 /* UseFsEvents */,
            fallbackPolling: defaultFallbackPolling !== void 0 ? defaultFallbackPolling : void 0
          };
      }
    }
    function pollingWatchFile(fileName, callback, pollingInterval, options) {
      return createSingleWatcherPerName(
        pollingWatches,
        useCaseSensitiveFileNames,
        fileName,
        callback,
        (cb) => pollingWatchFileWorker(fileName, cb, pollingInterval, options)
      );
    }
    function fsWatch(fileOrDirectory, entryKind, callback, recursive, fallbackPollingInterval, fallbackOptions) {
      return createSingleWatcherPerName(
        recursive ? fsWatchesRecursive : fsWatches,
        useCaseSensitiveFileNames,
        fileOrDirectory,
        callback,
        (cb) => fsWatchHandlingExistenceOnHost(fileOrDirectory, entryKind, cb, recursive, fallbackPollingInterval, fallbackOptions)
      );
    }
    function fsWatchHandlingExistenceOnHost(fileOrDirectory, entryKind, callback, recursive, fallbackPollingInterval, fallbackOptions) {
      let lastDirectoryPartWithDirectorySeparator;
      let lastDirectoryPart;
      if (inodeWatching) {
        lastDirectoryPartWithDirectorySeparator = fileOrDirectory.substring(fileOrDirectory.lastIndexOf(directorySeparator));
        lastDirectoryPart = lastDirectoryPartWithDirectorySeparator.slice(directorySeparator.length);
      }
      let watcher = !fileSystemEntryExists(fileOrDirectory, entryKind) ? watchMissingFileSystemEntry() : watchPresentFileSystemEntry();
      return {
        close: () => {
          if (watcher) {
            watcher.close();
            watcher = void 0;
          }
        }
      };
      function updateWatcher(createWatcher) {
        if (watcher) {
          sysLog2(`sysLog:: ${fileOrDirectory}:: Changing watcher to ${createWatcher === watchPresentFileSystemEntry ? "Present" : "Missing"}FileSystemEntryWatcher`);
          watcher.close();
          watcher = createWatcher();
        }
      }
      function watchPresentFileSystemEntry() {
        if (hitSystemWatcherLimit) {
          sysLog2(`sysLog:: ${fileOrDirectory}:: Defaulting to watchFile`);
          return watchPresentFileSystemEntryWithFsWatchFile();
        }
        try {
          const presentWatcher = fsWatchWorker(
            fileOrDirectory,
            recursive,
            inodeWatching ? callbackChangingToMissingFileSystemEntry : callback
          );
          presentWatcher.on("error", () => {
            callback("rename", "");
            updateWatcher(watchMissingFileSystemEntry);
          });
          return presentWatcher;
        } catch (e) {
          hitSystemWatcherLimit || (hitSystemWatcherLimit = e.code === "ENOSPC");
          sysLog2(`sysLog:: ${fileOrDirectory}:: Changing to watchFile`);
          return watchPresentFileSystemEntryWithFsWatchFile();
        }
      }
      function callbackChangingToMissingFileSystemEntry(event, relativeName) {
        let originalRelativeName;
        if (relativeName && endsWith(relativeName, "~")) {
          originalRelativeName = relativeName;
          relativeName = relativeName.slice(0, relativeName.length - 1);
        }
        if (event === "rename" && (!relativeName || relativeName === lastDirectoryPart || endsWith(relativeName, lastDirectoryPartWithDirectorySeparator))) {
          const modifiedTime = getModifiedTime3(fileOrDirectory) || missingFileModifiedTime;
          if (originalRelativeName)
            callback(event, originalRelativeName, modifiedTime);
          callback(event, relativeName, modifiedTime);
          if (inodeWatching) {
            updateWatcher(modifiedTime === missingFileModifiedTime ? watchMissingFileSystemEntry : watchPresentFileSystemEntry);
          } else if (modifiedTime === missingFileModifiedTime) {
            updateWatcher(watchMissingFileSystemEntry);
          }
        } else {
          if (originalRelativeName)
            callback(event, originalRelativeName);
          callback(event, relativeName);
        }
      }
      function watchPresentFileSystemEntryWithFsWatchFile() {
        return watchFile2(
          fileOrDirectory,
          createFileWatcherCallback(callback),
          fallbackPollingInterval,
          fallbackOptions
        );
      }
      function watchMissingFileSystemEntry() {
        return watchFile2(
          fileOrDirectory,
          (_fileName, eventKind, modifiedTime) => {
            if (eventKind === 0 /* Created */) {
              modifiedTime || (modifiedTime = getModifiedTime3(fileOrDirectory) || missingFileModifiedTime);
              if (modifiedTime !== missingFileModifiedTime) {
                callback("rename", "", modifiedTime);
                updateWatcher(watchPresentFileSystemEntry);
              }
            }
          },
          fallbackPollingInterval,
          fallbackOptions
        );
      }
    }
  }
  function patchWriteFileEnsuringDirectory(sys2) {
    const originalWriteFile = sys2.writeFile;
    sys2.writeFile = (path, data, writeBom) => writeFileEnsuringDirectories(
      path,
      data,
      !!writeBom,
      (path2, data2, writeByteOrderMark) => originalWriteFile.call(sys2, path2, data2, writeByteOrderMark),
      (path2) => sys2.createDirectory(path2),
      (path2) => sys2.directoryExists(path2)
    );
  }
  function setSys(s) {
    sys = s;
  }
  var FileWatcherEventKind, PollingInterval, missingFileModifiedTime, defaultChunkLevels, pollingChunkSize, unchangedPollThresholds, ignoredPaths, curSysLog, FileSystemEntryKind, sys;
  var init_sys = __esm({
    "src/compiler/sys.ts"() {
      "use strict";
      init_ts2();
      FileWatcherEventKind = /* @__PURE__ */ ((FileWatcherEventKind2) => {
        FileWatcherEventKind2[FileWatcherEventKind2["Created"] = 0] = "Created";
        FileWatcherEventKind2[FileWatcherEventKind2["Changed"] = 1] = "Changed";
        FileWatcherEventKind2[FileWatcherEventKind2["Deleted"] = 2] = "Deleted";
        return FileWatcherEventKind2;
      })(FileWatcherEventKind || {});
      PollingInterval = /* @__PURE__ */ ((PollingInterval3) => {
        PollingInterval3[PollingInterval3["High"] = 2e3] = "High";
        PollingInterval3[PollingInterval3["Medium"] = 500] = "Medium";
        PollingInterval3[PollingInterval3["Low"] = 250] = "Low";
        return PollingInterval3;
      })(PollingInterval || {});
      missingFileModifiedTime = /* @__PURE__ */ new Date(0);
      defaultChunkLevels = { Low: 32, Medium: 64, High: 256 };
      pollingChunkSize = createPollingIntervalBasedLevels(defaultChunkLevels);
      unchangedPollThresholds = createPollingIntervalBasedLevels(defaultChunkLevels);
      ignoredPaths = ["/node_modules/.", "/.git", "/.#"];
      curSysLog = noop;
      FileSystemEntryKind = /* @__PURE__ */ ((FileSystemEntryKind2) => {
        FileSystemEntryKind2[FileSystemEntryKind2["File"] = 0] = "File";
        FileSystemEntryKind2[FileSystemEntryKind2["Directory"] = 1] = "Directory";
        return FileSystemEntryKind2;
      })(FileSystemEntryKind || {});
      sys = (() => {
        const byteOrderMarkIndicator = "\uFEFF";
        function getNodeSystem() {
          const nativePattern = /^native |^\([^)]+\)$|^(internal[\\/]|[a-zA-Z0-9_\s]+(\.js)?$)/;
          const _fs =   require("fs");
          const _path =   require("path");
          const _os =   require("os");
          let _crypto;
          try {
            _crypto =   require("crypto");
          } catch (e) {
            _crypto = void 0;
          }
          let activeSession;
          let profilePath = "./profile.cpuprofile";
          const Buffer2 =   require("buffer").Buffer;
          const isLinuxOrMacOs = process.platform === "linux" || process.platform === "darwin";
          const platform = _os.platform();
          const useCaseSensitiveFileNames = isFileSystemCaseSensitive();
          const fsRealpath = !!_fs.realpathSync.native ? process.platform === "win32" ? fsRealPathHandlingLongPath : _fs.realpathSync.native : _fs.realpathSync;
          const executingFilePath = __filename.endsWith("sys.js") ? _path.join(_path.dirname(__dirname), "__fake__.js") : __filename;
          const fsSupportsRecursiveFsWatch = process.platform === "win32" || process.platform === "darwin";
          const getCurrentDirectory = memoize(() => process.cwd());
          const { watchFile: watchFile2, watchDirectory } = createSystemWatchFunctions({
            pollingWatchFileWorker: fsWatchFileWorker,
            getModifiedTime: getModifiedTime3,
            setTimeout,
            clearTimeout,
            fsWatchWorker,
            useCaseSensitiveFileNames,
            getCurrentDirectory,
            fileSystemEntryExists,
            // Node 4.0 `fs.watch` function supports the "recursive" option on both OSX and Windows
            // (ref: https://github.com/nodejs/node/pull/2649 and https://github.com/Microsoft/TypeScript/issues/4643)
            fsSupportsRecursiveFsWatch,
            getAccessibleSortedChildDirectories: (path) => getAccessibleFileSystemEntries(path).directories,
            realpath,
            tscWatchFile: process.env.TSC_WATCHFILE,
            useNonPollingWatchers: process.env.TSC_NONPOLLING_WATCHER,
            tscWatchDirectory: process.env.TSC_WATCHDIRECTORY,
            inodeWatching: isLinuxOrMacOs,
            sysLog
          });
          const nodeSystem = {
            args: process.argv.slice(2),
            newLine: _os.EOL,
            useCaseSensitiveFileNames,
            write(s) {
              process.stdout.write(s);
            },
            getWidthOfTerminal() {
              return process.stdout.columns;
            },
            writeOutputIsTTY() {
              return process.stdout.isTTY;
            },
            readFile,
            writeFile: writeFile2,
            watchFile: watchFile2,
            watchDirectory,
            resolvePath: (path) => _path.resolve(path),
            fileExists,
            directoryExists,
            createDirectory(directoryName) {
              if (!nodeSystem.directoryExists(directoryName)) {
                try {
                  _fs.mkdirSync(directoryName);
                } catch (e) {
                  if (e.code !== "EEXIST") {
                    throw e;
                  }
                }
              }
            },
            getExecutingFilePath() {
              return executingFilePath;
            },
            getCurrentDirectory,
            getDirectories,
            getEnvironmentVariable(name) {
              return process.env[name] || "";
            },
            readDirectory,
            getModifiedTime: getModifiedTime3,
            setModifiedTime,
            deleteFile,
            createHash: _crypto ? createSHA256Hash : generateDjb2Hash,
            createSHA256Hash: _crypto ? createSHA256Hash : void 0,
            getMemoryUsage() {
              if (global.gc) {
                global.gc();
              }
              return process.memoryUsage().heapUsed;
            },
            getFileSize(path) {
              try {
                const stat = statSync(path);
                if (stat == null ? void 0 : stat.isFile()) {
                  return stat.size;
                }
              } catch (e) {
              }
              return 0;
            },
            exit(exitCode) {
              disableCPUProfiler(() => process.exit(exitCode));
            },
            enableCPUProfiler,
            disableCPUProfiler,
            cpuProfilingEnabled: () => !!activeSession || contains(process.execArgv, "--cpu-prof") || contains(process.execArgv, "--prof"),
            realpath,
            debugMode: !!process.env.NODE_INSPECTOR_IPC || !!process.env.VSCODE_INSPECTOR_OPTIONS || some(process.execArgv, (arg) => /^--(inspect|debug)(-brk)?(=\d+)?$/i.test(arg)),
            tryEnableSourceMapsForHost() {
              try {
                  require("source-map-support").install();
              } catch (e) {
              }
            },
            setTimeout,
            clearTimeout,
            clearScreen: () => {
              process.stdout.write("\x1Bc");
            },
            setBlocking: () => {
              if (process.stdout && process.stdout._handle && process.stdout._handle.setBlocking) {
                process.stdout._handle.setBlocking(true);
              }
            },
            bufferFrom,
            base64decode: (input) => bufferFrom(input, "base64").toString("utf8"),
            base64encode: (input) => bufferFrom(input).toString("base64"),
            require: (baseDir, moduleName) => {
              try {
                const modulePath = resolveJSModule(moduleName, baseDir, nodeSystem);
                return { module:   require(modulePath), modulePath, error: void 0 };
              } catch (error) {
                return { module: void 0, modulePath: void 0, error };
              }
            }
          };
          return nodeSystem;
          function statSync(path) {
            return _fs.statSync(path, { throwIfNoEntry: false });
          }
          function enableCPUProfiler(path, cb) {
            if (activeSession) {
              cb();
              return false;
            }
            const inspector =   require("inspector");
            if (!inspector || !inspector.Session) {
              cb();
              return false;
            }
            const session = new inspector.Session();
            session.connect();
            session.post("Profiler.enable", () => {
              session.post("Profiler.start", () => {
                activeSession = session;
                profilePath = path;
                cb();
              });
            });
            return true;
          }
          function cleanupPaths(profile) {
            let externalFileCounter = 0;
            const remappedPaths = /* @__PURE__ */ new Map();
            const normalizedDir = normalizeSlashes(_path.dirname(executingFilePath));
            const fileUrlRoot = `file://${getRootLength(normalizedDir) === 1 ? "" : "/"}${normalizedDir}`;
            for (const node of profile.nodes) {
              if (node.callFrame.url) {
                const url = normalizeSlashes(node.callFrame.url);
                if (containsPath(fileUrlRoot, url, useCaseSensitiveFileNames)) {
                  node.callFrame.url = getRelativePathToDirectoryOrUrl(
                    fileUrlRoot,
                    url,
                    fileUrlRoot,
                    createGetCanonicalFileName(useCaseSensitiveFileNames),
                    /*isAbsolutePathAnUrl*/
                    true
                  );
                } else if (!nativePattern.test(url)) {
                  node.callFrame.url = (remappedPaths.has(url) ? remappedPaths : remappedPaths.set(url, `external${externalFileCounter}.js`)).get(url);
                  externalFileCounter++;
                }
              }
            }
            return profile;
          }
          function disableCPUProfiler(cb) {
            if (activeSession && activeSession !== "stopping") {
              const s = activeSession;
              activeSession.post("Profiler.stop", (err, { profile }) => {
                var _a2;
                if (!err) {
                  try {
                    if ((_a2 = statSync(profilePath)) == null ? void 0 : _a2.isDirectory()) {
                      profilePath = _path.join(profilePath, `${(/* @__PURE__ */ new Date()).toISOString().replace(/:/g, "-")}+P${process.pid}.cpuprofile`);
                    }
                  } catch (e) {
                  }
                  try {
                    _fs.mkdirSync(_path.dirname(profilePath), { recursive: true });
                  } catch (e) {
                  }
                  _fs.writeFileSync(profilePath, JSON.stringify(cleanupPaths(profile)));
                }
                activeSession = void 0;
                s.disconnect();
                cb();
              });
              activeSession = "stopping";
              return true;
            } else {
              cb();
              return false;
            }
          }
          function bufferFrom(input, encoding) {
            return Buffer2.from && Buffer2.from !== Int8Array.from ? Buffer2.from(input, encoding) : new Buffer2(input, encoding);
          }
          function isFileSystemCaseSensitive() {
            if (platform === "win32" || platform === "win64") {
              return false;
            }
            return !fileExists(swapCase(__filename));
          }
          function swapCase(s) {
            return s.replace(/\w/g, (ch) => {
              const up = ch.toUpperCase();
              return ch === up ? ch.toLowerCase() : up;
            });
          }
          function fsWatchFileWorker(fileName, callback, pollingInterval) {
            _fs.watchFile(fileName, { persistent: true, interval: pollingInterval }, fileChanged);
            let eventKind;
            return {
              close: () => _fs.unwatchFile(fileName, fileChanged)
            };
            function fileChanged(curr, prev) {
              const isPreviouslyDeleted = +prev.mtime === 0 || eventKind === 2 /* Deleted */;
              if (+curr.mtime === 0) {
                if (isPreviouslyDeleted) {
                  return;
                }
                eventKind = 2 /* Deleted */;
              } else if (isPreviouslyDeleted) {
                eventKind = 0 /* Created */;
              } else if (+curr.mtime === +prev.mtime) {
                return;
              } else {
                eventKind = 1 /* Changed */;
              }
              callback(fileName, eventKind, curr.mtime);
            }
          }
          function fsWatchWorker(fileOrDirectory, recursive, callback) {
            return _fs.watch(
              fileOrDirectory,
              fsSupportsRecursiveFsWatch ? { persistent: true, recursive: !!recursive } : { persistent: true },
              callback
            );
          }
          function readFileWorker(fileName, _encoding) {
            let buffer;
            try {
              buffer = _fs.readFileSync(fileName);
            } catch (e) {
              return void 0;
            }
            let len = buffer.length;
            if (len >= 2 && buffer[0] === 254 && buffer[1] === 255) {
              len &= ~1;
              for (let i = 0; i < len; i += 2) {
                const temp = buffer[i];
                buffer[i] = buffer[i + 1];
                buffer[i + 1] = temp;
              }
              return buffer.toString("utf16le", 2);
            }
            if (len >= 2 && buffer[0] === 255 && buffer[1] === 254) {
              return buffer.toString("utf16le", 2);
            }
            if (len >= 3 && buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191) {
              return buffer.toString("utf8", 3);
            }
            return buffer.toString("utf8");
          }
          function readFile(fileName, _encoding) {
            perfLogger.logStartReadFile(fileName);
            const file = readFileWorker(fileName, _encoding);
            perfLogger.logStopReadFile();
            return file;
          }
          function writeFile2(fileName, data, writeByteOrderMark) {
            perfLogger.logEvent("WriteFile: " + fileName);
            if (writeByteOrderMark) {
              data = byteOrderMarkIndicator + data;
            }
            let fd;
            try {
              fd = _fs.openSync(fileName, "w");
              _fs.writeSync(
                fd,
                data,
                /*position*/
                void 0,
                "utf8"
              );
            } finally {
              if (fd !== void 0) {
                _fs.closeSync(fd);
              }
            }
          }
          function getAccessibleFileSystemEntries(path) {
            perfLogger.logEvent("ReadDir: " + (path || "."));
            try {
              const entries = _fs.readdirSync(path || ".", { withFileTypes: true });
              const files = [];
              const directories = [];
              for (const dirent of entries) {
                const entry = typeof dirent === "string" ? dirent : dirent.name;
                if (entry === "." || entry === "..") {
                  continue;
                }
                let stat;
                if (typeof dirent === "string" || dirent.isSymbolicLink()) {
                  const name = combinePaths(path, entry);
                  try {
                    stat = statSync(name);
                    if (!stat) {
                      continue;
                    }
                  } catch (e) {
                    continue;
                  }
                } else {
                  stat = dirent;
                }
                if (stat.isFile()) {
                  files.push(entry);
                } else if (stat.isDirectory()) {
                  directories.push(entry);
                }
              }
              files.sort();
              directories.sort();
              return { files, directories };
            } catch (e) {
              return emptyFileSystemEntries;
            }
          }
          function readDirectory(path, extensions, excludes, includes, depth) {
            return matchFiles(path, extensions, excludes, includes, useCaseSensitiveFileNames, process.cwd(), depth, getAccessibleFileSystemEntries, realpath);
          }
          function fileSystemEntryExists(path, entryKind) {
            const originalStackTraceLimit = Error.stackTraceLimit;
            Error.stackTraceLimit = 0;
            try {
              const stat = statSync(path);
              if (!stat) {
                return false;
              }
              switch (entryKind) {
                case 0 /* File */:
                  return stat.isFile();
                case 1 /* Directory */:
                  return stat.isDirectory();
                default:
                  return false;
              }
            } catch (e) {
              return false;
            } finally {
              Error.stackTraceLimit = originalStackTraceLimit;
            }
          }
          function fileExists(path) {
            return fileSystemEntryExists(path, 0 /* File */);
          }
          function directoryExists(path) {
            return fileSystemEntryExists(path, 1 /* Directory */);
          }
          function getDirectories(path) {
            return getAccessibleFileSystemEntries(path).directories.slice();
          }
          function fsRealPathHandlingLongPath(path) {
            return path.length < 260 ? _fs.realpathSync.native(path) : _fs.realpathSync(path);
          }
          function realpath(path) {
            try {
              return fsRealpath(path);
            } catch (e) {
              return path;
            }
          }
          function getModifiedTime3(path) {
            var _a2;
            const originalStackTraceLimit = Error.stackTraceLimit;
            Error.stackTraceLimit = 0;
            try {
              return (_a2 = statSync(path)) == null ? void 0 : _a2.mtime;
            } catch (e) {
              return void 0;
            } finally {
              Error.stackTraceLimit = originalStackTraceLimit;
            }
          }
          function setModifiedTime(path, time) {
            try {
              _fs.utimesSync(path, time, time);
            } catch (e) {
              return;
            }
          }
          function deleteFile(path) {
            try {
              return _fs.unlinkSync(path);
            } catch (e) {
              return;
            }
          }
          function createSHA256Hash(data) {
            const hash = _crypto.createHash("sha256");
            hash.update(data);
            return hash.digest("hex");
          }
        }
        let sys2;
        if (isNodeLikeSystem()) {
          sys2 = getNodeSystem();
        }
        if (sys2) {
          patchWriteFileEnsuringDirectory(sys2);
        }
        return sys2;
      })();
      if (sys && sys.getEnvironmentVariable) {
        setCustomPollingValues(sys);
        Debug.setAssertionLevel(/^development$/i.test(sys.getEnvironmentVariable("NODE_ENV")) ? 1 /* Normal */ : 0 /* None */);
      }
      if (sys && sys.debugMode) {
        Debug.isDebugging = true;
      }
    }
  });

  // src/compiler/path.ts
  function isAnyDirectorySeparator(charCode) {
    return charCode === 47 /* slash */ || charCode === 92 /* backslash */;
  }
  function isUrl(path) {
    return getEncodedRootLength(path) < 0;
  }
  function isRootedDiskPath(path) {
    return getEncodedRootLength(path) > 0;
  }
  function isDiskPathRoot(path) {
    const rootLength = getEncodedRootLength(path);
    return rootLength > 0 && rootLength === path.length;
  }
  function pathIsAbsolute(path) {
    return getEncodedRootLength(path) !== 0;
  }
  function pathIsRelative(path) {
    return /^\.\.?($|[\\/])/.test(path);
  }
  function pathIsBareSpecifier(path) {
    return !pathIsAbsolute(path) && !pathIsRelative(path);
  }
  function hasExtension(fileName) {
    return stringContains(getBaseFileName(fileName), ".");
  }
  function fileExtensionIs(path, extension) {
    return path.length > extension.length && endsWith(path, extension);
  }
  function fileExtensionIsOneOf(path, extensions) {
    for (const extension of extensions) {
      if (fileExtensionIs(path, extension)) {
        return true;
      }
    }
    return false;
  }
  function hasTrailingDirectorySeparator(path) {
    return path.length > 0 && isAnyDirectorySeparator(path.charCodeAt(path.length - 1));
  }
  function isVolumeCharacter(charCode) {
    return charCode >= 97 /* a */ && charCode <= 122 /* z */ || charCode >= 65 /* A */ && charCode <= 90 /* Z */;
  }
  function getFileUrlVolumeSeparatorEnd(url, start) {
    const ch0 = url.charCodeAt(start);
    if (ch0 === 58 /* colon */)
      return start + 1;
    if (ch0 === 37 /* percent */ && url.charCodeAt(start + 1) === 51 /* _3 */) {
      const ch2 = url.charCodeAt(start + 2);
      if (ch2 === 97 /* a */ || ch2 === 65 /* A */)
        return start + 3;
    }
    return -1;
  }
  function getEncodedRootLength(path) {
    if (!path)
      return 0;
    const ch0 = path.charCodeAt(0);
    if (ch0 === 47 /* slash */ || ch0 === 92 /* backslash */) {
      if (path.charCodeAt(1) !== ch0)
        return 1;
      const p1 = path.indexOf(ch0 === 47 /* slash */ ? directorySeparator : altDirectorySeparator, 2);
      if (p1 < 0)
        return path.length;
      return p1 + 1;
    }
    if (isVolumeCharacter(ch0) && path.charCodeAt(1) === 58 /* colon */) {
      const ch2 = path.charCodeAt(2);
      if (ch2 === 47 /* slash */ || ch2 === 92 /* backslash */)
        return 3;
      if (path.length === 2)
        return 2;
    }
    const schemeEnd = path.indexOf(urlSchemeSeparator);
    if (schemeEnd !== -1) {
      const authorityStart = schemeEnd + urlSchemeSeparator.length;
      const authorityEnd = path.indexOf(directorySeparator, authorityStart);
      if (authorityEnd !== -1) {
        const scheme = path.slice(0, schemeEnd);
        const authority = path.slice(authorityStart, authorityEnd);
        if (scheme === "file" && (authority === "" || authority === "localhost") && isVolumeCharacter(path.charCodeAt(authorityEnd + 1))) {
          const volumeSeparatorEnd = getFileUrlVolumeSeparatorEnd(path, authorityEnd + 2);
          if (volumeSeparatorEnd !== -1) {
            if (path.charCodeAt(volumeSeparatorEnd) === 47 /* slash */) {
              return ~(volumeSeparatorEnd + 1);
            }
            if (volumeSeparatorEnd === path.length) {
              return ~volumeSeparatorEnd;
            }
          }
        }
        return ~(authorityEnd + 1);
      }
      return ~path.length;
    }
    return 0;
  }
  function getRootLength(path) {
    const rootLength = getEncodedRootLength(path);
    return rootLength < 0 ? ~rootLength : rootLength;
  }
  function getDirectoryPath(path) {
    path = normalizeSlashes(path);
    const rootLength = getRootLength(path);
    if (rootLength === path.length)
      return path;
    path = removeTrailingDirectorySeparator(path);
    return path.slice(0, Math.max(rootLength, path.lastIndexOf(directorySeparator)));
  }
  function getBaseFileName(path, extensions, ignoreCase) {
    path = normalizeSlashes(path);
    const rootLength = getRootLength(path);
    if (rootLength === path.length)
      return "";
    path = removeTrailingDirectorySeparator(path);
    const name = path.slice(Math.max(getRootLength(path), path.lastIndexOf(directorySeparator) + 1));
    const extension = extensions !== void 0 && ignoreCase !== void 0 ? getAnyExtensionFromPath(name, extensions, ignoreCase) : void 0;
    return extension ? name.slice(0, name.length - extension.length) : name;
  }
  function tryGetExtensionFromPath(path, extension, stringEqualityComparer) {
    if (!startsWith(extension, "."))
      extension = "." + extension;
    if (path.length >= extension.length && path.charCodeAt(path.length - extension.length) === 46 /* dot */) {
      const pathExtension = path.slice(path.length - extension.length);
      if (stringEqualityComparer(pathExtension, extension)) {
        return pathExtension;
      }
    }
  }
  function getAnyExtensionFromPathWorker(path, extensions, stringEqualityComparer) {
    if (typeof extensions === "string") {
      return tryGetExtensionFromPath(path, extensions, stringEqualityComparer) || "";
    }
    for (const extension of extensions) {
      const result = tryGetExtensionFromPath(path, extension, stringEqualityComparer);
      if (result)
        return result;
    }
    return "";
  }
  function getAnyExtensionFromPath(path, extensions, ignoreCase) {
    if (extensions) {
      return getAnyExtensionFromPathWorker(removeTrailingDirectorySeparator(path), extensions, ignoreCase ? equateStringsCaseInsensitive : equateStringsCaseSensitive);
    }
    const baseFileName = getBaseFileName(path);
    const extensionIndex = baseFileName.lastIndexOf(".");
    if (extensionIndex >= 0) {
      return baseFileName.substring(extensionIndex);
    }
    return "";
  }
  function pathComponents(path, rootLength) {
    const root = path.substring(0, rootLength);
    const rest = path.substring(rootLength).split(directorySeparator);
    if (rest.length && !lastOrUndefined(rest))
      rest.pop();
    return [root, ...rest];
  }
  function getPathComponents(path, currentDirectory = "") {
    path = combinePaths(currentDirectory, path);
    return pathComponents(path, getRootLength(path));
  }
  function getPathFromPathComponents(pathComponents2) {
    if (pathComponents2.length === 0)
      return "";
    const root = pathComponents2[0] && ensureTrailingDirectorySeparator(pathComponents2[0]);
    return root + pathComponents2.slice(1).join(directorySeparator);
  }
  function normalizeSlashes(path) {
    return path.indexOf("\\") !== -1 ? path.replace(backslashRegExp, directorySeparator) : path;
  }
  function reducePathComponents(components) {
    if (!some(components))
      return [];
    const reduced = [components[0]];
    for (let i = 1; i < components.length; i++) {
      const component = components[i];
      if (!component)
        continue;
      if (component === ".")
        continue;
      if (component === "..") {
        if (reduced.length > 1) {
          if (reduced[reduced.length - 1] !== "..") {
            reduced.pop();
            continue;
          }
        } else if (reduced[0])
          continue;
      }
      reduced.push(component);
    }
    return reduced;
  }
  function combinePaths(path, ...paths) {
    if (path)
      path = normalizeSlashes(path);
    for (let relativePath of paths) {
      if (!relativePath)
        continue;
      relativePath = normalizeSlashes(relativePath);
      if (!path || getRootLength(relativePath) !== 0) {
        path = relativePath;
      } else {
        path = ensureTrailingDirectorySeparator(path) + relativePath;
      }
    }
    return path;
  }
  function resolvePath(path, ...paths) {
    return normalizePath(some(paths) ? combinePaths(path, ...paths) : normalizeSlashes(path));
  }
  function getNormalizedPathComponents(path, currentDirectory) {
    return reducePathComponents(getPathComponents(path, currentDirectory));
  }
  function getNormalizedAbsolutePath(fileName, currentDirectory) {
    return getPathFromPathComponents(getNormalizedPathComponents(fileName, currentDirectory));
  }
  function normalizePath(path) {
    path = normalizeSlashes(path);
    if (!relativePathSegmentRegExp.test(path)) {
      return path;
    }
    const simplified = path.replace(/\/\.\//g, "/").replace(/^\.\//, "");
    if (simplified !== path) {
      path = simplified;
      if (!relativePathSegmentRegExp.test(path)) {
        return path;
      }
    }
    const normalized = getPathFromPathComponents(reducePathComponents(getPathComponents(path)));
    return normalized && hasTrailingDirectorySeparator(path) ? ensureTrailingDirectorySeparator(normalized) : normalized;
  }
  function getPathWithoutRoot(pathComponents2) {
    if (pathComponents2.length === 0)
      return "";
    return pathComponents2.slice(1).join(directorySeparator);
  }
  function getNormalizedAbsolutePathWithoutRoot(fileName, currentDirectory) {
    return getPathWithoutRoot(getNormalizedPathComponents(fileName, currentDirectory));
  }
  function toPath(fileName, basePath, getCanonicalFileName) {
    const nonCanonicalizedPath = isRootedDiskPath(fileName) ? normalizePath(fileName) : getNormalizedAbsolutePath(fileName, basePath);
    return getCanonicalFileName(nonCanonicalizedPath);
  }
  function removeTrailingDirectorySeparator(path) {
    if (hasTrailingDirectorySeparator(path)) {
      return path.substr(0, path.length - 1);
    }
    return path;
  }
  function ensureTrailingDirectorySeparator(path) {
    if (!hasTrailingDirectorySeparator(path)) {
      return path + directorySeparator;
    }
    return path;
  }
  function ensurePathIsNonModuleName(path) {
    return !pathIsAbsolute(path) && !pathIsRelative(path) ? "./" + path : path;
  }
  function changeAnyExtension(path, ext, extensions, ignoreCase) {
    const pathext = extensions !== void 0 && ignoreCase !== void 0 ? getAnyExtensionFromPath(path, extensions, ignoreCase) : getAnyExtensionFromPath(path);
    return pathext ? path.slice(0, path.length - pathext.length) + (startsWith(ext, ".") ? ext : "." + ext) : path;
  }
  function comparePathsWorker(a, b, componentComparer) {
    if (a === b)
      return 0 /* EqualTo */;
    if (a === void 0)
      return -1 /* LessThan */;
    if (b === void 0)
      return 1 /* GreaterThan */;
    const aRoot = a.substring(0, getRootLength(a));
    const bRoot = b.substring(0, getRootLength(b));
    const result = compareStringsCaseInsensitive(aRoot, bRoot);
    if (result !== 0 /* EqualTo */) {
      return result;
    }
    const aRest = a.substring(aRoot.length);
    const bRest = b.substring(bRoot.length);
    if (!relativePathSegmentRegExp.test(aRest) && !relativePathSegmentRegExp.test(bRest)) {
      return componentComparer(aRest, bRest);
    }
    const aComponents = reducePathComponents(getPathComponents(a));
    const bComponents = reducePathComponents(getPathComponents(b));
    const sharedLength = Math.min(aComponents.length, bComponents.length);
    for (let i = 1; i < sharedLength; i++) {
      const result2 = componentComparer(aComponents[i], bComponents[i]);
      if (result2 !== 0 /* EqualTo */) {
        return result2;
      }
    }
    return compareValues(aComponents.length, bComponents.length);
  }
  function comparePathsCaseSensitive(a, b) {
    return comparePathsWorker(a, b, compareStringsCaseSensitive);
  }
  function comparePathsCaseInsensitive(a, b) {
    return comparePathsWorker(a, b, compareStringsCaseInsensitive);
  }
  function comparePaths(a, b, currentDirectory, ignoreCase) {
    if (typeof currentDirectory === "string") {
      a = combinePaths(currentDirectory, a);
      b = combinePaths(currentDirectory, b);
    } else if (typeof currentDirectory === "boolean") {
      ignoreCase = currentDirectory;
    }
    return comparePathsWorker(a, b, getStringComparer(ignoreCase));
  }
  function containsPath(parent2, child, currentDirectory, ignoreCase) {
    if (typeof currentDirectory === "string") {
      parent2 = combinePaths(currentDirectory, parent2);
      child = combinePaths(currentDirectory, child);
    } else if (typeof currentDirectory === "boolean") {
      ignoreCase = currentDirectory;
    }
    if (parent2 === void 0 || child === void 0)
      return false;
    if (parent2 === child)
      return true;
    const parentComponents = reducePathComponents(getPathComponents(parent2));
    const childComponents = reducePathComponents(getPathComponents(child));
    if (childComponents.length < parentComponents.length) {
      return false;
    }
    const componentEqualityComparer = ignoreCase ? equateStringsCaseInsensitive : equateStringsCaseSensitive;
    for (let i = 0; i < parentComponents.length; i++) {
      const equalityComparer = i === 0 ? equateStringsCaseInsensitive : componentEqualityComparer;
      if (!equalityComparer(parentComponents[i], childComponents[i])) {
        return false;
      }
    }
    return true;
  }
  function startsWithDirectory(fileName, directoryName, getCanonicalFileName) {
    const canonicalFileName = getCanonicalFileName(fileName);
    const canonicalDirectoryName = getCanonicalFileName(directoryName);
    return startsWith(canonicalFileName, canonicalDirectoryName + "/") || startsWith(canonicalFileName, canonicalDirectoryName + "\\");
  }
  function getPathComponentsRelativeTo(from, to, stringEqualityComparer, getCanonicalFileName) {
    const fromComponents = reducePathComponents(getPathComponents(from));
    const toComponents = reducePathComponents(getPathComponents(to));
    let start;
    for (start = 0; start < fromComponents.length && start < toComponents.length; start++) {
      const fromComponent = getCanonicalFileName(fromComponents[start]);
      const toComponent = getCanonicalFileName(toComponents[start]);
      const comparer = start === 0 ? equateStringsCaseInsensitive : stringEqualityComparer;
      if (!comparer(fromComponent, toComponent))
        break;
    }
    if (start === 0) {
      return toComponents;
    }
    const components = toComponents.slice(start);
    const relative = [];
    for (; start < fromComponents.length; start++) {
      relative.push("..");
    }
    return ["", ...relative, ...components];
  }
  function getRelativePathFromDirectory(fromDirectory, to, getCanonicalFileNameOrIgnoreCase) {
    Debug.assert(getRootLength(fromDirectory) > 0 === getRootLength(to) > 0, "Paths must either both be absolute or both be relative");
    const getCanonicalFileName = typeof getCanonicalFileNameOrIgnoreCase === "function" ? getCanonicalFileNameOrIgnoreCase : identity;
    const ignoreCase = typeof getCanonicalFileNameOrIgnoreCase === "boolean" ? getCanonicalFileNameOrIgnoreCase : false;
    const pathComponents2 = getPathComponentsRelativeTo(fromDirectory, to, ignoreCase ? equateStringsCaseInsensitive : equateStringsCaseSensitive, getCanonicalFileName);
    return getPathFromPathComponents(pathComponents2);
  }
  function convertToRelativePath(absoluteOrRelativePath, basePath, getCanonicalFileName) {
    return !isRootedDiskPath(absoluteOrRelativePath) ? absoluteOrRelativePath : getRelativePathToDirectoryOrUrl(
      basePath,
      absoluteOrRelativePath,
      basePath,
      getCanonicalFileName,
      /*isAbsolutePathAnUrl*/
      false
    );
  }
  function getRelativePathFromFile(from, to, getCanonicalFileName) {
    return ensurePathIsNonModuleName(getRelativePathFromDirectory(getDirectoryPath(from), to, getCanonicalFileName));
  }
  function getRelativePathToDirectoryOrUrl(directoryPathOrUrl, relativeOrAbsolutePath, currentDirectory, getCanonicalFileName, isAbsolutePathAnUrl) {
    const pathComponents2 = getPathComponentsRelativeTo(
      resolvePath(currentDirectory, directoryPathOrUrl),
      resolvePath(currentDirectory, relativeOrAbsolutePath),
      equateStringsCaseSensitive,
      getCanonicalFileName
    );
    const firstComponent = pathComponents2[0];
    if (isAbsolutePathAnUrl && isRootedDiskPath(firstComponent)) {
      const prefix = firstComponent.charAt(0) === directorySeparator ? "file://" : "file:///";
      pathComponents2[0] = prefix + firstComponent;
    }
    return getPathFromPathComponents(pathComponents2);
  }
  function forEachAncestorDirectory(directory, callback) {
    while (true) {
      const result = callback(directory);
      if (result !== void 0) {
        return result;
      }
      const parentPath = getDirectoryPath(directory);
      if (parentPath === directory) {
        return void 0;
      }
      directory = parentPath;
    }
  }
  function isNodeModulesDirectory(dirPath) {
    return endsWith(dirPath, "/node_modules");
  }
  var directorySeparator, altDirectorySeparator, urlSchemeSeparator, backslashRegExp, relativePathSegmentRegExp;
  var init_path = __esm({
    "src/compiler/path.ts"() {
      "use strict";
      init_ts2();
      directorySeparator = "/";
      altDirectorySeparator = "\\";
      urlSchemeSeparator = "://";
      backslashRegExp = /\\/g;
      relativePathSegmentRegExp = /(?:\/\/)|(?:^|\/)\.\.?(?:$|\/)/;
    }
  });

  // src/compiler/diagnosticInformationMap.generated.ts
  function diag(code, category, key, message, reportsUnnecessary, elidedInCompatabilityPyramid, reportsDeprecated) {
    return { code, category, key, message, reportsUnnecessary, elidedInCompatabilityPyramid, reportsDeprecated };
  }
  var Diagnostics;
  var init_diagnosticInformationMap_generated = __esm({
    "src/compiler/diagnosticInformationMap.generated.ts"() {
      "use strict";
      init_types();
      Diagnostics = {
        Unterminated_string_literal: diag(1002, 1 /* Error */, "Unterminated_string_literal_1002", "Unterminated string literal."),
        Identifier_expected: diag(1003, 1 /* Error */, "Identifier_expected_1003", "Identifier expected."),
        _0_expected: diag(1005, 1 /* Error */, "_0_expected_1005", "'{0}' expected."),
        A_file_cannot_have_a_reference_to_itself: diag(1006, 1 /* Error */, "A_file_cannot_have_a_reference_to_itself_1006", "A file cannot have a reference to itself."),
        The_parser_expected_to_find_a_1_to_match_the_0_token_here: diag(1007, 1 /* Error */, "The_parser_expected_to_find_a_1_to_match_the_0_token_here_1007", "The parser expected to find a '{1}' to match the '{0}' token here."),
        Trailing_comma_not_allowed: diag(1009, 1 /* Error */, "Trailing_comma_not_allowed_1009", "Trailing comma not allowed."),
        Asterisk_Slash_expected: diag(1010, 1 /* Error */, "Asterisk_Slash_expected_1010", "'*/' expected."),
        An_element_access_expression_should_take_an_argument: diag(1011, 1 /* Error */, "An_element_access_expression_should_take_an_argument_1011", "An element access expression should take an argument."),
        Unexpected_token: diag(1012, 1 /* Error */, "Unexpected_token_1012", "Unexpected token."),
        A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma: diag(1013, 1 /* Error */, "A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma_1013", "A rest parameter or binding pattern may not have a trailing comma."),
        A_rest_parameter_must_be_last_in_a_parameter_list: diag(1014, 1 /* Error */, "A_rest_parameter_must_be_last_in_a_parameter_list_1014", "A rest parameter must be last in a parameter list."),
        Parameter_cannot_have_question_mark_and_initializer: diag(1015, 1 /* Error */, "Parameter_cannot_have_question_mark_and_initializer_1015", "Parameter cannot have question mark and initializer."),
        A_required_parameter_cannot_follow_an_optional_parameter: diag(1016, 1 /* Error */, "A_required_parameter_cannot_follow_an_optional_parameter_1016", "A required parameter cannot follow an optional parameter."),
        An_index_signature_cannot_have_a_rest_parameter: diag(1017, 1 /* Error */, "An_index_signature_cannot_have_a_rest_parameter_1017", "An index signature cannot have a rest parameter."),
        An_index_signature_parameter_cannot_have_an_accessibility_modifier: diag(1018, 1 /* Error */, "An_index_signature_parameter_cannot_have_an_accessibility_modifier_1018", "An index signature parameter cannot have an accessibility modifier."),
        An_index_signature_parameter_cannot_have_a_question_mark: diag(1019, 1 /* Error */, "An_index_signature_parameter_cannot_have_a_question_mark_1019", "An index signature parameter cannot have a question mark."),
        An_index_signature_parameter_cannot_have_an_initializer: diag(1020, 1 /* Error */, "An_index_signature_parameter_cannot_have_an_initializer_1020", "An index signature parameter cannot have an initializer."),
        An_index_signature_must_have_a_type_annotation: diag(1021, 1 /* Error */, "An_index_signature_must_have_a_type_annotation_1021", "An index signature must have a type annotation."),
        An_index_signature_parameter_must_have_a_type_annotation: diag(1022, 1 /* Error */, "An_index_signature_parameter_must_have_a_type_annotation_1022", "An index signature parameter must have a type annotation."),
        readonly_modifier_can_only_appear_on_a_property_declaration_or_index_signature: diag(1024, 1 /* Error */, "readonly_modifier_can_only_appear_on_a_property_declaration_or_index_signature_1024", "'readonly' modifier can only appear on a property declaration or index signature."),
        An_index_signature_cannot_have_a_trailing_comma: diag(1025, 1 /* Error */, "An_index_signature_cannot_have_a_trailing_comma_1025", "An index signature cannot have a trailing comma."),
        Accessibility_modifier_already_seen: diag(1028, 1 /* Error */, "Accessibility_modifier_already_seen_1028", "Accessibility modifier already seen."),
        _0_modifier_must_precede_1_modifier: diag(1029, 1 /* Error */, "_0_modifier_must_precede_1_modifier_1029", "'{0}' modifier must precede '{1}' modifier."),
        _0_modifier_already_seen: diag(1030, 1 /* Error */, "_0_modifier_already_seen_1030", "'{0}' modifier already seen."),
        _0_modifier_cannot_appear_on_class_elements_of_this_kind: diag(1031, 1 /* Error */, "_0_modifier_cannot_appear_on_class_elements_of_this_kind_1031", "'{0}' modifier cannot appear on class elements of this kind."),
        super_must_be_followed_by_an_argument_list_or_member_access: diag(1034, 1 /* Error */, "super_must_be_followed_by_an_argument_list_or_member_access_1034", "'super' must be followed by an argument list or member access."),
        Only_ambient_modules_can_use_quoted_names: diag(1035, 1 /* Error */, "Only_ambient_modules_can_use_quoted_names_1035", "Only ambient modules can use quoted names."),
        Statements_are_not_allowed_in_ambient_contexts: diag(1036, 1 /* Error */, "Statements_are_not_allowed_in_ambient_contexts_1036", "Statements are not allowed in ambient contexts."),
        A_declare_modifier_cannot_be_used_in_an_already_ambient_context: diag(1038, 1 /* Error */, "A_declare_modifier_cannot_be_used_in_an_already_ambient_context_1038", "A 'declare' modifier cannot be used in an already ambient context."),
        Initializers_are_not_allowed_in_ambient_contexts: diag(1039, 1 /* Error */, "Initializers_are_not_allowed_in_ambient_contexts_1039", "Initializers are not allowed in ambient contexts."),
        _0_modifier_cannot_be_used_in_an_ambient_context: diag(1040, 1 /* Error */, "_0_modifier_cannot_be_used_in_an_ambient_context_1040", "'{0}' modifier cannot be used in an ambient context."),
        _0_modifier_cannot_be_used_here: diag(1042, 1 /* Error */, "_0_modifier_cannot_be_used_here_1042", "'{0}' modifier cannot be used here."),
        _0_modifier_cannot_appear_on_a_module_or_namespace_element: diag(1044, 1 /* Error */, "_0_modifier_cannot_appear_on_a_module_or_namespace_element_1044", "'{0}' modifier cannot appear on a module or namespace element."),
        Top_level_declarations_in_d_ts_files_must_start_with_either_a_declare_or_export_modifier: diag(1046, 1 /* Error */, "Top_level_declarations_in_d_ts_files_must_start_with_either_a_declare_or_export_modifier_1046", "Top-level declarations in .d.ts files must start with either a 'declare' or 'export' modifier."),
        A_rest_parameter_cannot_be_optional: diag(1047, 1 /* Error */, "A_rest_parameter_cannot_be_optional_1047", "A rest parameter cannot be optional."),
        A_rest_parameter_cannot_have_an_initializer: diag(1048, 1 /* Error */, "A_rest_parameter_cannot_have_an_initializer_1048", "A rest parameter cannot have an initializer."),
        A_set_accessor_must_have_exactly_one_parameter: diag(1049, 1 /* Error */, "A_set_accessor_must_have_exactly_one_parameter_1049", "A 'set' accessor must have exactly one parameter."),
        A_set_accessor_cannot_have_an_optional_parameter: diag(1051, 1 /* Error */, "A_set_accessor_cannot_have_an_optional_parameter_1051", "A 'set' accessor cannot have an optional parameter."),
        A_set_accessor_parameter_cannot_have_an_initializer: diag(1052, 1 /* Error */, "A_set_accessor_parameter_cannot_have_an_initializer_1052", "A 'set' accessor parameter cannot have an initializer."),
        A_set_accessor_cannot_have_rest_parameter: diag(1053, 1 /* Error */, "A_set_accessor_cannot_have_rest_parameter_1053", "A 'set' accessor cannot have rest parameter."),
        A_get_accessor_cannot_have_parameters: diag(1054, 1 /* Error */, "A_get_accessor_cannot_have_parameters_1054", "A 'get' accessor cannot have parameters."),
        Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Promise_compatible_constructor_value: diag(1055, 1 /* Error */, "Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Prom_1055", "Type '{0}' is not a valid async function return type in ES5/ES3 because it does not refer to a Promise-compatible constructor value."),
        Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher: diag(1056, 1 /* Error */, "Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher_1056", "Accessors are only available when targeting ECMAScript 5 and higher."),
        The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: diag(1058, 1 /* Error */, "The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_t_1058", "The return type of an async function must either be a valid promise or must not contain a callable 'then' member."),
        A_promise_must_have_a_then_method: diag(1059, 1 /* Error */, "A_promise_must_have_a_then_method_1059", "A promise must have a 'then' method."),
        The_first_parameter_of_the_then_method_of_a_promise_must_be_a_callback: diag(1060, 1 /* Error */, "The_first_parameter_of_the_then_method_of_a_promise_must_be_a_callback_1060", "The first parameter of the 'then' method of a promise must be a callback."),
        Enum_member_must_have_initializer: diag(1061, 1 /* Error */, "Enum_member_must_have_initializer_1061", "Enum member must have initializer."),
        Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method: diag(1062, 1 /* Error */, "Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method_1062", "Type is referenced directly or indirectly in the fulfillment callback of its own 'then' method."),
        An_export_assignment_cannot_be_used_in_a_namespace: diag(1063, 1 /* Error */, "An_export_assignment_cannot_be_used_in_a_namespace_1063", "An export assignment cannot be used in a namespace."),
        The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type_Did_you_mean_to_write_Promise_0: diag(1064, 1 /* Error */, "The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type_Did_you_mean_to_wri_1064", "The return type of an async function or method must be the global Promise<T> type. Did you mean to write 'Promise<{0}>'?"),
        In_ambient_enum_declarations_member_initializer_must_be_constant_expression: diag(1066, 1 /* Error */, "In_ambient_enum_declarations_member_initializer_must_be_constant_expression_1066", "In ambient enum declarations member initializer must be constant expression."),
        Unexpected_token_A_constructor_method_accessor_or_property_was_expected: diag(1068, 1 /* Error */, "Unexpected_token_A_constructor_method_accessor_or_property_was_expected_1068", "Unexpected token. A constructor, method, accessor, or property was expected."),
        Unexpected_token_A_type_parameter_name_was_expected_without_curly_braces: diag(1069, 1 /* Error */, "Unexpected_token_A_type_parameter_name_was_expected_without_curly_braces_1069", "Unexpected token. A type parameter name was expected without curly braces."),
        _0_modifier_cannot_appear_on_a_type_member: diag(1070, 1 /* Error */, "_0_modifier_cannot_appear_on_a_type_member_1070", "'{0}' modifier cannot appear on a type member."),
        _0_modifier_cannot_appear_on_an_index_signature: diag(1071, 1 /* Error */, "_0_modifier_cannot_appear_on_an_index_signature_1071", "'{0}' modifier cannot appear on an index signature."),
        A_0_modifier_cannot_be_used_with_an_import_declaration: diag(1079, 1 /* Error */, "A_0_modifier_cannot_be_used_with_an_import_declaration_1079", "A '{0}' modifier cannot be used with an import declaration."),
        Invalid_reference_directive_syntax: diag(1084, 1 /* Error */, "Invalid_reference_directive_syntax_1084", "Invalid 'reference' directive syntax."),
        Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher_Use_the_syntax_0: diag(1085, 1 /* Error */, "Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher_Use_the_syntax_0_1085", "Octal literals are not available when targeting ECMAScript 5 and higher. Use the syntax '{0}'."),
        _0_modifier_cannot_appear_on_a_constructor_declaration: diag(1089, 1 /* Error */, "_0_modifier_cannot_appear_on_a_constructor_declaration_1089", "'{0}' modifier cannot appear on a constructor declaration."),
        _0_modifier_cannot_appear_on_a_parameter: diag(1090, 1 /* Error */, "_0_modifier_cannot_appear_on_a_parameter_1090", "'{0}' modifier cannot appear on a parameter."),
        Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement: diag(1091, 1 /* Error */, "Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement_1091", "Only a single variable declaration is allowed in a 'for...in' statement."),
        Type_parameters_cannot_appear_on_a_constructor_declaration: diag(1092, 1 /* Error */, "Type_parameters_cannot_appear_on_a_constructor_declaration_1092", "Type parameters cannot appear on a constructor declaration."),
        Type_annotation_cannot_appear_on_a_constructor_declaration: diag(1093, 1 /* Error */, "Type_annotation_cannot_appear_on_a_constructor_declaration_1093", "Type annotation cannot appear on a constructor declaration."),
        An_accessor_cannot_have_type_parameters: diag(1094, 1 /* Error */, "An_accessor_cannot_have_type_parameters_1094", "An accessor cannot have type parameters."),
        A_set_accessor_cannot_have_a_return_type_annotation: diag(1095, 1 /* Error */, "A_set_accessor_cannot_have_a_return_type_annotation_1095", "A 'set' accessor cannot have a return type annotation."),
        An_index_signature_must_have_exactly_one_parameter: diag(1096, 1 /* Error */, "An_index_signature_must_have_exactly_one_parameter_1096", "An index signature must have exactly one parameter."),
        _0_list_cannot_be_empty: diag(1097, 1 /* Error */, "_0_list_cannot_be_empty_1097", "'{0}' list cannot be empty."),
        Type_parameter_list_cannot_be_empty: diag(1098, 1 /* Error */, "Type_parameter_list_cannot_be_empty_1098", "Type parameter list cannot be empty."),
        Type_argument_list_cannot_be_empty: diag(1099, 1 /* Error */, "Type_argument_list_cannot_be_empty_1099", "Type argument list cannot be empty."),
        Invalid_use_of_0_in_strict_mode: diag(1100, 1 /* Error */, "Invalid_use_of_0_in_strict_mode_1100", "Invalid use of '{0}' in strict mode."),
        with_statements_are_not_allowed_in_strict_mode: diag(1101, 1 /* Error */, "with_statements_are_not_allowed_in_strict_mode_1101", "'with' statements are not allowed in strict mode."),
        delete_cannot_be_called_on_an_identifier_in_strict_mode: diag(1102, 1 /* Error */, "delete_cannot_be_called_on_an_identifier_in_strict_mode_1102", "'delete' cannot be called on an identifier in strict mode."),
        for_await_loops_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules: diag(1103, 1 /* Error */, "for_await_loops_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules_1103", "'for await' loops are only allowed within async functions and at the top levels of modules."),
        A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement: diag(1104, 1 /* Error */, "A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement_1104", "A 'continue' statement can only be used within an enclosing iteration statement."),
        A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement: diag(1105, 1 /* Error */, "A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement_1105", "A 'break' statement can only be used within an enclosing iteration or switch statement."),
        The_left_hand_side_of_a_for_of_statement_may_not_be_async: diag(1106, 1 /* Error */, "The_left_hand_side_of_a_for_of_statement_may_not_be_async_1106", "The left-hand side of a 'for...of' statement may not be 'async'."),
        Jump_target_cannot_cross_function_boundary: diag(1107, 1 /* Error */, "Jump_target_cannot_cross_function_boundary_1107", "Jump target cannot cross function boundary."),
        A_return_statement_can_only_be_used_within_a_function_body: diag(1108, 1 /* Error */, "A_return_statement_can_only_be_used_within_a_function_body_1108", "A 'return' statement can only be used within a function body."),
        Expression_expected: diag(1109, 1 /* Error */, "Expression_expected_1109", "Expression expected."),
        Type_expected: diag(1110, 1 /* Error */, "Type_expected_1110", "Type expected."),
        A_default_clause_cannot_appear_more_than_once_in_a_switch_statement: diag(1113, 1 /* Error */, "A_default_clause_cannot_appear_more_than_once_in_a_switch_statement_1113", "A 'default' clause cannot appear more than once in a 'switch' statement."),
        Duplicate_label_0: diag(1114, 1 /* Error */, "Duplicate_label_0_1114", "Duplicate label '{0}'."),
        A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement: diag(1115, 1 /* Error */, "A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement_1115", "A 'continue' statement can only jump to a label of an enclosing iteration statement."),
        A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement: diag(1116, 1 /* Error */, "A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement_1116", "A 'break' statement can only jump to a label of an enclosing statement."),
        An_object_literal_cannot_have_multiple_properties_with_the_same_name: diag(1117, 1 /* Error */, "An_object_literal_cannot_have_multiple_properties_with_the_same_name_1117", "An object literal cannot have multiple properties with the same name."),
        An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name: diag(1118, 1 /* Error */, "An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name_1118", "An object literal cannot have multiple get/set accessors with the same name."),
        An_object_literal_cannot_have_property_and_accessor_with_the_same_name: diag(1119, 1 /* Error */, "An_object_literal_cannot_have_property_and_accessor_with_the_same_name_1119", "An object literal cannot have property and accessor with the same name."),
        An_export_assignment_cannot_have_modifiers: diag(1120, 1 /* Error */, "An_export_assignment_cannot_have_modifiers_1120", "An export assignment cannot have modifiers."),
        Octal_literals_are_not_allowed_in_strict_mode: diag(1121, 1 /* Error */, "Octal_literals_are_not_allowed_in_strict_mode_1121", "Octal literals are not allowed in strict mode."),
        Variable_declaration_list_cannot_be_empty: diag(1123, 1 /* Error */, "Variable_declaration_list_cannot_be_empty_1123", "Variable declaration list cannot be empty."),
        Digit_expected: diag(1124, 1 /* Error */, "Digit_expected_1124", "Digit expected."),
        Hexadecimal_digit_expected: diag(1125, 1 /* Error */, "Hexadecimal_digit_expected_1125", "Hexadecimal digit expected."),
        Unexpected_end_of_text: diag(1126, 1 /* Error */, "Unexpected_end_of_text_1126", "Unexpected end of text."),
        Invalid_character: diag(1127, 1 /* Error */, "Invalid_character_1127", "Invalid character."),
        Declaration_or_statement_expected: diag(1128, 1 /* Error */, "Declaration_or_statement_expected_1128", "Declaration or statement expected."),
        Statement_expected: diag(1129, 1 /* Error */, "Statement_expected_1129", "Statement expected."),
        case_or_default_expected: diag(1130, 1 /* Error */, "case_or_default_expected_1130", "'case' or 'default' expected."),
        Property_or_signature_expected: diag(1131, 1 /* Error */, "Property_or_signature_expected_1131", "Property or signature expected."),
        Enum_member_expected: diag(1132, 1 /* Error */, "Enum_member_expected_1132", "Enum member expected."),
        Variable_declaration_expected: diag(1134, 1 /* Error */, "Variable_declaration_expected_1134", "Variable declaration expected."),
        Argument_expression_expected: diag(1135, 1 /* Error */, "Argument_expression_expected_1135", "Argument expression expected."),
        Property_assignment_expected: diag(1136, 1 /* Error */, "Property_assignment_expected_1136", "Property assignment expected."),
        Expression_or_comma_expected: diag(1137, 1 /* Error */, "Expression_or_comma_expected_1137", "Expression or comma expected."),
        Parameter_declaration_expected: diag(1138, 1 /* Error */, "Parameter_declaration_expected_1138", "Parameter declaration expected."),
        Type_parameter_declaration_expected: diag(1139, 1 /* Error */, "Type_parameter_declaration_expected_1139", "Type parameter declaration expected."),
        Type_argument_expected: diag(1140, 1 /* Error */, "Type_argument_expected_1140", "Type argument expected."),
        String_literal_expected: diag(1141, 1 /* Error */, "String_literal_expected_1141", "String literal expected."),
        Line_break_not_permitted_here: diag(1142, 1 /* Error */, "Line_break_not_permitted_here_1142", "Line break not permitted here."),
        or_expected: diag(1144, 1 /* Error */, "or_expected_1144", "'{' or ';' expected."),
        or_JSX_element_expected: diag(1145, 1 /* Error */, "or_JSX_element_expected_1145", "'{' or JSX element expected."),
        Declaration_expected: diag(1146, 1 /* Error */, "Declaration_expected_1146", "Declaration expected."),
        Import_declarations_in_a_namespace_cannot_reference_a_module: diag(1147, 1 /* Error */, "Import_declarations_in_a_namespace_cannot_reference_a_module_1147", "Import declarations in a namespace cannot reference a module."),
        Cannot_use_imports_exports_or_module_augmentations_when_module_is_none: diag(1148, 1 /* Error */, "Cannot_use_imports_exports_or_module_augmentations_when_module_is_none_1148", "Cannot use imports, exports, or module augmentations when '--module' is 'none'."),
        File_name_0_differs_from_already_included_file_name_1_only_in_casing: diag(1149, 1 /* Error */, "File_name_0_differs_from_already_included_file_name_1_only_in_casing_1149", "File name '{0}' differs from already included file name '{1}' only in casing."),
        const_declarations_must_be_initialized: diag(1155, 1 /* Error */, "const_declarations_must_be_initialized_1155", "'const' declarations must be initialized."),
        const_declarations_can_only_be_declared_inside_a_block: diag(1156, 1 /* Error */, "const_declarations_can_only_be_declared_inside_a_block_1156", "'const' declarations can only be declared inside a block."),
        let_declarations_can_only_be_declared_inside_a_block: diag(1157, 1 /* Error */, "let_declarations_can_only_be_declared_inside_a_block_1157", "'let' declarations can only be declared inside a block."),
        Unterminated_template_literal: diag(1160, 1 /* Error */, "Unterminated_template_literal_1160", "Unterminated template literal."),
        Unterminated_regular_expression_literal: diag(1161, 1 /* Error */, "Unterminated_regular_expression_literal_1161", "Unterminated regular expression literal."),
        An_object_member_cannot_be_declared_optional: diag(1162, 1 /* Error */, "An_object_member_cannot_be_declared_optional_1162", "An object member cannot be declared optional."),
        A_yield_expression_is_only_allowed_in_a_generator_body: diag(1163, 1 /* Error */, "A_yield_expression_is_only_allowed_in_a_generator_body_1163", "A 'yield' expression is only allowed in a generator body."),
        Computed_property_names_are_not_allowed_in_enums: diag(1164, 1 /* Error */, "Computed_property_names_are_not_allowed_in_enums_1164", "Computed property names are not allowed in enums."),
        A_computed_property_name_in_an_ambient_context_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: diag(1165, 1 /* Error */, "A_computed_property_name_in_an_ambient_context_must_refer_to_an_expression_whose_type_is_a_literal_t_1165", "A computed property name in an ambient context must refer to an expression whose type is a literal type or a 'unique symbol' type."),
        A_computed_property_name_in_a_class_property_declaration_must_have_a_simple_literal_type_or_a_unique_symbol_type: diag(1166, 1 /* Error */, "A_computed_property_name_in_a_class_property_declaration_must_have_a_simple_literal_type_or_a_unique_1166", "A computed property name in a class property declaration must have a simple literal type or a 'unique symbol' type."),
        A_computed_property_name_in_a_method_overload_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: diag(1168, 1 /* Error */, "A_computed_property_name_in_a_method_overload_must_refer_to_an_expression_whose_type_is_a_literal_ty_1168", "A computed property name in a method overload must refer to an expression whose type is a literal type or a 'unique symbol' type."),
        A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: diag(1169, 1 /* Error */, "A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_1169", "A computed property name in an interface must refer to an expression whose type is a literal type or a 'unique symbol' type."),
        A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: diag(1170, 1 /* Error */, "A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type__1170", "A computed property name in a type literal must refer to an expression whose type is a literal type or a 'unique symbol' type."),
        A_comma_expression_is_not_allowed_in_a_computed_property_name: diag(1171, 1 /* Error */, "A_comma_expression_is_not_allowed_in_a_computed_property_name_1171", "A comma expression is not allowed in a computed property name."),
        extends_clause_already_seen: diag(1172, 1 /* Error */, "extends_clause_already_seen_1172", "'extends' clause already seen."),
        extends_clause_must_precede_implements_clause: diag(1173, 1 /* Error */, "extends_clause_must_precede_implements_clause_1173", "'extends' clause must precede 'implements' clause."),
        Classes_can_only_extend_a_single_class: diag(1174, 1 /* Error */, "Classes_can_only_extend_a_single_class_1174", "Classes can only extend a single class."),
        implements_clause_already_seen: diag(1175, 1 /* Error */, "implements_clause_already_seen_1175", "'implements' clause already seen."),
        Interface_declaration_cannot_have_implements_clause: diag(1176, 1 /* Error */, "Interface_declaration_cannot_have_implements_clause_1176", "Interface declaration cannot have 'implements' clause."),
        Binary_digit_expected: diag(1177, 1 /* Error */, "Binary_digit_expected_1177", "Binary digit expected."),
        Octal_digit_expected: diag(1178, 1 /* Error */, "Octal_digit_expected_1178", "Octal digit expected."),
        Unexpected_token_expected: diag(1179, 1 /* Error */, "Unexpected_token_expected_1179", "Unexpected token. '{' expected."),
        Property_destructuring_pattern_expected: diag(1180, 1 /* Error */, "Property_destructuring_pattern_expected_1180", "Property destructuring pattern expected."),
        Array_element_destructuring_pattern_expected: diag(1181, 1 /* Error */, "Array_element_destructuring_pattern_expected_1181", "Array element destructuring pattern expected."),
        A_destructuring_declaration_must_have_an_initializer: diag(1182, 1 /* Error */, "A_destructuring_declaration_must_have_an_initializer_1182", "A destructuring declaration must have an initializer."),
        An_implementation_cannot_be_declared_in_ambient_contexts: diag(1183, 1 /* Error */, "An_implementation_cannot_be_declared_in_ambient_contexts_1183", "An implementation cannot be declared in ambient contexts."),
        Modifiers_cannot_appear_here: diag(1184, 1 /* Error */, "Modifiers_cannot_appear_here_1184", "Modifiers cannot appear here."),
        Merge_conflict_marker_encountered: diag(1185, 1 /* Error */, "Merge_conflict_marker_encountered_1185", "Merge conflict marker encountered."),
        A_rest_element_cannot_have_an_initializer: diag(1186, 1 /* Error */, "A_rest_element_cannot_have_an_initializer_1186", "A rest element cannot have an initializer."),
        A_parameter_property_may_not_be_declared_using_a_binding_pattern: diag(1187, 1 /* Error */, "A_parameter_property_may_not_be_declared_using_a_binding_pattern_1187", "A parameter property may not be declared using a binding pattern."),
        Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement: diag(1188, 1 /* Error */, "Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement_1188", "Only a single variable declaration is allowed in a 'for...of' statement."),
        The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer: diag(1189, 1 /* Error */, "The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer_1189", "The variable declaration of a 'for...in' statement cannot have an initializer."),
        The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer: diag(1190, 1 /* Error */, "The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer_1190", "The variable declaration of a 'for...of' statement cannot have an initializer."),
        An_import_declaration_cannot_have_modifiers: diag(1191, 1 /* Error */, "An_import_declaration_cannot_have_modifiers_1191", "An import declaration cannot have modifiers."),
        Module_0_has_no_default_export: diag(1192, 1 /* Error */, "Module_0_has_no_default_export_1192", "Module '{0}' has no default export."),
        An_export_declaration_cannot_have_modifiers: diag(1193, 1 /* Error */, "An_export_declaration_cannot_have_modifiers_1193", "An export declaration cannot have modifiers."),
        Export_declarations_are_not_permitted_in_a_namespace: diag(1194, 1 /* Error */, "Export_declarations_are_not_permitted_in_a_namespace_1194", "Export declarations are not permitted in a namespace."),
        export_Asterisk_does_not_re_export_a_default: diag(1195, 1 /* Error */, "export_Asterisk_does_not_re_export_a_default_1195", "'export *' does not re-export a default."),
        Catch_clause_variable_type_annotation_must_be_any_or_unknown_if_specified: diag(1196, 1 /* Error */, "Catch_clause_variable_type_annotation_must_be_any_or_unknown_if_specified_1196", "Catch clause variable type annotation must be 'any' or 'unknown' if specified."),
        Catch_clause_variable_cannot_have_an_initializer: diag(1197, 1 /* Error */, "Catch_clause_variable_cannot_have_an_initializer_1197", "Catch clause variable cannot have an initializer."),
        An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive: diag(1198, 1 /* Error */, "An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive_1198", "An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive."),
        Unterminated_Unicode_escape_sequence: diag(1199, 1 /* Error */, "Unterminated_Unicode_escape_sequence_1199", "Unterminated Unicode escape sequence."),
        Line_terminator_not_permitted_before_arrow: diag(1200, 1 /* Error */, "Line_terminator_not_permitted_before_arrow_1200", "Line terminator not permitted before arrow."),
        Import_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_import_d_from_mod_or_another_module_format_instead: diag(1202, 1 /* Error */, "Import_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_import_Asterisk_as_1202", `Import assignment cannot be used when targeting ECMAScript modules. Consider using 'import * as ns from "mod"', 'import {a} from "mod"', 'import d from "mod"', or another module format instead.`),
        Export_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_export_default_or_another_module_format_instead: diag(1203, 1 /* Error */, "Export_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_export_default_or__1203", "Export assignment cannot be used when targeting ECMAScript modules. Consider using 'export default' or another module format instead."),
        Re_exporting_a_type_when_0_is_enabled_requires_using_export_type: diag(1205, 1 /* Error */, "Re_exporting_a_type_when_0_is_enabled_requires_using_export_type_1205", "Re-exporting a type when '{0}' is enabled requires using 'export type'."),
        Decorators_are_not_valid_here: diag(1206, 1 /* Error */, "Decorators_are_not_valid_here_1206", "Decorators are not valid here."),
        Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name: diag(1207, 1 /* Error */, "Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name_1207", "Decorators cannot be applied to multiple get/set accessors of the same name."),
        Invalid_optional_chain_from_new_expression_Did_you_mean_to_call_0: diag(1209, 1 /* Error */, "Invalid_optional_chain_from_new_expression_Did_you_mean_to_call_0_1209", "Invalid optional chain from new expression. Did you mean to call '{0}()'?"),
        Code_contained_in_a_class_is_evaluated_in_JavaScript_s_strict_mode_which_does_not_allow_this_use_of_0_For_more_information_see_https_Colon_Slash_Slashdeveloper_mozilla_org_Slashen_US_Slashdocs_SlashWeb_SlashJavaScript_SlashReference_SlashStrict_mode: diag(1210, 1 /* Error */, "Code_contained_in_a_class_is_evaluated_in_JavaScript_s_strict_mode_which_does_not_allow_this_use_of__1210", "Code contained in a class is evaluated in JavaScript's strict mode which does not allow this use of '{0}'. For more information, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode."),
        A_class_declaration_without_the_default_modifier_must_have_a_name: diag(1211, 1 /* Error */, "A_class_declaration_without_the_default_modifier_must_have_a_name_1211", "A class declaration without the 'default' modifier must have a name."),
        Identifier_expected_0_is_a_reserved_word_in_strict_mode: diag(1212, 1 /* Error */, "Identifier_expected_0_is_a_reserved_word_in_strict_mode_1212", "Identifier expected. '{0}' is a reserved word in strict mode."),
        Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode: diag(1213, 1 /* Error */, "Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_stric_1213", "Identifier expected. '{0}' is a reserved word in strict mode. Class definitions are automatically in strict mode."),
        Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode: diag(1214, 1 /* Error */, "Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode_1214", "Identifier expected. '{0}' is a reserved word in strict mode. Modules are automatically in strict mode."),
        Invalid_use_of_0_Modules_are_automatically_in_strict_mode: diag(1215, 1 /* Error */, "Invalid_use_of_0_Modules_are_automatically_in_strict_mode_1215", "Invalid use of '{0}'. Modules are automatically in strict mode."),
        Identifier_expected_esModule_is_reserved_as_an_exported_marker_when_transforming_ECMAScript_modules: diag(1216, 1 /* Error */, "Identifier_expected_esModule_is_reserved_as_an_exported_marker_when_transforming_ECMAScript_modules_1216", "Identifier expected. '__esModule' is reserved as an exported marker when transforming ECMAScript modules."),
        Export_assignment_is_not_supported_when_module_flag_is_system: diag(1218, 1 /* Error */, "Export_assignment_is_not_supported_when_module_flag_is_system_1218", "Export assignment is not supported when '--module' flag is 'system'."),
        Generators_are_not_allowed_in_an_ambient_context: diag(1221, 1 /* Error */, "Generators_are_not_allowed_in_an_ambient_context_1221", "Generators are not allowed in an ambient context."),
        An_overload_signature_cannot_be_declared_as_a_generator: diag(1222, 1 /* Error */, "An_overload_signature_cannot_be_declared_as_a_generator_1222", "An overload signature cannot be declared as a generator."),
        _0_tag_already_specified: diag(1223, 1 /* Error */, "_0_tag_already_specified_1223", "'{0}' tag already specified."),
        Signature_0_must_be_a_type_predicate: diag(1224, 1 /* Error */, "Signature_0_must_be_a_type_predicate_1224", "Signature '{0}' must be a type predicate."),
        Cannot_find_parameter_0: diag(1225, 1 /* Error */, "Cannot_find_parameter_0_1225", "Cannot find parameter '{0}'."),
        Type_predicate_0_is_not_assignable_to_1: diag(1226, 1 /* Error */, "Type_predicate_0_is_not_assignable_to_1_1226", "Type predicate '{0}' is not assignable to '{1}'."),
        Parameter_0_is_not_in_the_same_position_as_parameter_1: diag(1227, 1 /* Error */, "Parameter_0_is_not_in_the_same_position_as_parameter_1_1227", "Parameter '{0}' is not in the same position as parameter '{1}'."),
        A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods: diag(1228, 1 /* Error */, "A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods_1228", "A type predicate is only allowed in return type position for functions and methods."),
        A_type_predicate_cannot_reference_a_rest_parameter: diag(1229, 1 /* Error */, "A_type_predicate_cannot_reference_a_rest_parameter_1229", "A type predicate cannot reference a rest parameter."),
        A_type_predicate_cannot_reference_element_0_in_a_binding_pattern: diag(1230, 1 /* Error */, "A_type_predicate_cannot_reference_element_0_in_a_binding_pattern_1230", "A type predicate cannot reference element '{0}' in a binding pattern."),
        An_export_assignment_must_be_at_the_top_level_of_a_file_or_module_declaration: diag(1231, 1 /* Error */, "An_export_assignment_must_be_at_the_top_level_of_a_file_or_module_declaration_1231", "An export assignment must be at the top level of a file or module declaration."),
        An_import_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module: diag(1232, 1 /* Error */, "An_import_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module_1232", "An import declaration can only be used at the top level of a namespace or module."),
        An_export_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module: diag(1233, 1 /* Error */, "An_export_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module_1233", "An export declaration can only be used at the top level of a namespace or module."),
        An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file: diag(1234, 1 /* Error */, "An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file_1234", "An ambient module declaration is only allowed at the top level in a file."),
        A_namespace_declaration_is_only_allowed_at_the_top_level_of_a_namespace_or_module: diag(1235, 1 /* Error */, "A_namespace_declaration_is_only_allowed_at_the_top_level_of_a_namespace_or_module_1235", "A namespace declaration is only allowed at the top level of a namespace or module."),
        The_return_type_of_a_property_decorator_function_must_be_either_void_or_any: diag(1236, 1 /* Error */, "The_return_type_of_a_property_decorator_function_must_be_either_void_or_any_1236", "The return type of a property decorator function must be either 'void' or 'any'."),
        The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any: diag(1237, 1 /* Error */, "The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any_1237", "The return type of a parameter decorator function must be either 'void' or 'any'."),
        Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression: diag(1238, 1 /* Error */, "Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression_1238", "Unable to resolve signature of class decorator when called as an expression."),
        Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression: diag(1239, 1 /* Error */, "Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression_1239", "Unable to resolve signature of parameter decorator when called as an expression."),
        Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression: diag(1240, 1 /* Error */, "Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression_1240", "Unable to resolve signature of property decorator when called as an expression."),
        Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression: diag(1241, 1 /* Error */, "Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression_1241", "Unable to resolve signature of method decorator when called as an expression."),
        abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration: diag(1242, 1 /* Error */, "abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration_1242", "'abstract' modifier can only appear on a class, method, or property declaration."),
        _0_modifier_cannot_be_used_with_1_modifier: diag(1243, 1 /* Error */, "_0_modifier_cannot_be_used_with_1_modifier_1243", "'{0}' modifier cannot be used with '{1}' modifier."),
        Abstract_methods_can_only_appear_within_an_abstract_class: diag(1244, 1 /* Error */, "Abstract_methods_can_only_appear_within_an_abstract_class_1244", "Abstract methods can only appear within an abstract class."),
        Method_0_cannot_have_an_implementation_because_it_is_marked_abstract: diag(1245, 1 /* Error */, "Method_0_cannot_have_an_implementation_because_it_is_marked_abstract_1245", "Method '{0}' cannot have an implementation because it is marked abstract."),
        An_interface_property_cannot_have_an_initializer: diag(1246, 1 /* Error */, "An_interface_property_cannot_have_an_initializer_1246", "An interface property cannot have an initializer."),
        A_type_literal_property_cannot_have_an_initializer: diag(1247, 1 /* Error */, "A_type_literal_property_cannot_have_an_initializer_1247", "A type literal property cannot have an initializer."),
        A_class_member_cannot_have_the_0_keyword: diag(1248, 1 /* Error */, "A_class_member_cannot_have_the_0_keyword_1248", "A class member cannot have the '{0}' keyword."),
        A_decorator_can_only_decorate_a_method_implementation_not_an_overload: diag(1249, 1 /* Error */, "A_decorator_can_only_decorate_a_method_implementation_not_an_overload_1249", "A decorator can only decorate a method implementation, not an overload."),
        Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5: diag(1250, 1 /* Error */, "Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_1250", "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'."),
        Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Class_definitions_are_automatically_in_strict_mode: diag(1251, 1 /* Error */, "Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Class_d_1251", "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Class definitions are automatically in strict mode."),
        Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Modules_are_automatically_in_strict_mode: diag(1252, 1 /* Error */, "Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Modules_1252", "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Modules are automatically in strict mode."),
        A_const_initializer_in_an_ambient_context_must_be_a_string_or_numeric_literal_or_literal_enum_reference: diag(1254, 1 /* Error */, "A_const_initializer_in_an_ambient_context_must_be_a_string_or_numeric_literal_or_literal_enum_refere_1254", "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference."),
        A_definite_assignment_assertion_is_not_permitted_in_this_context: diag(1255, 1 /* Error */, "A_definite_assignment_assertion_is_not_permitted_in_this_context_1255", "A definite assignment assertion '!' is not permitted in this context."),
        A_required_element_cannot_follow_an_optional_element: diag(1257, 1 /* Error */, "A_required_element_cannot_follow_an_optional_element_1257", "A required element cannot follow an optional element."),
        A_default_export_must_be_at_the_top_level_of_a_file_or_module_declaration: diag(1258, 1 /* Error */, "A_default_export_must_be_at_the_top_level_of_a_file_or_module_declaration_1258", "A default export must be at the top level of a file or module declaration."),
        Module_0_can_only_be_default_imported_using_the_1_flag: diag(1259, 1 /* Error */, "Module_0_can_only_be_default_imported_using_the_1_flag_1259", "Module '{0}' can only be default-imported using the '{1}' flag"),
        Keywords_cannot_contain_escape_characters: diag(1260, 1 /* Error */, "Keywords_cannot_contain_escape_characters_1260", "Keywords cannot contain escape characters."),
        Already_included_file_name_0_differs_from_file_name_1_only_in_casing: diag(1261, 1 /* Error */, "Already_included_file_name_0_differs_from_file_name_1_only_in_casing_1261", "Already included file name '{0}' differs from file name '{1}' only in casing."),
        Identifier_expected_0_is_a_reserved_word_at_the_top_level_of_a_module: diag(1262, 1 /* Error */, "Identifier_expected_0_is_a_reserved_word_at_the_top_level_of_a_module_1262", "Identifier expected. '{0}' is a reserved word at the top-level of a module."),
        Declarations_with_initializers_cannot_also_have_definite_assignment_assertions: diag(1263, 1 /* Error */, "Declarations_with_initializers_cannot_also_have_definite_assignment_assertions_1263", "Declarations with initializers cannot also have definite assignment assertions."),
        Declarations_with_definite_assignment_assertions_must_also_have_type_annotations: diag(1264, 1 /* Error */, "Declarations_with_definite_assignment_assertions_must_also_have_type_annotations_1264", "Declarations with definite assignment assertions must also have type annotations."),
        A_rest_element_cannot_follow_another_rest_element: diag(1265, 1 /* Error */, "A_rest_element_cannot_follow_another_rest_element_1265", "A rest element cannot follow another rest element."),
        An_optional_element_cannot_follow_a_rest_element: diag(1266, 1 /* Error */, "An_optional_element_cannot_follow_a_rest_element_1266", "An optional element cannot follow a rest element."),
        Property_0_cannot_have_an_initializer_because_it_is_marked_abstract: diag(1267, 1 /* Error */, "Property_0_cannot_have_an_initializer_because_it_is_marked_abstract_1267", "Property '{0}' cannot have an initializer because it is marked abstract."),
        An_index_signature_parameter_type_must_be_string_number_symbol_or_a_template_literal_type: diag(1268, 1 /* Error */, "An_index_signature_parameter_type_must_be_string_number_symbol_or_a_template_literal_type_1268", "An index signature parameter type must be 'string', 'number', 'symbol', or a template literal type."),
        Cannot_use_export_import_on_a_type_or_type_only_namespace_when_0_is_enabled: diag(1269, 1 /* Error */, "Cannot_use_export_import_on_a_type_or_type_only_namespace_when_0_is_enabled_1269", "Cannot use 'export import' on a type or type-only namespace when '{0}' is enabled."),
        Decorator_function_return_type_0_is_not_assignable_to_type_1: diag(1270, 1 /* Error */, "Decorator_function_return_type_0_is_not_assignable_to_type_1_1270", "Decorator function return type '{0}' is not assignable to type '{1}'."),
        Decorator_function_return_type_is_0_but_is_expected_to_be_void_or_any: diag(1271, 1 /* Error */, "Decorator_function_return_type_is_0_but_is_expected_to_be_void_or_any_1271", "Decorator function return type is '{0}' but is expected to be 'void' or 'any'."),
        A_type_referenced_in_a_decorated_signature_must_be_imported_with_import_type_or_a_namespace_import_when_isolatedModules_and_emitDecoratorMetadata_are_enabled: diag(1272, 1 /* Error */, "A_type_referenced_in_a_decorated_signature_must_be_imported_with_import_type_or_a_namespace_import_w_1272", "A type referenced in a decorated signature must be imported with 'import type' or a namespace import when 'isolatedModules' and 'emitDecoratorMetadata' are enabled."),
        _0_modifier_cannot_appear_on_a_type_parameter: diag(1273, 1 /* Error */, "_0_modifier_cannot_appear_on_a_type_parameter_1273", "'{0}' modifier cannot appear on a type parameter"),
        _0_modifier_can_only_appear_on_a_type_parameter_of_a_class_interface_or_type_alias: diag(1274, 1 /* Error */, "_0_modifier_can_only_appear_on_a_type_parameter_of_a_class_interface_or_type_alias_1274", "'{0}' modifier can only appear on a type parameter of a class, interface or type alias"),
        accessor_modifier_can_only_appear_on_a_property_declaration: diag(1275, 1 /* Error */, "accessor_modifier_can_only_appear_on_a_property_declaration_1275", "'accessor' modifier can only appear on a property declaration."),
        An_accessor_property_cannot_be_declared_optional: diag(1276, 1 /* Error */, "An_accessor_property_cannot_be_declared_optional_1276", "An 'accessor' property cannot be declared optional."),
        _0_modifier_can_only_appear_on_a_type_parameter_of_a_function_method_or_class: diag(1277, 1 /* Error */, "_0_modifier_can_only_appear_on_a_type_parameter_of_a_function_method_or_class_1277", "'{0}' modifier can only appear on a type parameter of a function, method or class"),
        The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_0: diag(1278, 1 /* Error */, "The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_0_1278", "The runtime will invoke the decorator with {1} arguments, but the decorator expects {0}."),
        The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_at_least_0: diag(1279, 1 /* Error */, "The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_at_least_0_1279", "The runtime will invoke the decorator with {1} arguments, but the decorator expects at least {0}."),
        Namespaces_are_not_allowed_in_global_script_files_when_0_is_enabled_If_this_file_is_not_intended_to_be_a_global_script_set_moduleDetection_to_force_or_add_an_empty_export_statement: diag(1280, 1 /* Error */, "Namespaces_are_not_allowed_in_global_script_files_when_0_is_enabled_If_this_file_is_not_intended_to__1280", "Namespaces are not allowed in global script files when '{0}' is enabled. If this file is not intended to be a global script, set 'moduleDetection' to 'force' or add an empty 'export {}' statement."),
        Cannot_access_0_from_another_file_without_qualification_when_1_is_enabled_Use_2_instead: diag(1281, 1 /* Error */, "Cannot_access_0_from_another_file_without_qualification_when_1_is_enabled_Use_2_instead_1281", "Cannot access '{0}' from another file without qualification when '{1}' is enabled. Use '{2}' instead."),
        An_export_declaration_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers_to_a_type: diag(1282, 1 /* Error */, "An_export_declaration_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers__1282", "An 'export =' declaration must reference a value when 'verbatimModuleSyntax' is enabled, but '{0}' only refers to a type."),
        An_export_declaration_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolves_to_a_type_only_declaration: diag(1283, 1 /* Error */, "An_export_declaration_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolve_1283", "An 'export =' declaration must reference a real value when 'verbatimModuleSyntax' is enabled, but '{0}' resolves to a type-only declaration."),
        An_export_default_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers_to_a_type: diag(1284, 1 /* Error */, "An_export_default_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers_to_a_1284", "An 'export default' must reference a value when 'verbatimModuleSyntax' is enabled, but '{0}' only refers to a type."),
        An_export_default_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolves_to_a_type_only_declaration: diag(1285, 1 /* Error */, "An_export_default_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolves_to_1285", "An 'export default' must reference a real value when 'verbatimModuleSyntax' is enabled, but '{0}' resolves to a type-only declaration."),
        ESM_syntax_is_not_allowed_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled: diag(1286, 1 /* Error */, "ESM_syntax_is_not_allowed_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled_1286", "ESM syntax is not allowed in a CommonJS module when 'verbatimModuleSyntax' is enabled."),
        A_top_level_export_modifier_cannot_be_used_on_value_declarations_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled: diag(1287, 1 /* Error */, "A_top_level_export_modifier_cannot_be_used_on_value_declarations_in_a_CommonJS_module_when_verbatimM_1287", "A top-level 'export' modifier cannot be used on value declarations in a CommonJS module when 'verbatimModuleSyntax' is enabled."),
        An_import_alias_cannot_resolve_to_a_type_or_type_only_declaration_when_verbatimModuleSyntax_is_enabled: diag(1288, 1 /* Error */, "An_import_alias_cannot_resolve_to_a_type_or_type_only_declaration_when_verbatimModuleSyntax_is_enabl_1288", "An import alias cannot resolve to a type or type-only declaration when 'verbatimModuleSyntax' is enabled."),
        with_statements_are_not_allowed_in_an_async_function_block: diag(1300, 1 /* Error */, "with_statements_are_not_allowed_in_an_async_function_block_1300", "'with' statements are not allowed in an async function block."),
        await_expressions_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules: diag(1308, 1 /* Error */, "await_expressions_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules_1308", "'await' expressions are only allowed within async functions and at the top levels of modules."),
        The_current_file_is_a_CommonJS_module_and_cannot_use_await_at_the_top_level: diag(1309, 1 /* Error */, "The_current_file_is_a_CommonJS_module_and_cannot_use_await_at_the_top_level_1309", "The current file is a CommonJS module and cannot use 'await' at the top level."),
        Did_you_mean_to_use_a_Colon_An_can_only_follow_a_property_name_when_the_containing_object_literal_is_part_of_a_destructuring_pattern: diag(1312, 1 /* Error */, "Did_you_mean_to_use_a_Colon_An_can_only_follow_a_property_name_when_the_containing_object_literal_is_1312", "Did you mean to use a ':'? An '=' can only follow a property name when the containing object literal is part of a destructuring pattern."),
        The_body_of_an_if_statement_cannot_be_the_empty_statement: diag(1313, 1 /* Error */, "The_body_of_an_if_statement_cannot_be_the_empty_statement_1313", "The body of an 'if' statement cannot be the empty statement."),
        Global_module_exports_may_only_appear_in_module_files: diag(1314, 1 /* Error */, "Global_module_exports_may_only_appear_in_module_files_1314", "Global module exports may only appear in module files."),
        Global_module_exports_may_only_appear_in_declaration_files: diag(1315, 1 /* Error */, "Global_module_exports_may_only_appear_in_declaration_files_1315", "Global module exports may only appear in declaration files."),
        Global_module_exports_may_only_appear_at_top_level: diag(1316, 1 /* Error */, "Global_module_exports_may_only_appear_at_top_level_1316", "Global module exports may only appear at top level."),
        A_parameter_property_cannot_be_declared_using_a_rest_parameter: diag(1317, 1 /* Error */, "A_parameter_property_cannot_be_declared_using_a_rest_parameter_1317", "A parameter property cannot be declared using a rest parameter."),
        An_abstract_accessor_cannot_have_an_implementation: diag(1318, 1 /* Error */, "An_abstract_accessor_cannot_have_an_implementation_1318", "An abstract accessor cannot have an implementation."),
        A_default_export_can_only_be_used_in_an_ECMAScript_style_module: diag(1319, 1 /* Error */, "A_default_export_can_only_be_used_in_an_ECMAScript_style_module_1319", "A default export can only be used in an ECMAScript-style module."),
        Type_of_await_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: diag(1320, 1 /* Error */, "Type_of_await_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member_1320", "Type of 'await' operand must either be a valid promise or must not contain a callable 'then' member."),
        Type_of_yield_operand_in_an_async_generator_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: diag(1321, 1 /* Error */, "Type_of_yield_operand_in_an_async_generator_must_either_be_a_valid_promise_or_must_not_contain_a_cal_1321", "Type of 'yield' operand in an async generator must either be a valid promise or must not contain a callable 'then' member."),
        Type_of_iterated_elements_of_a_yield_Asterisk_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: diag(1322, 1 /* Error */, "Type_of_iterated_elements_of_a_yield_Asterisk_operand_must_either_be_a_valid_promise_or_must_not_con_1322", "Type of iterated elements of a 'yield*' operand must either be a valid promise or must not contain a callable 'then' member."),
        Dynamic_imports_are_only_supported_when_the_module_flag_is_set_to_es2020_es2022_esnext_commonjs_amd_system_umd_node16_or_nodenext: diag(1323, 1 /* Error */, "Dynamic_imports_are_only_supported_when_the_module_flag_is_set_to_es2020_es2022_esnext_commonjs_amd__1323", "Dynamic imports are only supported when the '--module' flag is set to 'es2020', 'es2022', 'esnext', 'commonjs', 'amd', 'system', 'umd', 'node16', or 'nodenext'."),
        Dynamic_imports_only_support_a_second_argument_when_the_module_option_is_set_to_esnext_node16_or_nodenext: diag(1324, 1 /* Error */, "Dynamic_imports_only_support_a_second_argument_when_the_module_option_is_set_to_esnext_node16_or_nod_1324", "Dynamic imports only support a second argument when the '--module' option is set to 'esnext', 'node16', or 'nodenext'."),
        Argument_of_dynamic_import_cannot_be_spread_element: diag(1325, 1 /* Error */, "Argument_of_dynamic_import_cannot_be_spread_element_1325", "Argument of dynamic import cannot be spread element."),
        This_use_of_import_is_invalid_import_calls_can_be_written_but_they_must_have_parentheses_and_cannot_have_type_arguments: diag(1326, 1 /* Error */, "This_use_of_import_is_invalid_import_calls_can_be_written_but_they_must_have_parentheses_and_cannot__1326", "This use of 'import' is invalid. 'import()' calls can be written, but they must have parentheses and cannot have type arguments."),
        String_literal_with_double_quotes_expected: diag(1327, 1 /* Error */, "String_literal_with_double_quotes_expected_1327", "String literal with double quotes expected."),
        Property_value_can_only_be_string_literal_numeric_literal_true_false_null_object_literal_or_array_literal: diag(1328, 1 /* Error */, "Property_value_can_only_be_string_literal_numeric_literal_true_false_null_object_literal_or_array_li_1328", "Property value can only be string literal, numeric literal, 'true', 'false', 'null', object literal or array literal."),
        _0_accepts_too_few_arguments_to_be_used_as_a_decorator_here_Did_you_mean_to_call_it_first_and_write_0: diag(1329, 1 /* Error */, "_0_accepts_too_few_arguments_to_be_used_as_a_decorator_here_Did_you_mean_to_call_it_first_and_write__1329", "'{0}' accepts too few arguments to be used as a decorator here. Did you mean to call it first and write '@{0}()'?"),
        A_property_of_an_interface_or_type_literal_whose_type_is_a_unique_symbol_type_must_be_readonly: diag(1330, 1 /* Error */, "A_property_of_an_interface_or_type_literal_whose_type_is_a_unique_symbol_type_must_be_readonly_1330", "A property of an interface or type literal whose type is a 'unique symbol' type must be 'readonly'."),
        A_property_of_a_class_whose_type_is_a_unique_symbol_type_must_be_both_static_and_readonly: diag(1331, 1 /* Error */, "A_property_of_a_class_whose_type_is_a_unique_symbol_type_must_be_both_static_and_readonly_1331", "A property of a class whose type is a 'unique symbol' type must be both 'static' and 'readonly'."),
        A_variable_whose_type_is_a_unique_symbol_type_must_be_const: diag(1332, 1 /* Error */, "A_variable_whose_type_is_a_unique_symbol_type_must_be_const_1332", "A variable whose type is a 'unique symbol' type must be 'const'."),
        unique_symbol_types_may_not_be_used_on_a_variable_declaration_with_a_binding_name: diag(1333, 1 /* Error */, "unique_symbol_types_may_not_be_used_on_a_variable_declaration_with_a_binding_name_1333", "'unique symbol' types may not be used on a variable declaration with a binding name."),
        unique_symbol_types_are_only_allowed_on_variables_in_a_variable_statement: diag(1334, 1 /* Error */, "unique_symbol_types_are_only_allowed_on_variables_in_a_variable_statement_1334", "'unique symbol' types are only allowed on variables in a variable statement."),
        unique_symbol_types_are_not_allowed_here: diag(1335, 1 /* Error */, "unique_symbol_types_are_not_allowed_here_1335", "'unique symbol' types are not allowed here."),
        An_index_signature_parameter_type_cannot_be_a_literal_type_or_generic_type_Consider_using_a_mapped_object_type_instead: diag(1337, 1 /* Error */, "An_index_signature_parameter_type_cannot_be_a_literal_type_or_generic_type_Consider_using_a_mapped_o_1337", "An index signature parameter type cannot be a literal type or generic type. Consider using a mapped object type instead."),
        infer_declarations_are_only_permitted_in_the_extends_clause_of_a_conditional_type: diag(1338, 1 /* Error */, "infer_declarations_are_only_permitted_in_the_extends_clause_of_a_conditional_type_1338", "'infer' declarations are only permitted in the 'extends' clause of a conditional type."),
        Module_0_does_not_refer_to_a_value_but_is_used_as_a_value_here: diag(1339, 1 /* Error */, "Module_0_does_not_refer_to_a_value_but_is_used_as_a_value_here_1339", "Module '{0}' does not refer to a value, but is used as a value here."),
        Module_0_does_not_refer_to_a_type_but_is_used_as_a_type_here_Did_you_mean_typeof_import_0: diag(1340, 1 /* Error */, "Module_0_does_not_refer_to_a_type_but_is_used_as_a_type_here_Did_you_mean_typeof_import_0_1340", "Module '{0}' does not refer to a type, but is used as a type here. Did you mean 'typeof import('{0}')'?"),
        Class_constructor_may_not_be_an_accessor: diag(1341, 1 /* Error */, "Class_constructor_may_not_be_an_accessor_1341", "Class constructor may not be an accessor."),
        The_import_meta_meta_property_is_only_allowed_when_the_module_option_is_es2020_es2022_esnext_system_node16_or_nodenext: diag(1343, 1 /* Error */, "The_import_meta_meta_property_is_only_allowed_when_the_module_option_is_es2020_es2022_esnext_system__1343", "The 'import.meta' meta-property is only allowed when the '--module' option is 'es2020', 'es2022', 'esnext', 'system', 'node16', or 'nodenext'."),
        A_label_is_not_allowed_here: diag(1344, 1 /* Error */, "A_label_is_not_allowed_here_1344", "'A label is not allowed here."),
        An_expression_of_type_void_cannot_be_tested_for_truthiness: diag(1345, 1 /* Error */, "An_expression_of_type_void_cannot_be_tested_for_truthiness_1345", "An expression of type 'void' cannot be tested for truthiness."),
        This_parameter_is_not_allowed_with_use_strict_directive: diag(1346, 1 /* Error */, "This_parameter_is_not_allowed_with_use_strict_directive_1346", "This parameter is not allowed with 'use strict' directive."),
        use_strict_directive_cannot_be_used_with_non_simple_parameter_list: diag(1347, 1 /* Error */, "use_strict_directive_cannot_be_used_with_non_simple_parameter_list_1347", "'use strict' directive cannot be used with non-simple parameter list."),
        Non_simple_parameter_declared_here: diag(1348, 1 /* Error */, "Non_simple_parameter_declared_here_1348", "Non-simple parameter declared here."),
        use_strict_directive_used_here: diag(1349, 1 /* Error */, "use_strict_directive_used_here_1349", "'use strict' directive used here."),
        Print_the_final_configuration_instead_of_building: diag(1350, 3 /* Message */, "Print_the_final_configuration_instead_of_building_1350", "Print the final configuration instead of building."),
        An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal: diag(1351, 1 /* Error */, "An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal_1351", "An identifier or keyword cannot immediately follow a numeric literal."),
        A_bigint_literal_cannot_use_exponential_notation: diag(1352, 1 /* Error */, "A_bigint_literal_cannot_use_exponential_notation_1352", "A bigint literal cannot use exponential notation."),
        A_bigint_literal_must_be_an_integer: diag(1353, 1 /* Error */, "A_bigint_literal_must_be_an_integer_1353", "A bigint literal must be an integer."),
        readonly_type_modifier_is_only_permitted_on_array_and_tuple_literal_types: diag(1354, 1 /* Error */, "readonly_type_modifier_is_only_permitted_on_array_and_tuple_literal_types_1354", "'readonly' type modifier is only permitted on array and tuple literal types."),
        A_const_assertions_can_only_be_applied_to_references_to_enum_members_or_string_number_boolean_array_or_object_literals: diag(1355, 1 /* Error */, "A_const_assertions_can_only_be_applied_to_references_to_enum_members_or_string_number_boolean_array__1355", "A 'const' assertions can only be applied to references to enum members, or string, number, boolean, array, or object literals."),
        Did_you_mean_to_mark_this_function_as_async: diag(1356, 1 /* Error */, "Did_you_mean_to_mark_this_function_as_async_1356", "Did you mean to mark this function as 'async'?"),
        An_enum_member_name_must_be_followed_by_a_or: diag(1357, 1 /* Error */, "An_enum_member_name_must_be_followed_by_a_or_1357", "An enum member name must be followed by a ',', '=', or '}'."),
        Tagged_template_expressions_are_not_permitted_in_an_optional_chain: diag(1358, 1 /* Error */, "Tagged_template_expressions_are_not_permitted_in_an_optional_chain_1358", "Tagged template expressions are not permitted in an optional chain."),
        Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here: diag(1359, 1 /* Error */, "Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here_1359", "Identifier expected. '{0}' is a reserved word that cannot be used here."),
        Type_0_does_not_satisfy_the_expected_type_1: diag(1360, 1 /* Error */, "Type_0_does_not_satisfy_the_expected_type_1_1360", "Type '{0}' does not satisfy the expected type '{1}'."),
        _0_cannot_be_used_as_a_value_because_it_was_imported_using_import_type: diag(1361, 1 /* Error */, "_0_cannot_be_used_as_a_value_because_it_was_imported_using_import_type_1361", "'{0}' cannot be used as a value because it was imported using 'import type'."),
        _0_cannot_be_used_as_a_value_because_it_was_exported_using_export_type: diag(1362, 1 /* Error */, "_0_cannot_be_used_as_a_value_because_it_was_exported_using_export_type_1362", "'{0}' cannot be used as a value because it was exported using 'export type'."),
        A_type_only_import_can_specify_a_default_import_or_named_bindings_but_not_both: diag(1363, 1 /* Error */, "A_type_only_import_can_specify_a_default_import_or_named_bindings_but_not_both_1363", "A type-only import can specify a default import or named bindings, but not both."),
        Convert_to_type_only_export: diag(1364, 3 /* Message */, "Convert_to_type_only_export_1364", "Convert to type-only export"),
        Convert_all_re_exported_types_to_type_only_exports: diag(1365, 3 /* Message */, "Convert_all_re_exported_types_to_type_only_exports_1365", "Convert all re-exported types to type-only exports"),
        Split_into_two_separate_import_declarations: diag(1366, 3 /* Message */, "Split_into_two_separate_import_declarations_1366", "Split into two separate import declarations"),
        Split_all_invalid_type_only_imports: diag(1367, 3 /* Message */, "Split_all_invalid_type_only_imports_1367", "Split all invalid type-only imports"),
        Class_constructor_may_not_be_a_generator: diag(1368, 1 /* Error */, "Class_constructor_may_not_be_a_generator_1368", "Class constructor may not be a generator."),
        Did_you_mean_0: diag(1369, 3 /* Message */, "Did_you_mean_0_1369", "Did you mean '{0}'?"),
        This_import_is_never_used_as_a_value_and_must_use_import_type_because_importsNotUsedAsValues_is_set_to_error: diag(1371, 1 /* Error */, "This_import_is_never_used_as_a_value_and_must_use_import_type_because_importsNotUsedAsValues_is_set__1371", "This import is never used as a value and must use 'import type' because 'importsNotUsedAsValues' is set to 'error'."),
        Convert_to_type_only_import: diag(1373, 3 /* Message */, "Convert_to_type_only_import_1373", "Convert to type-only import"),
        Convert_all_imports_not_used_as_a_value_to_type_only_imports: diag(1374, 3 /* Message */, "Convert_all_imports_not_used_as_a_value_to_type_only_imports_1374", "Convert all imports not used as a value to type-only imports"),
        await_expressions_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module: diag(1375, 1 /* Error */, "await_expressions_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_fi_1375", "'await' expressions are only allowed at the top level of a file when that file is a module, but this file has no imports or exports. Consider adding an empty 'export {}' to make this file a module."),
        _0_was_imported_here: diag(1376, 3 /* Message */, "_0_was_imported_here_1376", "'{0}' was imported here."),
        _0_was_exported_here: diag(1377, 3 /* Message */, "_0_was_exported_here_1377", "'{0}' was exported here."),
        Top_level_await_expressions_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_node16_or_nodenext_and_the_target_option_is_set_to_es2017_or_higher: diag(1378, 1 /* Error */, "Top_level_await_expressions_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_n_1378", "Top-level 'await' expressions are only allowed when the 'module' option is set to 'es2022', 'esnext', 'system', 'node16', or 'nodenext', and the 'target' option is set to 'es2017' or higher."),
        An_import_alias_cannot_reference_a_declaration_that_was_exported_using_export_type: diag(1379, 1 /* Error */, "An_import_alias_cannot_reference_a_declaration_that_was_exported_using_export_type_1379", "An import alias cannot reference a declaration that was exported using 'export type'."),
        An_import_alias_cannot_reference_a_declaration_that_was_imported_using_import_type: diag(1380, 1 /* Error */, "An_import_alias_cannot_reference_a_declaration_that_was_imported_using_import_type_1380", "An import alias cannot reference a declaration that was imported using 'import type'."),
        Unexpected_token_Did_you_mean_or_rbrace: diag(1381, 1 /* Error */, "Unexpected_token_Did_you_mean_or_rbrace_1381", "Unexpected token. Did you mean `{'}'}` or `&rbrace;`?"),
        Unexpected_token_Did_you_mean_or_gt: diag(1382, 1 /* Error */, "Unexpected_token_Did_you_mean_or_gt_1382", "Unexpected token. Did you mean `{'>'}` or `&gt;`?"),
        Function_type_notation_must_be_parenthesized_when_used_in_a_union_type: diag(1385, 1 /* Error */, "Function_type_notation_must_be_parenthesized_when_used_in_a_union_type_1385", "Function type notation must be parenthesized when used in a union type."),
        Constructor_type_notation_must_be_parenthesized_when_used_in_a_union_type: diag(1386, 1 /* Error */, "Constructor_type_notation_must_be_parenthesized_when_used_in_a_union_type_1386", "Constructor type notation must be parenthesized when used in a union type."),
        Function_type_notation_must_be_parenthesized_when_used_in_an_intersection_type: diag(1387, 1 /* Error */, "Function_type_notation_must_be_parenthesized_when_used_in_an_intersection_type_1387", "Function type notation must be parenthesized when used in an intersection type."),
        Constructor_type_notation_must_be_parenthesized_when_used_in_an_intersection_type: diag(1388, 1 /* Error */, "Constructor_type_notation_must_be_parenthesized_when_used_in_an_intersection_type_1388", "Constructor type notation must be parenthesized when used in an intersection type."),
        _0_is_not_allowed_as_a_variable_declaration_name: diag(1389, 1 /* Error */, "_0_is_not_allowed_as_a_variable_declaration_name_1389", "'{0}' is not allowed as a variable declaration name."),
        _0_is_not_allowed_as_a_parameter_name: diag(1390, 1 /* Error */, "_0_is_not_allowed_as_a_parameter_name_1390", "'{0}' is not allowed as a parameter name."),
        An_import_alias_cannot_use_import_type: diag(1392, 1 /* Error */, "An_import_alias_cannot_use_import_type_1392", "An import alias cannot use 'import type'"),
        Imported_via_0_from_file_1: diag(1393, 3 /* Message */, "Imported_via_0_from_file_1_1393", "Imported via {0} from file '{1}'"),
        Imported_via_0_from_file_1_with_packageId_2: diag(1394, 3 /* Message */, "Imported_via_0_from_file_1_with_packageId_2_1394", "Imported via {0} from file '{1}' with packageId '{2}'"),
        Imported_via_0_from_file_1_to_import_importHelpers_as_specified_in_compilerOptions: diag(1395, 3 /* Message */, "Imported_via_0_from_file_1_to_import_importHelpers_as_specified_in_compilerOptions_1395", "Imported via {0} from file '{1}' to import 'importHelpers' as specified in compilerOptions"),
        Imported_via_0_from_file_1_with_packageId_2_to_import_importHelpers_as_specified_in_compilerOptions: diag(1396, 3 /* Message */, "Imported_via_0_from_file_1_with_packageId_2_to_import_importHelpers_as_specified_in_compilerOptions_1396", "Imported via {0} from file '{1}' with packageId '{2}' to import 'importHelpers' as specified in compilerOptions"),
        Imported_via_0_from_file_1_to_import_jsx_and_jsxs_factory_functions: diag(1397, 3 /* Message */, "Imported_via_0_from_file_1_to_import_jsx_and_jsxs_factory_functions_1397", "Imported via {0} from file '{1}' to import 'jsx' and 'jsxs' factory functions"),
        Imported_via_0_from_file_1_with_packageId_2_to_import_jsx_and_jsxs_factory_functions: diag(1398, 3 /* Message */, "Imported_via_0_from_file_1_with_packageId_2_to_import_jsx_and_jsxs_factory_functions_1398", "Imported via {0} from file '{1}' with packageId '{2}' to import 'jsx' and 'jsxs' factory functions"),
        File_is_included_via_import_here: diag(1399, 3 /* Message */, "File_is_included_via_import_here_1399", "File is included via import here."),
        Referenced_via_0_from_file_1: diag(1400, 3 /* Message */, "Referenced_via_0_from_file_1_1400", "Referenced via '{0}' from file '{1}'"),
        File_is_included_via_reference_here: diag(1401, 3 /* Message */, "File_is_included_via_reference_here_1401", "File is included via reference here."),
        Type_library_referenced_via_0_from_file_1: diag(1402, 3 /* Message */, "Type_library_referenced_via_0_from_file_1_1402", "Type library referenced via '{0}' from file '{1}'"),
        Type_library_referenced_via_0_from_file_1_with_packageId_2: diag(1403, 3 /* Message */, "Type_library_referenced_via_0_from_file_1_with_packageId_2_1403", "Type library referenced via '{0}' from file '{1}' with packageId '{2}'"),
        File_is_included_via_type_library_reference_here: diag(1404, 3 /* Message */, "File_is_included_via_type_library_reference_here_1404", "File is included via type library reference here."),
        Library_referenced_via_0_from_file_1: diag(1405, 3 /* Message */, "Library_referenced_via_0_from_file_1_1405", "Library referenced via '{0}' from file '{1}'"),
        File_is_included_via_library_reference_here: diag(1406, 3 /* Message */, "File_is_included_via_library_reference_here_1406", "File is included via library reference here."),
        Matched_by_include_pattern_0_in_1: diag(1407, 3 /* Message */, "Matched_by_include_pattern_0_in_1_1407", "Matched by include pattern '{0}' in '{1}'"),
        File_is_matched_by_include_pattern_specified_here: diag(1408, 3 /* Message */, "File_is_matched_by_include_pattern_specified_here_1408", "File is matched by include pattern specified here."),
        Part_of_files_list_in_tsconfig_json: diag(1409, 3 /* Message */, "Part_of_files_list_in_tsconfig_json_1409", "Part of 'files' list in tsconfig.json"),
        File_is_matched_by_files_list_specified_here: diag(1410, 3 /* Message */, "File_is_matched_by_files_list_specified_here_1410", "File is matched by 'files' list specified here."),
        Output_from_referenced_project_0_included_because_1_specified: diag(1411, 3 /* Message */, "Output_from_referenced_project_0_included_because_1_specified_1411", "Output from referenced project '{0}' included because '{1}' specified"),
        Output_from_referenced_project_0_included_because_module_is_specified_as_none: diag(1412, 3 /* Message */, "Output_from_referenced_project_0_included_because_module_is_specified_as_none_1412", "Output from referenced project '{0}' included because '--module' is specified as 'none'"),
        File_is_output_from_referenced_project_specified_here: diag(1413, 3 /* Message */, "File_is_output_from_referenced_project_specified_here_1413", "File is output from referenced project specified here."),
        Source_from_referenced_project_0_included_because_1_specified: diag(1414, 3 /* Message */, "Source_from_referenced_project_0_included_because_1_specified_1414", "Source from referenced project '{0}' included because '{1}' specified"),
        Source_from_referenced_project_0_included_because_module_is_specified_as_none: diag(1415, 3 /* Message */, "Source_from_referenced_project_0_included_because_module_is_specified_as_none_1415", "Source from referenced project '{0}' included because '--module' is specified as 'none'"),
        File_is_source_from_referenced_project_specified_here: diag(1416, 3 /* Message */, "File_is_source_from_referenced_project_specified_here_1416", "File is source from referenced project specified here."),
        Entry_point_of_type_library_0_specified_in_compilerOptions: diag(1417, 3 /* Message */, "Entry_point_of_type_library_0_specified_in_compilerOptions_1417", "Entry point of type library '{0}' specified in compilerOptions"),
        Entry_point_of_type_library_0_specified_in_compilerOptions_with_packageId_1: diag(1418, 3 /* Message */, "Entry_point_of_type_library_0_specified_in_compilerOptions_with_packageId_1_1418", "Entry point of type library '{0}' specified in compilerOptions with packageId '{1}'"),
        File_is_entry_point_of_type_library_specified_here: diag(1419, 3 /* Message */, "File_is_entry_point_of_type_library_specified_here_1419", "File is entry point of type library specified here."),
        Entry_point_for_implicit_type_library_0: diag(1420, 3 /* Message */, "Entry_point_for_implicit_type_library_0_1420", "Entry point for implicit type library '{0}'"),
        Entry_point_for_implicit_type_library_0_with_packageId_1: diag(1421, 3 /* Message */, "Entry_point_for_implicit_type_library_0_with_packageId_1_1421", "Entry point for implicit type library '{0}' with packageId '{1}'"),
        Library_0_specified_in_compilerOptions: diag(1422, 3 /* Message */, "Library_0_specified_in_compilerOptions_1422", "Library '{0}' specified in compilerOptions"),
        File_is_library_specified_here: diag(1423, 3 /* Message */, "File_is_library_specified_here_1423", "File is library specified here."),
        Default_library: diag(1424, 3 /* Message */, "Default_library_1424", "Default library"),
        Default_library_for_target_0: diag(1425, 3 /* Message */, "Default_library_for_target_0_1425", "Default library for target '{0}'"),
        File_is_default_library_for_target_specified_here: diag(1426, 3 /* Message */, "File_is_default_library_for_target_specified_here_1426", "File is default library for target specified here."),
        Root_file_specified_for_compilation: diag(1427, 3 /* Message */, "Root_file_specified_for_compilation_1427", "Root file specified for compilation"),
        File_is_output_of_project_reference_source_0: diag(1428, 3 /* Message */, "File_is_output_of_project_reference_source_0_1428", "File is output of project reference source '{0}'"),
        File_redirects_to_file_0: diag(1429, 3 /* Message */, "File_redirects_to_file_0_1429", "File redirects to file '{0}'"),
        The_file_is_in_the_program_because_Colon: diag(1430, 3 /* Message */, "The_file_is_in_the_program_because_Colon_1430", "The file is in the program because:"),
        for_await_loops_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module: diag(1431, 1 /* Error */, "for_await_loops_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_1431", "'for await' loops are only allowed at the top level of a file when that file is a module, but this file has no imports or exports. Consider adding an empty 'export {}' to make this file a module."),
        Top_level_for_await_loops_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_node16_or_nodenext_and_the_target_option_is_set_to_es2017_or_higher: diag(1432, 1 /* Error */, "Top_level_for_await_loops_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_nod_1432", "Top-level 'for await' loops are only allowed when the 'module' option is set to 'es2022', 'esnext', 'system', 'node16', or 'nodenext', and the 'target' option is set to 'es2017' or higher."),
        Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters: diag(1433, 1 /* Error */, "Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters_1433", "Neither decorators nor modifiers may be applied to 'this' parameters."),
        Unexpected_keyword_or_identifier: diag(1434, 1 /* Error */, "Unexpected_keyword_or_identifier_1434", "Unexpected keyword or identifier."),
        Unknown_keyword_or_identifier_Did_you_mean_0: diag(1435, 1 /* Error */, "Unknown_keyword_or_identifier_Did_you_mean_0_1435", "Unknown keyword or identifier. Did you mean '{0}'?"),
        Decorators_must_precede_the_name_and_all_keywords_of_property_declarations: diag(1436, 1 /* Error */, "Decorators_must_precede_the_name_and_all_keywords_of_property_declarations_1436", "Decorators must precede the name and all keywords of property declarations."),
        Namespace_must_be_given_a_name: diag(1437, 1 /* Error */, "Namespace_must_be_given_a_name_1437", "Namespace must be given a name."),
        Interface_must_be_given_a_name: diag(1438, 1 /* Error */, "Interface_must_be_given_a_name_1438", "Interface must be given a name."),
        Type_alias_must_be_given_a_name: diag(1439, 1 /* Error */, "Type_alias_must_be_given_a_name_1439", "Type alias must be given a name."),
        Variable_declaration_not_allowed_at_this_location: diag(1440, 1 /* Error */, "Variable_declaration_not_allowed_at_this_location_1440", "Variable declaration not allowed at this location."),
        Cannot_start_a_function_call_in_a_type_annotation: diag(1441, 1 /* Error */, "Cannot_start_a_function_call_in_a_type_annotation_1441", "Cannot start a function call in a type annotation."),
        Expected_for_property_initializer: diag(1442, 1 /* Error */, "Expected_for_property_initializer_1442", "Expected '=' for property initializer."),
        Module_declaration_names_may_only_use_or_quoted_strings: diag(1443, 1 /* Error */, "Module_declaration_names_may_only_use_or_quoted_strings_1443", `Module declaration names may only use ' or " quoted strings.`),
        _0_is_a_type_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedModules_are_both_enabled: diag(1444, 1 /* Error */, "_0_is_a_type_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedMod_1444", "'{0}' is a type and must be imported using a type-only import when 'preserveValueImports' and 'isolatedModules' are both enabled."),
        _0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedModules_are_both_enabled: diag(1446, 1 /* Error */, "_0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_preserveVa_1446", "'{0}' resolves to a type-only declaration and must be imported using a type-only import when 'preserveValueImports' and 'isolatedModules' are both enabled."),
        _0_resolves_to_a_type_only_declaration_and_must_be_re_exported_using_a_type_only_re_export_when_1_is_enabled: diag(1448, 1 /* Error */, "_0_resolves_to_a_type_only_declaration_and_must_be_re_exported_using_a_type_only_re_export_when_1_is_1448", "'{0}' resolves to a type-only declaration and must be re-exported using a type-only re-export when '{1}' is enabled."),
        Preserve_unused_imported_values_in_the_JavaScript_output_that_would_otherwise_be_removed: diag(1449, 3 /* Message */, "Preserve_unused_imported_values_in_the_JavaScript_output_that_would_otherwise_be_removed_1449", "Preserve unused imported values in the JavaScript output that would otherwise be removed."),
        Dynamic_imports_can_only_accept_a_module_specifier_and_an_optional_assertion_as_arguments: diag(1450, 3 /* Message */, "Dynamic_imports_can_only_accept_a_module_specifier_and_an_optional_assertion_as_arguments_1450", "Dynamic imports can only accept a module specifier and an optional assertion as arguments"),
        Private_identifiers_are_only_allowed_in_class_bodies_and_may_only_be_used_as_part_of_a_class_member_declaration_property_access_or_on_the_left_hand_side_of_an_in_expression: diag(1451, 1 /* Error */, "Private_identifiers_are_only_allowed_in_class_bodies_and_may_only_be_used_as_part_of_a_class_member__1451", "Private identifiers are only allowed in class bodies and may only be used as part of a class member declaration, property access, or on the left-hand-side of an 'in' expression"),
        resolution_mode_assertions_are_only_supported_when_moduleResolution_is_node16_or_nodenext: diag(1452, 1 /* Error */, "resolution_mode_assertions_are_only_supported_when_moduleResolution_is_node16_or_nodenext_1452", "'resolution-mode' assertions are only supported when `moduleResolution` is `node16` or `nodenext`."),
        resolution_mode_should_be_either_require_or_import: diag(1453, 1 /* Error */, "resolution_mode_should_be_either_require_or_import_1453", "`resolution-mode` should be either `require` or `import`."),
        resolution_mode_can_only_be_set_for_type_only_imports: diag(1454, 1 /* Error */, "resolution_mode_can_only_be_set_for_type_only_imports_1454", "`resolution-mode` can only be set for type-only imports."),
        resolution_mode_is_the_only_valid_key_for_type_import_assertions: diag(1455, 1 /* Error */, "resolution_mode_is_the_only_valid_key_for_type_import_assertions_1455", "`resolution-mode` is the only valid key for type import assertions."),
        Type_import_assertions_should_have_exactly_one_key_resolution_mode_with_value_import_or_require: diag(1456, 1 /* Error */, "Type_import_assertions_should_have_exactly_one_key_resolution_mode_with_value_import_or_require_1456", "Type import assertions should have exactly one key - `resolution-mode` - with value `import` or `require`."),
        Matched_by_default_include_pattern_Asterisk_Asterisk_Slash_Asterisk: diag(1457, 3 /* Message */, "Matched_by_default_include_pattern_Asterisk_Asterisk_Slash_Asterisk_1457", "Matched by default include pattern '**/*'"),
        File_is_ECMAScript_module_because_0_has_field_type_with_value_module: diag(1458, 3 /* Message */, "File_is_ECMAScript_module_because_0_has_field_type_with_value_module_1458", `File is ECMAScript module because '{0}' has field "type" with value "module"`),
        File_is_CommonJS_module_because_0_has_field_type_whose_value_is_not_module: diag(1459, 3 /* Message */, "File_is_CommonJS_module_because_0_has_field_type_whose_value_is_not_module_1459", `File is CommonJS module because '{0}' has field "type" whose value is not "module"`),
        File_is_CommonJS_module_because_0_does_not_have_field_type: diag(1460, 3 /* Message */, "File_is_CommonJS_module_because_0_does_not_have_field_type_1460", `File is CommonJS module because '{0}' does not have field "type"`),
        File_is_CommonJS_module_because_package_json_was_not_found: diag(1461, 3 /* Message */, "File_is_CommonJS_module_because_package_json_was_not_found_1461", "File is CommonJS module because 'package.json' was not found"),
        The_import_meta_meta_property_is_not_allowed_in_files_which_will_build_into_CommonJS_output: diag(1470, 1 /* Error */, "The_import_meta_meta_property_is_not_allowed_in_files_which_will_build_into_CommonJS_output_1470", "The 'import.meta' meta-property is not allowed in files which will build into CommonJS output."),
        Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_cannot_be_imported_with_require_Use_an_ECMAScript_import_instead: diag(1471, 1 /* Error */, "Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_c_1471", "Module '{0}' cannot be imported using this construct. The specifier only resolves to an ES module, which cannot be imported with 'require'. Use an ECMAScript import instead."),
        catch_or_finally_expected: diag(1472, 1 /* Error */, "catch_or_finally_expected_1472", "'catch' or 'finally' expected."),
        An_import_declaration_can_only_be_used_at_the_top_level_of_a_module: diag(1473, 1 /* Error */, "An_import_declaration_can_only_be_used_at_the_top_level_of_a_module_1473", "An import declaration can only be used at the top level of a module."),
        An_export_declaration_can_only_be_used_at_the_top_level_of_a_module: diag(1474, 1 /* Error */, "An_export_declaration_can_only_be_used_at_the_top_level_of_a_module_1474", "An export declaration can only be used at the top level of a module."),
        Control_what_method_is_used_to_detect_module_format_JS_files: diag(1475, 3 /* Message */, "Control_what_method_is_used_to_detect_module_format_JS_files_1475", "Control what method is used to detect module-format JS files."),
        auto_Colon_Treat_files_with_imports_exports_import_meta_jsx_with_jsx_Colon_react_jsx_or_esm_format_with_module_Colon_node16_as_modules: diag(1476, 3 /* Message */, "auto_Colon_Treat_files_with_imports_exports_import_meta_jsx_with_jsx_Colon_react_jsx_or_esm_format_w_1476", '"auto": Treat files with imports, exports, import.meta, jsx (with jsx: react-jsx), or esm format (with module: node16+) as modules.'),
        An_instantiation_expression_cannot_be_followed_by_a_property_access: diag(1477, 1 /* Error */, "An_instantiation_expression_cannot_be_followed_by_a_property_access_1477", "An instantiation expression cannot be followed by a property access."),
        Identifier_or_string_literal_expected: diag(1478, 1 /* Error */, "Identifier_or_string_literal_expected_1478", "Identifier or string literal expected."),
        The_current_file_is_a_CommonJS_module_whose_imports_will_produce_require_calls_however_the_referenced_file_is_an_ECMAScript_module_and_cannot_be_imported_with_require_Consider_writing_a_dynamic_import_0_call_instead: diag(1479, 1 /* Error */, "The_current_file_is_a_CommonJS_module_whose_imports_will_produce_require_calls_however_the_reference_1479", `The current file is a CommonJS module whose imports will produce 'require' calls; however, the referenced file is an ECMAScript module and cannot be imported with 'require'. Consider writing a dynamic 'import("{0}")' call instead.`),
        To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_create_a_local_package_json_file_with_type_Colon_module: diag(1480, 3 /* Message */, "To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_create_a_local_packag_1480", 'To convert this file to an ECMAScript module, change its file extension to \'{0}\' or create a local package.json file with `{ "type": "module" }`.'),
        To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_add_the_field_type_Colon_module_to_1: diag(1481, 3 /* Message */, "To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_add_the_field_type_Co_1481", `To convert this file to an ECMAScript module, change its file extension to '{0}', or add the field \`"type": "module"\` to '{1}'.`),
        To_convert_this_file_to_an_ECMAScript_module_add_the_field_type_Colon_module_to_0: diag(1482, 3 /* Message */, "To_convert_this_file_to_an_ECMAScript_module_add_the_field_type_Colon_module_to_0_1482", 'To convert this file to an ECMAScript module, add the field `"type": "module"` to \'{0}\'.'),
        To_convert_this_file_to_an_ECMAScript_module_create_a_local_package_json_file_with_type_Colon_module: diag(1483, 3 /* Message */, "To_convert_this_file_to_an_ECMAScript_module_create_a_local_package_json_file_with_type_Colon_module_1483", 'To convert this file to an ECMAScript module, create a local package.json file with `{ "type": "module" }`.'),
        _0_is_a_type_and_must_be_imported_using_a_type_only_import_when_verbatimModuleSyntax_is_enabled: diag(1484, 1 /* Error */, "_0_is_a_type_and_must_be_imported_using_a_type_only_import_when_verbatimModuleSyntax_is_enabled_1484", "'{0}' is a type and must be imported using a type-only import when 'verbatimModuleSyntax' is enabled."),
        _0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_verbatimModuleSyntax_is_enabled: diag(1485, 1 /* Error */, "_0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_verbatimMo_1485", "'{0}' resolves to a type-only declaration and must be imported using a type-only import when 'verbatimModuleSyntax' is enabled."),
        Decorator_used_before_export_here: diag(1486, 1 /* Error */, "Decorator_used_before_export_here_1486", "Decorator used before 'export' here."),
        The_types_of_0_are_incompatible_between_these_types: diag(2200, 1 /* Error */, "The_types_of_0_are_incompatible_between_these_types_2200", "The types of '{0}' are incompatible between these types."),
        The_types_returned_by_0_are_incompatible_between_these_types: diag(2201, 1 /* Error */, "The_types_returned_by_0_are_incompatible_between_these_types_2201", "The types returned by '{0}' are incompatible between these types."),
        Call_signature_return_types_0_and_1_are_incompatible: diag(
          2202,
          1 /* Error */,
          "Call_signature_return_types_0_and_1_are_incompatible_2202",
          "Call signature return types '{0}' and '{1}' are incompatible.",
          /*reportsUnnecessary*/
          void 0,
          /*elidedInCompatabilityPyramid*/
          true
        ),
        Construct_signature_return_types_0_and_1_are_incompatible: diag(
          2203,
          1 /* Error */,
          "Construct_signature_return_types_0_and_1_are_incompatible_2203",
          "Construct signature return types '{0}' and '{1}' are incompatible.",
          /*reportsUnnecessary*/
          void 0,
          /*elidedInCompatabilityPyramid*/
          true
        ),
        Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1: diag(
          2204,
          1 /* Error */,
          "Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1_2204",
          "Call signatures with no arguments have incompatible return types '{0}' and '{1}'.",
          /*reportsUnnecessary*/
          void 0,
          /*elidedInCompatabilityPyramid*/
          true
        ),
        Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1: diag(
          2205,
          1 /* Error */,
          "Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1_2205",
          "Construct signatures with no arguments have incompatible return types '{0}' and '{1}'.",
          /*reportsUnnecessary*/
          void 0,
          /*elidedInCompatabilityPyramid*/
          true
        ),
        The_type_modifier_cannot_be_used_on_a_named_import_when_import_type_is_used_on_its_import_statement: diag(2206, 1 /* Error */, "The_type_modifier_cannot_be_used_on_a_named_import_when_import_type_is_used_on_its_import_statement_2206", "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement."),
        The_type_modifier_cannot_be_used_on_a_named_export_when_export_type_is_used_on_its_export_statement: diag(2207, 1 /* Error */, "The_type_modifier_cannot_be_used_on_a_named_export_when_export_type_is_used_on_its_export_statement_2207", "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement."),
        This_type_parameter_might_need_an_extends_0_constraint: diag(2208, 1 /* Error */, "This_type_parameter_might_need_an_extends_0_constraint_2208", "This type parameter might need an `extends {0}` constraint."),
        The_project_root_is_ambiguous_but_is_required_to_resolve_export_map_entry_0_in_file_1_Supply_the_rootDir_compiler_option_to_disambiguate: diag(2209, 1 /* Error */, "The_project_root_is_ambiguous_but_is_required_to_resolve_export_map_entry_0_in_file_1_Supply_the_roo_2209", "The project root is ambiguous, but is required to resolve export map entry '{0}' in file '{1}'. Supply the `rootDir` compiler option to disambiguate."),
        The_project_root_is_ambiguous_but_is_required_to_resolve_import_map_entry_0_in_file_1_Supply_the_rootDir_compiler_option_to_disambiguate: diag(2210, 1 /* Error */, "The_project_root_is_ambiguous_but_is_required_to_resolve_import_map_entry_0_in_file_1_Supply_the_roo_2210", "The project root is ambiguous, but is required to resolve import map entry '{0}' in file '{1}'. Supply the `rootDir` compiler option to disambiguate."),
        Add_extends_constraint: diag(2211, 3 /* Message */, "Add_extends_constraint_2211", "Add `extends` constraint."),
        Add_extends_constraint_to_all_type_parameters: diag(2212, 3 /* Message */, "Add_extends_constraint_to_all_type_parameters_2212", "Add `extends` constraint to all type parameters"),
        Duplicate_identifier_0: diag(2300, 1 /* Error */, "Duplicate_identifier_0_2300", "Duplicate identifier '{0}'."),
        Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor: diag(2301, 1 /* Error */, "Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor_2301", "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor."),
        Static_members_cannot_reference_class_type_parameters: diag(2302, 1 /* Error */, "Static_members_cannot_reference_class_type_parameters_2302", "Static members cannot reference class type parameters."),
        Circular_definition_of_import_alias_0: diag(2303, 1 /* Error */, "Circular_definition_of_import_alias_0_2303", "Circular definition of import alias '{0}'."),
        Cannot_find_name_0: diag(2304, 1 /* Error */, "Cannot_find_name_0_2304", "Cannot find name '{0}'."),
        Module_0_has_no_exported_member_1: diag(2305, 1 /* Error */, "Module_0_has_no_exported_member_1_2305", "Module '{0}' has no exported member '{1}'."),
        File_0_is_not_a_module: diag(2306, 1 /* Error */, "File_0_is_not_a_module_2306", "File '{0}' is not a module."),
        Cannot_find_module_0_or_its_corresponding_type_declarations: diag(2307, 1 /* Error */, "Cannot_find_module_0_or_its_corresponding_type_declarations_2307", "Cannot find module '{0}' or its corresponding type declarations."),
        Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambiguity: diag(2308, 1 /* Error */, "Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambig_2308", "Module {0} has already exported a member named '{1}'. Consider explicitly re-exporting to resolve the ambiguity."),
        An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements: diag(2309, 1 /* Error */, "An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements_2309", "An export assignment cannot be used in a module with other exported elements."),
        Type_0_recursively_references_itself_as_a_base_type: diag(2310, 1 /* Error */, "Type_0_recursively_references_itself_as_a_base_type_2310", "Type '{0}' recursively references itself as a base type."),
        Cannot_find_name_0_Did_you_mean_to_write_this_in_an_async_function: diag(2311, 1 /* Error */, "Cannot_find_name_0_Did_you_mean_to_write_this_in_an_async_function_2311", "Cannot find name '{0}'. Did you mean to write this in an async function?"),
        An_interface_can_only_extend_an_object_type_or_intersection_of_object_types_with_statically_known_members: diag(2312, 1 /* Error */, "An_interface_can_only_extend_an_object_type_or_intersection_of_object_types_with_statically_known_me_2312", "An interface can only extend an object type or intersection of object types with statically known members."),
        Type_parameter_0_has_a_circular_constraint: diag(2313, 1 /* Error */, "Type_parameter_0_has_a_circular_constraint_2313", "Type parameter '{0}' has a circular constraint."),
        Generic_type_0_requires_1_type_argument_s: diag(2314, 1 /* Error */, "Generic_type_0_requires_1_type_argument_s_2314", "Generic type '{0}' requires {1} type argument(s)."),
        Type_0_is_not_generic: diag(2315, 1 /* Error */, "Type_0_is_not_generic_2315", "Type '{0}' is not generic."),
        Global_type_0_must_be_a_class_or_interface_type: diag(2316, 1 /* Error */, "Global_type_0_must_be_a_class_or_interface_type_2316", "Global type '{0}' must be a class or interface type."),
        Global_type_0_must_have_1_type_parameter_s: diag(2317, 1 /* Error */, "Global_type_0_must_have_1_type_parameter_s_2317", "Global type '{0}' must have {1} type parameter(s)."),
        Cannot_find_global_type_0: diag(2318, 1 /* Error */, "Cannot_find_global_type_0_2318", "Cannot find global type '{0}'."),
        Named_property_0_of_types_1_and_2_are_not_identical: diag(2319, 1 /* Error */, "Named_property_0_of_types_1_and_2_are_not_identical_2319", "Named property '{0}' of types '{1}' and '{2}' are not identical."),
        Interface_0_cannot_simultaneously_extend_types_1_and_2: diag(2320, 1 /* Error */, "Interface_0_cannot_simultaneously_extend_types_1_and_2_2320", "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}'."),
        Excessive_stack_depth_comparing_types_0_and_1: diag(2321, 1 /* Error */, "Excessive_stack_depth_comparing_types_0_and_1_2321", "Excessive stack depth comparing types '{0}' and '{1}'."),
        Type_0_is_not_assignable_to_type_1: diag(2322, 1 /* Error */, "Type_0_is_not_assignable_to_type_1_2322", "Type '{0}' is not assignable to type '{1}'."),
        Cannot_redeclare_exported_variable_0: diag(2323, 1 /* Error */, "Cannot_redeclare_exported_variable_0_2323", "Cannot redeclare exported variable '{0}'."),
        Property_0_is_missing_in_type_1: diag(2324, 1 /* Error */, "Property_0_is_missing_in_type_1_2324", "Property '{0}' is missing in type '{1}'."),
        Property_0_is_private_in_type_1_but_not_in_type_2: diag(2325, 1 /* Error */, "Property_0_is_private_in_type_1_but_not_in_type_2_2325", "Property '{0}' is private in type '{1}' but not in type '{2}'."),
        Types_of_property_0_are_incompatible: diag(2326, 1 /* Error */, "Types_of_property_0_are_incompatible_2326", "Types of property '{0}' are incompatible."),
        Property_0_is_optional_in_type_1_but_required_in_type_2: diag(2327, 1 /* Error */, "Property_0_is_optional_in_type_1_but_required_in_type_2_2327", "Property '{0}' is optional in type '{1}' but required in type '{2}'."),
        Types_of_parameters_0_and_1_are_incompatible: diag(2328, 1 /* Error */, "Types_of_parameters_0_and_1_are_incompatible_2328", "Types of parameters '{0}' and '{1}' are incompatible."),
        Index_signature_for_type_0_is_missing_in_type_1: diag(2329, 1 /* Error */, "Index_signature_for_type_0_is_missing_in_type_1_2329", "Index signature for type '{0}' is missing in type '{1}'."),
        _0_and_1_index_signatures_are_incompatible: diag(2330, 1 /* Error */, "_0_and_1_index_signatures_are_incompatible_2330", "'{0}' and '{1}' index signatures are incompatible."),
        this_cannot_be_referenced_in_a_module_or_namespace_body: diag(2331, 1 /* Error */, "this_cannot_be_referenced_in_a_module_or_namespace_body_2331", "'this' cannot be referenced in a module or namespace body."),
        this_cannot_be_referenced_in_current_location: diag(2332, 1 /* Error */, "this_cannot_be_referenced_in_current_location_2332", "'this' cannot be referenced in current location."),
        this_cannot_be_referenced_in_constructor_arguments: diag(2333, 1 /* Error */, "this_cannot_be_referenced_in_constructor_arguments_2333", "'this' cannot be referenced in constructor arguments."),
        this_cannot_be_referenced_in_a_static_property_initializer: diag(2334, 1 /* Error */, "this_cannot_be_referenced_in_a_static_property_initializer_2334", "'this' cannot be referenced in a static property initializer."),
        super_can_only_be_referenced_in_a_derived_class: diag(2335, 1 /* Error */, "super_can_only_be_referenced_in_a_derived_class_2335", "'super' can only be referenced in a derived class."),
        super_cannot_be_referenced_in_constructor_arguments: diag(2336, 1 /* Error */, "super_cannot_be_referenced_in_constructor_arguments_2336", "'super' cannot be referenced in constructor arguments."),
        Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors: diag(2337, 1 /* Error */, "Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors_2337", "Super calls are not permitted outside constructors or in nested functions inside constructors."),
        super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class: diag(2338, 1 /* Error */, "super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_der_2338", "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class."),
        Property_0_does_not_exist_on_type_1: diag(2339, 1 /* Error */, "Property_0_does_not_exist_on_type_1_2339", "Property '{0}' does not exist on type '{1}'."),
        Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword: diag(2340, 1 /* Error */, "Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword_2340", "Only public and protected methods of the base class are accessible via the 'super' keyword."),
        Property_0_is_private_and_only_accessible_within_class_1: diag(2341, 1 /* Error */, "Property_0_is_private_and_only_accessible_within_class_1_2341", "Property '{0}' is private and only accessible within class '{1}'."),
        This_syntax_requires_an_imported_helper_named_1_which_does_not_exist_in_0_Consider_upgrading_your_version_of_0: diag(2343, 1 /* Error */, "This_syntax_requires_an_imported_helper_named_1_which_does_not_exist_in_0_Consider_upgrading_your_ve_2343", "This syntax requires an imported helper named '{1}' which does not exist in '{0}'. Consider upgrading your version of '{0}'."),
        Type_0_does_not_satisfy_the_constraint_1: diag(2344, 1 /* Error */, "Type_0_does_not_satisfy_the_constraint_1_2344", "Type '{0}' does not satisfy the constraint '{1}'."),
        Argument_of_type_0_is_not_assignable_to_parameter_of_type_1: diag(2345, 1 /* Error */, "Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_2345", "Argument of type '{0}' is not assignable to parameter of type '{1}'."),
        Call_target_does_not_contain_any_signatures: diag(2346, 1 /* Error */, "Call_target_does_not_contain_any_signatures_2346", "Call target does not contain any signatures."),
        Untyped_function_calls_may_not_accept_type_arguments: diag(2347, 1 /* Error */, "Untyped_function_calls_may_not_accept_type_arguments_2347", "Untyped function calls may not accept type arguments."),
        Value_of_type_0_is_not_callable_Did_you_mean_to_include_new: diag(2348, 1 /* Error */, "Value_of_type_0_is_not_callable_Did_you_mean_to_include_new_2348", "Value of type '{0}' is not callable. Did you mean to include 'new'?"),
        This_expression_is_not_callable: diag(2349, 1 /* Error */, "This_expression_is_not_callable_2349", "This expression is not callable."),
        Only_a_void_function_can_be_called_with_the_new_keyword: diag(2350, 1 /* Error */, "Only_a_void_function_can_be_called_with_the_new_keyword_2350", "Only a void function can be called with the 'new' keyword."),
        This_expression_is_not_constructable: diag(2351, 1 /* Error */, "This_expression_is_not_constructable_2351", "This expression is not constructable."),
        Conversion_of_type_0_to_type_1_may_be_a_mistake_because_neither_type_sufficiently_overlaps_with_the_other_If_this_was_intentional_convert_the_expression_to_unknown_first: diag(2352, 1 /* Error */, "Conversion_of_type_0_to_type_1_may_be_a_mistake_because_neither_type_sufficiently_overlaps_with_the__2352", "Conversion of type '{0}' to type '{1}' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first."),
        Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1: diag(2353, 1 /* Error */, "Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1_2353", "Object literal may only specify known properties, and '{0}' does not exist in type '{1}'."),
        This_syntax_requires_an_imported_helper_but_module_0_cannot_be_found: diag(2354, 1 /* Error */, "This_syntax_requires_an_imported_helper_but_module_0_cannot_be_found_2354", "This syntax requires an imported helper but module '{0}' cannot be found."),
        A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value: diag(2355, 1 /* Error */, "A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_2355", "A function whose declared type is neither 'void' nor 'any' must return a value."),
        An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type: diag(2356, 1 /* Error */, "An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type_2356", "An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type."),
        The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access: diag(2357, 1 /* Error */, "The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access_2357", "The operand of an increment or decrement operator must be a variable or a property access."),
        The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: diag(2358, 1 /* Error */, "The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_paramete_2358", "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter."),
        The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type: diag(2359, 1 /* Error */, "The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_F_2359", "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type."),
        The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type: diag(2362, 1 /* Error */, "The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type_2362", "The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."),
        The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type: diag(2363, 1 /* Error */, "The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type_2363", "The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."),
        The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access: diag(2364, 1 /* Error */, "The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access_2364", "The left-hand side of an assignment expression must be a variable or a property access."),
        Operator_0_cannot_be_applied_to_types_1_and_2: diag(2365, 1 /* Error */, "Operator_0_cannot_be_applied_to_types_1_and_2_2365", "Operator '{0}' cannot be applied to types '{1}' and '{2}'."),
        Function_lacks_ending_return_statement_and_return_type_does_not_include_undefined: diag(2366, 1 /* Error */, "Function_lacks_ending_return_statement_and_return_type_does_not_include_undefined_2366", "Function lacks ending return statement and return type does not include 'undefined'."),
        This_comparison_appears_to_be_unintentional_because_the_types_0_and_1_have_no_overlap: diag(2367, 1 /* Error */, "This_comparison_appears_to_be_unintentional_because_the_types_0_and_1_have_no_overlap_2367", "This comparison appears to be unintentional because the types '{0}' and '{1}' have no overlap."),
        Type_parameter_name_cannot_be_0: diag(2368, 1 /* Error */, "Type_parameter_name_cannot_be_0_2368", "Type parameter name cannot be '{0}'."),
        A_parameter_property_is_only_allowed_in_a_constructor_implementation: diag(2369, 1 /* Error */, "A_parameter_property_is_only_allowed_in_a_constructor_implementation_2369", "A parameter property is only allowed in a constructor implementation."),
        A_rest_parameter_must_be_of_an_array_type: diag(2370, 1 /* Error */, "A_rest_parameter_must_be_of_an_array_type_2370", "A rest parameter must be of an array type."),
        A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation: diag(2371, 1 /* Error */, "A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation_2371", "A parameter initializer is only allowed in a function or constructor implementation."),
        Parameter_0_cannot_reference_itself: diag(2372, 1 /* Error */, "Parameter_0_cannot_reference_itself_2372", "Parameter '{0}' cannot reference itself."),
        Parameter_0_cannot_reference_identifier_1_declared_after_it: diag(2373, 1 /* Error */, "Parameter_0_cannot_reference_identifier_1_declared_after_it_2373", "Parameter '{0}' cannot reference identifier '{1}' declared after it."),
        Duplicate_index_signature_for_type_0: diag(2374, 1 /* Error */, "Duplicate_index_signature_for_type_0_2374", "Duplicate index signature for type '{0}'."),
        Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties: diag(2375, 1 /* Error */, "Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefi_2375", "Type '{0}' is not assignable to type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties."),
        A_super_call_must_be_the_first_statement_in_the_constructor_to_refer_to_super_or_this_when_a_derived_class_contains_initialized_properties_parameter_properties_or_private_identifiers: diag(2376, 1 /* Error */, "A_super_call_must_be_the_first_statement_in_the_constructor_to_refer_to_super_or_this_when_a_derived_2376", "A 'super' call must be the first statement in the constructor to refer to 'super' or 'this' when a derived class contains initialized properties, parameter properties, or private identifiers."),
        Constructors_for_derived_classes_must_contain_a_super_call: diag(2377, 1 /* Error */, "Constructors_for_derived_classes_must_contain_a_super_call_2377", "Constructors for derived classes must contain a 'super' call."),
        A_get_accessor_must_return_a_value: diag(2378, 1 /* Error */, "A_get_accessor_must_return_a_value_2378", "A 'get' accessor must return a value."),
        Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties: diag(2379, 1 /* Error */, "Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_with_exactOptionalPropertyTypes_Colon_tr_2379", "Argument of type '{0}' is not assignable to parameter of type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties."),
        The_return_type_of_a_get_accessor_must_be_assignable_to_its_set_accessor_type: diag(2380, 1 /* Error */, "The_return_type_of_a_get_accessor_must_be_assignable_to_its_set_accessor_type_2380", "The return type of a 'get' accessor must be assignable to its 'set' accessor type"),
        Overload_signatures_must_all_be_exported_or_non_exported: diag(2383, 1 /* Error */, "Overload_signatures_must_all_be_exported_or_non_exported_2383", "Overload signatures must all be exported or non-exported."),
        Overload_signatures_must_all_be_ambient_or_non_ambient: diag(2384, 1 /* Error */, "Overload_signatures_must_all_be_ambient_or_non_ambient_2384", "Overload signatures must all be ambient or non-ambient."),
        Overload_signatures_must_all_be_public_private_or_protected: diag(2385, 1 /* Error */, "Overload_signatures_must_all_be_public_private_or_protected_2385", "Overload signatures must all be public, private or protected."),
        Overload_signatures_must_all_be_optional_or_required: diag(2386, 1 /* Error */, "Overload_signatures_must_all_be_optional_or_required_2386", "Overload signatures must all be optional or required."),
        Function_overload_must_be_static: diag(2387, 1 /* Error */, "Function_overload_must_be_static_2387", "Function overload must be static."),
        Function_overload_must_not_be_static: diag(2388, 1 /* Error */, "Function_overload_must_not_be_static_2388", "Function overload must not be static."),
        Function_implementation_name_must_be_0: diag(2389, 1 /* Error */, "Function_implementation_name_must_be_0_2389", "Function implementation name must be '{0}'."),
        Constructor_implementation_is_missing: diag(2390, 1 /* Error */, "Constructor_implementation_is_missing_2390", "Constructor implementation is missing."),
        Function_implementation_is_missing_or_not_immediately_following_the_declaration: diag(2391, 1 /* Error */, "Function_implementation_is_missing_or_not_immediately_following_the_declaration_2391", "Function implementation is missing or not immediately following the declaration."),
        Multiple_constructor_implementations_are_not_allowed: diag(2392, 1 /* Error */, "Multiple_constructor_implementations_are_not_allowed_2392", "Multiple constructor implementations are not allowed."),
        Duplicate_function_implementation: diag(2393, 1 /* Error */, "Duplicate_function_implementation_2393", "Duplicate function implementation."),
        This_overload_signature_is_not_compatible_with_its_implementation_signature: diag(2394, 1 /* Error */, "This_overload_signature_is_not_compatible_with_its_implementation_signature_2394", "This overload signature is not compatible with its implementation signature."),
        Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local: diag(2395, 1 /* Error */, "Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local_2395", "Individual declarations in merged declaration '{0}' must be all exported or all local."),
        Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters: diag(2396, 1 /* Error */, "Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters_2396", "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters."),
        Declaration_name_conflicts_with_built_in_global_identifier_0: diag(2397, 1 /* Error */, "Declaration_name_conflicts_with_built_in_global_identifier_0_2397", "Declaration name conflicts with built-in global identifier '{0}'."),
        constructor_cannot_be_used_as_a_parameter_property_name: diag(2398, 1 /* Error */, "constructor_cannot_be_used_as_a_parameter_property_name_2398", "'constructor' cannot be used as a parameter property name."),
        Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference: diag(2399, 1 /* Error */, "Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference_2399", "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference."),
        Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference: diag(2400, 1 /* Error */, "Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference_2400", "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference."),
        A_super_call_must_be_a_root_level_statement_within_a_constructor_of_a_derived_class_that_contains_initialized_properties_parameter_properties_or_private_identifiers: diag(2401, 1 /* Error */, "A_super_call_must_be_a_root_level_statement_within_a_constructor_of_a_derived_class_that_contains_in_2401", "A 'super' call must be a root-level statement within a constructor of a derived class that contains initialized properties, parameter properties, or private identifiers."),
        Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference: diag(2402, 1 /* Error */, "Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference_2402", "Expression resolves to '_super' that compiler uses to capture base class reference."),
        Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2: diag(2403, 1 /* Error */, "Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_t_2403", "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'."),
        The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation: diag(2404, 1 /* Error */, "The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation_2404", "The left-hand side of a 'for...in' statement cannot use a type annotation."),
        The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any: diag(2405, 1 /* Error */, "The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any_2405", "The left-hand side of a 'for...in' statement must be of type 'string' or 'any'."),
        The_left_hand_side_of_a_for_in_statement_must_be_a_variable_or_a_property_access: diag(2406, 1 /* Error */, "The_left_hand_side_of_a_for_in_statement_must_be_a_variable_or_a_property_access_2406", "The left-hand side of a 'for...in' statement must be a variable or a property access."),
        The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter_but_here_has_type_0: diag(2407, 1 /* Error */, "The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter_but_2407", "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter, but here has type '{0}'."),
        Setters_cannot_return_a_value: diag(2408, 1 /* Error */, "Setters_cannot_return_a_value_2408", "Setters cannot return a value."),
        Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class: diag(2409, 1 /* Error */, "Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class_2409", "Return type of constructor signature must be assignable to the instance type of the class."),
        The_with_statement_is_not_supported_All_symbols_in_a_with_block_will_have_type_any: diag(2410, 1 /* Error */, "The_with_statement_is_not_supported_All_symbols_in_a_with_block_will_have_type_any_2410", "The 'with' statement is not supported. All symbols in a 'with' block will have type 'any'."),
        Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_type_of_the_target: diag(2412, 1 /* Error */, "Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefi_2412", "Type '{0}' is not assignable to type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target."),
        Property_0_of_type_1_is_not_assignable_to_2_index_type_3: diag(2411, 1 /* Error */, "Property_0_of_type_1_is_not_assignable_to_2_index_type_3_2411", "Property '{0}' of type '{1}' is not assignable to '{2}' index type '{3}'."),
        _0_index_type_1_is_not_assignable_to_2_index_type_3: diag(2413, 1 /* Error */, "_0_index_type_1_is_not_assignable_to_2_index_type_3_2413", "'{0}' index type '{1}' is not assignable to '{2}' index type '{3}'."),
        Class_name_cannot_be_0: diag(2414, 1 /* Error */, "Class_name_cannot_be_0_2414", "Class name cannot be '{0}'."),
        Class_0_incorrectly_extends_base_class_1: diag(2415, 1 /* Error */, "Class_0_incorrectly_extends_base_class_1_2415", "Class '{0}' incorrectly extends base class '{1}'."),
        Property_0_in_type_1_is_not_assignable_to_the_same_property_in_base_type_2: diag(2416, 1 /* Error */, "Property_0_in_type_1_is_not_assignable_to_the_same_property_in_base_type_2_2416", "Property '{0}' in type '{1}' is not assignable to the same property in base type '{2}'."),
        Class_static_side_0_incorrectly_extends_base_class_static_side_1: diag(2417, 1 /* Error */, "Class_static_side_0_incorrectly_extends_base_class_static_side_1_2417", "Class static side '{0}' incorrectly extends base class static side '{1}'."),
        Type_of_computed_property_s_value_is_0_which_is_not_assignable_to_type_1: diag(2418, 1 /* Error */, "Type_of_computed_property_s_value_is_0_which_is_not_assignable_to_type_1_2418", "Type of computed property's value is '{0}', which is not assignable to type '{1}'."),
        Types_of_construct_signatures_are_incompatible: diag(2419, 1 /* Error */, "Types_of_construct_signatures_are_incompatible_2419", "Types of construct signatures are incompatible."),
        Class_0_incorrectly_implements_interface_1: diag(2420, 1 /* Error */, "Class_0_incorrectly_implements_interface_1_2420", "Class '{0}' incorrectly implements interface '{1}'."),
        A_class_can_only_implement_an_object_type_or_intersection_of_object_types_with_statically_known_members: diag(2422, 1 /* Error */, "A_class_can_only_implement_an_object_type_or_intersection_of_object_types_with_statically_known_memb_2422", "A class can only implement an object type or intersection of object types with statically known members."),
        Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor: diag(2423, 1 /* Error */, "Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_access_2423", "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor."),
        Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function: diag(2425, 1 /* Error */, "Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_functi_2425", "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function."),
        Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function: diag(2426, 1 /* Error */, "Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_functi_2426", "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function."),
        Interface_name_cannot_be_0: diag(2427, 1 /* Error */, "Interface_name_cannot_be_0_2427", "Interface name cannot be '{0}'."),
        All_declarations_of_0_must_have_identical_type_parameters: diag(2428, 1 /* Error */, "All_declarations_of_0_must_have_identical_type_parameters_2428", "All declarations of '{0}' must have identical type parameters."),
        Interface_0_incorrectly_extends_interface_1: diag(2430, 1 /* Error */, "Interface_0_incorrectly_extends_interface_1_2430", "Interface '{0}' incorrectly extends interface '{1}'."),
        Enum_name_cannot_be_0: diag(2431, 1 /* Error */, "Enum_name_cannot_be_0_2431", "Enum name cannot be '{0}'."),
        In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element: diag(2432, 1 /* Error */, "In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enu_2432", "In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element."),
        A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged: diag(2433, 1 /* Error */, "A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merg_2433", "A namespace declaration cannot be in a different file from a class or function with which it is merged."),
        A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged: diag(2434, 1 /* Error */, "A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged_2434", "A namespace declaration cannot be located prior to a class or function with which it is merged."),
        Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces: diag(2435, 1 /* Error */, "Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces_2435", "Ambient modules cannot be nested in other modules or namespaces."),
        Ambient_module_declaration_cannot_specify_relative_module_name: diag(2436, 1 /* Error */, "Ambient_module_declaration_cannot_specify_relative_module_name_2436", "Ambient module declaration cannot specify relative module name."),
        Module_0_is_hidden_by_a_local_declaration_with_the_same_name: diag(2437, 1 /* Error */, "Module_0_is_hidden_by_a_local_declaration_with_the_same_name_2437", "Module '{0}' is hidden by a local declaration with the same name."),
        Import_name_cannot_be_0: diag(2438, 1 /* Error */, "Import_name_cannot_be_0_2438", "Import name cannot be '{0}'."),
        Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name: diag(2439, 1 /* Error */, "Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relati_2439", "Import or export declaration in an ambient module declaration cannot reference module through relative module name."),
        Import_declaration_conflicts_with_local_declaration_of_0: diag(2440, 1 /* Error */, "Import_declaration_conflicts_with_local_declaration_of_0_2440", "Import declaration conflicts with local declaration of '{0}'."),
        Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module: diag(2441, 1 /* Error */, "Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_2441", "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module."),
        Types_have_separate_declarations_of_a_private_property_0: diag(2442, 1 /* Error */, "Types_have_separate_declarations_of_a_private_property_0_2442", "Types have separate declarations of a private property '{0}'."),
        Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2: diag(2443, 1 /* Error */, "Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2_2443", "Property '{0}' is protected but type '{1}' is not a class derived from '{2}'."),
        Property_0_is_protected_in_type_1_but_public_in_type_2: diag(2444, 1 /* Error */, "Property_0_is_protected_in_type_1_but_public_in_type_2_2444", "Property '{0}' is protected in type '{1}' but public in type '{2}'."),
        Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses: diag(2445, 1 /* Error */, "Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses_2445", "Property '{0}' is protected and only accessible within class '{1}' and its subclasses."),
        Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1_This_is_an_instance_of_class_2: diag(2446, 1 /* Error */, "Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1_This_is_an_instance_of_cl_2446", "Property '{0}' is protected and only accessible through an instance of class '{1}'. This is an instance of class '{2}'."),
        The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead: diag(2447, 1 /* Error */, "The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead_2447", "The '{0}' operator is not allowed for boolean types. Consider using '{1}' instead."),
        Block_scoped_variable_0_used_before_its_declaration: diag(2448, 1 /* Error */, "Block_scoped_variable_0_used_before_its_declaration_2448", "Block-scoped variable '{0}' used before its declaration."),
        Class_0_used_before_its_declaration: diag(2449, 1 /* Error */, "Class_0_used_before_its_declaration_2449", "Class '{0}' used before its declaration."),
        Enum_0_used_before_its_declaration: diag(2450, 1 /* Error */, "Enum_0_used_before_its_declaration_2450", "Enum '{0}' used before its declaration."),
        Cannot_redeclare_block_scoped_variable_0: diag(2451, 1 /* Error */, "Cannot_redeclare_block_scoped_variable_0_2451", "Cannot redeclare block-scoped variable '{0}'."),
        An_enum_member_cannot_have_a_numeric_name: diag(2452, 1 /* Error */, "An_enum_member_cannot_have_a_numeric_name_2452", "An enum member cannot have a numeric name."),
        Variable_0_is_used_before_being_assigned: diag(2454, 1 /* Error */, "Variable_0_is_used_before_being_assigned_2454", "Variable '{0}' is used before being assigned."),
        Type_alias_0_circularly_references_itself: diag(2456, 1 /* Error */, "Type_alias_0_circularly_references_itself_2456", "Type alias '{0}' circularly references itself."),
        Type_alias_name_cannot_be_0: diag(2457, 1 /* Error */, "Type_alias_name_cannot_be_0_2457", "Type alias name cannot be '{0}'."),
        An_AMD_module_cannot_have_multiple_name_assignments: diag(2458, 1 /* Error */, "An_AMD_module_cannot_have_multiple_name_assignments_2458", "An AMD module cannot have multiple name assignments."),
        Module_0_declares_1_locally_but_it_is_not_exported: diag(2459, 1 /* Error */, "Module_0_declares_1_locally_but_it_is_not_exported_2459", "Module '{0}' declares '{1}' locally, but it is not exported."),
        Module_0_declares_1_locally_but_it_is_exported_as_2: diag(2460, 1 /* Error */, "Module_0_declares_1_locally_but_it_is_exported_as_2_2460", "Module '{0}' declares '{1}' locally, but it is exported as '{2}'."),
        Type_0_is_not_an_array_type: diag(2461, 1 /* Error */, "Type_0_is_not_an_array_type_2461", "Type '{0}' is not an array type."),
        A_rest_element_must_be_last_in_a_destructuring_pattern: diag(2462, 1 /* Error */, "A_rest_element_must_be_last_in_a_destructuring_pattern_2462", "A rest element must be last in a destructuring pattern."),
        A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature: diag(2463, 1 /* Error */, "A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature_2463", "A binding pattern parameter cannot be optional in an implementation signature."),
        A_computed_property_name_must_be_of_type_string_number_symbol_or_any: diag(2464, 1 /* Error */, "A_computed_property_name_must_be_of_type_string_number_symbol_or_any_2464", "A computed property name must be of type 'string', 'number', 'symbol', or 'any'."),
        this_cannot_be_referenced_in_a_computed_property_name: diag(2465, 1 /* Error */, "this_cannot_be_referenced_in_a_computed_property_name_2465", "'this' cannot be referenced in a computed property name."),
        super_cannot_be_referenced_in_a_computed_property_name: diag(2466, 1 /* Error */, "super_cannot_be_referenced_in_a_computed_property_name_2466", "'super' cannot be referenced in a computed property name."),
        A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type: diag(2467, 1 /* Error */, "A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type_2467", "A computed property name cannot reference a type parameter from its containing type."),
        Cannot_find_global_value_0: diag(2468, 1 /* Error */, "Cannot_find_global_value_0_2468", "Cannot find global value '{0}'."),
        The_0_operator_cannot_be_applied_to_type_symbol: diag(2469, 1 /* Error */, "The_0_operator_cannot_be_applied_to_type_symbol_2469", "The '{0}' operator cannot be applied to type 'symbol'."),
        Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher: diag(2472, 1 /* Error */, "Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher_2472", "Spread operator in 'new' expressions is only available when targeting ECMAScript 5 and higher."),
        Enum_declarations_must_all_be_const_or_non_const: diag(2473, 1 /* Error */, "Enum_declarations_must_all_be_const_or_non_const_2473", "Enum declarations must all be const or non-const."),
        const_enum_member_initializers_must_be_constant_expressions: diag(2474, 1 /* Error */, "const_enum_member_initializers_must_be_constant_expressions_2474", "const enum member initializers must be constant expressions."),
        const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment_or_type_query: diag(2475, 1 /* Error */, "const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_im_2475", "'const' enums can only be used in property or index access expressions or the right hand side of an import declaration or export assignment or type query."),
        A_const_enum_member_can_only_be_accessed_using_a_string_literal: diag(2476, 1 /* Error */, "A_const_enum_member_can_only_be_accessed_using_a_string_literal_2476", "A const enum member can only be accessed using a string literal."),
        const_enum_member_initializer_was_evaluated_to_a_non_finite_value: diag(2477, 1 /* Error */, "const_enum_member_initializer_was_evaluated_to_a_non_finite_value_2477", "'const' enum member initializer was evaluated to a non-finite value."),
        const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN: diag(2478, 1 /* Error */, "const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN_2478", "'const' enum member initializer was evaluated to disallowed value 'NaN'."),
        let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations: diag(2480, 1 /* Error */, "let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations_2480", "'let' is not allowed to be used as a name in 'let' or 'const' declarations."),
        Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1: diag(2481, 1 /* Error */, "Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1_2481", "Cannot initialize outer scoped variable '{0}' in the same scope as block scoped declaration '{1}'."),
        The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation: diag(2483, 1 /* Error */, "The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation_2483", "The left-hand side of a 'for...of' statement cannot use a type annotation."),
        Export_declaration_conflicts_with_exported_declaration_of_0: diag(2484, 1 /* Error */, "Export_declaration_conflicts_with_exported_declaration_of_0_2484", "Export declaration conflicts with exported declaration of '{0}'."),
        The_left_hand_side_of_a_for_of_statement_must_be_a_variable_or_a_property_access: diag(2487, 1 /* Error */, "The_left_hand_side_of_a_for_of_statement_must_be_a_variable_or_a_property_access_2487", "The left-hand side of a 'for...of' statement must be a variable or a property access."),
        Type_0_must_have_a_Symbol_iterator_method_that_returns_an_iterator: diag(2488, 1 /* Error */, "Type_0_must_have_a_Symbol_iterator_method_that_returns_an_iterator_2488", "Type '{0}' must have a '[Symbol.iterator]()' method that returns an iterator."),
        An_iterator_must_have_a_next_method: diag(2489, 1 /* Error */, "An_iterator_must_have_a_next_method_2489", "An iterator must have a 'next()' method."),
        The_type_returned_by_the_0_method_of_an_iterator_must_have_a_value_property: diag(2490, 1 /* Error */, "The_type_returned_by_the_0_method_of_an_iterator_must_have_a_value_property_2490", "The type returned by the '{0}()' method of an iterator must have a 'value' property."),
        The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern: diag(2491, 1 /* Error */, "The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern_2491", "The left-hand side of a 'for...in' statement cannot be a destructuring pattern."),
        Cannot_redeclare_identifier_0_in_catch_clause: diag(2492, 1 /* Error */, "Cannot_redeclare_identifier_0_in_catch_clause_2492", "Cannot redeclare identifier '{0}' in catch clause."),
        Tuple_type_0_of_length_1_has_no_element_at_index_2: diag(2493, 1 /* Error */, "Tuple_type_0_of_length_1_has_no_element_at_index_2_2493", "Tuple type '{0}' of length '{1}' has no element at index '{2}'."),
        Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher: diag(2494, 1 /* Error */, "Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher_2494", "Using a string in a 'for...of' statement is only supported in ECMAScript 5 and higher."),
        Type_0_is_not_an_array_type_or_a_string_type: diag(2495, 1 /* Error */, "Type_0_is_not_an_array_type_or_a_string_type_2495", "Type '{0}' is not an array type or a string type."),
        The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression: diag(2496, 1 /* Error */, "The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_stand_2496", "The 'arguments' object cannot be referenced in an arrow function in ES3 and ES5. Consider using a standard function expression."),
        This_module_can_only_be_referenced_with_ECMAScript_imports_Slashexports_by_turning_on_the_0_flag_and_referencing_its_default_export: diag(2497, 1 /* Error */, "This_module_can_only_be_referenced_with_ECMAScript_imports_Slashexports_by_turning_on_the_0_flag_and_2497", "This module can only be referenced with ECMAScript imports/exports by turning on the '{0}' flag and referencing its default export."),
        Module_0_uses_export_and_cannot_be_used_with_export_Asterisk: diag(2498, 1 /* Error */, "Module_0_uses_export_and_cannot_be_used_with_export_Asterisk_2498", "Module '{0}' uses 'export =' and cannot be used with 'export *'."),
        An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments: diag(2499, 1 /* Error */, "An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments_2499", "An interface can only extend an identifier/qualified-name with optional type arguments."),
        A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments: diag(2500, 1 /* Error */, "A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments_2500", "A class can only implement an identifier/qualified-name with optional type arguments."),
        A_rest_element_cannot_contain_a_binding_pattern: diag(2501, 1 /* Error */, "A_rest_element_cannot_contain_a_binding_pattern_2501", "A rest element cannot contain a binding pattern."),
        _0_is_referenced_directly_or_indirectly_in_its_own_type_annotation: diag(2502, 1 /* Error */, "_0_is_referenced_directly_or_indirectly_in_its_own_type_annotation_2502", "'{0}' is referenced directly or indirectly in its own type annotation."),
        Cannot_find_namespace_0: diag(2503, 1 /* Error */, "Cannot_find_namespace_0_2503", "Cannot find namespace '{0}'."),
        Type_0_must_have_a_Symbol_asyncIterator_method_that_returns_an_async_iterator: diag(2504, 1 /* Error */, "Type_0_must_have_a_Symbol_asyncIterator_method_that_returns_an_async_iterator_2504", "Type '{0}' must have a '[Symbol.asyncIterator]()' method that returns an async iterator."),
        A_generator_cannot_have_a_void_type_annotation: diag(2505, 1 /* Error */, "A_generator_cannot_have_a_void_type_annotation_2505", "A generator cannot have a 'void' type annotation."),
        _0_is_referenced_directly_or_indirectly_in_its_own_base_expression: diag(2506, 1 /* Error */, "_0_is_referenced_directly_or_indirectly_in_its_own_base_expression_2506", "'{0}' is referenced directly or indirectly in its own base expression."),
        Type_0_is_not_a_constructor_function_type: diag(2507, 1 /* Error */, "Type_0_is_not_a_constructor_function_type_2507", "Type '{0}' is not a constructor function type."),
        No_base_constructor_has_the_specified_number_of_type_arguments: diag(2508, 1 /* Error */, "No_base_constructor_has_the_specified_number_of_type_arguments_2508", "No base constructor has the specified number of type arguments."),
        Base_constructor_return_type_0_is_not_an_object_type_or_intersection_of_object_types_with_statically_known_members: diag(2509, 1 /* Error */, "Base_constructor_return_type_0_is_not_an_object_type_or_intersection_of_object_types_with_statically_2509", "Base constructor return type '{0}' is not an object type or intersection of object types with statically known members."),
        Base_constructors_must_all_have_the_same_return_type: diag(2510, 1 /* Error */, "Base_constructors_must_all_have_the_same_return_type_2510", "Base constructors must all have the same return type."),
        Cannot_create_an_instance_of_an_abstract_class: diag(2511, 1 /* Error */, "Cannot_create_an_instance_of_an_abstract_class_2511", "Cannot create an instance of an abstract class."),
        Overload_signatures_must_all_be_abstract_or_non_abstract: diag(2512, 1 /* Error */, "Overload_signatures_must_all_be_abstract_or_non_abstract_2512", "Overload signatures must all be abstract or non-abstract."),
        Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression: diag(2513, 1 /* Error */, "Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression_2513", "Abstract method '{0}' in class '{1}' cannot be accessed via super expression."),
        A_tuple_type_cannot_be_indexed_with_a_negative_value: diag(2514, 1 /* Error */, "A_tuple_type_cannot_be_indexed_with_a_negative_value_2514", "A tuple type cannot be indexed with a negative value."),
        Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2: diag(2515, 1 /* Error */, "Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2_2515", "Non-abstract class '{0}' does not implement inherited abstract member '{1}' from class '{2}'."),
        All_declarations_of_an_abstract_method_must_be_consecutive: diag(2516, 1 /* Error */, "All_declarations_of_an_abstract_method_must_be_consecutive_2516", "All declarations of an abstract method must be consecutive."),
        Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type: diag(2517, 1 /* Error */, "Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type_2517", "Cannot assign an abstract constructor type to a non-abstract constructor type."),
        A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard: diag(2518, 1 /* Error */, "A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard_2518", "A 'this'-based type guard is not compatible with a parameter-based type guard."),
        An_async_iterator_must_have_a_next_method: diag(2519, 1 /* Error */, "An_async_iterator_must_have_a_next_method_2519", "An async iterator must have a 'next()' method."),
        Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions: diag(2520, 1 /* Error */, "Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions_2520", "Duplicate identifier '{0}'. Compiler uses declaration '{1}' to support async functions."),
        The_arguments_object_cannot_be_referenced_in_an_async_function_or_method_in_ES3_and_ES5_Consider_using_a_standard_function_or_method: diag(2522, 1 /* Error */, "The_arguments_object_cannot_be_referenced_in_an_async_function_or_method_in_ES3_and_ES5_Consider_usi_2522", "The 'arguments' object cannot be referenced in an async function or method in ES3 and ES5. Consider using a standard function or method."),
        yield_expressions_cannot_be_used_in_a_parameter_initializer: diag(2523, 1 /* Error */, "yield_expressions_cannot_be_used_in_a_parameter_initializer_2523", "'yield' expressions cannot be used in a parameter initializer."),
        await_expressions_cannot_be_used_in_a_parameter_initializer: diag(2524, 1 /* Error */, "await_expressions_cannot_be_used_in_a_parameter_initializer_2524", "'await' expressions cannot be used in a parameter initializer."),
        Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value: diag(2525, 1 /* Error */, "Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value_2525", "Initializer provides no value for this binding element and the binding element has no default value."),
        A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface: diag(2526, 1 /* Error */, "A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface_2526", "A 'this' type is available only in a non-static member of a class or interface."),
        The_inferred_type_of_0_references_an_inaccessible_1_type_A_type_annotation_is_necessary: diag(2527, 1 /* Error */, "The_inferred_type_of_0_references_an_inaccessible_1_type_A_type_annotation_is_necessary_2527", "The inferred type of '{0}' references an inaccessible '{1}' type. A type annotation is necessary."),
        A_module_cannot_have_multiple_default_exports: diag(2528, 1 /* Error */, "A_module_cannot_have_multiple_default_exports_2528", "A module cannot have multiple default exports."),
        Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_functions: diag(2529, 1 /* Error */, "Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_func_2529", "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module containing async functions."),
        Property_0_is_incompatible_with_index_signature: diag(2530, 1 /* Error */, "Property_0_is_incompatible_with_index_signature_2530", "Property '{0}' is incompatible with index signature."),
        Object_is_possibly_null: diag(2531, 1 /* Error */, "Object_is_possibly_null_2531", "Object is possibly 'null'."),
        Object_is_possibly_undefined: diag(2532, 1 /* Error */, "Object_is_possibly_undefined_2532", "Object is possibly 'undefined'."),
        Object_is_possibly_null_or_undefined: diag(2533, 1 /* Error */, "Object_is_possibly_null_or_undefined_2533", "Object is possibly 'null' or 'undefined'."),
        A_function_returning_never_cannot_have_a_reachable_end_point: diag(2534, 1 /* Error */, "A_function_returning_never_cannot_have_a_reachable_end_point_2534", "A function returning 'never' cannot have a reachable end point."),
        Type_0_cannot_be_used_to_index_type_1: diag(2536, 1 /* Error */, "Type_0_cannot_be_used_to_index_type_1_2536", "Type '{0}' cannot be used to index type '{1}'."),
        Type_0_has_no_matching_index_signature_for_type_1: diag(2537, 1 /* Error */, "Type_0_has_no_matching_index_signature_for_type_1_2537", "Type '{0}' has no matching index signature for type '{1}'."),
        Type_0_cannot_be_used_as_an_index_type: diag(2538, 1 /* Error */, "Type_0_cannot_be_used_as_an_index_type_2538", "Type '{0}' cannot be used as an index type."),
        Cannot_assign_to_0_because_it_is_not_a_variable: diag(2539, 1 /* Error */, "Cannot_assign_to_0_because_it_is_not_a_variable_2539", "Cannot assign to '{0}' because it is not a variable."),
        Cannot_assign_to_0_because_it_is_a_read_only_property: diag(2540, 1 /* Error */, "Cannot_assign_to_0_because_it_is_a_read_only_property_2540", "Cannot assign to '{0}' because it is a read-only property."),
        Index_signature_in_type_0_only_permits_reading: diag(2542, 1 /* Error */, "Index_signature_in_type_0_only_permits_reading_2542", "Index signature in type '{0}' only permits reading."),
        Duplicate_identifier_newTarget_Compiler_uses_variable_declaration_newTarget_to_capture_new_target_meta_property_reference: diag(2543, 1 /* Error */, "Duplicate_identifier_newTarget_Compiler_uses_variable_declaration_newTarget_to_capture_new_target_me_2543", "Duplicate identifier '_newTarget'. Compiler uses variable declaration '_newTarget' to capture 'new.target' meta-property reference."),
        Expression_resolves_to_variable_declaration_newTarget_that_compiler_uses_to_capture_new_target_meta_property_reference: diag(2544, 1 /* Error */, "Expression_resolves_to_variable_declaration_newTarget_that_compiler_uses_to_capture_new_target_meta__2544", "Expression resolves to variable declaration '_newTarget' that compiler uses to capture 'new.target' meta-property reference."),
        A_mixin_class_must_have_a_constructor_with_a_single_rest_parameter_of_type_any: diag(2545, 1 /* Error */, "A_mixin_class_must_have_a_constructor_with_a_single_rest_parameter_of_type_any_2545", "A mixin class must have a constructor with a single rest parameter of type 'any[]'."),
        The_type_returned_by_the_0_method_of_an_async_iterator_must_be_a_promise_for_a_type_with_a_value_property: diag(2547, 1 /* Error */, "The_type_returned_by_the_0_method_of_an_async_iterator_must_be_a_promise_for_a_type_with_a_value_pro_2547", "The type returned by the '{0}()' method of an async iterator must be a promise for a type with a 'value' property."),
        Type_0_is_not_an_array_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator: diag(2548, 1 /* Error */, "Type_0_is_not_an_array_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator_2548", "Type '{0}' is not an array type or does not have a '[Symbol.iterator]()' method that returns an iterator."),
        Type_0_is_not_an_array_type_or_a_string_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator: diag(2549, 1 /* Error */, "Type_0_is_not_an_array_type_or_a_string_type_or_does_not_have_a_Symbol_iterator_method_that_returns__2549", "Type '{0}' is not an array type or a string type or does not have a '[Symbol.iterator]()' method that returns an iterator."),
        Property_0_does_not_exist_on_type_1_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2_or_later: diag(2550, 1 /* Error */, "Property_0_does_not_exist_on_type_1_Do_you_need_to_change_your_target_library_Try_changing_the_lib_c_2550", "Property '{0}' does not exist on type '{1}'. Do you need to change your target library? Try changing the 'lib' compiler option to '{2}' or later."),
        Property_0_does_not_exist_on_type_1_Did_you_mean_2: diag(2551, 1 /* Error */, "Property_0_does_not_exist_on_type_1_Did_you_mean_2_2551", "Property '{0}' does not exist on type '{1}'. Did you mean '{2}'?"),
        Cannot_find_name_0_Did_you_mean_1: diag(2552, 1 /* Error */, "Cannot_find_name_0_Did_you_mean_1_2552", "Cannot find name '{0}'. Did you mean '{1}'?"),
        Computed_values_are_not_permitted_in_an_enum_with_string_valued_members: diag(2553, 1 /* Error */, "Computed_values_are_not_permitted_in_an_enum_with_string_valued_members_2553", "Computed values are not permitted in an enum with string valued members."),
        Expected_0_arguments_but_got_1: diag(2554, 1 /* Error */, "Expected_0_arguments_but_got_1_2554", "Expected {0} arguments, but got {1}."),
        Expected_at_least_0_arguments_but_got_1: diag(2555, 1 /* Error */, "Expected_at_least_0_arguments_but_got_1_2555", "Expected at least {0} arguments, but got {1}."),
        A_spread_argument_must_either_have_a_tuple_type_or_be_passed_to_a_rest_parameter: diag(2556, 1 /* Error */, "A_spread_argument_must_either_have_a_tuple_type_or_be_passed_to_a_rest_parameter_2556", "A spread argument must either have a tuple type or be passed to a rest parameter."),
        Expected_0_type_arguments_but_got_1: diag(2558, 1 /* Error */, "Expected_0_type_arguments_but_got_1_2558", "Expected {0} type arguments, but got {1}."),
        Type_0_has_no_properties_in_common_with_type_1: diag(2559, 1 /* Error */, "Type_0_has_no_properties_in_common_with_type_1_2559", "Type '{0}' has no properties in common with type '{1}'."),
        Value_of_type_0_has_no_properties_in_common_with_type_1_Did_you_mean_to_call_it: diag(2560, 1 /* Error */, "Value_of_type_0_has_no_properties_in_common_with_type_1_Did_you_mean_to_call_it_2560", "Value of type '{0}' has no properties in common with type '{1}'. Did you mean to call it?"),
        Object_literal_may_only_specify_known_properties_but_0_does_not_exist_in_type_1_Did_you_mean_to_write_2: diag(2561, 1 /* Error */, "Object_literal_may_only_specify_known_properties_but_0_does_not_exist_in_type_1_Did_you_mean_to_writ_2561", "Object literal may only specify known properties, but '{0}' does not exist in type '{1}'. Did you mean to write '{2}'?"),
        Base_class_expressions_cannot_reference_class_type_parameters: diag(2562, 1 /* Error */, "Base_class_expressions_cannot_reference_class_type_parameters_2562", "Base class expressions cannot reference class type parameters."),
        The_containing_function_or_module_body_is_too_large_for_control_flow_analysis: diag(2563, 1 /* Error */, "The_containing_function_or_module_body_is_too_large_for_control_flow_analysis_2563", "The containing function or module body is too large for control flow analysis."),
        Property_0_has_no_initializer_and_is_not_definitely_assigned_in_the_constructor: diag(2564, 1 /* Error */, "Property_0_has_no_initializer_and_is_not_definitely_assigned_in_the_constructor_2564", "Property '{0}' has no initializer and is not definitely assigned in the constructor."),
        Property_0_is_used_before_being_assigned: diag(2565, 1 /* Error */, "Property_0_is_used_before_being_assigned_2565", "Property '{0}' is used before being assigned."),
        A_rest_element_cannot_have_a_property_name: diag(2566, 1 /* Error */, "A_rest_element_cannot_have_a_property_name_2566", "A rest element cannot have a property name."),
        Enum_declarations_can_only_merge_with_namespace_or_other_enum_declarations: diag(2567, 1 /* Error */, "Enum_declarations_can_only_merge_with_namespace_or_other_enum_declarations_2567", "Enum declarations can only merge with namespace or other enum declarations."),
        Property_0_may_not_exist_on_type_1_Did_you_mean_2: diag(2568, 1 /* Error */, "Property_0_may_not_exist_on_type_1_Did_you_mean_2_2568", "Property '{0}' may not exist on type '{1}'. Did you mean '{2}'?"),
        Could_not_find_name_0_Did_you_mean_1: diag(2570, 1 /* Error */, "Could_not_find_name_0_Did_you_mean_1_2570", "Could not find name '{0}'. Did you mean '{1}'?"),
        Object_is_of_type_unknown: diag(2571, 1 /* Error */, "Object_is_of_type_unknown_2571", "Object is of type 'unknown'."),
        A_rest_element_type_must_be_an_array_type: diag(2574, 1 /* Error */, "A_rest_element_type_must_be_an_array_type_2574", "A rest element type must be an array type."),
        No_overload_expects_0_arguments_but_overloads_do_exist_that_expect_either_1_or_2_arguments: diag(2575, 1 /* Error */, "No_overload_expects_0_arguments_but_overloads_do_exist_that_expect_either_1_or_2_arguments_2575", "No overload expects {0} arguments, but overloads do exist that expect either {1} or {2} arguments."),
        Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead: diag(2576, 1 /* Error */, "Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead_2576", "Property '{0}' does not exist on type '{1}'. Did you mean to access the static member '{2}' instead?"),
        Return_type_annotation_circularly_references_itself: diag(2577, 1 /* Error */, "Return_type_annotation_circularly_references_itself_2577", "Return type annotation circularly references itself."),
        Unused_ts_expect_error_directive: diag(2578, 1 /* Error */, "Unused_ts_expect_error_directive_2578", "Unused '@ts-expect-error' directive."),
        Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode: diag(2580, 1 /* Error */, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashno_2580", "Cannot find name '{0}'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node`."),
        Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery: diag(2581, 1 /* Error */, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slash_2581", "Cannot find name '{0}'. Do you need to install type definitions for jQuery? Try `npm i --save-dev @types/jquery`."),
        Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha: diag(2582, 1 /* Error */, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_type_2582", "Cannot find name '{0}'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`."),
        Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_1_or_later: diag(2583, 1 /* Error */, "Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2583", "Cannot find name '{0}'. Do you need to change your target library? Try changing the 'lib' compiler option to '{1}' or later."),
        Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_include_dom: diag(2584, 1 /* Error */, "Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2584", "Cannot find name '{0}'. Do you need to change your target library? Try changing the 'lib' compiler option to include 'dom'."),
        _0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_es2015_or_later: diag(2585, 1 /* Error */, "_0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Do_you_need_to_change_your_target_library_2585", "'{0}' only refers to a type, but is being used as a value here. Do you need to change your target library? Try changing the 'lib' compiler option to es2015 or later."),
        Cannot_assign_to_0_because_it_is_a_constant: diag(2588, 1 /* Error */, "Cannot_assign_to_0_because_it_is_a_constant_2588", "Cannot assign to '{0}' because it is a constant."),
        Type_instantiation_is_excessively_deep_and_possibly_infinite: diag(2589, 1 /* Error */, "Type_instantiation_is_excessively_deep_and_possibly_infinite_2589", "Type instantiation is excessively deep and possibly infinite."),
        Expression_produces_a_union_type_that_is_too_complex_to_represent: diag(2590, 1 /* Error */, "Expression_produces_a_union_type_that_is_too_complex_to_represent_2590", "Expression produces a union type that is too complex to represent."),
        Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode_and_then_add_node_to_the_types_field_in_your_tsconfig: diag(2591, 1 /* Error */, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashno_2591", "Cannot find name '{0}'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node` and then add 'node' to the types field in your tsconfig."),
        Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery_and_then_add_jquery_to_the_types_field_in_your_tsconfig: diag(2592, 1 /* Error */, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slash_2592", "Cannot find name '{0}'. Do you need to install type definitions for jQuery? Try `npm i --save-dev @types/jquery` and then add 'jquery' to the types field in your tsconfig."),
        Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha_and_then_add_jest_or_mocha_to_the_types_field_in_your_tsconfig: diag(2593, 1 /* Error */, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_type_2593", "Cannot find name '{0}'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha` and then add 'jest' or 'mocha' to the types field in your tsconfig."),
        This_module_is_declared_with_export_and_can_only_be_used_with_a_default_import_when_using_the_0_flag: diag(2594, 1 /* Error */, "This_module_is_declared_with_export_and_can_only_be_used_with_a_default_import_when_using_the_0_flag_2594", "This module is declared with 'export =', and can only be used with a default import when using the '{0}' flag."),
        _0_can_only_be_imported_by_using_a_default_import: diag(2595, 1 /* Error */, "_0_can_only_be_imported_by_using_a_default_import_2595", "'{0}' can only be imported by using a default import."),
        _0_can_only_be_imported_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import: diag(2596, 1 /* Error */, "_0_can_only_be_imported_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import_2596", "'{0}' can only be imported by turning on the 'esModuleInterop' flag and using a default import."),
        _0_can_only_be_imported_by_using_a_require_call_or_by_using_a_default_import: diag(2597, 1 /* Error */, "_0_can_only_be_imported_by_using_a_require_call_or_by_using_a_default_import_2597", "'{0}' can only be imported by using a 'require' call or by using a default import."),
        _0_can_only_be_imported_by_using_a_require_call_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import: diag(2598, 1 /* Error */, "_0_can_only_be_imported_by_using_a_require_call_or_by_turning_on_the_esModuleInterop_flag_and_using__2598", "'{0}' can only be imported by using a 'require' call or by turning on the 'esModuleInterop' flag and using a default import."),
        JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist: diag(2602, 1 /* Error */, "JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist_2602", "JSX element implicitly has type 'any' because the global type 'JSX.Element' does not exist."),
        Property_0_in_type_1_is_not_assignable_to_type_2: diag(2603, 1 /* Error */, "Property_0_in_type_1_is_not_assignable_to_type_2_2603", "Property '{0}' in type '{1}' is not assignable to type '{2}'."),
        JSX_element_type_0_does_not_have_any_construct_or_call_signatures: diag(2604, 1 /* Error */, "JSX_element_type_0_does_not_have_any_construct_or_call_signatures_2604", "JSX element type '{0}' does not have any construct or call signatures."),
        Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property: diag(2606, 1 /* Error */, "Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property_2606", "Property '{0}' of JSX spread attribute is not assignable to target property."),
        JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property: diag(2607, 1 /* Error */, "JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property_2607", "JSX element class does not support attributes because it does not have a '{0}' property."),
        The_global_type_JSX_0_may_not_have_more_than_one_property: diag(2608, 1 /* Error */, "The_global_type_JSX_0_may_not_have_more_than_one_property_2608", "The global type 'JSX.{0}' may not have more than one property."),
        JSX_spread_child_must_be_an_array_type: diag(2609, 1 /* Error */, "JSX_spread_child_must_be_an_array_type_2609", "JSX spread child must be an array type."),
        _0_is_defined_as_an_accessor_in_class_1_but_is_overridden_here_in_2_as_an_instance_property: diag(2610, 1 /* Error */, "_0_is_defined_as_an_accessor_in_class_1_but_is_overridden_here_in_2_as_an_instance_property_2610", "'{0}' is defined as an accessor in class '{1}', but is overridden here in '{2}' as an instance property."),
        _0_is_defined_as_a_property_in_class_1_but_is_overridden_here_in_2_as_an_accessor: diag(2611, 1 /* Error */, "_0_is_defined_as_a_property_in_class_1_but_is_overridden_here_in_2_as_an_accessor_2611", "'{0}' is defined as a property in class '{1}', but is overridden here in '{2}' as an accessor."),
        Property_0_will_overwrite_the_base_property_in_1_If_this_is_intentional_add_an_initializer_Otherwise_add_a_declare_modifier_or_remove_the_redundant_declaration: diag(2612, 1 /* Error */, "Property_0_will_overwrite_the_base_property_in_1_If_this_is_intentional_add_an_initializer_Otherwise_2612", "Property '{0}' will overwrite the base property in '{1}'. If this is intentional, add an initializer. Otherwise, add a 'declare' modifier or remove the redundant declaration."),
        Module_0_has_no_default_export_Did_you_mean_to_use_import_1_from_0_instead: diag(2613, 1 /* Error */, "Module_0_has_no_default_export_Did_you_mean_to_use_import_1_from_0_instead_2613", "Module '{0}' has no default export. Did you mean to use 'import { {1} } from {0}' instead?"),
        Module_0_has_no_exported_member_1_Did_you_mean_to_use_import_1_from_0_instead: diag(2614, 1 /* Error */, "Module_0_has_no_exported_member_1_Did_you_mean_to_use_import_1_from_0_instead_2614", "Module '{0}' has no exported member '{1}'. Did you mean to use 'import {1} from {0}' instead?"),
        Type_of_property_0_circularly_references_itself_in_mapped_type_1: diag(2615, 1 /* Error */, "Type_of_property_0_circularly_references_itself_in_mapped_type_1_2615", "Type of property '{0}' circularly references itself in mapped type '{1}'."),
        _0_can_only_be_imported_by_using_import_1_require_2_or_a_default_import: diag(2616, 1 /* Error */, "_0_can_only_be_imported_by_using_import_1_require_2_or_a_default_import_2616", "'{0}' can only be imported by using 'import {1} = require({2})' or a default import."),
        _0_can_only_be_imported_by_using_import_1_require_2_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import: diag(2617, 1 /* Error */, "_0_can_only_be_imported_by_using_import_1_require_2_or_by_turning_on_the_esModuleInterop_flag_and_us_2617", "'{0}' can only be imported by using 'import {1} = require({2})' or by turning on the 'esModuleInterop' flag and using a default import."),
        Source_has_0_element_s_but_target_requires_1: diag(2618, 1 /* Error */, "Source_has_0_element_s_but_target_requires_1_2618", "Source has {0} element(s) but target requires {1}."),
        Source_has_0_element_s_but_target_allows_only_1: diag(2619, 1 /* Error */, "Source_has_0_element_s_but_target_allows_only_1_2619", "Source has {0} element(s) but target allows only {1}."),
        Target_requires_0_element_s_but_source_may_have_fewer: diag(2620, 1 /* Error */, "Target_requires_0_element_s_but_source_may_have_fewer_2620", "Target requires {0} element(s) but source may have fewer."),
        Target_allows_only_0_element_s_but_source_may_have_more: diag(2621, 1 /* Error */, "Target_allows_only_0_element_s_but_source_may_have_more_2621", "Target allows only {0} element(s) but source may have more."),
        Source_provides_no_match_for_required_element_at_position_0_in_target: diag(2623, 1 /* Error */, "Source_provides_no_match_for_required_element_at_position_0_in_target_2623", "Source provides no match for required element at position {0} in target."),
        Source_provides_no_match_for_variadic_element_at_position_0_in_target: diag(2624, 1 /* Error */, "Source_provides_no_match_for_variadic_element_at_position_0_in_target_2624", "Source provides no match for variadic element at position {0} in target."),
        Variadic_element_at_position_0_in_source_does_not_match_element_at_position_1_in_target: diag(2625, 1 /* Error */, "Variadic_element_at_position_0_in_source_does_not_match_element_at_position_1_in_target_2625", "Variadic element at position {0} in source does not match element at position {1} in target."),
        Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target: diag(2626, 1 /* Error */, "Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target_2626", "Type at position {0} in source is not compatible with type at position {1} in target."),
        Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target: diag(2627, 1 /* Error */, "Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target_2627", "Type at positions {0} through {1} in source is not compatible with type at position {2} in target."),
        Cannot_assign_to_0_because_it_is_an_enum: diag(2628, 1 /* Error */, "Cannot_assign_to_0_because_it_is_an_enum_2628", "Cannot assign to '{0}' because it is an enum."),
        Cannot_assign_to_0_because_it_is_a_class: diag(2629, 1 /* Error */, "Cannot_assign_to_0_because_it_is_a_class_2629", "Cannot assign to '{0}' because it is a class."),
        Cannot_assign_to_0_because_it_is_a_function: diag(2630, 1 /* Error */, "Cannot_assign_to_0_because_it_is_a_function_2630", "Cannot assign to '{0}' because it is a function."),
        Cannot_assign_to_0_because_it_is_a_namespace: diag(2631, 1 /* Error */, "Cannot_assign_to_0_because_it_is_a_namespace_2631", "Cannot assign to '{0}' because it is a namespace."),
        Cannot_assign_to_0_because_it_is_an_import: diag(2632, 1 /* Error */, "Cannot_assign_to_0_because_it_is_an_import_2632", "Cannot assign to '{0}' because it is an import."),
        JSX_property_access_expressions_cannot_include_JSX_namespace_names: diag(2633, 1 /* Error */, "JSX_property_access_expressions_cannot_include_JSX_namespace_names_2633", "JSX property access expressions cannot include JSX namespace names"),
        _0_index_signatures_are_incompatible: diag(2634, 1 /* Error */, "_0_index_signatures_are_incompatible_2634", "'{0}' index signatures are incompatible."),
        Type_0_has_no_signatures_for_which_the_type_argument_list_is_applicable: diag(2635, 1 /* Error */, "Type_0_has_no_signatures_for_which_the_type_argument_list_is_applicable_2635", "Type '{0}' has no signatures for which the type argument list is applicable."),
        Type_0_is_not_assignable_to_type_1_as_implied_by_variance_annotation: diag(2636, 1 /* Error */, "Type_0_is_not_assignable_to_type_1_as_implied_by_variance_annotation_2636", "Type '{0}' is not assignable to type '{1}' as implied by variance annotation."),
        Variance_annotations_are_only_supported_in_type_aliases_for_object_function_constructor_and_mapped_types: diag(2637, 1 /* Error */, "Variance_annotations_are_only_supported_in_type_aliases_for_object_function_constructor_and_mapped_t_2637", "Variance annotations are only supported in type aliases for object, function, constructor, and mapped types."),
        Type_0_may_represent_a_primitive_value_which_is_not_permitted_as_the_right_operand_of_the_in_operator: diag(2638, 1 /* Error */, "Type_0_may_represent_a_primitive_value_which_is_not_permitted_as_the_right_operand_of_the_in_operato_2638", "Type '{0}' may represent a primitive value, which is not permitted as the right operand of the 'in' operator."),
        Cannot_augment_module_0_with_value_exports_because_it_resolves_to_a_non_module_entity: diag(2649, 1 /* Error */, "Cannot_augment_module_0_with_value_exports_because_it_resolves_to_a_non_module_entity_2649", "Cannot augment module '{0}' with value exports because it resolves to a non-module entity."),
        A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums: diag(2651, 1 /* Error */, "A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_memb_2651", "A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums."),
        Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_default_0_declaration_instead: diag(2652, 1 /* Error */, "Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_d_2652", "Merged declaration '{0}' cannot include a default export declaration. Consider adding a separate 'export default {0}' declaration instead."),
        Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1: diag(2653, 1 /* Error */, "Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1_2653", "Non-abstract class expression does not implement inherited abstract member '{0}' from class '{1}'."),
        JSX_expressions_must_have_one_parent_element: diag(2657, 1 /* Error */, "JSX_expressions_must_have_one_parent_element_2657", "JSX expressions must have one parent element."),
        Type_0_provides_no_match_for_the_signature_1: diag(2658, 1 /* Error */, "Type_0_provides_no_match_for_the_signature_1_2658", "Type '{0}' provides no match for the signature '{1}'."),
        super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_higher: diag(2659, 1 /* Error */, "super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_highe_2659", "'super' is only allowed in members of object literal expressions when option 'target' is 'ES2015' or higher."),
        super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions: diag(2660, 1 /* Error */, "super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions_2660", "'super' can only be referenced in members of derived classes or object literal expressions."),
        Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module: diag(2661, 1 /* Error */, "Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module_2661", "Cannot export '{0}'. Only local declarations can be exported from a module."),
        Cannot_find_name_0_Did_you_mean_the_static_member_1_0: diag(2662, 1 /* Error */, "Cannot_find_name_0_Did_you_mean_the_static_member_1_0_2662", "Cannot find name '{0}'. Did you mean the static member '{1}.{0}'?"),
        Cannot_find_name_0_Did_you_mean_the_instance_member_this_0: diag(2663, 1 /* Error */, "Cannot_find_name_0_Did_you_mean_the_instance_member_this_0_2663", "Cannot find name '{0}'. Did you mean the instance member 'this.{0}'?"),
        Invalid_module_name_in_augmentation_module_0_cannot_be_found: diag(2664, 1 /* Error */, "Invalid_module_name_in_augmentation_module_0_cannot_be_found_2664", "Invalid module name in augmentation, module '{0}' cannot be found."),
        Invalid_module_name_in_augmentation_Module_0_resolves_to_an_untyped_module_at_1_which_cannot_be_augmented: diag(2665, 1 /* Error */, "Invalid_module_name_in_augmentation_Module_0_resolves_to_an_untyped_module_at_1_which_cannot_be_augm_2665", "Invalid module name in augmentation. Module '{0}' resolves to an untyped module at '{1}', which cannot be augmented."),
        Exports_and_export_assignments_are_not_permitted_in_module_augmentations: diag(2666, 1 /* Error */, "Exports_and_export_assignments_are_not_permitted_in_module_augmentations_2666", "Exports and export assignments are not permitted in module augmentations."),
        Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_module: diag(2667, 1 /* Error */, "Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_mod_2667", "Imports are not permitted in module augmentations. Consider moving them to the enclosing external module."),
        export_modifier_cannot_be_applied_to_ambient_modules_and_module_augmentations_since_they_are_always_visible: diag(2668, 1 /* Error */, "export_modifier_cannot_be_applied_to_ambient_modules_and_module_augmentations_since_they_are_always__2668", "'export' modifier cannot be applied to ambient modules and module augmentations since they are always visible."),
        Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations: diag(2669, 1 /* Error */, "Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_2669", "Augmentations for the global scope can only be directly nested in external modules or ambient module declarations."),
        Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambient_context: diag(2670, 1 /* Error */, "Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambien_2670", "Augmentations for the global scope should have 'declare' modifier unless they appear in already ambient context."),
        Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity: diag(2671, 1 /* Error */, "Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity_2671", "Cannot augment module '{0}' because it resolves to a non-module entity."),
        Cannot_assign_a_0_constructor_type_to_a_1_constructor_type: diag(2672, 1 /* Error */, "Cannot_assign_a_0_constructor_type_to_a_1_constructor_type_2672", "Cannot assign a '{0}' constructor type to a '{1}' constructor type."),
        Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration: diag(2673, 1 /* Error */, "Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration_2673", "Constructor of class '{0}' is private and only accessible within the class declaration."),
        Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration: diag(2674, 1 /* Error */, "Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration_2674", "Constructor of class '{0}' is protected and only accessible within the class declaration."),
        Cannot_extend_a_class_0_Class_constructor_is_marked_as_private: diag(2675, 1 /* Error */, "Cannot_extend_a_class_0_Class_constructor_is_marked_as_private_2675", "Cannot extend a class '{0}'. Class constructor is marked as private."),
        Accessors_must_both_be_abstract_or_non_abstract: diag(2676, 1 /* Error */, "Accessors_must_both_be_abstract_or_non_abstract_2676", "Accessors must both be abstract or non-abstract."),
        A_type_predicate_s_type_must_be_assignable_to_its_parameter_s_type: diag(2677, 1 /* Error */, "A_type_predicate_s_type_must_be_assignable_to_its_parameter_s_type_2677", "A type predicate's type must be assignable to its parameter's type."),
        Type_0_is_not_comparable_to_type_1: diag(2678, 1 /* Error */, "Type_0_is_not_comparable_to_type_1_2678", "Type '{0}' is not comparable to type '{1}'."),
        A_function_that_is_called_with_the_new_keyword_cannot_have_a_this_type_that_is_void: diag(2679, 1 /* Error */, "A_function_that_is_called_with_the_new_keyword_cannot_have_a_this_type_that_is_void_2679", "A function that is called with the 'new' keyword cannot have a 'this' type that is 'void'."),
        A_0_parameter_must_be_the_first_parameter: diag(2680, 1 /* Error */, "A_0_parameter_must_be_the_first_parameter_2680", "A '{0}' parameter must be the first parameter."),
        A_constructor_cannot_have_a_this_parameter: diag(2681, 1 /* Error */, "A_constructor_cannot_have_a_this_parameter_2681", "A constructor cannot have a 'this' parameter."),
        this_implicitly_has_type_any_because_it_does_not_have_a_type_annotation: diag(2683, 1 /* Error */, "this_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_2683", "'this' implicitly has type 'any' because it does not have a type annotation."),
        The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1: diag(2684, 1 /* Error */, "The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1_2684", "The 'this' context of type '{0}' is not assignable to method's 'this' of type '{1}'."),
        The_this_types_of_each_signature_are_incompatible: diag(2685, 1 /* Error */, "The_this_types_of_each_signature_are_incompatible_2685", "The 'this' types of each signature are incompatible."),
        _0_refers_to_a_UMD_global_but_the_current_file_is_a_module_Consider_adding_an_import_instead: diag(2686, 1 /* Error */, "_0_refers_to_a_UMD_global_but_the_current_file_is_a_module_Consider_adding_an_import_instead_2686", "'{0}' refers to a UMD global, but the current file is a module. Consider adding an import instead."),
        All_declarations_of_0_must_have_identical_modifiers: diag(2687, 1 /* Error */, "All_declarations_of_0_must_have_identical_modifiers_2687", "All declarations of '{0}' must have identical modifiers."),
        Cannot_find_type_definition_file_for_0: diag(2688, 1 /* Error */, "Cannot_find_type_definition_file_for_0_2688", "Cannot find type definition file for '{0}'."),
        Cannot_extend_an_interface_0_Did_you_mean_implements: diag(2689, 1 /* Error */, "Cannot_extend_an_interface_0_Did_you_mean_implements_2689", "Cannot extend an interface '{0}'. Did you mean 'implements'?"),
        _0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Did_you_mean_to_use_1_in_0: diag(2690, 1 /* Error */, "_0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Did_you_mean_to_use_1_in_0_2690", "'{0}' only refers to a type, but is being used as a value here. Did you mean to use '{1} in {0}'?"),
        _0_is_a_primitive_but_1_is_a_wrapper_object_Prefer_using_0_when_possible: diag(2692, 1 /* Error */, "_0_is_a_primitive_but_1_is_a_wrapper_object_Prefer_using_0_when_possible_2692", "'{0}' is a primitive, but '{1}' is a wrapper object. Prefer using '{0}' when possible."),
        _0_only_refers_to_a_type_but_is_being_used_as_a_value_here: diag(2693, 1 /* Error */, "_0_only_refers_to_a_type_but_is_being_used_as_a_value_here_2693", "'{0}' only refers to a type, but is being used as a value here."),
        Namespace_0_has_no_exported_member_1: diag(2694, 1 /* Error */, "Namespace_0_has_no_exported_member_1_2694", "Namespace '{0}' has no exported member '{1}'."),
        Left_side_of_comma_operator_is_unused_and_has_no_side_effects: diag(
          2695,
          1 /* Error */,
          "Left_side_of_comma_operator_is_unused_and_has_no_side_effects_2695",
          "Left side of comma operator is unused and has no side effects.",
          /*reportsUnnecessary*/
          true
        ),
        The_Object_type_is_assignable_to_very_few_other_types_Did_you_mean_to_use_the_any_type_instead: diag(2696, 1 /* Error */, "The_Object_type_is_assignable_to_very_few_other_types_Did_you_mean_to_use_the_any_type_instead_2696", "The 'Object' type is assignable to very few other types. Did you mean to use the 'any' type instead?"),
        An_async_function_or_method_must_return_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option: diag(2697, 1 /* Error */, "An_async_function_or_method_must_return_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_in_2697", "An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option."),
        Spread_types_may_only_be_created_from_object_types: diag(2698, 1 /* Error */, "Spread_types_may_only_be_created_from_object_types_2698", "Spread types may only be created from object types."),
        Static_property_0_conflicts_with_built_in_property_Function_0_of_constructor_function_1: diag(2699, 1 /* Error */, "Static_property_0_conflicts_with_built_in_property_Function_0_of_constructor_function_1_2699", "Static property '{0}' conflicts with built-in property 'Function.{0}' of constructor function '{1}'."),
        Rest_types_may_only_be_created_from_object_types: diag(2700, 1 /* Error */, "Rest_types_may_only_be_created_from_object_types_2700", "Rest types may only be created from object types."),
        The_target_of_an_object_rest_assignment_must_be_a_variable_or_a_property_access: diag(2701, 1 /* Error */, "The_target_of_an_object_rest_assignment_must_be_a_variable_or_a_property_access_2701", "The target of an object rest assignment must be a variable or a property access."),
        _0_only_refers_to_a_type_but_is_being_used_as_a_namespace_here: diag(2702, 1 /* Error */, "_0_only_refers_to_a_type_but_is_being_used_as_a_namespace_here_2702", "'{0}' only refers to a type, but is being used as a namespace here."),
        The_operand_of_a_delete_operator_must_be_a_property_reference: diag(2703, 1 /* Error */, "The_operand_of_a_delete_operator_must_be_a_property_reference_2703", "The operand of a 'delete' operator must be a property reference."),
        The_operand_of_a_delete_operator_cannot_be_a_read_only_property: diag(2704, 1 /* Error */, "The_operand_of_a_delete_operator_cannot_be_a_read_only_property_2704", "The operand of a 'delete' operator cannot be a read-only property."),
        An_async_function_or_method_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option: diag(2705, 1 /* Error */, "An_async_function_or_method_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_de_2705", "An async function or method in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option."),
        Required_type_parameters_may_not_follow_optional_type_parameters: diag(2706, 1 /* Error */, "Required_type_parameters_may_not_follow_optional_type_parameters_2706", "Required type parameters may not follow optional type parameters."),
        Generic_type_0_requires_between_1_and_2_type_arguments: diag(2707, 1 /* Error */, "Generic_type_0_requires_between_1_and_2_type_arguments_2707", "Generic type '{0}' requires between {1} and {2} type arguments."),
        Cannot_use_namespace_0_as_a_value: diag(2708, 1 /* Error */, "Cannot_use_namespace_0_as_a_value_2708", "Cannot use namespace '{0}' as a value."),
        Cannot_use_namespace_0_as_a_type: diag(2709, 1 /* Error */, "Cannot_use_namespace_0_as_a_type_2709", "Cannot use namespace '{0}' as a type."),
        _0_are_specified_twice_The_attribute_named_0_will_be_overwritten: diag(2710, 1 /* Error */, "_0_are_specified_twice_The_attribute_named_0_will_be_overwritten_2710", "'{0}' are specified twice. The attribute named '{0}' will be overwritten."),
        A_dynamic_import_call_returns_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option: diag(2711, 1 /* Error */, "A_dynamic_import_call_returns_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES20_2711", "A dynamic import call returns a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option."),
        A_dynamic_import_call_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option: diag(2712, 1 /* Error */, "A_dynamic_import_call_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declarat_2712", "A dynamic import call in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option."),
        Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_property_1_in_0_with_0_1: diag(2713, 1 /* Error */, "Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_p_2713", `Cannot access '{0}.{1}' because '{0}' is a type, but not a namespace. Did you mean to retrieve the type of the property '{1}' in '{0}' with '{0}["{1}"]'?`),
        The_expression_of_an_export_assignment_must_be_an_identifier_or_qualified_name_in_an_ambient_context: diag(2714, 1 /* Error */, "The_expression_of_an_export_assignment_must_be_an_identifier_or_qualified_name_in_an_ambient_context_2714", "The expression of an export assignment must be an identifier or qualified name in an ambient context."),
        Abstract_property_0_in_class_1_cannot_be_accessed_in_the_constructor: diag(2715, 1 /* Error */, "Abstract_property_0_in_class_1_cannot_be_accessed_in_the_constructor_2715", "Abstract property '{0}' in class '{1}' cannot be accessed in the constructor."),
        Type_parameter_0_has_a_circular_default: diag(2716, 1 /* Error */, "Type_parameter_0_has_a_circular_default_2716", "Type parameter '{0}' has a circular default."),
        Subsequent_property_declarations_must_have_the_same_type_Property_0_must_be_of_type_1_but_here_has_type_2: diag(2717, 1 /* Error */, "Subsequent_property_declarations_must_have_the_same_type_Property_0_must_be_of_type_1_but_here_has_t_2717", "Subsequent property declarations must have the same type.  Property '{0}' must be of type '{1}', but here has type '{2}'."),
        Duplicate_property_0: diag(2718, 1 /* Error */, "Duplicate_property_0_2718", "Duplicate property '{0}'."),
        Type_0_is_not_assignable_to_type_1_Two_different_types_with_this_name_exist_but_they_are_unrelated: diag(2719, 1 /* Error */, "Type_0_is_not_assignable_to_type_1_Two_different_types_with_this_name_exist_but_they_are_unrelated_2719", "Type '{0}' is not assignable to type '{1}'. Two different types with this name exist, but they are unrelated."),
        Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclass: diag(2720, 1 /* Error */, "Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclas_2720", "Class '{0}' incorrectly implements class '{1}'. Did you mean to extend '{1}' and inherit its members as a subclass?"),
        Cannot_invoke_an_object_which_is_possibly_null: diag(2721, 1 /* Error */, "Cannot_invoke_an_object_which_is_possibly_null_2721", "Cannot invoke an object which is possibly 'null'."),
        Cannot_invoke_an_object_which_is_possibly_undefined: diag(2722, 1 /* Error */, "Cannot_invoke_an_object_which_is_possibly_undefined_2722", "Cannot invoke an object which is possibly 'undefined'."),
        Cannot_invoke_an_object_which_is_possibly_null_or_undefined: diag(2723, 1 /* Error */, "Cannot_invoke_an_object_which_is_possibly_null_or_undefined_2723", "Cannot invoke an object which is possibly 'null' or 'undefined'."),
        _0_has_no_exported_member_named_1_Did_you_mean_2: diag(2724, 1 /* Error */, "_0_has_no_exported_member_named_1_Did_you_mean_2_2724", "'{0}' has no exported member named '{1}'. Did you mean '{2}'?"),
        Class_name_cannot_be_Object_when_targeting_ES5_with_module_0: diag(2725, 1 /* Error */, "Class_name_cannot_be_Object_when_targeting_ES5_with_module_0_2725", "Class name cannot be 'Object' when targeting ES5 with module {0}."),
        Cannot_find_lib_definition_for_0: diag(2726, 1 /* Error */, "Cannot_find_lib_definition_for_0_2726", "Cannot find lib definition for '{0}'."),
        Cannot_find_lib_definition_for_0_Did_you_mean_1: diag(2727, 1 /* Error */, "Cannot_find_lib_definition_for_0_Did_you_mean_1_2727", "Cannot find lib definition for '{0}'. Did you mean '{1}'?"),
        _0_is_declared_here: diag(2728, 3 /* Message */, "_0_is_declared_here_2728", "'{0}' is declared here."),
        Property_0_is_used_before_its_initialization: diag(2729, 1 /* Error */, "Property_0_is_used_before_its_initialization_2729", "Property '{0}' is used before its initialization."),
        An_arrow_function_cannot_have_a_this_parameter: diag(2730, 1 /* Error */, "An_arrow_function_cannot_have_a_this_parameter_2730", "An arrow function cannot have a 'this' parameter."),
        Implicit_conversion_of_a_symbol_to_a_string_will_fail_at_runtime_Consider_wrapping_this_expression_in_String: diag(2731, 1 /* Error */, "Implicit_conversion_of_a_symbol_to_a_string_will_fail_at_runtime_Consider_wrapping_this_expression_i_2731", "Implicit conversion of a 'symbol' to a 'string' will fail at runtime. Consider wrapping this expression in 'String(...)'."),
        Cannot_find_module_0_Consider_using_resolveJsonModule_to_import_module_with_json_extension: diag(2732, 1 /* Error */, "Cannot_find_module_0_Consider_using_resolveJsonModule_to_import_module_with_json_extension_2732", "Cannot find module '{0}'. Consider using '--resolveJsonModule' to import module with '.json' extension."),
        Property_0_was_also_declared_here: diag(2733, 1 /* Error */, "Property_0_was_also_declared_here_2733", "Property '{0}' was also declared here."),
        Are_you_missing_a_semicolon: diag(2734, 1 /* Error */, "Are_you_missing_a_semicolon_2734", "Are you missing a semicolon?"),
        Did_you_mean_for_0_to_be_constrained_to_type_new_args_Colon_any_1: diag(2735, 1 /* Error */, "Did_you_mean_for_0_to_be_constrained_to_type_new_args_Colon_any_1_2735", "Did you mean for '{0}' to be constrained to type 'new (...args: any[]) => {1}'?"),
        Operator_0_cannot_be_applied_to_type_1: diag(2736, 1 /* Error */, "Operator_0_cannot_be_applied_to_type_1_2736", "Operator '{0}' cannot be applied to type '{1}'."),
        BigInt_literals_are_not_available_when_targeting_lower_than_ES2020: diag(2737, 1 /* Error */, "BigInt_literals_are_not_available_when_targeting_lower_than_ES2020_2737", "BigInt literals are not available when targeting lower than ES2020."),
        An_outer_value_of_this_is_shadowed_by_this_container: diag(2738, 3 /* Message */, "An_outer_value_of_this_is_shadowed_by_this_container_2738", "An outer value of 'this' is shadowed by this container."),
        Type_0_is_missing_the_following_properties_from_type_1_Colon_2: diag(2739, 1 /* Error */, "Type_0_is_missing_the_following_properties_from_type_1_Colon_2_2739", "Type '{0}' is missing the following properties from type '{1}': {2}"),
        Type_0_is_missing_the_following_properties_from_type_1_Colon_2_and_3_more: diag(2740, 1 /* Error */, "Type_0_is_missing_the_following_properties_from_type_1_Colon_2_and_3_more_2740", "Type '{0}' is missing the following properties from type '{1}': {2}, and {3} more."),
        Property_0_is_missing_in_type_1_but_required_in_type_2: diag(2741, 1 /* Error */, "Property_0_is_missing_in_type_1_but_required_in_type_2_2741", "Property '{0}' is missing in type '{1}' but required in type '{2}'."),
        The_inferred_type_of_0_cannot_be_named_without_a_reference_to_1_This_is_likely_not_portable_A_type_annotation_is_necessary: diag(2742, 1 /* Error */, "The_inferred_type_of_0_cannot_be_named_without_a_reference_to_1_This_is_likely_not_portable_A_type_a_2742", "The inferred type of '{0}' cannot be named without a reference to '{1}'. This is likely not portable. A type annotation is necessary."),
        No_overload_expects_0_type_arguments_but_overloads_do_exist_that_expect_either_1_or_2_type_arguments: diag(2743, 1 /* Error */, "No_overload_expects_0_type_arguments_but_overloads_do_exist_that_expect_either_1_or_2_type_arguments_2743", "No overload expects {0} type arguments, but overloads do exist that expect either {1} or {2} type arguments."),
        Type_parameter_defaults_can_only_reference_previously_declared_type_parameters: diag(2744, 1 /* Error */, "Type_parameter_defaults_can_only_reference_previously_declared_type_parameters_2744", "Type parameter defaults can only reference previously declared type parameters."),
        This_JSX_tag_s_0_prop_expects_type_1_which_requires_multiple_children_but_only_a_single_child_was_provided: diag(2745, 1 /* Error */, "This_JSX_tag_s_0_prop_expects_type_1_which_requires_multiple_children_but_only_a_single_child_was_pr_2745", "This JSX tag's '{0}' prop expects type '{1}' which requires multiple children, but only a single child was provided."),
        This_JSX_tag_s_0_prop_expects_a_single_child_of_type_1_but_multiple_children_were_provided: diag(2746, 1 /* Error */, "This_JSX_tag_s_0_prop_expects_a_single_child_of_type_1_but_multiple_children_were_provided_2746", "This JSX tag's '{0}' prop expects a single child of type '{1}', but multiple children were provided."),
        _0_components_don_t_accept_text_as_child_elements_Text_in_JSX_has_the_type_string_but_the_expected_type_of_1_is_2: diag(2747, 1 /* Error */, "_0_components_don_t_accept_text_as_child_elements_Text_in_JSX_has_the_type_string_but_the_expected_t_2747", "'{0}' components don't accept text as child elements. Text in JSX has the type 'string', but the expected type of '{1}' is '{2}'."),
        Cannot_access_ambient_const_enums_when_0_is_enabled: diag(2748, 1 /* Error */, "Cannot_access_ambient_const_enums_when_0_is_enabled_2748", "Cannot access ambient const enums when '{0}' is enabled."),
        _0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0: diag(2749, 1 /* Error */, "_0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0_2749", "'{0}' refers to a value, but is being used as a type here. Did you mean 'typeof {0}'?"),
        The_implementation_signature_is_declared_here: diag(2750, 1 /* Error */, "The_implementation_signature_is_declared_here_2750", "The implementation signature is declared here."),
        Circularity_originates_in_type_at_this_location: diag(2751, 1 /* Error */, "Circularity_originates_in_type_at_this_location_2751", "Circularity originates in type at this location."),
        The_first_export_default_is_here: diag(2752, 1 /* Error */, "The_first_export_default_is_here_2752", "The first export default is here."),
        Another_export_default_is_here: diag(2753, 1 /* Error */, "Another_export_default_is_here_2753", "Another export default is here."),
        super_may_not_use_type_arguments: diag(2754, 1 /* Error */, "super_may_not_use_type_arguments_2754", "'super' may not use type arguments."),
        No_constituent_of_type_0_is_callable: diag(2755, 1 /* Error */, "No_constituent_of_type_0_is_callable_2755", "No constituent of type '{0}' is callable."),
        Not_all_constituents_of_type_0_are_callable: diag(2756, 1 /* Error */, "Not_all_constituents_of_type_0_are_callable_2756", "Not all constituents of type '{0}' are callable."),
        Type_0_has_no_call_signatures: diag(2757, 1 /* Error */, "Type_0_has_no_call_signatures_2757", "Type '{0}' has no call signatures."),
        Each_member_of_the_union_type_0_has_signatures_but_none_of_those_signatures_are_compatible_with_each_other: diag(2758, 1 /* Error */, "Each_member_of_the_union_type_0_has_signatures_but_none_of_those_signatures_are_compatible_with_each_2758", "Each member of the union type '{0}' has signatures, but none of those signatures are compatible with each other."),
        No_constituent_of_type_0_is_constructable: diag(2759, 1 /* Error */, "No_constituent_of_type_0_is_constructable_2759", "No constituent of type '{0}' is constructable."),
        Not_all_constituents_of_type_0_are_constructable: diag(2760, 1 /* Error */, "Not_all_constituents_of_type_0_are_constructable_2760", "Not all constituents of type '{0}' are constructable."),
        Type_0_has_no_construct_signatures: diag(2761, 1 /* Error */, "Type_0_has_no_construct_signatures_2761", "Type '{0}' has no construct signatures."),
        Each_member_of_the_union_type_0_has_construct_signatures_but_none_of_those_signatures_are_compatible_with_each_other: diag(2762, 1 /* Error */, "Each_member_of_the_union_type_0_has_construct_signatures_but_none_of_those_signatures_are_compatible_2762", "Each member of the union type '{0}' has construct signatures, but none of those signatures are compatible with each other."),
        Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_for_of_will_always_send_0: diag(2763, 1 /* Error */, "Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_for_of_will_always_s_2763", "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but for-of will always send '{0}'."),
        Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_spread_will_always_send_0: diag(2764, 1 /* Error */, "Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_spread_will_al_2764", "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but array spread will always send '{0}'."),
        Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_destructuring_will_always_send_0: diag(2765, 1 /* Error */, "Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_destructuring__2765", "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but array destructuring will always send '{0}'."),
        Cannot_delegate_iteration_to_value_because_the_next_method_of_its_iterator_expects_type_1_but_the_containing_generator_will_always_send_0: diag(2766, 1 /* Error */, "Cannot_delegate_iteration_to_value_because_the_next_method_of_its_iterator_expects_type_1_but_the_co_2766", "Cannot delegate iteration to value because the 'next' method of its iterator expects type '{1}', but the containing generator will always send '{0}'."),
        The_0_property_of_an_iterator_must_be_a_method: diag(2767, 1 /* Error */, "The_0_property_of_an_iterator_must_be_a_method_2767", "The '{0}' property of an iterator must be a method."),
        The_0_property_of_an_async_iterator_must_be_a_method: diag(2768, 1 /* Error */, "The_0_property_of_an_async_iterator_must_be_a_method_2768", "The '{0}' property of an async iterator must be a method."),
        No_overload_matches_this_call: diag(2769, 1 /* Error */, "No_overload_matches_this_call_2769", "No overload matches this call."),
        The_last_overload_gave_the_following_error: diag(2770, 1 /* Error */, "The_last_overload_gave_the_following_error_2770", "The last overload gave the following error."),
        The_last_overload_is_declared_here: diag(2771, 1 /* Error */, "The_last_overload_is_declared_here_2771", "The last overload is declared here."),
        Overload_0_of_1_2_gave_the_following_error: diag(2772, 1 /* Error */, "Overload_0_of_1_2_gave_the_following_error_2772", "Overload {0} of {1}, '{2}', gave the following error."),
        Did_you_forget_to_use_await: diag(2773, 1 /* Error */, "Did_you_forget_to_use_await_2773", "Did you forget to use 'await'?"),
        This_condition_will_always_return_true_since_this_function_is_always_defined_Did_you_mean_to_call_it_instead: diag(2774, 1 /* Error */, "This_condition_will_always_return_true_since_this_function_is_always_defined_Did_you_mean_to_call_it_2774", "This condition will always return true since this function is always defined. Did you mean to call it instead?"),
        Assertions_require_every_name_in_the_call_target_to_be_declared_with_an_explicit_type_annotation: diag(2775, 1 /* Error */, "Assertions_require_every_name_in_the_call_target_to_be_declared_with_an_explicit_type_annotation_2775", "Assertions require every name in the call target to be declared with an explicit type annotation."),
        Assertions_require_the_call_target_to_be_an_identifier_or_qualified_name: diag(2776, 1 /* Error */, "Assertions_require_the_call_target_to_be_an_identifier_or_qualified_name_2776", "Assertions require the call target to be an identifier or qualified name."),
        The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access: diag(2777, 1 /* Error */, "The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access_2777", "The operand of an increment or decrement operator may not be an optional property access."),
        The_target_of_an_object_rest_assignment_may_not_be_an_optional_property_access: diag(2778, 1 /* Error */, "The_target_of_an_object_rest_assignment_may_not_be_an_optional_property_access_2778", "The target of an object rest assignment may not be an optional property access."),
        The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access: diag(2779, 1 /* Error */, "The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access_2779", "The left-hand side of an assignment expression may not be an optional property access."),
        The_left_hand_side_of_a_for_in_statement_may_not_be_an_optional_property_access: diag(2780, 1 /* Error */, "The_left_hand_side_of_a_for_in_statement_may_not_be_an_optional_property_access_2780", "The left-hand side of a 'for...in' statement may not be an optional property access."),
        The_left_hand_side_of_a_for_of_statement_may_not_be_an_optional_property_access: diag(2781, 1 /* Error */, "The_left_hand_side_of_a_for_of_statement_may_not_be_an_optional_property_access_2781", "The left-hand side of a 'for...of' statement may not be an optional property access."),
        _0_needs_an_explicit_type_annotation: diag(2782, 3 /* Message */, "_0_needs_an_explicit_type_annotation_2782", "'{0}' needs an explicit type annotation."),
        _0_is_specified_more_than_once_so_this_usage_will_be_overwritten: diag(2783, 1 /* Error */, "_0_is_specified_more_than_once_so_this_usage_will_be_overwritten_2783", "'{0}' is specified more than once, so this usage will be overwritten."),
        get_and_set_accessors_cannot_declare_this_parameters: diag(2784, 1 /* Error */, "get_and_set_accessors_cannot_declare_this_parameters_2784", "'get' and 'set' accessors cannot declare 'this' parameters."),
        This_spread_always_overwrites_this_property: diag(2785, 1 /* Error */, "This_spread_always_overwrites_this_property_2785", "This spread always overwrites this property."),
        _0_cannot_be_used_as_a_JSX_component: diag(2786, 1 /* Error */, "_0_cannot_be_used_as_a_JSX_component_2786", "'{0}' cannot be used as a JSX component."),
        Its_return_type_0_is_not_a_valid_JSX_element: diag(2787, 1 /* Error */, "Its_return_type_0_is_not_a_valid_JSX_element_2787", "Its return type '{0}' is not a valid JSX element."),
        Its_instance_type_0_is_not_a_valid_JSX_element: diag(2788, 1 /* Error */, "Its_instance_type_0_is_not_a_valid_JSX_element_2788", "Its instance type '{0}' is not a valid JSX element."),
        Its_element_type_0_is_not_a_valid_JSX_element: diag(2789, 1 /* Error */, "Its_element_type_0_is_not_a_valid_JSX_element_2789", "Its element type '{0}' is not a valid JSX element."),
        The_operand_of_a_delete_operator_must_be_optional: diag(2790, 1 /* Error */, "The_operand_of_a_delete_operator_must_be_optional_2790", "The operand of a 'delete' operator must be optional."),
        Exponentiation_cannot_be_performed_on_bigint_values_unless_the_target_option_is_set_to_es2016_or_later: diag(2791, 1 /* Error */, "Exponentiation_cannot_be_performed_on_bigint_values_unless_the_target_option_is_set_to_es2016_or_lat_2791", "Exponentiation cannot be performed on 'bigint' values unless the 'target' option is set to 'es2016' or later."),
        Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_nodenext_or_to_add_aliases_to_the_paths_option: diag(2792, 1 /* Error */, "Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_nodenext_or_to_add_aliases_t_2792", "Cannot find module '{0}'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?"),
        The_call_would_have_succeeded_against_this_implementation_but_implementation_signatures_of_overloads_are_not_externally_visible: diag(2793, 1 /* Error */, "The_call_would_have_succeeded_against_this_implementation_but_implementation_signatures_of_overloads_2793", "The call would have succeeded against this implementation, but implementation signatures of overloads are not externally visible."),
        Expected_0_arguments_but_got_1_Did_you_forget_to_include_void_in_your_type_argument_to_Promise: diag(2794, 1 /* Error */, "Expected_0_arguments_but_got_1_Did_you_forget_to_include_void_in_your_type_argument_to_Promise_2794", "Expected {0} arguments, but got {1}. Did you forget to include 'void' in your type argument to 'Promise'?"),
        The_intrinsic_keyword_can_only_be_used_to_declare_compiler_provided_intrinsic_types: diag(2795, 1 /* Error */, "The_intrinsic_keyword_can_only_be_used_to_declare_compiler_provided_intrinsic_types_2795", "The 'intrinsic' keyword can only be used to declare compiler provided intrinsic types."),
        It_is_likely_that_you_are_missing_a_comma_to_separate_these_two_template_expressions_They_form_a_tagged_template_expression_which_cannot_be_invoked: diag(2796, 1 /* Error */, "It_is_likely_that_you_are_missing_a_comma_to_separate_these_two_template_expressions_They_form_a_tag_2796", "It is likely that you are missing a comma to separate these two template expressions. They form a tagged template expression which cannot be invoked."),
        A_mixin_class_that_extends_from_a_type_variable_containing_an_abstract_construct_signature_must_also_be_declared_abstract: diag(2797, 1 /* Error */, "A_mixin_class_that_extends_from_a_type_variable_containing_an_abstract_construct_signature_must_also_2797", "A mixin class that extends from a type variable containing an abstract construct signature must also be declared 'abstract'."),
        The_declaration_was_marked_as_deprecated_here: diag(2798, 1 /* Error */, "The_declaration_was_marked_as_deprecated_here_2798", "The declaration was marked as deprecated here."),
        Type_produces_a_tuple_type_that_is_too_large_to_represent: diag(2799, 1 /* Error */, "Type_produces_a_tuple_type_that_is_too_large_to_represent_2799", "Type produces a tuple type that is too large to represent."),
        Expression_produces_a_tuple_type_that_is_too_large_to_represent: diag(2800, 1 /* Error */, "Expression_produces_a_tuple_type_that_is_too_large_to_represent_2800", "Expression produces a tuple type that is too large to represent."),
        This_condition_will_always_return_true_since_this_0_is_always_defined: diag(2801, 1 /* Error */, "This_condition_will_always_return_true_since_this_0_is_always_defined_2801", "This condition will always return true since this '{0}' is always defined."),
        Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es2015_or_higher: diag(2802, 1 /* Error */, "Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es201_2802", "Type '{0}' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher."),
        Cannot_assign_to_private_method_0_Private_methods_are_not_writable: diag(2803, 1 /* Error */, "Cannot_assign_to_private_method_0_Private_methods_are_not_writable_2803", "Cannot assign to private method '{0}'. Private methods are not writable."),
        Duplicate_identifier_0_Static_and_instance_elements_cannot_share_the_same_private_name: diag(2804, 1 /* Error */, "Duplicate_identifier_0_Static_and_instance_elements_cannot_share_the_same_private_name_2804", "Duplicate identifier '{0}'. Static and instance elements cannot share the same private name."),
        Private_accessor_was_defined_without_a_getter: diag(2806, 1 /* Error */, "Private_accessor_was_defined_without_a_getter_2806", "Private accessor was defined without a getter."),
        This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0: diag(2807, 1 /* Error */, "This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_o_2807", "This syntax requires an imported helper named '{1}' with {2} parameters, which is not compatible with the one in '{0}'. Consider upgrading your version of '{0}'."),
        A_get_accessor_must_be_at_least_as_accessible_as_the_setter: diag(2808, 1 /* Error */, "A_get_accessor_must_be_at_least_as_accessible_as_the_setter_2808", "A get accessor must be at least as accessible as the setter"),
        Declaration_or_statement_expected_This_follows_a_block_of_statements_so_if_you_intended_to_write_a_destructuring_assignment_you_might_need_to_wrap_the_whole_assignment_in_parentheses: diag(2809, 1 /* Error */, "Declaration_or_statement_expected_This_follows_a_block_of_statements_so_if_you_intended_to_write_a_d_2809", "Declaration or statement expected. This '=' follows a block of statements, so if you intended to write a destructuring assignment, you might need to wrap the whole assignment in parentheses."),
        Expected_1_argument_but_got_0_new_Promise_needs_a_JSDoc_hint_to_produce_a_resolve_that_can_be_called_without_arguments: diag(2810, 1 /* Error */, "Expected_1_argument_but_got_0_new_Promise_needs_a_JSDoc_hint_to_produce_a_resolve_that_can_be_called_2810", "Expected 1 argument, but got 0. 'new Promise()' needs a JSDoc hint to produce a 'resolve' that can be called without arguments."),
        Initializer_for_property_0: diag(2811, 1 /* Error */, "Initializer_for_property_0_2811", "Initializer for property '{0}'"),
        Property_0_does_not_exist_on_type_1_Try_changing_the_lib_compiler_option_to_include_dom: diag(2812, 1 /* Error */, "Property_0_does_not_exist_on_type_1_Try_changing_the_lib_compiler_option_to_include_dom_2812", "Property '{0}' does not exist on type '{1}'. Try changing the 'lib' compiler option to include 'dom'."),
        Class_declaration_cannot_implement_overload_list_for_0: diag(2813, 1 /* Error */, "Class_declaration_cannot_implement_overload_list_for_0_2813", "Class declaration cannot implement overload list for '{0}'."),
        Function_with_bodies_can_only_merge_with_classes_that_are_ambient: diag(2814, 1 /* Error */, "Function_with_bodies_can_only_merge_with_classes_that_are_ambient_2814", "Function with bodies can only merge with classes that are ambient."),
        arguments_cannot_be_referenced_in_property_initializers: diag(2815, 1 /* Error */, "arguments_cannot_be_referenced_in_property_initializers_2815", "'arguments' cannot be referenced in property initializers."),
        Cannot_use_this_in_a_static_property_initializer_of_a_decorated_class: diag(2816, 1 /* Error */, "Cannot_use_this_in_a_static_property_initializer_of_a_decorated_class_2816", "Cannot use 'this' in a static property initializer of a decorated class."),
        Property_0_has_no_initializer_and_is_not_definitely_assigned_in_a_class_static_block: diag(2817, 1 /* Error */, "Property_0_has_no_initializer_and_is_not_definitely_assigned_in_a_class_static_block_2817", "Property '{0}' has no initializer and is not definitely assigned in a class static block."),
        Duplicate_identifier_0_Compiler_reserves_name_1_when_emitting_super_references_in_static_initializers: diag(2818, 1 /* Error */, "Duplicate_identifier_0_Compiler_reserves_name_1_when_emitting_super_references_in_static_initializer_2818", "Duplicate identifier '{0}'. Compiler reserves name '{1}' when emitting 'super' references in static initializers."),
        Namespace_name_cannot_be_0: diag(2819, 1 /* Error */, "Namespace_name_cannot_be_0_2819", "Namespace name cannot be '{0}'."),
        Type_0_is_not_assignable_to_type_1_Did_you_mean_2: diag(2820, 1 /* Error */, "Type_0_is_not_assignable_to_type_1_Did_you_mean_2_2820", "Type '{0}' is not assignable to type '{1}'. Did you mean '{2}'?"),
        Import_assertions_are_only_supported_when_the_module_option_is_set_to_esnext_or_nodenext: diag(2821, 1 /* Error */, "Import_assertions_are_only_supported_when_the_module_option_is_set_to_esnext_or_nodenext_2821", "Import assertions are only supported when the '--module' option is set to 'esnext' or 'nodenext'."),
        Import_assertions_cannot_be_used_with_type_only_imports_or_exports: diag(2822, 1 /* Error */, "Import_assertions_cannot_be_used_with_type_only_imports_or_exports_2822", "Import assertions cannot be used with type-only imports or exports."),
        Cannot_find_namespace_0_Did_you_mean_1: diag(2833, 1 /* Error */, "Cannot_find_namespace_0_Did_you_mean_1_2833", "Cannot find namespace '{0}'. Did you mean '{1}'?"),
        Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_node16_or_nodenext_Consider_adding_an_extension_to_the_import_path: diag(2834, 1 /* Error */, "Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_n_2834", "Relative import paths need explicit file extensions in EcmaScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Consider adding an extension to the import path."),
        Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_node16_or_nodenext_Did_you_mean_0: diag(2835, 1 /* Error */, "Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_n_2835", "Relative import paths need explicit file extensions in EcmaScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Did you mean '{0}'?"),
        Import_assertions_are_not_allowed_on_statements_that_transpile_to_commonjs_require_calls: diag(2836, 1 /* Error */, "Import_assertions_are_not_allowed_on_statements_that_transpile_to_commonjs_require_calls_2836", "Import assertions are not allowed on statements that transpile to commonjs 'require' calls."),
        Import_assertion_values_must_be_string_literal_expressions: diag(2837, 1 /* Error */, "Import_assertion_values_must_be_string_literal_expressions_2837", "Import assertion values must be string literal expressions."),
        All_declarations_of_0_must_have_identical_constraints: diag(2838, 1 /* Error */, "All_declarations_of_0_must_have_identical_constraints_2838", "All declarations of '{0}' must have identical constraints."),
        This_condition_will_always_return_0_since_JavaScript_compares_objects_by_reference_not_value: diag(2839, 1 /* Error */, "This_condition_will_always_return_0_since_JavaScript_compares_objects_by_reference_not_value_2839", "This condition will always return '{0}' since JavaScript compares objects by reference, not value."),
        An_interface_cannot_extend_a_primitive_type_like_0_an_interface_can_only_extend_named_types_and_classes: diag(2840, 1 /* Error */, "An_interface_cannot_extend_a_primitive_type_like_0_an_interface_can_only_extend_named_types_and_clas_2840", "An interface cannot extend a primitive type like '{0}'; an interface can only extend named types and classes"),
        The_type_of_this_expression_cannot_be_named_without_a_resolution_mode_assertion_which_is_an_unstable_feature_Use_nightly_TypeScript_to_silence_this_error_Try_updating_with_npm_install_D_typescript_next: diag(2841, 1 /* Error */, "The_type_of_this_expression_cannot_be_named_without_a_resolution_mode_assertion_which_is_an_unstable_2841", "The type of this expression cannot be named without a 'resolution-mode' assertion, which is an unstable feature. Use nightly TypeScript to silence this error. Try updating with 'npm install -D typescript@next'."),
        _0_is_an_unused_renaming_of_1_Did_you_intend_to_use_it_as_a_type_annotation: diag(2842, 1 /* Error */, "_0_is_an_unused_renaming_of_1_Did_you_intend_to_use_it_as_a_type_annotation_2842", "'{0}' is an unused renaming of '{1}'. Did you intend to use it as a type annotation?"),
        We_can_only_write_a_type_for_0_by_adding_a_type_for_the_entire_parameter_here: diag(2843, 1 /* Error */, "We_can_only_write_a_type_for_0_by_adding_a_type_for_the_entire_parameter_here_2843", "We can only write a type for '{0}' by adding a type for the entire parameter here."),
        Type_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor: diag(2844, 1 /* Error */, "Type_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor_2844", "Type of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor."),
        This_condition_will_always_return_0: diag(2845, 1 /* Error */, "This_condition_will_always_return_0_2845", "This condition will always return '{0}'."),
        A_declaration_file_cannot_be_imported_without_import_type_Did_you_mean_to_import_an_implementation_file_0_instead: diag(2846, 1 /* Error */, "A_declaration_file_cannot_be_imported_without_import_type_Did_you_mean_to_import_an_implementation_f_2846", "A declaration file cannot be imported without 'import type'. Did you mean to import an implementation file '{0}' instead?"),
        Import_declaration_0_is_using_private_name_1: diag(4e3, 1 /* Error */, "Import_declaration_0_is_using_private_name_1_4000", "Import declaration '{0}' is using private name '{1}'."),
        Type_parameter_0_of_exported_class_has_or_is_using_private_name_1: diag(4002, 1 /* Error */, "Type_parameter_0_of_exported_class_has_or_is_using_private_name_1_4002", "Type parameter '{0}' of exported class has or is using private name '{1}'."),
        Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1: diag(4004, 1 /* Error */, "Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1_4004", "Type parameter '{0}' of exported interface has or is using private name '{1}'."),
        Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: diag(4006, 1 /* Error */, "Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1_4006", "Type parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'."),
        Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: diag(4008, 1 /* Error */, "Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1_4008", "Type parameter '{0}' of call signature from exported interface has or is using private name '{1}'."),
        Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: diag(4010, 1 /* Error */, "Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1_4010", "Type parameter '{0}' of public static method from exported class has or is using private name '{1}'."),
        Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: diag(4012, 1 /* Error */, "Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1_4012", "Type parameter '{0}' of public method from exported class has or is using private name '{1}'."),
        Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: diag(4014, 1 /* Error */, "Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1_4014", "Type parameter '{0}' of method from exported interface has or is using private name '{1}'."),
        Type_parameter_0_of_exported_function_has_or_is_using_private_name_1: diag(4016, 1 /* Error */, "Type_parameter_0_of_exported_function_has_or_is_using_private_name_1_4016", "Type parameter '{0}' of exported function has or is using private name '{1}'."),
        Implements_clause_of_exported_class_0_has_or_is_using_private_name_1: diag(4019, 1 /* Error */, "Implements_clause_of_exported_class_0_has_or_is_using_private_name_1_4019", "Implements clause of exported class '{0}' has or is using private name '{1}'."),
        extends_clause_of_exported_class_0_has_or_is_using_private_name_1: diag(4020, 1 /* Error */, "extends_clause_of_exported_class_0_has_or_is_using_private_name_1_4020", "'extends' clause of exported class '{0}' has or is using private name '{1}'."),
        extends_clause_of_exported_class_has_or_is_using_private_name_0: diag(4021, 1 /* Error */, "extends_clause_of_exported_class_has_or_is_using_private_name_0_4021", "'extends' clause of exported class has or is using private name '{0}'."),
        extends_clause_of_exported_interface_0_has_or_is_using_private_name_1: diag(4022, 1 /* Error */, "extends_clause_of_exported_interface_0_has_or_is_using_private_name_1_4022", "'extends' clause of exported interface '{0}' has or is using private name '{1}'."),
        Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4023, 1 /* Error */, "Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4023", "Exported variable '{0}' has or is using name '{1}' from external module {2} but cannot be named."),
        Exported_variable_0_has_or_is_using_name_1_from_private_module_2: diag(4024, 1 /* Error */, "Exported_variable_0_has_or_is_using_name_1_from_private_module_2_4024", "Exported variable '{0}' has or is using name '{1}' from private module '{2}'."),
        Exported_variable_0_has_or_is_using_private_name_1: diag(4025, 1 /* Error */, "Exported_variable_0_has_or_is_using_private_name_1_4025", "Exported variable '{0}' has or is using private name '{1}'."),
        Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4026, 1 /* Error */, "Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot__4026", "Public static property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."),
        Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: diag(4027, 1 /* Error */, "Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4027", "Public static property '{0}' of exported class has or is using name '{1}' from private module '{2}'."),
        Public_static_property_0_of_exported_class_has_or_is_using_private_name_1: diag(4028, 1 /* Error */, "Public_static_property_0_of_exported_class_has_or_is_using_private_name_1_4028", "Public static property '{0}' of exported class has or is using private name '{1}'."),
        Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4029, 1 /* Error */, "Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_name_4029", "Public property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."),
        Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: diag(4030, 1 /* Error */, "Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4030", "Public property '{0}' of exported class has or is using name '{1}' from private module '{2}'."),
        Public_property_0_of_exported_class_has_or_is_using_private_name_1: diag(4031, 1 /* Error */, "Public_property_0_of_exported_class_has_or_is_using_private_name_1_4031", "Public property '{0}' of exported class has or is using private name '{1}'."),
        Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2: diag(4032, 1 /* Error */, "Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2_4032", "Property '{0}' of exported interface has or is using name '{1}' from private module '{2}'."),
        Property_0_of_exported_interface_has_or_is_using_private_name_1: diag(4033, 1 /* Error */, "Property_0_of_exported_interface_has_or_is_using_private_name_1_4033", "Property '{0}' of exported interface has or is using private name '{1}'."),
        Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: diag(4034, 1 /* Error */, "Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_name_1_from_private_mod_4034", "Parameter type of public static setter '{0}' from exported class has or is using name '{1}' from private module '{2}'."),
        Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_private_name_1: diag(4035, 1 /* Error */, "Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_private_name_1_4035", "Parameter type of public static setter '{0}' from exported class has or is using private name '{1}'."),
        Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: diag(4036, 1 /* Error */, "Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2_4036", "Parameter type of public setter '{0}' from exported class has or is using name '{1}' from private module '{2}'."),
        Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_private_name_1: diag(4037, 1 /* Error */, "Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_private_name_1_4037", "Parameter type of public setter '{0}' from exported class has or is using private name '{1}'."),
        Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4038, 1 /* Error */, "Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_external_modul_4038", "Return type of public static getter '{0}' from exported class has or is using name '{1}' from external module {2} but cannot be named."),
        Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: diag(4039, 1 /* Error */, "Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_4039", "Return type of public static getter '{0}' from exported class has or is using name '{1}' from private module '{2}'."),
        Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_private_name_1: diag(4040, 1 /* Error */, "Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_private_name_1_4040", "Return type of public static getter '{0}' from exported class has or is using private name '{1}'."),
        Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4041, 1 /* Error */, "Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_4041", "Return type of public getter '{0}' from exported class has or is using name '{1}' from external module {2} but cannot be named."),
        Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: diag(4042, 1 /* Error */, "Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2_4042", "Return type of public getter '{0}' from exported class has or is using name '{1}' from private module '{2}'."),
        Return_type_of_public_getter_0_from_exported_class_has_or_is_using_private_name_1: diag(4043, 1 /* Error */, "Return_type_of_public_getter_0_from_exported_class_has_or_is_using_private_name_1_4043", "Return type of public getter '{0}' from exported class has or is using private name '{1}'."),
        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: diag(4044, 1 /* Error */, "Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_mod_4044", "Return type of constructor signature from exported interface has or is using name '{0}' from private module '{1}'."),
        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0: diag(4045, 1 /* Error */, "Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0_4045", "Return type of constructor signature from exported interface has or is using private name '{0}'."),
        Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: diag(4046, 1 /* Error */, "Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4046", "Return type of call signature from exported interface has or is using name '{0}' from private module '{1}'."),
        Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0: diag(4047, 1 /* Error */, "Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0_4047", "Return type of call signature from exported interface has or is using private name '{0}'."),
        Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: diag(4048, 1 /* Error */, "Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4048", "Return type of index signature from exported interface has or is using name '{0}' from private module '{1}'."),
        Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0: diag(4049, 1 /* Error */, "Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0_4049", "Return type of index signature from exported interface has or is using private name '{0}'."),
        Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: diag(4050, 1 /* Error */, "Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module__4050", "Return type of public static method from exported class has or is using name '{0}' from external module {1} but cannot be named."),
        Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: diag(4051, 1 /* Error */, "Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1_4051", "Return type of public static method from exported class has or is using name '{0}' from private module '{1}'."),
        Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0: diag(4052, 1 /* Error */, "Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0_4052", "Return type of public static method from exported class has or is using private name '{0}'."),
        Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: diag(4053, 1 /* Error */, "Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_c_4053", "Return type of public method from exported class has or is using name '{0}' from external module {1} but cannot be named."),
        Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: diag(4054, 1 /* Error */, "Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1_4054", "Return type of public method from exported class has or is using name '{0}' from private module '{1}'."),
        Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0: diag(4055, 1 /* Error */, "Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0_4055", "Return type of public method from exported class has or is using private name '{0}'."),
        Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1: diag(4056, 1 /* Error */, "Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4056", "Return type of method from exported interface has or is using name '{0}' from private module '{1}'."),
        Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0: diag(4057, 1 /* Error */, "Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0_4057", "Return type of method from exported interface has or is using private name '{0}'."),
        Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: diag(4058, 1 /* Error */, "Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named_4058", "Return type of exported function has or is using name '{0}' from external module {1} but cannot be named."),
        Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1: diag(4059, 1 /* Error */, "Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1_4059", "Return type of exported function has or is using name '{0}' from private module '{1}'."),
        Return_type_of_exported_function_has_or_is_using_private_name_0: diag(4060, 1 /* Error */, "Return_type_of_exported_function_has_or_is_using_private_name_0_4060", "Return type of exported function has or is using private name '{0}'."),
        Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4061, 1 /* Error */, "Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_can_4061", "Parameter '{0}' of constructor from exported class has or is using name '{1}' from external module {2} but cannot be named."),
        Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2: diag(4062, 1 /* Error */, "Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2_4062", "Parameter '{0}' of constructor from exported class has or is using name '{1}' from private module '{2}'."),
        Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1: diag(4063, 1 /* Error */, "Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1_4063", "Parameter '{0}' of constructor from exported class has or is using private name '{1}'."),
        Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: diag(4064, 1 /* Error */, "Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_mod_4064", "Parameter '{0}' of constructor signature from exported interface has or is using name '{1}' from private module '{2}'."),
        Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: diag(4065, 1 /* Error */, "Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1_4065", "Parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'."),
        Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: diag(4066, 1 /* Error */, "Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4066", "Parameter '{0}' of call signature from exported interface has or is using name '{1}' from private module '{2}'."),
        Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: diag(4067, 1 /* Error */, "Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1_4067", "Parameter '{0}' of call signature from exported interface has or is using private name '{1}'."),
        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4068, 1 /* Error */, "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module__4068", "Parameter '{0}' of public static method from exported class has or is using name '{1}' from external module {2} but cannot be named."),
        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: diag(4069, 1 /* Error */, "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2_4069", "Parameter '{0}' of public static method from exported class has or is using name '{1}' from private module '{2}'."),
        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: diag(4070, 1 /* Error */, "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1_4070", "Parameter '{0}' of public static method from exported class has or is using private name '{1}'."),
        Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4071, 1 /* Error */, "Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_c_4071", "Parameter '{0}' of public method from exported class has or is using name '{1}' from external module {2} but cannot be named."),
        Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: diag(4072, 1 /* Error */, "Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2_4072", "Parameter '{0}' of public method from exported class has or is using name '{1}' from private module '{2}'."),
        Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: diag(4073, 1 /* Error */, "Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1_4073", "Parameter '{0}' of public method from exported class has or is using private name '{1}'."),
        Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2: diag(4074, 1 /* Error */, "Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4074", "Parameter '{0}' of method from exported interface has or is using name '{1}' from private module '{2}'."),
        Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: diag(4075, 1 /* Error */, "Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1_4075", "Parameter '{0}' of method from exported interface has or is using private name '{1}'."),
        Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4076, 1 /* Error */, "Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4076", "Parameter '{0}' of exported function has or is using name '{1}' from external module {2} but cannot be named."),
        Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2: diag(4077, 1 /* Error */, "Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2_4077", "Parameter '{0}' of exported function has or is using name '{1}' from private module '{2}'."),
        Parameter_0_of_exported_function_has_or_is_using_private_name_1: diag(4078, 1 /* Error */, "Parameter_0_of_exported_function_has_or_is_using_private_name_1_4078", "Parameter '{0}' of exported function has or is using private name '{1}'."),
        Exported_type_alias_0_has_or_is_using_private_name_1: diag(4081, 1 /* Error */, "Exported_type_alias_0_has_or_is_using_private_name_1_4081", "Exported type alias '{0}' has or is using private name '{1}'."),
        Default_export_of_the_module_has_or_is_using_private_name_0: diag(4082, 1 /* Error */, "Default_export_of_the_module_has_or_is_using_private_name_0_4082", "Default export of the module has or is using private name '{0}'."),
        Type_parameter_0_of_exported_type_alias_has_or_is_using_private_name_1: diag(4083, 1 /* Error */, "Type_parameter_0_of_exported_type_alias_has_or_is_using_private_name_1_4083", "Type parameter '{0}' of exported type alias has or is using private name '{1}'."),
        Exported_type_alias_0_has_or_is_using_private_name_1_from_module_2: diag(4084, 1 /* Error */, "Exported_type_alias_0_has_or_is_using_private_name_1_from_module_2_4084", "Exported type alias '{0}' has or is using private name '{1}' from module {2}."),
        Extends_clause_for_inferred_type_0_has_or_is_using_private_name_1: diag(4085, 1 /* Error */, "Extends_clause_for_inferred_type_0_has_or_is_using_private_name_1_4085", "Extends clause for inferred type '{0}' has or is using private name '{1}'."),
        Conflicting_definitions_for_0_found_at_1_and_2_Consider_installing_a_specific_version_of_this_library_to_resolve_the_conflict: diag(4090, 1 /* Error */, "Conflicting_definitions_for_0_found_at_1_and_2_Consider_installing_a_specific_version_of_this_librar_4090", "Conflicting definitions for '{0}' found at '{1}' and '{2}'. Consider installing a specific version of this library to resolve the conflict."),
        Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: diag(4091, 1 /* Error */, "Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4091", "Parameter '{0}' of index signature from exported interface has or is using name '{1}' from private module '{2}'."),
        Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_private_name_1: diag(4092, 1 /* Error */, "Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_private_name_1_4092", "Parameter '{0}' of index signature from exported interface has or is using private name '{1}'."),
        Property_0_of_exported_class_expression_may_not_be_private_or_protected: diag(4094, 1 /* Error */, "Property_0_of_exported_class_expression_may_not_be_private_or_protected_4094", "Property '{0}' of exported class expression may not be private or protected."),
        Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4095, 1 /* Error */, "Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_4095", "Public static method '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."),
        Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: diag(4096, 1 /* Error */, "Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4096", "Public static method '{0}' of exported class has or is using name '{1}' from private module '{2}'."),
        Public_static_method_0_of_exported_class_has_or_is_using_private_name_1: diag(4097, 1 /* Error */, "Public_static_method_0_of_exported_class_has_or_is_using_private_name_1_4097", "Public static method '{0}' of exported class has or is using private name '{1}'."),
        Public_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4098, 1 /* Error */, "Public_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4098", "Public method '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."),
        Public_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: diag(4099, 1 /* Error */, "Public_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4099", "Public method '{0}' of exported class has or is using name '{1}' from private module '{2}'."),
        Public_method_0_of_exported_class_has_or_is_using_private_name_1: diag(4100, 1 /* Error */, "Public_method_0_of_exported_class_has_or_is_using_private_name_1_4100", "Public method '{0}' of exported class has or is using private name '{1}'."),
        Method_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2: diag(4101, 1 /* Error */, "Method_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2_4101", "Method '{0}' of exported interface has or is using name '{1}' from private module '{2}'."),
        Method_0_of_exported_interface_has_or_is_using_private_name_1: diag(4102, 1 /* Error */, "Method_0_of_exported_interface_has_or_is_using_private_name_1_4102", "Method '{0}' of exported interface has or is using private name '{1}'."),
        Type_parameter_0_of_exported_mapped_object_type_is_using_private_name_1: diag(4103, 1 /* Error */, "Type_parameter_0_of_exported_mapped_object_type_is_using_private_name_1_4103", "Type parameter '{0}' of exported mapped object type is using private name '{1}'."),
        The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1: diag(4104, 1 /* Error */, "The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1_4104", "The type '{0}' is 'readonly' and cannot be assigned to the mutable type '{1}'."),
        Private_or_protected_member_0_cannot_be_accessed_on_a_type_parameter: diag(4105, 1 /* Error */, "Private_or_protected_member_0_cannot_be_accessed_on_a_type_parameter_4105", "Private or protected member '{0}' cannot be accessed on a type parameter."),
        Parameter_0_of_accessor_has_or_is_using_private_name_1: diag(4106, 1 /* Error */, "Parameter_0_of_accessor_has_or_is_using_private_name_1_4106", "Parameter '{0}' of accessor has or is using private name '{1}'."),
        Parameter_0_of_accessor_has_or_is_using_name_1_from_private_module_2: diag(4107, 1 /* Error */, "Parameter_0_of_accessor_has_or_is_using_name_1_from_private_module_2_4107", "Parameter '{0}' of accessor has or is using name '{1}' from private module '{2}'."),
        Parameter_0_of_accessor_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: diag(4108, 1 /* Error */, "Parameter_0_of_accessor_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4108", "Parameter '{0}' of accessor has or is using name '{1}' from external module '{2}' but cannot be named."),
        Type_arguments_for_0_circularly_reference_themselves: diag(4109, 1 /* Error */, "Type_arguments_for_0_circularly_reference_themselves_4109", "Type arguments for '{0}' circularly reference themselves."),
        Tuple_type_arguments_circularly_reference_themselves: diag(4110, 1 /* Error */, "Tuple_type_arguments_circularly_reference_themselves_4110", "Tuple type arguments circularly reference themselves."),
        Property_0_comes_from_an_index_signature_so_it_must_be_accessed_with_0: diag(4111, 1 /* Error */, "Property_0_comes_from_an_index_signature_so_it_must_be_accessed_with_0_4111", "Property '{0}' comes from an index signature, so it must be accessed with ['{0}']."),
        This_member_cannot_have_an_override_modifier_because_its_containing_class_0_does_not_extend_another_class: diag(4112, 1 /* Error */, "This_member_cannot_have_an_override_modifier_because_its_containing_class_0_does_not_extend_another__4112", "This member cannot have an 'override' modifier because its containing class '{0}' does not extend another class."),
        This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0: diag(4113, 1 /* Error */, "This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_4113", "This member cannot have an 'override' modifier because it is not declared in the base class '{0}'."),
        This_member_must_have_an_override_modifier_because_it_overrides_a_member_in_the_base_class_0: diag(4114, 1 /* Error */, "This_member_must_have_an_override_modifier_because_it_overrides_a_member_in_the_base_class_0_4114", "This member must have an 'override' modifier because it overrides a member in the base class '{0}'."),
        This_parameter_property_must_have_an_override_modifier_because_it_overrides_a_member_in_base_class_0: diag(4115, 1 /* Error */, "This_parameter_property_must_have_an_override_modifier_because_it_overrides_a_member_in_base_class_0_4115", "This parameter property must have an 'override' modifier because it overrides a member in base class '{0}'."),
        This_member_must_have_an_override_modifier_because_it_overrides_an_abstract_method_that_is_declared_in_the_base_class_0: diag(4116, 1 /* Error */, "This_member_must_have_an_override_modifier_because_it_overrides_an_abstract_method_that_is_declared__4116", "This member must have an 'override' modifier because it overrides an abstract method that is declared in the base class '{0}'."),
        This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1: diag(4117, 1 /* Error */, "This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_Did_you__4117", "This member cannot have an 'override' modifier because it is not declared in the base class '{0}'. Did you mean '{1}'?"),
        The_type_of_this_node_cannot_be_serialized_because_its_property_0_cannot_be_serialized: diag(4118, 1 /* Error */, "The_type_of_this_node_cannot_be_serialized_because_its_property_0_cannot_be_serialized_4118", "The type of this node cannot be serialized because its property '{0}' cannot be serialized."),
        This_member_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0: diag(4119, 1 /* Error */, "This_member_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_4119", "This member must have a JSDoc comment with an '@override' tag because it overrides a member in the base class '{0}'."),
        This_parameter_property_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0: diag(4120, 1 /* Error */, "This_parameter_property_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_4120", "This parameter property must have a JSDoc comment with an '@override' tag because it overrides a member in the base class '{0}'."),
        This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_its_containing_class_0_does_not_extend_another_class: diag(4121, 1 /* Error */, "This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_its_containing_class_0_does_not_4121", "This member cannot have a JSDoc comment with an '@override' tag because its containing class '{0}' does not extend another class."),
        This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0: diag(4122, 1 /* Error */, "This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base__4122", "This member cannot have a JSDoc comment with an '@override' tag because it is not declared in the base class '{0}'."),
        This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1: diag(4123, 1 /* Error */, "This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base__4123", "This member cannot have a JSDoc comment with an 'override' tag because it is not declared in the base class '{0}'. Did you mean '{1}'?"),
        Compiler_option_0_of_value_1_is_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_with_npm_install_D_typescript_next: diag(4124, 1 /* Error */, "Compiler_option_0_of_value_1_is_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_w_4124", "Compiler option '{0}' of value '{1}' is unstable. Use nightly TypeScript to silence this error. Try updating with 'npm install -D typescript@next'."),
        resolution_mode_assertions_are_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_with_npm_install_D_typescript_next: diag(4125, 1 /* Error */, "resolution_mode_assertions_are_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_wi_4125", "'resolution-mode' assertions are unstable. Use nightly TypeScript to silence this error. Try updating with 'npm install -D typescript@next'."),
        The_current_host_does_not_support_the_0_option: diag(5001, 1 /* Error */, "The_current_host_does_not_support_the_0_option_5001", "The current host does not support the '{0}' option."),
        Cannot_find_the_common_subdirectory_path_for_the_input_files: diag(5009, 1 /* Error */, "Cannot_find_the_common_subdirectory_path_for_the_input_files_5009", "Cannot find the common subdirectory path for the input files."),
        File_specification_cannot_end_in_a_recursive_directory_wildcard_Asterisk_Asterisk_Colon_0: diag(5010, 1 /* Error */, "File_specification_cannot_end_in_a_recursive_directory_wildcard_Asterisk_Asterisk_Colon_0_5010", "File specification cannot end in a recursive directory wildcard ('**'): '{0}'."),
        Cannot_read_file_0_Colon_1: diag(5012, 1 /* Error */, "Cannot_read_file_0_Colon_1_5012", "Cannot read file '{0}': {1}."),
        Failed_to_parse_file_0_Colon_1: diag(5014, 1 /* Error */, "Failed_to_parse_file_0_Colon_1_5014", "Failed to parse file '{0}': {1}."),
        Unknown_compiler_option_0: diag(5023, 1 /* Error */, "Unknown_compiler_option_0_5023", "Unknown compiler option '{0}'."),
        Compiler_option_0_requires_a_value_of_type_1: diag(5024, 1 /* Error */, "Compiler_option_0_requires_a_value_of_type_1_5024", "Compiler option '{0}' requires a value of type {1}."),
        Unknown_compiler_option_0_Did_you_mean_1: diag(5025, 1 /* Error */, "Unknown_compiler_option_0_Did_you_mean_1_5025", "Unknown compiler option '{0}'. Did you mean '{1}'?"),
        Could_not_write_file_0_Colon_1: diag(5033, 1 /* Error */, "Could_not_write_file_0_Colon_1_5033", "Could not write file '{0}': {1}."),
        Option_project_cannot_be_mixed_with_source_files_on_a_command_line: diag(5042, 1 /* Error */, "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042", "Option 'project' cannot be mixed with source files on a command line."),
        Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES2015_or_higher: diag(5047, 1 /* Error */, "Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES_5047", "Option 'isolatedModules' can only be used when either option '--module' is provided or option 'target' is 'ES2015' or higher."),
        Option_0_cannot_be_specified_when_option_target_is_ES3: diag(5048, 1 /* Error */, "Option_0_cannot_be_specified_when_option_target_is_ES3_5048", "Option '{0}' cannot be specified when option 'target' is 'ES3'."),
        Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: diag(5051, 1 /* Error */, "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051", "Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided."),
        Option_0_cannot_be_specified_without_specifying_option_1: diag(5052, 1 /* Error */, "Option_0_cannot_be_specified_without_specifying_option_1_5052", "Option '{0}' cannot be specified without specifying option '{1}'."),
        Option_0_cannot_be_specified_with_option_1: diag(5053, 1 /* Error */, "Option_0_cannot_be_specified_with_option_1_5053", "Option '{0}' cannot be specified with option '{1}'."),
        A_tsconfig_json_file_is_already_defined_at_Colon_0: diag(5054, 1 /* Error */, "A_tsconfig_json_file_is_already_defined_at_Colon_0_5054", "A 'tsconfig.json' file is already defined at: '{0}'."),
        Cannot_write_file_0_because_it_would_overwrite_input_file: diag(5055, 1 /* Error */, "Cannot_write_file_0_because_it_would_overwrite_input_file_5055", "Cannot write file '{0}' because it would overwrite input file."),
        Cannot_write_file_0_because_it_would_be_overwritten_by_multiple_input_files: diag(5056, 1 /* Error */, "Cannot_write_file_0_because_it_would_be_overwritten_by_multiple_input_files_5056", "Cannot write file '{0}' because it would be overwritten by multiple input files."),
        Cannot_find_a_tsconfig_json_file_at_the_specified_directory_Colon_0: diag(5057, 1 /* Error */, "Cannot_find_a_tsconfig_json_file_at_the_specified_directory_Colon_0_5057", "Cannot find a tsconfig.json file at the specified directory: '{0}'."),
        The_specified_path_does_not_exist_Colon_0: diag(5058, 1 /* Error */, "The_specified_path_does_not_exist_Colon_0_5058", "The specified path does not exist: '{0}'."),
        Invalid_value_for_reactNamespace_0_is_not_a_valid_identifier: diag(5059, 1 /* Error */, "Invalid_value_for_reactNamespace_0_is_not_a_valid_identifier_5059", "Invalid value for '--reactNamespace'. '{0}' is not a valid identifier."),
        Pattern_0_can_have_at_most_one_Asterisk_character: diag(5061, 1 /* Error */, "Pattern_0_can_have_at_most_one_Asterisk_character_5061", "Pattern '{0}' can have at most one '*' character."),
        Substitution_0_in_pattern_1_can_have_at_most_one_Asterisk_character: diag(5062, 1 /* Error */, "Substitution_0_in_pattern_1_can_have_at_most_one_Asterisk_character_5062", "Substitution '{0}' in pattern '{1}' can have at most one '*' character."),
        Substitutions_for_pattern_0_should_be_an_array: diag(5063, 1 /* Error */, "Substitutions_for_pattern_0_should_be_an_array_5063", "Substitutions for pattern '{0}' should be an array."),
        Substitution_0_for_pattern_1_has_incorrect_type_expected_string_got_2: diag(5064, 1 /* Error */, "Substitution_0_for_pattern_1_has_incorrect_type_expected_string_got_2_5064", "Substitution '{0}' for pattern '{1}' has incorrect type, expected 'string', got '{2}'."),
        File_specification_cannot_contain_a_parent_directory_that_appears_after_a_recursive_directory_wildcard_Asterisk_Asterisk_Colon_0: diag(5065, 1 /* Error */, "File_specification_cannot_contain_a_parent_directory_that_appears_after_a_recursive_directory_wildca_5065", "File specification cannot contain a parent directory ('..') that appears after a recursive directory wildcard ('**'): '{0}'."),
        Substitutions_for_pattern_0_shouldn_t_be_an_empty_array: diag(5066, 1 /* Error */, "Substitutions_for_pattern_0_shouldn_t_be_an_empty_array_5066", "Substitutions for pattern '{0}' shouldn't be an empty array."),
        Invalid_value_for_jsxFactory_0_is_not_a_valid_identifier_or_qualified_name: diag(5067, 1 /* Error */, "Invalid_value_for_jsxFactory_0_is_not_a_valid_identifier_or_qualified_name_5067", "Invalid value for 'jsxFactory'. '{0}' is not a valid identifier or qualified-name."),
        Adding_a_tsconfig_json_file_will_help_organize_projects_that_contain_both_TypeScript_and_JavaScript_files_Learn_more_at_https_Colon_Slash_Slashaka_ms_Slashtsconfig: diag(5068, 1 /* Error */, "Adding_a_tsconfig_json_file_will_help_organize_projects_that_contain_both_TypeScript_and_JavaScript__5068", "Adding a tsconfig.json file will help organize projects that contain both TypeScript and JavaScript files. Learn more at https://aka.ms/tsconfig."),
        Option_0_cannot_be_specified_without_specifying_option_1_or_option_2: diag(5069, 1 /* Error */, "Option_0_cannot_be_specified_without_specifying_option_1_or_option_2_5069", "Option '{0}' cannot be specified without specifying option '{1}' or option '{2}'."),
        Option_resolveJsonModule_cannot_be_specified_when_moduleResolution_is_set_to_classic: diag(5070, 1 /* Error */, "Option_resolveJsonModule_cannot_be_specified_when_moduleResolution_is_set_to_classic_5070", "Option '--resolveJsonModule' cannot be specified when 'moduleResolution' is set to 'classic'."),
        Option_resolveJsonModule_can_only_be_specified_when_module_code_generation_is_commonjs_amd_es2015_or_esNext: diag(5071, 1 /* Error */, "Option_resolveJsonModule_can_only_be_specified_when_module_code_generation_is_commonjs_amd_es2015_or_5071", "Option '--resolveJsonModule' can only be specified when module code generation is 'commonjs', 'amd', 'es2015' or 'esNext'."),
        Unknown_build_option_0: diag(5072, 1 /* Error */, "Unknown_build_option_0_5072", "Unknown build option '{0}'."),
        Build_option_0_requires_a_value_of_type_1: diag(5073, 1 /* Error */, "Build_option_0_requires_a_value_of_type_1_5073", "Build option '{0}' requires a value of type {1}."),
        Option_incremental_can_only_be_specified_using_tsconfig_emitting_to_single_file_or_when_option_tsBuildInfoFile_is_specified: diag(5074, 1 /* Error */, "Option_incremental_can_only_be_specified_using_tsconfig_emitting_to_single_file_or_when_option_tsBui_5074", "Option '--incremental' can only be specified using tsconfig, emitting to single file or when option '--tsBuildInfoFile' is specified."),
        _0_is_assignable_to_the_constraint_of_type_1_but_1_could_be_instantiated_with_a_different_subtype_of_constraint_2: diag(5075, 1 /* Error */, "_0_is_assignable_to_the_constraint_of_type_1_but_1_could_be_instantiated_with_a_different_subtype_of_5075", "'{0}' is assignable to the constraint of type '{1}', but '{1}' could be instantiated with a different subtype of constraint '{2}'."),
        _0_and_1_operations_cannot_be_mixed_without_parentheses: diag(5076, 1 /* Error */, "_0_and_1_operations_cannot_be_mixed_without_parentheses_5076", "'{0}' and '{1}' operations cannot be mixed without parentheses."),
        Unknown_build_option_0_Did_you_mean_1: diag(5077, 1 /* Error */, "Unknown_build_option_0_Did_you_mean_1_5077", "Unknown build option '{0}'. Did you mean '{1}'?"),
        Unknown_watch_option_0: diag(5078, 1 /* Error */, "Unknown_watch_option_0_5078", "Unknown watch option '{0}'."),
        Unknown_watch_option_0_Did_you_mean_1: diag(5079, 1 /* Error */, "Unknown_watch_option_0_Did_you_mean_1_5079", "Unknown watch option '{0}'. Did you mean '{1}'?"),
        Watch_option_0_requires_a_value_of_type_1: diag(5080, 1 /* Error */, "Watch_option_0_requires_a_value_of_type_1_5080", "Watch option '{0}' requires a value of type {1}."),
        Cannot_find_a_tsconfig_json_file_at_the_current_directory_Colon_0: diag(5081, 1 /* Error */, "Cannot_find_a_tsconfig_json_file_at_the_current_directory_Colon_0_5081", "Cannot find a tsconfig.json file at the current directory: {0}."),
        _0_could_be_instantiated_with_an_arbitrary_type_which_could_be_unrelated_to_1: diag(5082, 1 /* Error */, "_0_could_be_instantiated_with_an_arbitrary_type_which_could_be_unrelated_to_1_5082", "'{0}' could be instantiated with an arbitrary type which could be unrelated to '{1}'."),
        Cannot_read_file_0: diag(5083, 1 /* Error */, "Cannot_read_file_0_5083", "Cannot read file '{0}'."),
        Tuple_members_must_all_have_names_or_all_not_have_names: diag(5084, 1 /* Error */, "Tuple_members_must_all_have_names_or_all_not_have_names_5084", "Tuple members must all have names or all not have names."),
        A_tuple_member_cannot_be_both_optional_and_rest: diag(5085, 1 /* Error */, "A_tuple_member_cannot_be_both_optional_and_rest_5085", "A tuple member cannot be both optional and rest."),
        A_labeled_tuple_element_is_declared_as_optional_with_a_question_mark_after_the_name_and_before_the_colon_rather_than_after_the_type: diag(5086, 1 /* Error */, "A_labeled_tuple_element_is_declared_as_optional_with_a_question_mark_after_the_name_and_before_the_c_5086", "A labeled tuple element is declared as optional with a question mark after the name and before the colon, rather than after the type."),
        A_labeled_tuple_element_is_declared_as_rest_with_a_before_the_name_rather_than_before_the_type: diag(5087, 1 /* Error */, "A_labeled_tuple_element_is_declared_as_rest_with_a_before_the_name_rather_than_before_the_type_5087", "A labeled tuple element is declared as rest with a '...' before the name, rather than before the type."),
        The_inferred_type_of_0_references_a_type_with_a_cyclic_structure_which_cannot_be_trivially_serialized_A_type_annotation_is_necessary: diag(5088, 1 /* Error */, "The_inferred_type_of_0_references_a_type_with_a_cyclic_structure_which_cannot_be_trivially_serialize_5088", "The inferred type of '{0}' references a type with a cyclic structure which cannot be trivially serialized. A type annotation is necessary."),
        Option_0_cannot_be_specified_when_option_jsx_is_1: diag(5089, 1 /* Error */, "Option_0_cannot_be_specified_when_option_jsx_is_1_5089", "Option '{0}' cannot be specified when option 'jsx' is '{1}'."),
        Non_relative_paths_are_not_allowed_when_baseUrl_is_not_set_Did_you_forget_a_leading_Slash: diag(5090, 1 /* Error */, "Non_relative_paths_are_not_allowed_when_baseUrl_is_not_set_Did_you_forget_a_leading_Slash_5090", "Non-relative paths are not allowed when 'baseUrl' is not set. Did you forget a leading './'?"),
        Option_preserveConstEnums_cannot_be_disabled_when_0_is_enabled: diag(5091, 1 /* Error */, "Option_preserveConstEnums_cannot_be_disabled_when_0_is_enabled_5091", "Option 'preserveConstEnums' cannot be disabled when '{0}' is enabled."),
        The_root_value_of_a_0_file_must_be_an_object: diag(5092, 1 /* Error */, "The_root_value_of_a_0_file_must_be_an_object_5092", "The root value of a '{0}' file must be an object."),
        Compiler_option_0_may_only_be_used_with_build: diag(5093, 1 /* Error */, "Compiler_option_0_may_only_be_used_with_build_5093", "Compiler option '--{0}' may only be used with '--build'."),
        Compiler_option_0_may_not_be_used_with_build: diag(5094, 1 /* Error */, "Compiler_option_0_may_not_be_used_with_build_5094", "Compiler option '--{0}' may not be used with '--build'."),
        Option_0_can_only_be_used_when_module_is_set_to_es2015_or_later: diag(5095, 1 /* Error */, "Option_0_can_only_be_used_when_module_is_set_to_es2015_or_later_5095", "Option '{0}' can only be used when 'module' is set to 'es2015' or later."),
        Option_allowImportingTsExtensions_can_only_be_used_when_either_noEmit_or_emitDeclarationOnly_is_set: diag(5096, 1 /* Error */, "Option_allowImportingTsExtensions_can_only_be_used_when_either_noEmit_or_emitDeclarationOnly_is_set_5096", "Option 'allowImportingTsExtensions' can only be used when either 'noEmit' or 'emitDeclarationOnly' is set."),
        An_import_path_can_only_end_with_a_0_extension_when_allowImportingTsExtensions_is_enabled: diag(5097, 1 /* Error */, "An_import_path_can_only_end_with_a_0_extension_when_allowImportingTsExtensions_is_enabled_5097", "An import path can only end with a '{0}' extension when 'allowImportingTsExtensions' is enabled."),
        Option_0_can_only_be_used_when_moduleResolution_is_set_to_node16_nodenext_or_bundler: diag(5098, 1 /* Error */, "Option_0_can_only_be_used_when_moduleResolution_is_set_to_node16_nodenext_or_bundler_5098", "Option '{0}' can only be used when 'moduleResolution' is set to 'node16', 'nodenext', or 'bundler'."),
        Option_0_is_deprecated_and_will_stop_functioning_in_TypeScript_1_Specify_compilerOption_ignoreDeprecations_Colon_2_to_silence_this_error: diag(5101, 1 /* Error */, "Option_0_is_deprecated_and_will_stop_functioning_in_TypeScript_1_Specify_compilerOption_ignoreDeprec_5101", `Option '{0}' is deprecated and will stop functioning in TypeScript {1}. Specify compilerOption '"ignoreDeprecations": "{2}"' to silence this error.`),
        Option_0_has_been_removed_Please_remove_it_from_your_configuration: diag(5102, 1 /* Error */, "Option_0_has_been_removed_Please_remove_it_from_your_configuration_5102", "Option '{0}' has been removed. Please remove it from your configuration."),
        Invalid_value_for_ignoreDeprecations: diag(5103, 1 /* Error */, "Invalid_value_for_ignoreDeprecations_5103", "Invalid value for '--ignoreDeprecations'."),
        Option_0_is_redundant_and_cannot_be_specified_with_option_1: diag(5104, 1 /* Error */, "Option_0_is_redundant_and_cannot_be_specified_with_option_1_5104", "Option '{0}' is redundant and cannot be specified with option '{1}'."),
        Option_verbatimModuleSyntax_cannot_be_used_when_module_is_set_to_UMD_AMD_or_System: diag(5105, 1 /* Error */, "Option_verbatimModuleSyntax_cannot_be_used_when_module_is_set_to_UMD_AMD_or_System_5105", "Option 'verbatimModuleSyntax' cannot be used when 'module' is set to 'UMD', 'AMD', or 'System'."),
        Use_0_instead: diag(5106, 3 /* Message */, "Use_0_instead_5106", "Use '{0}' instead."),
        Option_0_1_is_deprecated_and_will_stop_functioning_in_TypeScript_2_Specify_compilerOption_ignoreDeprecations_Colon_3_to_silence_this_error: diag(5107, 1 /* Error */, "Option_0_1_is_deprecated_and_will_stop_functioning_in_TypeScript_2_Specify_compilerOption_ignoreDepr_5107", `Option '{0}={1}' is deprecated and will stop functioning in TypeScript {2}. Specify compilerOption '"ignoreDeprecations": "{3}"' to silence this error.`),
        Option_0_1_has_been_removed_Please_remove_it_from_your_configuration: diag(5108, 1 /* Error */, "Option_0_1_has_been_removed_Please_remove_it_from_your_configuration_5108", "Option '{0}={1}' has been removed. Please remove it from your configuration."),
        Generates_a_sourcemap_for_each_corresponding_d_ts_file: diag(6e3, 3 /* Message */, "Generates_a_sourcemap_for_each_corresponding_d_ts_file_6000", "Generates a sourcemap for each corresponding '.d.ts' file."),
        Concatenate_and_emit_output_to_single_file: diag(6001, 3 /* Message */, "Concatenate_and_emit_output_to_single_file_6001", "Concatenate and emit output to single file."),
        Generates_corresponding_d_ts_file: diag(6002, 3 /* Message */, "Generates_corresponding_d_ts_file_6002", "Generates corresponding '.d.ts' file."),
        Specify_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations: diag(6004, 3 /* Message */, "Specify_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations_6004", "Specify the location where debugger should locate TypeScript files instead of source locations."),
        Watch_input_files: diag(6005, 3 /* Message */, "Watch_input_files_6005", "Watch input files."),
        Redirect_output_structure_to_the_directory: diag(6006, 3 /* Message */, "Redirect_output_structure_to_the_directory_6006", "Redirect output structure to the directory."),
        Do_not_erase_const_enum_declarations_in_generated_code: diag(6007, 3 /* Message */, "Do_not_erase_const_enum_declarations_in_generated_code_6007", "Do not erase const enum declarations in generated code."),
        Do_not_emit_outputs_if_any_errors_were_reported: diag(6008, 3 /* Message */, "Do_not_emit_outputs_if_any_errors_were_reported_6008", "Do not emit outputs if any errors were reported."),
        Do_not_emit_comments_to_output: diag(6009, 3 /* Message */, "Do_not_emit_comments_to_output_6009", "Do not emit comments to output."),
        Do_not_emit_outputs: diag(6010, 3 /* Message */, "Do_not_emit_outputs_6010", "Do not emit outputs."),
        Allow_default_imports_from_modules_with_no_default_export_This_does_not_affect_code_emit_just_typechecking: diag(6011, 3 /* Message */, "Allow_default_imports_from_modules_with_no_default_export_This_does_not_affect_code_emit_just_typech_6011", "Allow default imports from modules with no default export. This does not affect code emit, just typechecking."),
        Skip_type_checking_of_declaration_files: diag(6012, 3 /* Message */, "Skip_type_checking_of_declaration_files_6012", "Skip type checking of declaration files."),
        Do_not_resolve_the_real_path_of_symlinks: diag(6013, 3 /* Message */, "Do_not_resolve_the_real_path_of_symlinks_6013", "Do not resolve the real path of symlinks."),
        Only_emit_d_ts_declaration_files: diag(6014, 3 /* Message */, "Only_emit_d_ts_declaration_files_6014", "Only emit '.d.ts' declaration files."),
        Specify_ECMAScript_target_version: diag(6015, 3 /* Message */, "Specify_ECMAScript_target_version_6015", "Specify ECMAScript target version."),
        Specify_module_code_generation: diag(6016, 3 /* Message */, "Specify_module_code_generation_6016", "Specify module code generation."),
        Print_this_message: diag(6017, 3 /* Message */, "Print_this_message_6017", "Print this message."),
        Print_the_compiler_s_version: diag(6019, 3 /* Message */, "Print_the_compiler_s_version_6019", "Print the compiler's version."),
        Compile_the_project_given_the_path_to_its_configuration_file_or_to_a_folder_with_a_tsconfig_json: diag(6020, 3 /* Message */, "Compile_the_project_given_the_path_to_its_configuration_file_or_to_a_folder_with_a_tsconfig_json_6020", "Compile the project given the path to its configuration file, or to a folder with a 'tsconfig.json'."),
        Syntax_Colon_0: diag(6023, 3 /* Message */, "Syntax_Colon_0_6023", "Syntax: {0}"),
        options: diag(6024, 3 /* Message */, "options_6024", "options"),
        file: diag(6025, 3 /* Message */, "file_6025", "file"),
        Examples_Colon_0: diag(6026, 3 /* Message */, "Examples_Colon_0_6026", "Examples: {0}"),
        Options_Colon: diag(6027, 3 /* Message */, "Options_Colon_6027", "Options:"),
        Version_0: diag(6029, 3 /* Message */, "Version_0_6029", "Version {0}"),
        Insert_command_line_options_and_files_from_a_file: diag(6030, 3 /* Message */, "Insert_command_line_options_and_files_from_a_file_6030", "Insert command line options and files from a file."),
        Starting_compilation_in_watch_mode: diag(6031, 3 /* Message */, "Starting_compilation_in_watch_mode_6031", "Starting compilation in watch mode..."),
        File_change_detected_Starting_incremental_compilation: diag(6032, 3 /* Message */, "File_change_detected_Starting_incremental_compilation_6032", "File change detected. Starting incremental compilation..."),
        KIND: diag(6034, 3 /* Message */, "KIND_6034", "KIND"),
        FILE: diag(6035, 3 /* Message */, "FILE_6035", "FILE"),
        VERSION: diag(6036, 3 /* Message */, "VERSION_6036", "VERSION"),
        LOCATION: diag(6037, 3 /* Message */, "LOCATION_6037", "LOCATION"),
        DIRECTORY: diag(6038, 3 /* Message */, "DIRECTORY_6038", "DIRECTORY"),
        STRATEGY: diag(6039, 3 /* Message */, "STRATEGY_6039", "STRATEGY"),
        FILE_OR_DIRECTORY: diag(6040, 3 /* Message */, "FILE_OR_DIRECTORY_6040", "FILE OR DIRECTORY"),
        Errors_Files: diag(6041, 3 /* Message */, "Errors_Files_6041", "Errors  Files"),
        Generates_corresponding_map_file: diag(6043, 3 /* Message */, "Generates_corresponding_map_file_6043", "Generates corresponding '.map' file."),
        Compiler_option_0_expects_an_argument: diag(6044, 1 /* Error */, "Compiler_option_0_expects_an_argument_6044", "Compiler option '{0}' expects an argument."),
        Unterminated_quoted_string_in_response_file_0: diag(6045, 1 /* Error */, "Unterminated_quoted_string_in_response_file_0_6045", "Unterminated quoted string in response file '{0}'."),
        Argument_for_0_option_must_be_Colon_1: diag(6046, 1 /* Error */, "Argument_for_0_option_must_be_Colon_1_6046", "Argument for '{0}' option must be: {1}."),
        Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1: diag(6048, 1 /* Error */, "Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1_6048", "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'."),
        Unable_to_open_file_0: diag(6050, 1 /* Error */, "Unable_to_open_file_0_6050", "Unable to open file '{0}'."),
        Corrupted_locale_file_0: diag(6051, 1 /* Error */, "Corrupted_locale_file_0_6051", "Corrupted locale file {0}."),
        Raise_error_on_expressions_and_declarations_with_an_implied_any_type: diag(6052, 3 /* Message */, "Raise_error_on_expressions_and_declarations_with_an_implied_any_type_6052", "Raise error on expressions and declarations with an implied 'any' type."),
        File_0_not_found: diag(6053, 1 /* Error */, "File_0_not_found_6053", "File '{0}' not found."),
        File_0_has_an_unsupported_extension_The_only_supported_extensions_are_1: diag(6054, 1 /* Error */, "File_0_has_an_unsupported_extension_The_only_supported_extensions_are_1_6054", "File '{0}' has an unsupported extension. The only supported extensions are {1}."),
        Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures: diag(6055, 3 /* Message */, "Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures_6055", "Suppress noImplicitAny errors for indexing objects lacking index signatures."),
        Do_not_emit_declarations_for_code_that_has_an_internal_annotation: diag(6056, 3 /* Message */, "Do_not_emit_declarations_for_code_that_has_an_internal_annotation_6056", "Do not emit declarations for code that has an '@internal' annotation."),
        Specify_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir: diag(6058, 3 /* Message */, "Specify_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir_6058", "Specify the root directory of input files. Use to control the output directory structure with --outDir."),
        File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files: diag(6059, 1 /* Error */, "File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files_6059", "File '{0}' is not under 'rootDir' '{1}'. 'rootDir' is expected to contain all source files."),
        Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: diag(6060, 3 /* Message */, "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060", "Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)."),
        NEWLINE: diag(6061, 3 /* Message */, "NEWLINE_6061", "NEWLINE"),
        Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line: diag(6064, 1 /* Error */, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'null' on command line."),
        Enables_experimental_support_for_ES7_decorators: diag(6065, 3 /* Message */, "Enables_experimental_support_for_ES7_decorators_6065", "Enables experimental support for ES7 decorators."),
        Enables_experimental_support_for_emitting_type_metadata_for_decorators: diag(6066, 3 /* Message */, "Enables_experimental_support_for_emitting_type_metadata_for_decorators_6066", "Enables experimental support for emitting type metadata for decorators."),
        Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file: diag(6070, 3 /* Message */, "Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file_6070", "Initializes a TypeScript project and creates a tsconfig.json file."),
        Successfully_created_a_tsconfig_json_file: diag(6071, 3 /* Message */, "Successfully_created_a_tsconfig_json_file_6071", "Successfully created a tsconfig.json file."),
        Suppress_excess_property_checks_for_object_literals: diag(6072, 3 /* Message */, "Suppress_excess_property_checks_for_object_literals_6072", "Suppress excess property checks for object literals."),
        Stylize_errors_and_messages_using_color_and_context_experimental: diag(6073, 3 /* Message */, "Stylize_errors_and_messages_using_color_and_context_experimental_6073", "Stylize errors and messages using color and context (experimental)."),
        Do_not_report_errors_on_unused_labels: diag(6074, 3 /* Message */, "Do_not_report_errors_on_unused_labels_6074", "Do not report errors on unused labels."),
        Report_error_when_not_all_code_paths_in_function_return_a_value: diag(6075, 3 /* Message */, "Report_error_when_not_all_code_paths_in_function_return_a_value_6075", "Report error when not all code paths in function return a value."),
        Report_errors_for_fallthrough_cases_in_switch_statement: diag(6076, 3 /* Message */, "Report_errors_for_fallthrough_cases_in_switch_statement_6076", "Report errors for fallthrough cases in switch statement."),
        Do_not_report_errors_on_unreachable_code: diag(6077, 3 /* Message */, "Do_not_report_errors_on_unreachable_code_6077", "Do not report errors on unreachable code."),
        Disallow_inconsistently_cased_references_to_the_same_file: diag(6078, 3 /* Message */, "Disallow_inconsistently_cased_references_to_the_same_file_6078", "Disallow inconsistently-cased references to the same file."),
        Specify_library_files_to_be_included_in_the_compilation: diag(6079, 3 /* Message */, "Specify_library_files_to_be_included_in_the_compilation_6079", "Specify library files to be included in the compilation."),
        Specify_JSX_code_generation: diag(6080, 3 /* Message */, "Specify_JSX_code_generation_6080", "Specify JSX code generation."),
        File_0_has_an_unsupported_extension_so_skipping_it: diag(6081, 3 /* Message */, "File_0_has_an_unsupported_extension_so_skipping_it_6081", "File '{0}' has an unsupported extension, so skipping it."),
        Only_amd_and_system_modules_are_supported_alongside_0: diag(6082, 1 /* Error */, "Only_amd_and_system_modules_are_supported_alongside_0_6082", "Only 'amd' and 'system' modules are supported alongside --{0}."),
        Base_directory_to_resolve_non_absolute_module_names: diag(6083, 3 /* Message */, "Base_directory_to_resolve_non_absolute_module_names_6083", "Base directory to resolve non-absolute module names."),
        Deprecated_Use_jsxFactory_instead_Specify_the_object_invoked_for_createElement_when_targeting_react_JSX_emit: diag(6084, 3 /* Message */, "Deprecated_Use_jsxFactory_instead_Specify_the_object_invoked_for_createElement_when_targeting_react__6084", "[Deprecated] Use '--jsxFactory' instead. Specify the object invoked for createElement when targeting 'react' JSX emit"),
        Enable_tracing_of_the_name_resolution_process: diag(6085, 3 /* Message */, "Enable_tracing_of_the_name_resolution_process_6085", "Enable tracing of the name resolution process."),
        Resolving_module_0_from_1: diag(6086, 3 /* Message */, "Resolving_module_0_from_1_6086", "======== Resolving module '{0}' from '{1}'. ========"),
        Explicitly_specified_module_resolution_kind_Colon_0: diag(6087, 3 /* Message */, "Explicitly_specified_module_resolution_kind_Colon_0_6087", "Explicitly specified module resolution kind: '{0}'."),
        Module_resolution_kind_is_not_specified_using_0: diag(6088, 3 /* Message */, "Module_resolution_kind_is_not_specified_using_0_6088", "Module resolution kind is not specified, using '{0}'."),
        Module_name_0_was_successfully_resolved_to_1: diag(6089, 3 /* Message */, "Module_name_0_was_successfully_resolved_to_1_6089", "======== Module name '{0}' was successfully resolved to '{1}'. ========"),
        Module_name_0_was_not_resolved: diag(6090, 3 /* Message */, "Module_name_0_was_not_resolved_6090", "======== Module name '{0}' was not resolved. ========"),
        paths_option_is_specified_looking_for_a_pattern_to_match_module_name_0: diag(6091, 3 /* Message */, "paths_option_is_specified_looking_for_a_pattern_to_match_module_name_0_6091", "'paths' option is specified, looking for a pattern to match module name '{0}'."),
        Module_name_0_matched_pattern_1: diag(6092, 3 /* Message */, "Module_name_0_matched_pattern_1_6092", "Module name '{0}', matched pattern '{1}'."),
        Trying_substitution_0_candidate_module_location_Colon_1: diag(6093, 3 /* Message */, "Trying_substitution_0_candidate_module_location_Colon_1_6093", "Trying substitution '{0}', candidate module location: '{1}'."),
        Resolving_module_name_0_relative_to_base_url_1_2: diag(6094, 3 /* Message */, "Resolving_module_name_0_relative_to_base_url_1_2_6094", "Resolving module name '{0}' relative to base url '{1}' - '{2}'."),
        Loading_module_as_file_Slash_folder_candidate_module_location_0_target_file_types_Colon_1: diag(6095, 3 /* Message */, "Loading_module_as_file_Slash_folder_candidate_module_location_0_target_file_types_Colon_1_6095", "Loading module as file / folder, candidate module location '{0}', target file types: {1}."),
        File_0_does_not_exist: diag(6096, 3 /* Message */, "File_0_does_not_exist_6096", "File '{0}' does not exist."),
        File_0_exists_use_it_as_a_name_resolution_result: diag(6097, 3 /* Message */, "File_0_exists_use_it_as_a_name_resolution_result_6097", "File '{0}' exists - use it as a name resolution result."),
        Loading_module_0_from_node_modules_folder_target_file_types_Colon_1: diag(6098, 3 /* Message */, "Loading_module_0_from_node_modules_folder_target_file_types_Colon_1_6098", "Loading module '{0}' from 'node_modules' folder, target file types: {1}."),
        Found_package_json_at_0: diag(6099, 3 /* Message */, "Found_package_json_at_0_6099", "Found 'package.json' at '{0}'."),
        package_json_does_not_have_a_0_field: diag(6100, 3 /* Message */, "package_json_does_not_have_a_0_field_6100", "'package.json' does not have a '{0}' field."),
        package_json_has_0_field_1_that_references_2: diag(6101, 3 /* Message */, "package_json_has_0_field_1_that_references_2_6101", "'package.json' has '{0}' field '{1}' that references '{2}'."),
        Allow_javascript_files_to_be_compiled: diag(6102, 3 /* Message */, "Allow_javascript_files_to_be_compiled_6102", "Allow javascript files to be compiled."),
        Checking_if_0_is_the_longest_matching_prefix_for_1_2: diag(6104, 3 /* Message */, "Checking_if_0_is_the_longest_matching_prefix_for_1_2_6104", "Checking if '{0}' is the longest matching prefix for '{1}' - '{2}'."),
        Expected_type_of_0_field_in_package_json_to_be_1_got_2: diag(6105, 3 /* Message */, "Expected_type_of_0_field_in_package_json_to_be_1_got_2_6105", "Expected type of '{0}' field in 'package.json' to be '{1}', got '{2}'."),
        baseUrl_option_is_set_to_0_using_this_value_to_resolve_non_relative_module_name_1: diag(6106, 3 /* Message */, "baseUrl_option_is_set_to_0_using_this_value_to_resolve_non_relative_module_name_1_6106", "'baseUrl' option is set to '{0}', using this value to resolve non-relative module name '{1}'."),
        rootDirs_option_is_set_using_it_to_resolve_relative_module_name_0: diag(6107, 3 /* Message */, "rootDirs_option_is_set_using_it_to_resolve_relative_module_name_0_6107", "'rootDirs' option is set, using it to resolve relative module name '{0}'."),
        Longest_matching_prefix_for_0_is_1: diag(6108, 3 /* Message */, "Longest_matching_prefix_for_0_is_1_6108", "Longest matching prefix for '{0}' is '{1}'."),
        Loading_0_from_the_root_dir_1_candidate_location_2: diag(6109, 3 /* Message */, "Loading_0_from_the_root_dir_1_candidate_location_2_6109", "Loading '{0}' from the root dir '{1}', candidate location '{2}'."),
        Trying_other_entries_in_rootDirs: diag(6110, 3 /* Message */, "Trying_other_entries_in_rootDirs_6110", "Trying other entries in 'rootDirs'."),
        Module_resolution_using_rootDirs_has_failed: diag(6111, 3 /* Message */, "Module_resolution_using_rootDirs_has_failed_6111", "Module resolution using 'rootDirs' has failed."),
        Do_not_emit_use_strict_directives_in_module_output: diag(6112, 3 /* Message */, "Do_not_emit_use_strict_directives_in_module_output_6112", "Do not emit 'use strict' directives in module output."),
        Enable_strict_null_checks: diag(6113, 3 /* Message */, "Enable_strict_null_checks_6113", "Enable strict null checks."),
        Unknown_option_excludes_Did_you_mean_exclude: diag(6114, 1 /* Error */, "Unknown_option_excludes_Did_you_mean_exclude_6114", "Unknown option 'excludes'. Did you mean 'exclude'?"),
        Raise_error_on_this_expressions_with_an_implied_any_type: diag(6115, 3 /* Message */, "Raise_error_on_this_expressions_with_an_implied_any_type_6115", "Raise error on 'this' expressions with an implied 'any' type."),
        Resolving_type_reference_directive_0_containing_file_1_root_directory_2: diag(6116, 3 /* Message */, "Resolving_type_reference_directive_0_containing_file_1_root_directory_2_6116", "======== Resolving type reference directive '{0}', containing file '{1}', root directory '{2}'. ========"),
        Type_reference_directive_0_was_successfully_resolved_to_1_primary_Colon_2: diag(6119, 3 /* Message */, "Type_reference_directive_0_was_successfully_resolved_to_1_primary_Colon_2_6119", "======== Type reference directive '{0}' was successfully resolved to '{1}', primary: {2}. ========"),
        Type_reference_directive_0_was_not_resolved: diag(6120, 3 /* Message */, "Type_reference_directive_0_was_not_resolved_6120", "======== Type reference directive '{0}' was not resolved. ========"),
        Resolving_with_primary_search_path_0: diag(6121, 3 /* Message */, "Resolving_with_primary_search_path_0_6121", "Resolving with primary search path '{0}'."),
        Root_directory_cannot_be_determined_skipping_primary_search_paths: diag(6122, 3 /* Message */, "Root_directory_cannot_be_determined_skipping_primary_search_paths_6122", "Root directory cannot be determined, skipping primary search paths."),
        Resolving_type_reference_directive_0_containing_file_1_root_directory_not_set: diag(6123, 3 /* Message */, "Resolving_type_reference_directive_0_containing_file_1_root_directory_not_set_6123", "======== Resolving type reference directive '{0}', containing file '{1}', root directory not set. ========"),
        Type_declaration_files_to_be_included_in_compilation: diag(6124, 3 /* Message */, "Type_declaration_files_to_be_included_in_compilation_6124", "Type declaration files to be included in compilation."),
        Looking_up_in_node_modules_folder_initial_location_0: diag(6125, 3 /* Message */, "Looking_up_in_node_modules_folder_initial_location_0_6125", "Looking up in 'node_modules' folder, initial location '{0}'."),
        Containing_file_is_not_specified_and_root_directory_cannot_be_determined_skipping_lookup_in_node_modules_folder: diag(6126, 3 /* Message */, "Containing_file_is_not_specified_and_root_directory_cannot_be_determined_skipping_lookup_in_node_mod_6126", "Containing file is not specified and root directory cannot be determined, skipping lookup in 'node_modules' folder."),
        Resolving_type_reference_directive_0_containing_file_not_set_root_directory_1: diag(6127, 3 /* Message */, "Resolving_type_reference_directive_0_containing_file_not_set_root_directory_1_6127", "======== Resolving type reference directive '{0}', containing file not set, root directory '{1}'. ========"),
        Resolving_type_reference_directive_0_containing_file_not_set_root_directory_not_set: diag(6128, 3 /* Message */, "Resolving_type_reference_directive_0_containing_file_not_set_root_directory_not_set_6128", "======== Resolving type reference directive '{0}', containing file not set, root directory not set. ========"),
        Resolving_real_path_for_0_result_1: diag(6130, 3 /* Message */, "Resolving_real_path_for_0_result_1_6130", "Resolving real path for '{0}', result '{1}'."),
        Cannot_compile_modules_using_option_0_unless_the_module_flag_is_amd_or_system: diag(6131, 1 /* Error */, "Cannot_compile_modules_using_option_0_unless_the_module_flag_is_amd_or_system_6131", "Cannot compile modules using option '{0}' unless the '--module' flag is 'amd' or 'system'."),
        File_name_0_has_a_1_extension_stripping_it: diag(6132, 3 /* Message */, "File_name_0_has_a_1_extension_stripping_it_6132", "File name '{0}' has a '{1}' extension - stripping it."),
        _0_is_declared_but_its_value_is_never_read: diag(
          6133,
          1 /* Error */,
          "_0_is_declared_but_its_value_is_never_read_6133",
          "'{0}' is declared but its value is never read.",
          /*reportsUnnecessary*/
          true
        ),
        Report_errors_on_unused_locals: diag(6134, 3 /* Message */, "Report_errors_on_unused_locals_6134", "Report errors on unused locals."),
        Report_errors_on_unused_parameters: diag(6135, 3 /* Message */, "Report_errors_on_unused_parameters_6135", "Report errors on unused parameters."),
        The_maximum_dependency_depth_to_search_under_node_modules_and_load_JavaScript_files: diag(6136, 3 /* Message */, "The_maximum_dependency_depth_to_search_under_node_modules_and_load_JavaScript_files_6136", "The maximum dependency depth to search under node_modules and load JavaScript files."),
        Cannot_import_type_declaration_files_Consider_importing_0_instead_of_1: diag(6137, 1 /* Error */, "Cannot_import_type_declaration_files_Consider_importing_0_instead_of_1_6137", "Cannot import type declaration files. Consider importing '{0}' instead of '{1}'."),
        Property_0_is_declared_but_its_value_is_never_read: diag(
          6138,
          1 /* Error */,
          "Property_0_is_declared_but_its_value_is_never_read_6138",
          "Property '{0}' is declared but its value is never read.",
          /*reportsUnnecessary*/
          true
        ),
        Import_emit_helpers_from_tslib: diag(6139, 3 /* Message */, "Import_emit_helpers_from_tslib_6139", "Import emit helpers from 'tslib'."),
        Auto_discovery_for_typings_is_enabled_in_project_0_Running_extra_resolution_pass_for_module_1_using_cache_location_2: diag(6140, 1 /* Error */, "Auto_discovery_for_typings_is_enabled_in_project_0_Running_extra_resolution_pass_for_module_1_using__6140", "Auto discovery for typings is enabled in project '{0}'. Running extra resolution pass for module '{1}' using cache location '{2}'."),
        Parse_in_strict_mode_and_emit_use_strict_for_each_source_file: diag(6141, 3 /* Message */, "Parse_in_strict_mode_and_emit_use_strict_for_each_source_file_6141", 'Parse in strict mode and emit "use strict" for each source file.'),
        Module_0_was_resolved_to_1_but_jsx_is_not_set: diag(6142, 1 /* Error */, "Module_0_was_resolved_to_1_but_jsx_is_not_set_6142", "Module '{0}' was resolved to '{1}', but '--jsx' is not set."),
        Module_0_was_resolved_as_locally_declared_ambient_module_in_file_1: diag(6144, 3 /* Message */, "Module_0_was_resolved_as_locally_declared_ambient_module_in_file_1_6144", "Module '{0}' was resolved as locally declared ambient module in file '{1}'."),
        Module_0_was_resolved_as_ambient_module_declared_in_1_since_this_file_was_not_modified: diag(6145, 3 /* Message */, "Module_0_was_resolved_as_ambient_module_declared_in_1_since_this_file_was_not_modified_6145", "Module '{0}' was resolved as ambient module declared in '{1}' since this file was not modified."),
        Specify_the_JSX_factory_function_to_use_when_targeting_react_JSX_emit_e_g_React_createElement_or_h: diag(6146, 3 /* Message */, "Specify_the_JSX_factory_function_to_use_when_targeting_react_JSX_emit_e_g_React_createElement_or_h_6146", "Specify the JSX factory function to use when targeting 'react' JSX emit, e.g. 'React.createElement' or 'h'."),
        Resolution_for_module_0_was_found_in_cache_from_location_1: diag(6147, 3 /* Message */, "Resolution_for_module_0_was_found_in_cache_from_location_1_6147", "Resolution for module '{0}' was found in cache from location '{1}'."),
        Directory_0_does_not_exist_skipping_all_lookups_in_it: diag(6148, 3 /* Message */, "Directory_0_does_not_exist_skipping_all_lookups_in_it_6148", "Directory '{0}' does not exist, skipping all lookups in it."),
        Show_diagnostic_information: diag(6149, 3 /* Message */, "Show_diagnostic_information_6149", "Show diagnostic information."),
        Show_verbose_diagnostic_information: diag(6150, 3 /* Message */, "Show_verbose_diagnostic_information_6150", "Show verbose diagnostic information."),
        Emit_a_single_file_with_source_maps_instead_of_having_a_separate_file: diag(6151, 3 /* Message */, "Emit_a_single_file_with_source_maps_instead_of_having_a_separate_file_6151", "Emit a single file with source maps instead of having a separate file."),
        Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap_to_be_set: diag(6152, 3 /* Message */, "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152", "Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set."),
        Transpile_each_file_as_a_separate_module_similar_to_ts_transpileModule: diag(6153, 3 /* Message */, "Transpile_each_file_as_a_separate_module_similar_to_ts_transpileModule_6153", "Transpile each file as a separate module (similar to 'ts.transpileModule')."),
        Print_names_of_generated_files_part_of_the_compilation: diag(6154, 3 /* Message */, "Print_names_of_generated_files_part_of_the_compilation_6154", "Print names of generated files part of the compilation."),
        Print_names_of_files_part_of_the_compilation: diag(6155, 3 /* Message */, "Print_names_of_files_part_of_the_compilation_6155", "Print names of files part of the compilation."),
        The_locale_used_when_displaying_messages_to_the_user_e_g_en_us: diag(6156, 3 /* Message */, "The_locale_used_when_displaying_messages_to_the_user_e_g_en_us_6156", "The locale used when displaying messages to the user (e.g. 'en-us')"),
        Do_not_generate_custom_helper_functions_like_extends_in_compiled_output: diag(6157, 3 /* Message */, "Do_not_generate_custom_helper_functions_like_extends_in_compiled_output_6157", "Do not generate custom helper functions like '__extends' in compiled output."),
        Do_not_include_the_default_library_file_lib_d_ts: diag(6158, 3 /* Message */, "Do_not_include_the_default_library_file_lib_d_ts_6158", "Do not include the default library file (lib.d.ts)."),
        Do_not_add_triple_slash_references_or_imported_modules_to_the_list_of_compiled_files: diag(6159, 3 /* Message */, "Do_not_add_triple_slash_references_or_imported_modules_to_the_list_of_compiled_files_6159", "Do not add triple-slash references or imported modules to the list of compiled files."),
        Deprecated_Use_skipLibCheck_instead_Skip_type_checking_of_default_library_declaration_files: diag(6160, 3 /* Message */, "Deprecated_Use_skipLibCheck_instead_Skip_type_checking_of_default_library_declaration_files_6160", "[Deprecated] Use '--skipLibCheck' instead. Skip type checking of default library declaration files."),
        List_of_folders_to_include_type_definitions_from: diag(6161, 3 /* Message */, "List_of_folders_to_include_type_definitions_from_6161", "List of folders to include type definitions from."),
        Disable_size_limitations_on_JavaScript_projects: diag(6162, 3 /* Message */, "Disable_size_limitations_on_JavaScript_projects_6162", "Disable size limitations on JavaScript projects."),
        The_character_set_of_the_input_files: diag(6163, 3 /* Message */, "The_character_set_of_the_input_files_6163", "The character set of the input files."),
        Do_not_truncate_error_messages: diag(6165, 3 /* Message */, "Do_not_truncate_error_messages_6165", "Do not truncate error messages."),
        Output_directory_for_generated_declaration_files: diag(6166, 3 /* Message */, "Output_directory_for_generated_declaration_files_6166", "Output directory for generated declaration files."),
        A_series_of_entries_which_re_map_imports_to_lookup_locations_relative_to_the_baseUrl: diag(6167, 3 /* Message */, "A_series_of_entries_which_re_map_imports_to_lookup_locations_relative_to_the_baseUrl_6167", "A series of entries which re-map imports to lookup locations relative to the 'baseUrl'."),
        List_of_root_folders_whose_combined_content_represents_the_structure_of_the_project_at_runtime: diag(6168, 3 /* Message */, "List_of_root_folders_whose_combined_content_represents_the_structure_of_the_project_at_runtime_6168", "List of root folders whose combined content represents the structure of the project at runtime."),
        Show_all_compiler_options: diag(6169, 3 /* Message */, "Show_all_compiler_options_6169", "Show all compiler options."),
        Deprecated_Use_outFile_instead_Concatenate_and_emit_output_to_single_file: diag(6170, 3 /* Message */, "Deprecated_Use_outFile_instead_Concatenate_and_emit_output_to_single_file_6170", "[Deprecated] Use '--outFile' instead. Concatenate and emit output to single file"),
        Command_line_Options: diag(6171, 3 /* Message */, "Command_line_Options_6171", "Command-line Options"),
        Provide_full_support_for_iterables_in_for_of_spread_and_destructuring_when_targeting_ES5_or_ES3: diag(6179, 3 /* Message */, "Provide_full_support_for_iterables_in_for_of_spread_and_destructuring_when_targeting_ES5_or_ES3_6179", "Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'."),
        Enable_all_strict_type_checking_options: diag(6180, 3 /* Message */, "Enable_all_strict_type_checking_options_6180", "Enable all strict type-checking options."),
        Scoped_package_detected_looking_in_0: diag(6182, 3 /* Message */, "Scoped_package_detected_looking_in_0_6182", "Scoped package detected, looking in '{0}'"),
        Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2: diag(6183, 3 /* Message */, "Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2_6183", "Reusing resolution of module '{0}' from '{1}' of old program, it was successfully resolved to '{2}'."),
        Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2_with_Package_ID_3: diag(6184, 3 /* Message */, "Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2_with_Package__6184", "Reusing resolution of module '{0}' from '{1}' of old program, it was successfully resolved to '{2}' with Package ID '{3}'."),
        Enable_strict_checking_of_function_types: diag(6186, 3 /* Message */, "Enable_strict_checking_of_function_types_6186", "Enable strict checking of function types."),
        Enable_strict_checking_of_property_initialization_in_classes: diag(6187, 3 /* Message */, "Enable_strict_checking_of_property_initialization_in_classes_6187", "Enable strict checking of property initialization in classes."),
        Numeric_separators_are_not_allowed_here: diag(6188, 1 /* Error */, "Numeric_separators_are_not_allowed_here_6188", "Numeric separators are not allowed here."),
        Multiple_consecutive_numeric_separators_are_not_permitted: diag(6189, 1 /* Error */, "Multiple_consecutive_numeric_separators_are_not_permitted_6189", "Multiple consecutive numeric separators are not permitted."),
        Whether_to_keep_outdated_console_output_in_watch_mode_instead_of_clearing_the_screen: diag(6191, 3 /* Message */, "Whether_to_keep_outdated_console_output_in_watch_mode_instead_of_clearing_the_screen_6191", "Whether to keep outdated console output in watch mode instead of clearing the screen."),
        All_imports_in_import_declaration_are_unused: diag(
          6192,
          1 /* Error */,
          "All_imports_in_import_declaration_are_unused_6192",
          "All imports in import declaration are unused.",
          /*reportsUnnecessary*/
          true
        ),
        Found_1_error_Watching_for_file_changes: diag(6193, 3 /* Message */, "Found_1_error_Watching_for_file_changes_6193", "Found 1 error. Watching for file changes."),
        Found_0_errors_Watching_for_file_changes: diag(6194, 3 /* Message */, "Found_0_errors_Watching_for_file_changes_6194", "Found {0} errors. Watching for file changes."),
        Resolve_keyof_to_string_valued_property_names_only_no_numbers_or_symbols: diag(6195, 3 /* Message */, "Resolve_keyof_to_string_valued_property_names_only_no_numbers_or_symbols_6195", "Resolve 'keyof' to string valued property names only (no numbers or symbols)."),
        _0_is_declared_but_never_used: diag(
          6196,
          1 /* Error */,
          "_0_is_declared_but_never_used_6196",
          "'{0}' is declared but never used.",
          /*reportsUnnecessary*/
          true
        ),
        Include_modules_imported_with_json_extension: diag(6197, 3 /* Message */, "Include_modules_imported_with_json_extension_6197", "Include modules imported with '.json' extension"),
        All_destructured_elements_are_unused: diag(
          6198,
          1 /* Error */,
          "All_destructured_elements_are_unused_6198",
          "All destructured elements are unused.",
          /*reportsUnnecessary*/
          true
        ),
        All_variables_are_unused: diag(
          6199,
          1 /* Error */,
          "All_variables_are_unused_6199",
          "All variables are unused.",
          /*reportsUnnecessary*/
          true
        ),
        Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0: diag(6200, 1 /* Error */, "Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0_6200", "Definitions of the following identifiers conflict with those in another file: {0}"),
        Conflicts_are_in_this_file: diag(6201, 3 /* Message */, "Conflicts_are_in_this_file_6201", "Conflicts are in this file."),
        Project_references_may_not_form_a_circular_graph_Cycle_detected_Colon_0: diag(6202, 1 /* Error */, "Project_references_may_not_form_a_circular_graph_Cycle_detected_Colon_0_6202", "Project references may not form a circular graph. Cycle detected: {0}"),
        _0_was_also_declared_here: diag(6203, 3 /* Message */, "_0_was_also_declared_here_6203", "'{0}' was also declared here."),
        and_here: diag(6204, 3 /* Message */, "and_here_6204", "and here."),
        All_type_parameters_are_unused: diag(6205, 1 /* Error */, "All_type_parameters_are_unused_6205", "All type parameters are unused."),
        package_json_has_a_typesVersions_field_with_version_specific_path_mappings: diag(6206, 3 /* Message */, "package_json_has_a_typesVersions_field_with_version_specific_path_mappings_6206", "'package.json' has a 'typesVersions' field with version-specific path mappings."),
        package_json_does_not_have_a_typesVersions_entry_that_matches_version_0: diag(6207, 3 /* Message */, "package_json_does_not_have_a_typesVersions_entry_that_matches_version_0_6207", "'package.json' does not have a 'typesVersions' entry that matches version '{0}'."),
        package_json_has_a_typesVersions_entry_0_that_matches_compiler_version_1_looking_for_a_pattern_to_match_module_name_2: diag(6208, 3 /* Message */, "package_json_has_a_typesVersions_entry_0_that_matches_compiler_version_1_looking_for_a_pattern_to_ma_6208", "'package.json' has a 'typesVersions' entry '{0}' that matches compiler version '{1}', looking for a pattern to match module name '{2}'."),
        package_json_has_a_typesVersions_entry_0_that_is_not_a_valid_semver_range: diag(6209, 3 /* Message */, "package_json_has_a_typesVersions_entry_0_that_is_not_a_valid_semver_range_6209", "'package.json' has a 'typesVersions' entry '{0}' that is not a valid semver range."),
        An_argument_for_0_was_not_provided: diag(6210, 3 /* Message */, "An_argument_for_0_was_not_provided_6210", "An argument for '{0}' was not provided."),
        An_argument_matching_this_binding_pattern_was_not_provided: diag(6211, 3 /* Message */, "An_argument_matching_this_binding_pattern_was_not_provided_6211", "An argument matching this binding pattern was not provided."),
        Did_you_mean_to_call_this_expression: diag(6212, 3 /* Message */, "Did_you_mean_to_call_this_expression_6212", "Did you mean to call this expression?"),
        Did_you_mean_to_use_new_with_this_expression: diag(6213, 3 /* Message */, "Did_you_mean_to_use_new_with_this_expression_6213", "Did you mean to use 'new' with this expression?"),
        Enable_strict_bind_call_and_apply_methods_on_functions: diag(6214, 3 /* Message */, "Enable_strict_bind_call_and_apply_methods_on_functions_6214", "Enable strict 'bind', 'call', and 'apply' methods on functions."),
        Using_compiler_options_of_project_reference_redirect_0: diag(6215, 3 /* Message */, "Using_compiler_options_of_project_reference_redirect_0_6215", "Using compiler options of project reference redirect '{0}'."),
        Found_1_error: diag(6216, 3 /* Message */, "Found_1_error_6216", "Found 1 error."),
        Found_0_errors: diag(6217, 3 /* Message */, "Found_0_errors_6217", "Found {0} errors."),
        Module_name_0_was_successfully_resolved_to_1_with_Package_ID_2: diag(6218, 3 /* Message */, "Module_name_0_was_successfully_resolved_to_1_with_Package_ID_2_6218", "======== Module name '{0}' was successfully resolved to '{1}' with Package ID '{2}'. ========"),
        Type_reference_directive_0_was_successfully_resolved_to_1_with_Package_ID_2_primary_Colon_3: diag(6219, 3 /* Message */, "Type_reference_directive_0_was_successfully_resolved_to_1_with_Package_ID_2_primary_Colon_3_6219", "======== Type reference directive '{0}' was successfully resolved to '{1}' with Package ID '{2}', primary: {3}. ========"),
        package_json_had_a_falsy_0_field: diag(6220, 3 /* Message */, "package_json_had_a_falsy_0_field_6220", "'package.json' had a falsy '{0}' field."),
        Disable_use_of_source_files_instead_of_declaration_files_from_referenced_projects: diag(6221, 3 /* Message */, "Disable_use_of_source_files_instead_of_declaration_files_from_referenced_projects_6221", "Disable use of source files instead of declaration files from referenced projects."),
        Emit_class_fields_with_Define_instead_of_Set: diag(6222, 3 /* Message */, "Emit_class_fields_with_Define_instead_of_Set_6222", "Emit class fields with Define instead of Set."),
        Generates_a_CPU_profile: diag(6223, 3 /* Message */, "Generates_a_CPU_profile_6223", "Generates a CPU profile."),
        Disable_solution_searching_for_this_project: diag(6224, 3 /* Message */, "Disable_solution_searching_for_this_project_6224", "Disable solution searching for this project."),
        Specify_strategy_for_watching_file_Colon_FixedPollingInterval_default_PriorityPollingInterval_DynamicPriorityPolling_FixedChunkSizePolling_UseFsEvents_UseFsEventsOnParentDirectory: diag(6225, 3 /* Message */, "Specify_strategy_for_watching_file_Colon_FixedPollingInterval_default_PriorityPollingInterval_Dynami_6225", "Specify strategy for watching file: 'FixedPollingInterval' (default), 'PriorityPollingInterval', 'DynamicPriorityPolling', 'FixedChunkSizePolling', 'UseFsEvents', 'UseFsEventsOnParentDirectory'."),
        Specify_strategy_for_watching_directory_on_platforms_that_don_t_support_recursive_watching_natively_Colon_UseFsEvents_default_FixedPollingInterval_DynamicPriorityPolling_FixedChunkSizePolling: diag(6226, 3 /* Message */, "Specify_strategy_for_watching_directory_on_platforms_that_don_t_support_recursive_watching_natively__6226", "Specify strategy for watching directory on platforms that don't support recursive watching natively: 'UseFsEvents' (default), 'FixedPollingInterval', 'DynamicPriorityPolling', 'FixedChunkSizePolling'."),
        Specify_strategy_for_creating_a_polling_watch_when_it_fails_to_create_using_file_system_events_Colon_FixedInterval_default_PriorityInterval_DynamicPriority_FixedChunkSize: diag(6227, 3 /* Message */, "Specify_strategy_for_creating_a_polling_watch_when_it_fails_to_create_using_file_system_events_Colon_6227", "Specify strategy for creating a polling watch when it fails to create using file system events: 'FixedInterval' (default), 'PriorityInterval', 'DynamicPriority', 'FixedChunkSize'."),
        Tag_0_expects_at_least_1_arguments_but_the_JSX_factory_2_provides_at_most_3: diag(6229, 1 /* Error */, "Tag_0_expects_at_least_1_arguments_but_the_JSX_factory_2_provides_at_most_3_6229", "Tag '{0}' expects at least '{1}' arguments, but the JSX factory '{2}' provides at most '{3}'."),
        Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line: diag(6230, 1 /* Error */, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'false' or 'null' on command line."),
        Could_not_resolve_the_path_0_with_the_extensions_Colon_1: diag(6231, 1 /* Error */, "Could_not_resolve_the_path_0_with_the_extensions_Colon_1_6231", "Could not resolve the path '{0}' with the extensions: {1}."),
        Declaration_augments_declaration_in_another_file_This_cannot_be_serialized: diag(6232, 1 /* Error */, "Declaration_augments_declaration_in_another_file_This_cannot_be_serialized_6232", "Declaration augments declaration in another file. This cannot be serialized."),
        This_is_the_declaration_being_augmented_Consider_moving_the_augmenting_declaration_into_the_same_file: diag(6233, 1 /* Error */, "This_is_the_declaration_being_augmented_Consider_moving_the_augmenting_declaration_into_the_same_fil_6233", "This is the declaration being augmented. Consider moving the augmenting declaration into the same file."),
        This_expression_is_not_callable_because_it_is_a_get_accessor_Did_you_mean_to_use_it_without: diag(6234, 1 /* Error */, "This_expression_is_not_callable_because_it_is_a_get_accessor_Did_you_mean_to_use_it_without_6234", "This expression is not callable because it is a 'get' accessor. Did you mean to use it without '()'?"),
        Disable_loading_referenced_projects: diag(6235, 3 /* Message */, "Disable_loading_referenced_projects_6235", "Disable loading referenced projects."),
        Arguments_for_the_rest_parameter_0_were_not_provided: diag(6236, 1 /* Error */, "Arguments_for_the_rest_parameter_0_were_not_provided_6236", "Arguments for the rest parameter '{0}' were not provided."),
        Generates_an_event_trace_and_a_list_of_types: diag(6237, 3 /* Message */, "Generates_an_event_trace_and_a_list_of_types_6237", "Generates an event trace and a list of types."),
        Specify_the_module_specifier_to_be_used_to_import_the_jsx_and_jsxs_factory_functions_from_eg_react: diag(6238, 1 /* Error */, "Specify_the_module_specifier_to_be_used_to_import_the_jsx_and_jsxs_factory_functions_from_eg_react_6238", "Specify the module specifier to be used to import the 'jsx' and 'jsxs' factory functions from. eg, react"),
        File_0_exists_according_to_earlier_cached_lookups: diag(6239, 3 /* Message */, "File_0_exists_according_to_earlier_cached_lookups_6239", "File '{0}' exists according to earlier cached lookups."),
        File_0_does_not_exist_according_to_earlier_cached_lookups: diag(6240, 3 /* Message */, "File_0_does_not_exist_according_to_earlier_cached_lookups_6240", "File '{0}' does not exist according to earlier cached lookups."),
        Resolution_for_type_reference_directive_0_was_found_in_cache_from_location_1: diag(6241, 3 /* Message */, "Resolution_for_type_reference_directive_0_was_found_in_cache_from_location_1_6241", "Resolution for type reference directive '{0}' was found in cache from location '{1}'."),
        Resolving_type_reference_directive_0_containing_file_1: diag(6242, 3 /* Message */, "Resolving_type_reference_directive_0_containing_file_1_6242", "======== Resolving type reference directive '{0}', containing file '{1}'. ========"),
        Interpret_optional_property_types_as_written_rather_than_adding_undefined: diag(6243, 3 /* Message */, "Interpret_optional_property_types_as_written_rather_than_adding_undefined_6243", "Interpret optional property types as written, rather than adding 'undefined'."),
        Modules: diag(6244, 3 /* Message */, "Modules_6244", "Modules"),
        File_Management: diag(6245, 3 /* Message */, "File_Management_6245", "File Management"),
        Emit: diag(6246, 3 /* Message */, "Emit_6246", "Emit"),
        JavaScript_Support: diag(6247, 3 /* Message */, "JavaScript_Support_6247", "JavaScript Support"),
        Type_Checking: diag(6248, 3 /* Message */, "Type_Checking_6248", "Type Checking"),
        Editor_Support: diag(6249, 3 /* Message */, "Editor_Support_6249", "Editor Support"),
        Watch_and_Build_Modes: diag(6250, 3 /* Message */, "Watch_and_Build_Modes_6250", "Watch and Build Modes"),
        Compiler_Diagnostics: diag(6251, 3 /* Message */, "Compiler_Diagnostics_6251", "Compiler Diagnostics"),
        Interop_Constraints: diag(6252, 3 /* Message */, "Interop_Constraints_6252", "Interop Constraints"),
        Backwards_Compatibility: diag(6253, 3 /* Message */, "Backwards_Compatibility_6253", "Backwards Compatibility"),
        Language_and_Environment: diag(6254, 3 /* Message */, "Language_and_Environment_6254", "Language and Environment"),
        Projects: diag(6255, 3 /* Message */, "Projects_6255", "Projects"),
        Output_Formatting: diag(6256, 3 /* Message */, "Output_Formatting_6256", "Output Formatting"),
        Completeness: diag(6257, 3 /* Message */, "Completeness_6257", "Completeness"),
        _0_should_be_set_inside_the_compilerOptions_object_of_the_config_json_file: diag(6258, 1 /* Error */, "_0_should_be_set_inside_the_compilerOptions_object_of_the_config_json_file_6258", "'{0}' should be set inside the 'compilerOptions' object of the config json file"),
        Found_1_error_in_1: diag(6259, 3 /* Message */, "Found_1_error_in_1_6259", "Found 1 error in {1}"),
        Found_0_errors_in_the_same_file_starting_at_Colon_1: diag(6260, 3 /* Message */, "Found_0_errors_in_the_same_file_starting_at_Colon_1_6260", "Found {0} errors in the same file, starting at: {1}"),
        Found_0_errors_in_1_files: diag(6261, 3 /* Message */, "Found_0_errors_in_1_files_6261", "Found {0} errors in {1} files."),
        File_name_0_has_a_1_extension_looking_up_2_instead: diag(6262, 3 /* Message */, "File_name_0_has_a_1_extension_looking_up_2_instead_6262", "File name '{0}' has a '{1}' extension - looking up '{2}' instead."),
        Module_0_was_resolved_to_1_but_allowArbitraryExtensions_is_not_set: diag(6263, 1 /* Error */, "Module_0_was_resolved_to_1_but_allowArbitraryExtensions_is_not_set_6263", "Module '{0}' was resolved to '{1}', but '--allowArbitraryExtensions' is not set."),
        Enable_importing_files_with_any_extension_provided_a_declaration_file_is_present: diag(6264, 3 /* Message */, "Enable_importing_files_with_any_extension_provided_a_declaration_file_is_present_6264", "Enable importing files with any extension, provided a declaration file is present."),
        Directory_0_has_no_containing_package_json_scope_Imports_will_not_resolve: diag(6270, 3 /* Message */, "Directory_0_has_no_containing_package_json_scope_Imports_will_not_resolve_6270", "Directory '{0}' has no containing package.json scope. Imports will not resolve."),
        Import_specifier_0_does_not_exist_in_package_json_scope_at_path_1: diag(6271, 3 /* Message */, "Import_specifier_0_does_not_exist_in_package_json_scope_at_path_1_6271", "Import specifier '{0}' does not exist in package.json scope at path '{1}'."),
        Invalid_import_specifier_0_has_no_possible_resolutions: diag(6272, 3 /* Message */, "Invalid_import_specifier_0_has_no_possible_resolutions_6272", "Invalid import specifier '{0}' has no possible resolutions."),
        package_json_scope_0_has_no_imports_defined: diag(6273, 3 /* Message */, "package_json_scope_0_has_no_imports_defined_6273", "package.json scope '{0}' has no imports defined."),
        package_json_scope_0_explicitly_maps_specifier_1_to_null: diag(6274, 3 /* Message */, "package_json_scope_0_explicitly_maps_specifier_1_to_null_6274", "package.json scope '{0}' explicitly maps specifier '{1}' to null."),
        package_json_scope_0_has_invalid_type_for_target_of_specifier_1: diag(6275, 3 /* Message */, "package_json_scope_0_has_invalid_type_for_target_of_specifier_1_6275", "package.json scope '{0}' has invalid type for target of specifier '{1}'"),
        Export_specifier_0_does_not_exist_in_package_json_scope_at_path_1: diag(6276, 3 /* Message */, "Export_specifier_0_does_not_exist_in_package_json_scope_at_path_1_6276", "Export specifier '{0}' does not exist in package.json scope at path '{1}'."),
        Resolution_of_non_relative_name_failed_trying_with_modern_Node_resolution_features_disabled_to_see_if_npm_library_needs_configuration_update: diag(6277, 3 /* Message */, "Resolution_of_non_relative_name_failed_trying_with_modern_Node_resolution_features_disabled_to_see_i_6277", "Resolution of non-relative name failed; trying with modern Node resolution features disabled to see if npm library needs configuration update."),
        There_are_types_at_0_but_this_result_could_not_be_resolved_when_respecting_package_json_exports_The_1_library_may_need_to_update_its_package_json_or_typings: diag(6278, 3 /* Message */, "There_are_types_at_0_but_this_result_could_not_be_resolved_when_respecting_package_json_exports_The__6278", `There are types at '{0}', but this result could not be resolved when respecting package.json "exports". The '{1}' library may need to update its package.json or typings.`),
        Enable_project_compilation: diag(6302, 3 /* Message */, "Enable_project_compilation_6302", "Enable project compilation"),
        Composite_projects_may_not_disable_declaration_emit: diag(6304, 1 /* Error */, "Composite_projects_may_not_disable_declaration_emit_6304", "Composite projects may not disable declaration emit."),
        Output_file_0_has_not_been_built_from_source_file_1: diag(6305, 1 /* Error */, "Output_file_0_has_not_been_built_from_source_file_1_6305", "Output file '{0}' has not been built from source file '{1}'."),
        Referenced_project_0_must_have_setting_composite_Colon_true: diag(6306, 1 /* Error */, "Referenced_project_0_must_have_setting_composite_Colon_true_6306", `Referenced project '{0}' must have setting "composite": true.`),
        File_0_is_not_listed_within_the_file_list_of_project_1_Projects_must_list_all_files_or_use_an_include_pattern: diag(6307, 1 /* Error */, "File_0_is_not_listed_within_the_file_list_of_project_1_Projects_must_list_all_files_or_use_an_includ_6307", "File '{0}' is not listed within the file list of project '{1}'. Projects must list all files or use an 'include' pattern."),
        Cannot_prepend_project_0_because_it_does_not_have_outFile_set: diag(6308, 1 /* Error */, "Cannot_prepend_project_0_because_it_does_not_have_outFile_set_6308", "Cannot prepend project '{0}' because it does not have 'outFile' set"),
        Output_file_0_from_project_1_does_not_exist: diag(6309, 1 /* Error */, "Output_file_0_from_project_1_does_not_exist_6309", "Output file '{0}' from project '{1}' does not exist"),
        Referenced_project_0_may_not_disable_emit: diag(6310, 1 /* Error */, "Referenced_project_0_may_not_disable_emit_6310", "Referenced project '{0}' may not disable emit."),
        Project_0_is_out_of_date_because_output_1_is_older_than_input_2: diag(6350, 3 /* Message */, "Project_0_is_out_of_date_because_output_1_is_older_than_input_2_6350", "Project '{0}' is out of date because output '{1}' is older than input '{2}'"),
        Project_0_is_up_to_date_because_newest_input_1_is_older_than_output_2: diag(6351, 3 /* Message */, "Project_0_is_up_to_date_because_newest_input_1_is_older_than_output_2_6351", "Project '{0}' is up to date because newest input '{1}' is older than output '{2}'"),
        Project_0_is_out_of_date_because_output_file_1_does_not_exist: diag(6352, 3 /* Message */, "Project_0_is_out_of_date_because_output_file_1_does_not_exist_6352", "Project '{0}' is out of date because output file '{1}' does not exist"),
        Project_0_is_out_of_date_because_its_dependency_1_is_out_of_date: diag(6353, 3 /* Message */, "Project_0_is_out_of_date_because_its_dependency_1_is_out_of_date_6353", "Project '{0}' is out of date because its dependency '{1}' is out of date"),
        Project_0_is_up_to_date_with_d_ts_files_from_its_dependencies: diag(6354, 3 /* Message */, "Project_0_is_up_to_date_with_d_ts_files_from_its_dependencies_6354", "Project '{0}' is up to date with .d.ts files from its dependencies"),
        Projects_in_this_build_Colon_0: diag(6355, 3 /* Message */, "Projects_in_this_build_Colon_0_6355", "Projects in this build: {0}"),
        A_non_dry_build_would_delete_the_following_files_Colon_0: diag(6356, 3 /* Message */, "A_non_dry_build_would_delete_the_following_files_Colon_0_6356", "A non-dry build would delete the following files: {0}"),
        A_non_dry_build_would_build_project_0: diag(6357, 3 /* Message */, "A_non_dry_build_would_build_project_0_6357", "A non-dry build would build project '{0}'"),
        Building_project_0: diag(6358, 3 /* Message */, "Building_project_0_6358", "Building project '{0}'..."),
        Updating_output_timestamps_of_project_0: diag(6359, 3 /* Message */, "Updating_output_timestamps_of_project_0_6359", "Updating output timestamps of project '{0}'..."),
        Project_0_is_up_to_date: diag(6361, 3 /* Message */, "Project_0_is_up_to_date_6361", "Project '{0}' is up to date"),
        Skipping_build_of_project_0_because_its_dependency_1_has_errors: diag(6362, 3 /* Message */, "Skipping_build_of_project_0_because_its_dependency_1_has_errors_6362", "Skipping build of project '{0}' because its dependency '{1}' has errors"),
        Project_0_can_t_be_built_because_its_dependency_1_has_errors: diag(6363, 3 /* Message */, "Project_0_can_t_be_built_because_its_dependency_1_has_errors_6363", "Project '{0}' can't be built because its dependency '{1}' has errors"),
        Build_one_or_more_projects_and_their_dependencies_if_out_of_date: diag(6364, 3 /* Message */, "Build_one_or_more_projects_and_their_dependencies_if_out_of_date_6364", "Build one or more projects and their dependencies, if out of date"),
        Delete_the_outputs_of_all_projects: diag(6365, 3 /* Message */, "Delete_the_outputs_of_all_projects_6365", "Delete the outputs of all projects."),
        Show_what_would_be_built_or_deleted_if_specified_with_clean: diag(6367, 3 /* Message */, "Show_what_would_be_built_or_deleted_if_specified_with_clean_6367", "Show what would be built (or deleted, if specified with '--clean')"),
        Option_build_must_be_the_first_command_line_argument: diag(6369, 1 /* Error */, "Option_build_must_be_the_first_command_line_argument_6369", "Option '--build' must be the first command line argument."),
        Options_0_and_1_cannot_be_combined: diag(6370, 1 /* Error */, "Options_0_and_1_cannot_be_combined_6370", "Options '{0}' and '{1}' cannot be combined."),
        Updating_unchanged_output_timestamps_of_project_0: diag(6371, 3 /* Message */, "Updating_unchanged_output_timestamps_of_project_0_6371", "Updating unchanged output timestamps of project '{0}'..."),
        Project_0_is_out_of_date_because_output_of_its_dependency_1_has_changed: diag(6372, 3 /* Message */, "Project_0_is_out_of_date_because_output_of_its_dependency_1_has_changed_6372", "Project '{0}' is out of date because output of its dependency '{1}' has changed"),
        Updating_output_of_project_0: diag(6373, 3 /* Message */, "Updating_output_of_project_0_6373", "Updating output of project '{0}'..."),
        A_non_dry_build_would_update_timestamps_for_output_of_project_0: diag(6374, 3 /* Message */, "A_non_dry_build_would_update_timestamps_for_output_of_project_0_6374", "A non-dry build would update timestamps for output of project '{0}'"),
        A_non_dry_build_would_update_output_of_project_0: diag(6375, 3 /* Message */, "A_non_dry_build_would_update_output_of_project_0_6375", "A non-dry build would update output of project '{0}'"),
        Cannot_update_output_of_project_0_because_there_was_error_reading_file_1: diag(6376, 3 /* Message */, "Cannot_update_output_of_project_0_because_there_was_error_reading_file_1_6376", "Cannot update output of project '{0}' because there was error reading file '{1}'"),
        Cannot_write_file_0_because_it_will_overwrite_tsbuildinfo_file_generated_by_referenced_project_1: diag(6377, 1 /* Error */, "Cannot_write_file_0_because_it_will_overwrite_tsbuildinfo_file_generated_by_referenced_project_1_6377", "Cannot write file '{0}' because it will overwrite '.tsbuildinfo' file generated by referenced project '{1}'"),
        Composite_projects_may_not_disable_incremental_compilation: diag(6379, 1 /* Error */, "Composite_projects_may_not_disable_incremental_compilation_6379", "Composite projects may not disable incremental compilation."),
        Specify_file_to_store_incremental_compilation_information: diag(6380, 3 /* Message */, "Specify_file_to_store_incremental_compilation_information_6380", "Specify file to store incremental compilation information"),
        Project_0_is_out_of_date_because_output_for_it_was_generated_with_version_1_that_differs_with_current_version_2: diag(6381, 3 /* Message */, "Project_0_is_out_of_date_because_output_for_it_was_generated_with_version_1_that_differs_with_curren_6381", "Project '{0}' is out of date because output for it was generated with version '{1}' that differs with current version '{2}'"),
        Skipping_build_of_project_0_because_its_dependency_1_was_not_built: diag(6382, 3 /* Message */, "Skipping_build_of_project_0_because_its_dependency_1_was_not_built_6382", "Skipping build of project '{0}' because its dependency '{1}' was not built"),
        Project_0_can_t_be_built_because_its_dependency_1_was_not_built: diag(6383, 3 /* Message */, "Project_0_can_t_be_built_because_its_dependency_1_was_not_built_6383", "Project '{0}' can't be built because its dependency '{1}' was not built"),
        Have_recompiles_in_incremental_and_watch_assume_that_changes_within_a_file_will_only_affect_files_directly_depending_on_it: diag(6384, 3 /* Message */, "Have_recompiles_in_incremental_and_watch_assume_that_changes_within_a_file_will_only_affect_files_di_6384", "Have recompiles in '--incremental' and '--watch' assume that changes within a file will only affect files directly depending on it."),
        _0_is_deprecated: diag(
          6385,
          2 /* Suggestion */,
          "_0_is_deprecated_6385",
          "'{0}' is deprecated.",
          /*reportsUnnecessary*/
          void 0,
          /*elidedInCompatabilityPyramid*/
          void 0,
          /*reportsDeprecated*/
          true
        ),
        Performance_timings_for_diagnostics_or_extendedDiagnostics_are_not_available_in_this_session_A_native_implementation_of_the_Web_Performance_API_could_not_be_found: diag(6386, 3 /* Message */, "Performance_timings_for_diagnostics_or_extendedDiagnostics_are_not_available_in_this_session_A_nativ_6386", "Performance timings for '--diagnostics' or '--extendedDiagnostics' are not available in this session. A native implementation of the Web Performance API could not be found."),
        The_signature_0_of_1_is_deprecated: diag(
          6387,
          2 /* Suggestion */,
          "The_signature_0_of_1_is_deprecated_6387",
          "The signature '{0}' of '{1}' is deprecated.",
          /*reportsUnnecessary*/
          void 0,
          /*elidedInCompatabilityPyramid*/
          void 0,
          /*reportsDeprecated*/
          true
        ),
        Project_0_is_being_forcibly_rebuilt: diag(6388, 3 /* Message */, "Project_0_is_being_forcibly_rebuilt_6388", "Project '{0}' is being forcibly rebuilt"),
        Reusing_resolution_of_module_0_from_1_of_old_program_it_was_not_resolved: diag(6389, 3 /* Message */, "Reusing_resolution_of_module_0_from_1_of_old_program_it_was_not_resolved_6389", "Reusing resolution of module '{0}' from '{1}' of old program, it was not resolved."),
        Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved_to_2: diag(6390, 3 /* Message */, "Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved__6390", "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was successfully resolved to '{2}'."),
        Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved_to_2_with_Package_ID_3: diag(6391, 3 /* Message */, "Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved__6391", "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was successfully resolved to '{2}' with Package ID '{3}'."),
        Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_not_resolved: diag(6392, 3 /* Message */, "Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_not_resolved_6392", "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was not resolved."),
        Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3: diag(6393, 3 /* Message */, "Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_6393", "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}'."),
        Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3_with_Package_ID_4: diag(6394, 3 /* Message */, "Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_6394", "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}' with Package ID '{4}'."),
        Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_not_resolved: diag(6395, 3 /* Message */, "Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_not_resolved_6395", "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was not resolved."),
        Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3: diag(6396, 3 /* Message */, "Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_succes_6396", "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}'."),
        Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3_with_Package_ID_4: diag(6397, 3 /* Message */, "Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_succes_6397", "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}' with Package ID '{4}'."),
        Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_not_resolved: diag(6398, 3 /* Message */, "Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_not_re_6398", "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was not resolved."),
        Project_0_is_out_of_date_because_buildinfo_file_1_indicates_that_some_of_the_changes_were_not_emitted: diag(6399, 3 /* Message */, "Project_0_is_out_of_date_because_buildinfo_file_1_indicates_that_some_of_the_changes_were_not_emitte_6399", "Project '{0}' is out of date because buildinfo file '{1}' indicates that some of the changes were not emitted"),
        Project_0_is_up_to_date_but_needs_to_update_timestamps_of_output_files_that_are_older_than_input_files: diag(6400, 3 /* Message */, "Project_0_is_up_to_date_but_needs_to_update_timestamps_of_output_files_that_are_older_than_input_fil_6400", "Project '{0}' is up to date but needs to update timestamps of output files that are older than input files"),
        Project_0_is_out_of_date_because_there_was_error_reading_file_1: diag(6401, 3 /* Message */, "Project_0_is_out_of_date_because_there_was_error_reading_file_1_6401", "Project '{0}' is out of date because there was error reading file '{1}'"),
        Resolving_in_0_mode_with_conditions_1: diag(6402, 3 /* Message */, "Resolving_in_0_mode_with_conditions_1_6402", "Resolving in {0} mode with conditions {1}."),
        Matched_0_condition_1: diag(6403, 3 /* Message */, "Matched_0_condition_1_6403", "Matched '{0}' condition '{1}'."),
        Using_0_subpath_1_with_target_2: diag(6404, 3 /* Message */, "Using_0_subpath_1_with_target_2_6404", "Using '{0}' subpath '{1}' with target '{2}'."),
        Saw_non_matching_condition_0: diag(6405, 3 /* Message */, "Saw_non_matching_condition_0_6405", "Saw non-matching condition '{0}'."),
        Project_0_is_out_of_date_because_buildinfo_file_1_indicates_there_is_change_in_compilerOptions: diag(6406, 3 /* Message */, "Project_0_is_out_of_date_because_buildinfo_file_1_indicates_there_is_change_in_compilerOptions_6406", "Project '{0}' is out of date because buildinfo file '{1}' indicates there is change in compilerOptions"),
        Allow_imports_to_include_TypeScript_file_extensions_Requires_moduleResolution_bundler_and_either_noEmit_or_emitDeclarationOnly_to_be_set: diag(6407, 3 /* Message */, "Allow_imports_to_include_TypeScript_file_extensions_Requires_moduleResolution_bundler_and_either_noE_6407", "Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set."),
        Use_the_package_json_exports_field_when_resolving_package_imports: diag(6408, 3 /* Message */, "Use_the_package_json_exports_field_when_resolving_package_imports_6408", "Use the package.json 'exports' field when resolving package imports."),
        Use_the_package_json_imports_field_when_resolving_imports: diag(6409, 3 /* Message */, "Use_the_package_json_imports_field_when_resolving_imports_6409", "Use the package.json 'imports' field when resolving imports."),
        Conditions_to_set_in_addition_to_the_resolver_specific_defaults_when_resolving_imports: diag(6410, 3 /* Message */, "Conditions_to_set_in_addition_to_the_resolver_specific_defaults_when_resolving_imports_6410", "Conditions to set in addition to the resolver-specific defaults when resolving imports."),
        true_when_moduleResolution_is_node16_nodenext_or_bundler_otherwise_false: diag(6411, 3 /* Message */, "true_when_moduleResolution_is_node16_nodenext_or_bundler_otherwise_false_6411", "`true` when 'moduleResolution' is 'node16', 'nodenext', or 'bundler'; otherwise `false`."),
        Project_0_is_out_of_date_because_buildinfo_file_1_indicates_that_file_2_was_root_file_of_compilation_but_not_any_more: diag(6412, 3 /* Message */, "Project_0_is_out_of_date_because_buildinfo_file_1_indicates_that_file_2_was_root_file_of_compilation_6412", "Project '{0}' is out of date because buildinfo file '{1}' indicates that file '{2}' was root file of compilation but not any more."),
        Entering_conditional_exports: diag(6413, 3 /* Message */, "Entering_conditional_exports_6413", "Entering conditional exports."),
        Resolved_under_condition_0: diag(6414, 3 /* Message */, "Resolved_under_condition_0_6414", "Resolved under condition '{0}'."),
        Failed_to_resolve_under_condition_0: diag(6415, 3 /* Message */, "Failed_to_resolve_under_condition_0_6415", "Failed to resolve under condition '{0}'."),
        Exiting_conditional_exports: diag(6416, 3 /* Message */, "Exiting_conditional_exports_6416", "Exiting conditional exports."),
        The_expected_type_comes_from_property_0_which_is_declared_here_on_type_1: diag(6500, 3 /* Message */, "The_expected_type_comes_from_property_0_which_is_declared_here_on_type_1_6500", "The expected type comes from property '{0}' which is declared here on type '{1}'"),
        The_expected_type_comes_from_this_index_signature: diag(6501, 3 /* Message */, "The_expected_type_comes_from_this_index_signature_6501", "The expected type comes from this index signature."),
        The_expected_type_comes_from_the_return_type_of_this_signature: diag(6502, 3 /* Message */, "The_expected_type_comes_from_the_return_type_of_this_signature_6502", "The expected type comes from the return type of this signature."),
        Print_names_of_files_that_are_part_of_the_compilation_and_then_stop_processing: diag(6503, 3 /* Message */, "Print_names_of_files_that_are_part_of_the_compilation_and_then_stop_processing_6503", "Print names of files that are part of the compilation and then stop processing."),
        File_0_is_a_JavaScript_file_Did_you_mean_to_enable_the_allowJs_option: diag(6504, 1 /* Error */, "File_0_is_a_JavaScript_file_Did_you_mean_to_enable_the_allowJs_option_6504", "File '{0}' is a JavaScript file. Did you mean to enable the 'allowJs' option?"),
        Print_names_of_files_and_the_reason_they_are_part_of_the_compilation: diag(6505, 3 /* Message */, "Print_names_of_files_and_the_reason_they_are_part_of_the_compilation_6505", "Print names of files and the reason they are part of the compilation."),
        Consider_adding_a_declare_modifier_to_this_class: diag(6506, 3 /* Message */, "Consider_adding_a_declare_modifier_to_this_class_6506", "Consider adding a 'declare' modifier to this class."),
        Allow_JavaScript_files_to_be_a_part_of_your_program_Use_the_checkJS_option_to_get_errors_from_these_files: diag(6600, 3 /* Message */, "Allow_JavaScript_files_to_be_a_part_of_your_program_Use_the_checkJS_option_to_get_errors_from_these__6600", "Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files."),
        Allow_import_x_from_y_when_a_module_doesn_t_have_a_default_export: diag(6601, 3 /* Message */, "Allow_import_x_from_y_when_a_module_doesn_t_have_a_default_export_6601", "Allow 'import x from y' when a module doesn't have a default export."),
        Allow_accessing_UMD_globals_from_modules: diag(6602, 3 /* Message */, "Allow_accessing_UMD_globals_from_modules_6602", "Allow accessing UMD globals from modules."),
        Disable_error_reporting_for_unreachable_code: diag(6603, 3 /* Message */, "Disable_error_reporting_for_unreachable_code_6603", "Disable error reporting for unreachable code."),
        Disable_error_reporting_for_unused_labels: diag(6604, 3 /* Message */, "Disable_error_reporting_for_unused_labels_6604", "Disable error reporting for unused labels."),
        Ensure_use_strict_is_always_emitted: diag(6605, 3 /* Message */, "Ensure_use_strict_is_always_emitted_6605", "Ensure 'use strict' is always emitted."),
        Have_recompiles_in_projects_that_use_incremental_and_watch_mode_assume_that_changes_within_a_file_will_only_affect_files_directly_depending_on_it: diag(6606, 3 /* Message */, "Have_recompiles_in_projects_that_use_incremental_and_watch_mode_assume_that_changes_within_a_file_wi_6606", "Have recompiles in projects that use 'incremental' and 'watch' mode assume that changes within a file will only affect files directly depending on it."),
        Specify_the_base_directory_to_resolve_non_relative_module_names: diag(6607, 3 /* Message */, "Specify_the_base_directory_to_resolve_non_relative_module_names_6607", "Specify the base directory to resolve non-relative module names."),
        No_longer_supported_In_early_versions_manually_set_the_text_encoding_for_reading_files: diag(6608, 3 /* Message */, "No_longer_supported_In_early_versions_manually_set_the_text_encoding_for_reading_files_6608", "No longer supported. In early versions, manually set the text encoding for reading files."),
        Enable_error_reporting_in_type_checked_JavaScript_files: diag(6609, 3 /* Message */, "Enable_error_reporting_in_type_checked_JavaScript_files_6609", "Enable error reporting in type-checked JavaScript files."),
        Enable_constraints_that_allow_a_TypeScript_project_to_be_used_with_project_references: diag(6611, 3 /* Message */, "Enable_constraints_that_allow_a_TypeScript_project_to_be_used_with_project_references_6611", "Enable constraints that allow a TypeScript project to be used with project references."),
        Generate_d_ts_files_from_TypeScript_and_JavaScript_files_in_your_project: diag(6612, 3 /* Message */, "Generate_d_ts_files_from_TypeScript_and_JavaScript_files_in_your_project_6612", "Generate .d.ts files from TypeScript and JavaScript files in your project."),
        Specify_the_output_directory_for_generated_declaration_files: diag(6613, 3 /* Message */, "Specify_the_output_directory_for_generated_declaration_files_6613", "Specify the output directory for generated declaration files."),
        Create_sourcemaps_for_d_ts_files: diag(6614, 3 /* Message */, "Create_sourcemaps_for_d_ts_files_6614", "Create sourcemaps for d.ts files."),
        Output_compiler_performance_information_after_building: diag(6615, 3 /* Message */, "Output_compiler_performance_information_after_building_6615", "Output compiler performance information after building."),
        Disables_inference_for_type_acquisition_by_looking_at_filenames_in_a_project: diag(6616, 3 /* Message */, "Disables_inference_for_type_acquisition_by_looking_at_filenames_in_a_project_6616", "Disables inference for type acquisition by looking at filenames in a project."),
        Reduce_the_number_of_projects_loaded_automatically_by_TypeScript: diag(6617, 3 /* Message */, "Reduce_the_number_of_projects_loaded_automatically_by_TypeScript_6617", "Reduce the number of projects loaded automatically by TypeScript."),
        Remove_the_20mb_cap_on_total_source_code_size_for_JavaScript_files_in_the_TypeScript_language_server: diag(6618, 3 /* Message */, "Remove_the_20mb_cap_on_total_source_code_size_for_JavaScript_files_in_the_TypeScript_language_server_6618", "Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server."),
        Opt_a_project_out_of_multi_project_reference_checking_when_editing: diag(6619, 3 /* Message */, "Opt_a_project_out_of_multi_project_reference_checking_when_editing_6619", "Opt a project out of multi-project reference checking when editing."),
        Disable_preferring_source_files_instead_of_declaration_files_when_referencing_composite_projects: diag(6620, 3 /* Message */, "Disable_preferring_source_files_instead_of_declaration_files_when_referencing_composite_projects_6620", "Disable preferring source files instead of declaration files when referencing composite projects."),
        Emit_more_compliant_but_verbose_and_less_performant_JavaScript_for_iteration: diag(6621, 3 /* Message */, "Emit_more_compliant_but_verbose_and_less_performant_JavaScript_for_iteration_6621", "Emit more compliant, but verbose and less performant JavaScript for iteration."),
        Emit_a_UTF_8_Byte_Order_Mark_BOM_in_the_beginning_of_output_files: diag(6622, 3 /* Message */, "Emit_a_UTF_8_Byte_Order_Mark_BOM_in_the_beginning_of_output_files_6622", "Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files."),
        Only_output_d_ts_files_and_not_JavaScript_files: diag(6623, 3 /* Message */, "Only_output_d_ts_files_and_not_JavaScript_files_6623", "Only output d.ts files and not JavaScript files."),
        Emit_design_type_metadata_for_decorated_declarations_in_source_files: diag(6624, 3 /* Message */, "Emit_design_type_metadata_for_decorated_declarations_in_source_files_6624", "Emit design-type metadata for decorated declarations in source files."),
        Disable_the_type_acquisition_for_JavaScript_projects: diag(6625, 3 /* Message */, "Disable_the_type_acquisition_for_JavaScript_projects_6625", "Disable the type acquisition for JavaScript projects"),
        Emit_additional_JavaScript_to_ease_support_for_importing_CommonJS_modules_This_enables_allowSyntheticDefaultImports_for_type_compatibility: diag(6626, 3 /* Message */, "Emit_additional_JavaScript_to_ease_support_for_importing_CommonJS_modules_This_enables_allowSyntheti_6626", "Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility."),
        Filters_results_from_the_include_option: diag(6627, 3 /* Message */, "Filters_results_from_the_include_option_6627", "Filters results from the `include` option."),
        Remove_a_list_of_directories_from_the_watch_process: diag(6628, 3 /* Message */, "Remove_a_list_of_directories_from_the_watch_process_6628", "Remove a list of directories from the watch process."),
        Remove_a_list_of_files_from_the_watch_mode_s_processing: diag(6629, 3 /* Message */, "Remove_a_list_of_files_from_the_watch_mode_s_processing_6629", "Remove a list of files from the watch mode's processing."),
        Enable_experimental_support_for_legacy_experimental_decorators: diag(6630, 3 /* Message */, "Enable_experimental_support_for_legacy_experimental_decorators_6630", "Enable experimental support for legacy experimental decorators."),
        Print_files_read_during_the_compilation_including_why_it_was_included: diag(6631, 3 /* Message */, "Print_files_read_during_the_compilation_including_why_it_was_included_6631", "Print files read during the compilation including why it was included."),
        Output_more_detailed_compiler_performance_information_after_building: diag(6632, 3 /* Message */, "Output_more_detailed_compiler_performance_information_after_building_6632", "Output more detailed compiler performance information after building."),
        Specify_one_or_more_path_or_node_module_references_to_base_configuration_files_from_which_settings_are_inherited: diag(6633, 3 /* Message */, "Specify_one_or_more_path_or_node_module_references_to_base_configuration_files_from_which_settings_a_6633", "Specify one or more path or node module references to base configuration files from which settings are inherited."),
        Specify_what_approach_the_watcher_should_use_if_the_system_runs_out_of_native_file_watchers: diag(6634, 3 /* Message */, "Specify_what_approach_the_watcher_should_use_if_the_system_runs_out_of_native_file_watchers_6634", "Specify what approach the watcher should use if the system runs out of native file watchers."),
        Include_a_list_of_files_This_does_not_support_glob_patterns_as_opposed_to_include: diag(6635, 3 /* Message */, "Include_a_list_of_files_This_does_not_support_glob_patterns_as_opposed_to_include_6635", "Include a list of files. This does not support glob patterns, as opposed to `include`."),
        Build_all_projects_including_those_that_appear_to_be_up_to_date: diag(6636, 3 /* Message */, "Build_all_projects_including_those_that_appear_to_be_up_to_date_6636", "Build all projects, including those that appear to be up to date."),
        Ensure_that_casing_is_correct_in_imports: diag(6637, 3 /* Message */, "Ensure_that_casing_is_correct_in_imports_6637", "Ensure that casing is correct in imports."),
        Emit_a_v8_CPU_profile_of_the_compiler_run_for_debugging: diag(6638, 3 /* Message */, "Emit_a_v8_CPU_profile_of_the_compiler_run_for_debugging_6638", "Emit a v8 CPU profile of the compiler run for debugging."),
        Allow_importing_helper_functions_from_tslib_once_per_project_instead_of_including_them_per_file: diag(6639, 3 /* Message */, "Allow_importing_helper_functions_from_tslib_once_per_project_instead_of_including_them_per_file_6639", "Allow importing helper functions from tslib once per project, instead of including them per-file."),
        Specify_a_list_of_glob_patterns_that_match_files_to_be_included_in_compilation: diag(6641, 3 /* Message */, "Specify_a_list_of_glob_patterns_that_match_files_to_be_included_in_compilation_6641", "Specify a list of glob patterns that match files to be included in compilation."),
        Save_tsbuildinfo_files_to_allow_for_incremental_compilation_of_projects: diag(6642, 3 /* Message */, "Save_tsbuildinfo_files_to_allow_for_incremental_compilation_of_projects_6642", "Save .tsbuildinfo files to allow for incremental compilation of projects."),
        Include_sourcemap_files_inside_the_emitted_JavaScript: diag(6643, 3 /* Message */, "Include_sourcemap_files_inside_the_emitted_JavaScript_6643", "Include sourcemap files inside the emitted JavaScript."),
        Include_source_code_in_the_sourcemaps_inside_the_emitted_JavaScript: diag(6644, 3 /* Message */, "Include_source_code_in_the_sourcemaps_inside_the_emitted_JavaScript_6644", "Include source code in the sourcemaps inside the emitted JavaScript."),
        Ensure_that_each_file_can_be_safely_transpiled_without_relying_on_other_imports: diag(6645, 3 /* Message */, "Ensure_that_each_file_can_be_safely_transpiled_without_relying_on_other_imports_6645", "Ensure that each file can be safely transpiled without relying on other imports."),
        Specify_what_JSX_code_is_generated: diag(6646, 3 /* Message */, "Specify_what_JSX_code_is_generated_6646", "Specify what JSX code is generated."),
        Specify_the_JSX_factory_function_used_when_targeting_React_JSX_emit_e_g_React_createElement_or_h: diag(6647, 3 /* Message */, "Specify_the_JSX_factory_function_used_when_targeting_React_JSX_emit_e_g_React_createElement_or_h_6647", "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'."),
        Specify_the_JSX_Fragment_reference_used_for_fragments_when_targeting_React_JSX_emit_e_g_React_Fragment_or_Fragment: diag(6648, 3 /* Message */, "Specify_the_JSX_Fragment_reference_used_for_fragments_when_targeting_React_JSX_emit_e_g_React_Fragme_6648", "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'."),
        Specify_module_specifier_used_to_import_the_JSX_factory_functions_when_using_jsx_Colon_react_jsx_Asterisk: diag(6649, 3 /* Message */, "Specify_module_specifier_used_to_import_the_JSX_factory_functions_when_using_jsx_Colon_react_jsx_Ast_6649", "Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'."),
        Make_keyof_only_return_strings_instead_of_string_numbers_or_symbols_Legacy_option: diag(6650, 3 /* Message */, "Make_keyof_only_return_strings_instead_of_string_numbers_or_symbols_Legacy_option_6650", "Make keyof only return strings instead of string, numbers or symbols. Legacy option."),
        Specify_a_set_of_bundled_library_declaration_files_that_describe_the_target_runtime_environment: diag(6651, 3 /* Message */, "Specify_a_set_of_bundled_library_declaration_files_that_describe_the_target_runtime_environment_6651", "Specify a set of bundled library declaration files that describe the target runtime environment."),
        Print_the_names_of_emitted_files_after_a_compilation: diag(6652, 3 /* Message */, "Print_the_names_of_emitted_files_after_a_compilation_6652", "Print the names of emitted files after a compilation."),
        Print_all_of_the_files_read_during_the_compilation: diag(6653, 3 /* Message */, "Print_all_of_the_files_read_during_the_compilation_6653", "Print all of the files read during the compilation."),
        Set_the_language_of_the_messaging_from_TypeScript_This_does_not_affect_emit: diag(6654, 3 /* Message */, "Set_the_language_of_the_messaging_from_TypeScript_This_does_not_affect_emit_6654", "Set the language of the messaging from TypeScript. This does not affect emit."),
        Specify_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations: diag(6655, 3 /* Message */, "Specify_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations_6655", "Specify the location where debugger should locate map files instead of generated locations."),
        Specify_the_maximum_folder_depth_used_for_checking_JavaScript_files_from_node_modules_Only_applicable_with_allowJs: diag(6656, 3 /* Message */, "Specify_the_maximum_folder_depth_used_for_checking_JavaScript_files_from_node_modules_Only_applicabl_6656", "Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'."),
        Specify_what_module_code_is_generated: diag(6657, 3 /* Message */, "Specify_what_module_code_is_generated_6657", "Specify what module code is generated."),
        Specify_how_TypeScript_looks_up_a_file_from_a_given_module_specifier: diag(6658, 3 /* Message */, "Specify_how_TypeScript_looks_up_a_file_from_a_given_module_specifier_6658", "Specify how TypeScript looks up a file from a given module specifier."),
        Set_the_newline_character_for_emitting_files: diag(6659, 3 /* Message */, "Set_the_newline_character_for_emitting_files_6659", "Set the newline character for emitting files."),
        Disable_emitting_files_from_a_compilation: diag(6660, 3 /* Message */, "Disable_emitting_files_from_a_compilation_6660", "Disable emitting files from a compilation."),
        Disable_generating_custom_helper_functions_like_extends_in_compiled_output: diag(6661, 3 /* Message */, "Disable_generating_custom_helper_functions_like_extends_in_compiled_output_6661", "Disable generating custom helper functions like '__extends' in compiled output."),
        Disable_emitting_files_if_any_type_checking_errors_are_reported: diag(6662, 3 /* Message */, "Disable_emitting_files_if_any_type_checking_errors_are_reported_6662", "Disable emitting files if any type checking errors are reported."),
        Disable_truncating_types_in_error_messages: diag(6663, 3 /* Message */, "Disable_truncating_types_in_error_messages_6663", "Disable truncating types in error messages."),
        Enable_error_reporting_for_fallthrough_cases_in_switch_statements: diag(6664, 3 /* Message */, "Enable_error_reporting_for_fallthrough_cases_in_switch_statements_6664", "Enable error reporting for fallthrough cases in switch statements."),
        Enable_error_reporting_for_expressions_and_declarations_with_an_implied_any_type: diag(6665, 3 /* Message */, "Enable_error_reporting_for_expressions_and_declarations_with_an_implied_any_type_6665", "Enable error reporting for expressions and declarations with an implied 'any' type."),
        Ensure_overriding_members_in_derived_classes_are_marked_with_an_override_modifier: diag(6666, 3 /* Message */, "Ensure_overriding_members_in_derived_classes_are_marked_with_an_override_modifier_6666", "Ensure overriding members in derived classes are marked with an override modifier."),
        Enable_error_reporting_for_codepaths_that_do_not_explicitly_return_in_a_function: diag(6667, 3 /* Message */, "Enable_error_reporting_for_codepaths_that_do_not_explicitly_return_in_a_function_6667", "Enable error reporting for codepaths that do not explicitly return in a function."),
        Enable_error_reporting_when_this_is_given_the_type_any: diag(6668, 3 /* Message */, "Enable_error_reporting_when_this_is_given_the_type_any_6668", "Enable error reporting when 'this' is given the type 'any'."),
        Disable_adding_use_strict_directives_in_emitted_JavaScript_files: diag(6669, 3 /* Message */, "Disable_adding_use_strict_directives_in_emitted_JavaScript_files_6669", "Disable adding 'use strict' directives in emitted JavaScript files."),
        Disable_including_any_library_files_including_the_default_lib_d_ts: diag(6670, 3 /* Message */, "Disable_including_any_library_files_including_the_default_lib_d_ts_6670", "Disable including any library files, including the default lib.d.ts."),
        Enforces_using_indexed_accessors_for_keys_declared_using_an_indexed_type: diag(6671, 3 /* Message */, "Enforces_using_indexed_accessors_for_keys_declared_using_an_indexed_type_6671", "Enforces using indexed accessors for keys declared using an indexed type."),
        Disallow_import_s_require_s_or_reference_s_from_expanding_the_number_of_files_TypeScript_should_add_to_a_project: diag(6672, 3 /* Message */, "Disallow_import_s_require_s_or_reference_s_from_expanding_the_number_of_files_TypeScript_should_add__6672", "Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project."),
        Disable_strict_checking_of_generic_signatures_in_function_types: diag(6673, 3 /* Message */, "Disable_strict_checking_of_generic_signatures_in_function_types_6673", "Disable strict checking of generic signatures in function types."),
        Add_undefined_to_a_type_when_accessed_using_an_index: diag(6674, 3 /* Message */, "Add_undefined_to_a_type_when_accessed_using_an_index_6674", "Add 'undefined' to a type when accessed using an index."),
        Enable_error_reporting_when_local_variables_aren_t_read: diag(6675, 3 /* Message */, "Enable_error_reporting_when_local_variables_aren_t_read_6675", "Enable error reporting when local variables aren't read."),
        Raise_an_error_when_a_function_parameter_isn_t_read: diag(6676, 3 /* Message */, "Raise_an_error_when_a_function_parameter_isn_t_read_6676", "Raise an error when a function parameter isn't read."),
        Deprecated_setting_Use_outFile_instead: diag(6677, 3 /* Message */, "Deprecated_setting_Use_outFile_instead_6677", "Deprecated setting. Use 'outFile' instead."),
        Specify_an_output_folder_for_all_emitted_files: diag(6678, 3 /* Message */, "Specify_an_output_folder_for_all_emitted_files_6678", "Specify an output folder for all emitted files."),
        Specify_a_file_that_bundles_all_outputs_into_one_JavaScript_file_If_declaration_is_true_also_designates_a_file_that_bundles_all_d_ts_output: diag(6679, 3 /* Message */, "Specify_a_file_that_bundles_all_outputs_into_one_JavaScript_file_If_declaration_is_true_also_designa_6679", "Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output."),
        Specify_a_set_of_entries_that_re_map_imports_to_additional_lookup_locations: diag(6680, 3 /* Message */, "Specify_a_set_of_entries_that_re_map_imports_to_additional_lookup_locations_6680", "Specify a set of entries that re-map imports to additional lookup locations."),
        Specify_a_list_of_language_service_plugins_to_include: diag(6681, 3 /* Message */, "Specify_a_list_of_language_service_plugins_to_include_6681", "Specify a list of language service plugins to include."),
        Disable_erasing_const_enum_declarations_in_generated_code: diag(6682, 3 /* Message */, "Disable_erasing_const_enum_declarations_in_generated_code_6682", "Disable erasing 'const enum' declarations in generated code."),
        Disable_resolving_symlinks_to_their_realpath_This_correlates_to_the_same_flag_in_node: diag(6683, 3 /* Message */, "Disable_resolving_symlinks_to_their_realpath_This_correlates_to_the_same_flag_in_node_6683", "Disable resolving symlinks to their realpath. This correlates to the same flag in node."),
        Disable_wiping_the_console_in_watch_mode: diag(6684, 3 /* Message */, "Disable_wiping_the_console_in_watch_mode_6684", "Disable wiping the console in watch mode."),
        Enable_color_and_formatting_in_TypeScript_s_output_to_make_compiler_errors_easier_to_read: diag(6685, 3 /* Message */, "Enable_color_and_formatting_in_TypeScript_s_output_to_make_compiler_errors_easier_to_read_6685", "Enable color and formatting in TypeScript's output to make compiler errors easier to read."),
        Specify_the_object_invoked_for_createElement_This_only_applies_when_targeting_react_JSX_emit: diag(6686, 3 /* Message */, "Specify_the_object_invoked_for_createElement_This_only_applies_when_targeting_react_JSX_emit_6686", "Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit."),
        Specify_an_array_of_objects_that_specify_paths_for_projects_Used_in_project_references: diag(6687, 3 /* Message */, "Specify_an_array_of_objects_that_specify_paths_for_projects_Used_in_project_references_6687", "Specify an array of objects that specify paths for projects. Used in project references."),
        Disable_emitting_comments: diag(6688, 3 /* Message */, "Disable_emitting_comments_6688", "Disable emitting comments."),
        Enable_importing_json_files: diag(6689, 3 /* Message */, "Enable_importing_json_files_6689", "Enable importing .json files."),
        Specify_the_root_folder_within_your_source_files: diag(6690, 3 /* Message */, "Specify_the_root_folder_within_your_source_files_6690", "Specify the root folder within your source files."),
        Allow_multiple_folders_to_be_treated_as_one_when_resolving_modules: diag(6691, 3 /* Message */, "Allow_multiple_folders_to_be_treated_as_one_when_resolving_modules_6691", "Allow multiple folders to be treated as one when resolving modules."),
        Skip_type_checking_d_ts_files_that_are_included_with_TypeScript: diag(6692, 3 /* Message */, "Skip_type_checking_d_ts_files_that_are_included_with_TypeScript_6692", "Skip type checking .d.ts files that are included with TypeScript."),
        Skip_type_checking_all_d_ts_files: diag(6693, 3 /* Message */, "Skip_type_checking_all_d_ts_files_6693", "Skip type checking all .d.ts files."),
        Create_source_map_files_for_emitted_JavaScript_files: diag(6694, 3 /* Message */, "Create_source_map_files_for_emitted_JavaScript_files_6694", "Create source map files for emitted JavaScript files."),
        Specify_the_root_path_for_debuggers_to_find_the_reference_source_code: diag(6695, 3 /* Message */, "Specify_the_root_path_for_debuggers_to_find_the_reference_source_code_6695", "Specify the root path for debuggers to find the reference source code."),
        Check_that_the_arguments_for_bind_call_and_apply_methods_match_the_original_function: diag(6697, 3 /* Message */, "Check_that_the_arguments_for_bind_call_and_apply_methods_match_the_original_function_6697", "Check that the arguments for 'bind', 'call', and 'apply' methods match the original function."),
        When_assigning_functions_check_to_ensure_parameters_and_the_return_values_are_subtype_compatible: diag(6698, 3 /* Message */, "When_assigning_functions_check_to_ensure_parameters_and_the_return_values_are_subtype_compatible_6698", "When assigning functions, check to ensure parameters and the return values are subtype-compatible."),
        When_type_checking_take_into_account_null_and_undefined: diag(6699, 3 /* Message */, "When_type_checking_take_into_account_null_and_undefined_6699", "When type checking, take into account 'null' and 'undefined'."),
        Check_for_class_properties_that_are_declared_but_not_set_in_the_constructor: diag(6700, 3 /* Message */, "Check_for_class_properties_that_are_declared_but_not_set_in_the_constructor_6700", "Check for class properties that are declared but not set in the constructor."),
        Disable_emitting_declarations_that_have_internal_in_their_JSDoc_comments: diag(6701, 3 /* Message */, "Disable_emitting_declarations_that_have_internal_in_their_JSDoc_comments_6701", "Disable emitting declarations that have '@internal' in their JSDoc comments."),
        Disable_reporting_of_excess_property_errors_during_the_creation_of_object_literals: diag(6702, 3 /* Message */, "Disable_reporting_of_excess_property_errors_during_the_creation_of_object_literals_6702", "Disable reporting of excess property errors during the creation of object literals."),
        Suppress_noImplicitAny_errors_when_indexing_objects_that_lack_index_signatures: diag(6703, 3 /* Message */, "Suppress_noImplicitAny_errors_when_indexing_objects_that_lack_index_signatures_6703", "Suppress 'noImplicitAny' errors when indexing objects that lack index signatures."),
        Synchronously_call_callbacks_and_update_the_state_of_directory_watchers_on_platforms_that_don_t_support_recursive_watching_natively: diag(6704, 3 /* Message */, "Synchronously_call_callbacks_and_update_the_state_of_directory_watchers_on_platforms_that_don_t_supp_6704", "Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively."),
        Set_the_JavaScript_language_version_for_emitted_JavaScript_and_include_compatible_library_declarations: diag(6705, 3 /* Message */, "Set_the_JavaScript_language_version_for_emitted_JavaScript_and_include_compatible_library_declaratio_6705", "Set the JavaScript language version for emitted JavaScript and include compatible library declarations."),
        Log_paths_used_during_the_moduleResolution_process: diag(6706, 3 /* Message */, "Log_paths_used_during_the_moduleResolution_process_6706", "Log paths used during the 'moduleResolution' process."),
        Specify_the_path_to_tsbuildinfo_incremental_compilation_file: diag(6707, 3 /* Message */, "Specify_the_path_to_tsbuildinfo_incremental_compilation_file_6707", "Specify the path to .tsbuildinfo incremental compilation file."),
        Specify_options_for_automatic_acquisition_of_declaration_files: diag(6709, 3 /* Message */, "Specify_options_for_automatic_acquisition_of_declaration_files_6709", "Specify options for automatic acquisition of declaration files."),
        Specify_multiple_folders_that_act_like_Slashnode_modules_Slash_types: diag(6710, 3 /* Message */, "Specify_multiple_folders_that_act_like_Slashnode_modules_Slash_types_6710", "Specify multiple folders that act like './node_modules/@types'."),
        Specify_type_package_names_to_be_included_without_being_referenced_in_a_source_file: diag(6711, 3 /* Message */, "Specify_type_package_names_to_be_included_without_being_referenced_in_a_source_file_6711", "Specify type package names to be included without being referenced in a source file."),
        Emit_ECMAScript_standard_compliant_class_fields: diag(6712, 3 /* Message */, "Emit_ECMAScript_standard_compliant_class_fields_6712", "Emit ECMAScript-standard-compliant class fields."),
        Enable_verbose_logging: diag(6713, 3 /* Message */, "Enable_verbose_logging_6713", "Enable verbose logging."),
        Specify_how_directories_are_watched_on_systems_that_lack_recursive_file_watching_functionality: diag(6714, 3 /* Message */, "Specify_how_directories_are_watched_on_systems_that_lack_recursive_file_watching_functionality_6714", "Specify how directories are watched on systems that lack recursive file-watching functionality."),
        Specify_how_the_TypeScript_watch_mode_works: diag(6715, 3 /* Message */, "Specify_how_the_TypeScript_watch_mode_works_6715", "Specify how the TypeScript watch mode works."),
        Require_undeclared_properties_from_index_signatures_to_use_element_accesses: diag(6717, 3 /* Message */, "Require_undeclared_properties_from_index_signatures_to_use_element_accesses_6717", "Require undeclared properties from index signatures to use element accesses."),
        Specify_emit_Slashchecking_behavior_for_imports_that_are_only_used_for_types: diag(6718, 3 /* Message */, "Specify_emit_Slashchecking_behavior_for_imports_that_are_only_used_for_types_6718", "Specify emit/checking behavior for imports that are only used for types."),
        Default_catch_clause_variables_as_unknown_instead_of_any: diag(6803, 3 /* Message */, "Default_catch_clause_variables_as_unknown_instead_of_any_6803", "Default catch clause variables as 'unknown' instead of 'any'."),
        Do_not_transform_or_elide_any_imports_or_exports_not_marked_as_type_only_ensuring_they_are_written_in_the_output_file_s_format_based_on_the_module_setting: diag(6804, 3 /* Message */, "Do_not_transform_or_elide_any_imports_or_exports_not_marked_as_type_only_ensuring_they_are_written_i_6804", "Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting."),
        one_of_Colon: diag(6900, 3 /* Message */, "one_of_Colon_6900", "one of:"),
        one_or_more_Colon: diag(6901, 3 /* Message */, "one_or_more_Colon_6901", "one or more:"),
        type_Colon: diag(6902, 3 /* Message */, "type_Colon_6902", "type:"),
        default_Colon: diag(6903, 3 /* Message */, "default_Colon_6903", "default:"),
        module_system_or_esModuleInterop: diag(6904, 3 /* Message */, "module_system_or_esModuleInterop_6904", 'module === "system" or esModuleInterop'),
        false_unless_strict_is_set: diag(6905, 3 /* Message */, "false_unless_strict_is_set_6905", "`false`, unless `strict` is set"),
        false_unless_composite_is_set: diag(6906, 3 /* Message */, "false_unless_composite_is_set_6906", "`false`, unless `composite` is set"),
        node_modules_bower_components_jspm_packages_plus_the_value_of_outDir_if_one_is_specified: diag(6907, 3 /* Message */, "node_modules_bower_components_jspm_packages_plus_the_value_of_outDir_if_one_is_specified_6907", '`["node_modules", "bower_components", "jspm_packages"]`, plus the value of `outDir` if one is specified.'),
        if_files_is_specified_otherwise_Asterisk_Asterisk_Slash_Asterisk: diag(6908, 3 /* Message */, "if_files_is_specified_otherwise_Asterisk_Asterisk_Slash_Asterisk_6908", '`[]` if `files` is specified, otherwise `["**/*"]`'),
        true_if_composite_false_otherwise: diag(6909, 3 /* Message */, "true_if_composite_false_otherwise_6909", "`true` if `composite`, `false` otherwise"),
        module_AMD_or_UMD_or_System_or_ES6_then_Classic_Otherwise_Node: diag(69010, 3 /* Message */, "module_AMD_or_UMD_or_System_or_ES6_then_Classic_Otherwise_Node_69010", "module === `AMD` or `UMD` or `System` or `ES6`, then `Classic`, Otherwise `Node`"),
        Computed_from_the_list_of_input_files: diag(6911, 3 /* Message */, "Computed_from_the_list_of_input_files_6911", "Computed from the list of input files"),
        Platform_specific: diag(6912, 3 /* Message */, "Platform_specific_6912", "Platform specific"),
        You_can_learn_about_all_of_the_compiler_options_at_0: diag(6913, 3 /* Message */, "You_can_learn_about_all_of_the_compiler_options_at_0_6913", "You can learn about all of the compiler options at {0}"),
        Including_watch_w_will_start_watching_the_current_project_for_the_file_changes_Once_set_you_can_config_watch_mode_with_Colon: diag(6914, 3 /* Message */, "Including_watch_w_will_start_watching_the_current_project_for_the_file_changes_Once_set_you_can_conf_6914", "Including --watch, -w will start watching the current project for the file changes. Once set, you can config watch mode with:"),
        Using_build_b_will_make_tsc_behave_more_like_a_build_orchestrator_than_a_compiler_This_is_used_to_trigger_building_composite_projects_which_you_can_learn_more_about_at_0: diag(6915, 3 /* Message */, "Using_build_b_will_make_tsc_behave_more_like_a_build_orchestrator_than_a_compiler_This_is_used_to_tr_6915", "Using --build, -b will make tsc behave more like a build orchestrator than a compiler. This is used to trigger building composite projects which you can learn more about at {0}"),
        COMMON_COMMANDS: diag(6916, 3 /* Message */, "COMMON_COMMANDS_6916", "COMMON COMMANDS"),
        ALL_COMPILER_OPTIONS: diag(6917, 3 /* Message */, "ALL_COMPILER_OPTIONS_6917", "ALL COMPILER OPTIONS"),
        WATCH_OPTIONS: diag(6918, 3 /* Message */, "WATCH_OPTIONS_6918", "WATCH OPTIONS"),
        BUILD_OPTIONS: diag(6919, 3 /* Message */, "BUILD_OPTIONS_6919", "BUILD OPTIONS"),
        COMMON_COMPILER_OPTIONS: diag(6920, 3 /* Message */, "COMMON_COMPILER_OPTIONS_6920", "COMMON COMPILER OPTIONS"),
        COMMAND_LINE_FLAGS: diag(6921, 3 /* Message */, "COMMAND_LINE_FLAGS_6921", "COMMAND LINE FLAGS"),
        tsc_Colon_The_TypeScript_Compiler: diag(6922, 3 /* Message */, "tsc_Colon_The_TypeScript_Compiler_6922", "tsc: The TypeScript Compiler"),
        Compiles_the_current_project_tsconfig_json_in_the_working_directory: diag(6923, 3 /* Message */, "Compiles_the_current_project_tsconfig_json_in_the_working_directory_6923", "Compiles the current project (tsconfig.json in the working directory.)"),
        Ignoring_tsconfig_json_compiles_the_specified_files_with_default_compiler_options: diag(6924, 3 /* Message */, "Ignoring_tsconfig_json_compiles_the_specified_files_with_default_compiler_options_6924", "Ignoring tsconfig.json, compiles the specified files with default compiler options."),
        Build_a_composite_project_in_the_working_directory: diag(6925, 3 /* Message */, "Build_a_composite_project_in_the_working_directory_6925", "Build a composite project in the working directory."),
        Creates_a_tsconfig_json_with_the_recommended_settings_in_the_working_directory: diag(6926, 3 /* Message */, "Creates_a_tsconfig_json_with_the_recommended_settings_in_the_working_directory_6926", "Creates a tsconfig.json with the recommended settings in the working directory."),
        Compiles_the_TypeScript_project_located_at_the_specified_path: diag(6927, 3 /* Message */, "Compiles_the_TypeScript_project_located_at_the_specified_path_6927", "Compiles the TypeScript project located at the specified path."),
        An_expanded_version_of_this_information_showing_all_possible_compiler_options: diag(6928, 3 /* Message */, "An_expanded_version_of_this_information_showing_all_possible_compiler_options_6928", "An expanded version of this information, showing all possible compiler options"),
        Compiles_the_current_project_with_additional_settings: diag(6929, 3 /* Message */, "Compiles_the_current_project_with_additional_settings_6929", "Compiles the current project, with additional settings."),
        true_for_ES2022_and_above_including_ESNext: diag(6930, 3 /* Message */, "true_for_ES2022_and_above_including_ESNext_6930", "`true` for ES2022 and above, including ESNext."),
        List_of_file_name_suffixes_to_search_when_resolving_a_module: diag(6931, 1 /* Error */, "List_of_file_name_suffixes_to_search_when_resolving_a_module_6931", "List of file name suffixes to search when resolving a module."),
        Variable_0_implicitly_has_an_1_type: diag(7005, 1 /* Error */, "Variable_0_implicitly_has_an_1_type_7005", "Variable '{0}' implicitly has an '{1}' type."),
        Parameter_0_implicitly_has_an_1_type: diag(7006, 1 /* Error */, "Parameter_0_implicitly_has_an_1_type_7006", "Parameter '{0}' implicitly has an '{1}' type."),
        Member_0_implicitly_has_an_1_type: diag(7008, 1 /* Error */, "Member_0_implicitly_has_an_1_type_7008", "Member '{0}' implicitly has an '{1}' type."),
        new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type: diag(7009, 1 /* Error */, "new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type_7009", "'new' expression, whose target lacks a construct signature, implicitly has an 'any' type."),
        _0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type: diag(7010, 1 /* Error */, "_0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type_7010", "'{0}', which lacks return-type annotation, implicitly has an '{1}' return type."),
        Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type: diag(7011, 1 /* Error */, "Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type_7011", "Function expression, which lacks return-type annotation, implicitly has an '{0}' return type."),
        This_overload_implicitly_returns_the_type_0_because_it_lacks_a_return_type_annotation: diag(7012, 1 /* Error */, "This_overload_implicitly_returns_the_type_0_because_it_lacks_a_return_type_annotation_7012", "This overload implicitly returns the type '{0}' because it lacks a return type annotation."),
        Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: diag(7013, 1 /* Error */, "Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type_7013", "Construct signature, which lacks return-type annotation, implicitly has an 'any' return type."),
        Function_type_which_lacks_return_type_annotation_implicitly_has_an_0_return_type: diag(7014, 1 /* Error */, "Function_type_which_lacks_return_type_annotation_implicitly_has_an_0_return_type_7014", "Function type, which lacks return-type annotation, implicitly has an '{0}' return type."),
        Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number: diag(7015, 1 /* Error */, "Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number_7015", "Element implicitly has an 'any' type because index expression is not of type 'number'."),
        Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type: diag(7016, 1 /* Error */, "Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type_7016", "Could not find a declaration file for module '{0}'. '{1}' implicitly has an 'any' type."),
        Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature: diag(7017, 1 /* Error */, "Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_7017", "Element implicitly has an 'any' type because type '{0}' has no index signature."),
        Object_literal_s_property_0_implicitly_has_an_1_type: diag(7018, 1 /* Error */, "Object_literal_s_property_0_implicitly_has_an_1_type_7018", "Object literal's property '{0}' implicitly has an '{1}' type."),
        Rest_parameter_0_implicitly_has_an_any_type: diag(7019, 1 /* Error */, "Rest_parameter_0_implicitly_has_an_any_type_7019", "Rest parameter '{0}' implicitly has an 'any[]' type."),
        Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: diag(7020, 1 /* Error */, "Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type_7020", "Call signature, which lacks return-type annotation, implicitly has an 'any' return type."),
        _0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer: diag(7022, 1 /* Error */, "_0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or__7022", "'{0}' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer."),
        _0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: diag(7023, 1 /* Error */, "_0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_reference_7023", "'{0}' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions."),
        Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: diag(7024, 1 /* Error */, "Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_ref_7024", "Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions."),
        Generator_implicitly_has_yield_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type_annotation: diag(7025, 1 /* Error */, "Generator_implicitly_has_yield_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_retu_7025", "Generator implicitly has yield type '{0}' because it does not yield any values. Consider supplying a return type annotation."),
        JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists: diag(7026, 1 /* Error */, "JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists_7026", "JSX element implicitly has type 'any' because no interface 'JSX.{0}' exists."),
        Unreachable_code_detected: diag(
          7027,
          1 /* Error */,
          "Unreachable_code_detected_7027",
          "Unreachable code detected.",
          /*reportsUnnecessary*/
          true
        ),
        Unused_label: diag(
          7028,
          1 /* Error */,
          "Unused_label_7028",
          "Unused label.",
          /*reportsUnnecessary*/
          true
        ),
        Fallthrough_case_in_switch: diag(7029, 1 /* Error */, "Fallthrough_case_in_switch_7029", "Fallthrough case in switch."),
        Not_all_code_paths_return_a_value: diag(7030, 1 /* Error */, "Not_all_code_paths_return_a_value_7030", "Not all code paths return a value."),
        Binding_element_0_implicitly_has_an_1_type: diag(7031, 1 /* Error */, "Binding_element_0_implicitly_has_an_1_type_7031", "Binding element '{0}' implicitly has an '{1}' type."),
        Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_parameter_type_annotation: diag(7032, 1 /* Error */, "Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_parameter_type_annotation_7032", "Property '{0}' implicitly has type 'any', because its set accessor lacks a parameter type annotation."),
        Property_0_implicitly_has_type_any_because_its_get_accessor_lacks_a_return_type_annotation: diag(7033, 1 /* Error */, "Property_0_implicitly_has_type_any_because_its_get_accessor_lacks_a_return_type_annotation_7033", "Property '{0}' implicitly has type 'any', because its get accessor lacks a return type annotation."),
        Variable_0_implicitly_has_type_1_in_some_locations_where_its_type_cannot_be_determined: diag(7034, 1 /* Error */, "Variable_0_implicitly_has_type_1_in_some_locations_where_its_type_cannot_be_determined_7034", "Variable '{0}' implicitly has type '{1}' in some locations where its type cannot be determined."),
        Try_npm_i_save_dev_types_Slash_1_if_it_exists_or_add_a_new_declaration_d_ts_file_containing_declare_module_0: diag(7035, 1 /* Error */, "Try_npm_i_save_dev_types_Slash_1_if_it_exists_or_add_a_new_declaration_d_ts_file_containing_declare__7035", "Try `npm i --save-dev @types/{1}` if it exists or add a new declaration (.d.ts) file containing `declare module '{0}';`"),
        Dynamic_import_s_specifier_must_be_of_type_string_but_here_has_type_0: diag(7036, 1 /* Error */, "Dynamic_import_s_specifier_must_be_of_type_string_but_here_has_type_0_7036", "Dynamic import's specifier must be of type 'string', but here has type '{0}'."),
        Enables_emit_interoperability_between_CommonJS_and_ES_Modules_via_creation_of_namespace_objects_for_all_imports_Implies_allowSyntheticDefaultImports: diag(7037, 3 /* Message */, "Enables_emit_interoperability_between_CommonJS_and_ES_Modules_via_creation_of_namespace_objects_for__7037", "Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'."),
        Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cause_a_failure_at_runtime_Consider_using_a_default_import_or_import_require_here_instead: diag(7038, 3 /* Message */, "Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cau_7038", "Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead."),
        Mapped_object_type_implicitly_has_an_any_template_type: diag(7039, 1 /* Error */, "Mapped_object_type_implicitly_has_an_any_template_type_7039", "Mapped object type implicitly has an 'any' template type."),
        If_the_0_package_actually_exposes_this_module_consider_sending_a_pull_request_to_amend_https_Colon_Slash_Slashgithub_com_SlashDefinitelyTyped_SlashDefinitelyTyped_Slashtree_Slashmaster_Slashtypes_Slash_1: diag(7040, 1 /* Error */, "If_the_0_package_actually_exposes_this_module_consider_sending_a_pull_request_to_amend_https_Colon_S_7040", "If the '{0}' package actually exposes this module, consider sending a pull request to amend 'https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/{1}'"),
        The_containing_arrow_function_captures_the_global_value_of_this: diag(7041, 1 /* Error */, "The_containing_arrow_function_captures_the_global_value_of_this_7041", "The containing arrow function captures the global value of 'this'."),
        Module_0_was_resolved_to_1_but_resolveJsonModule_is_not_used: diag(7042, 1 /* Error */, "Module_0_was_resolved_to_1_but_resolveJsonModule_is_not_used_7042", "Module '{0}' was resolved to '{1}', but '--resolveJsonModule' is not used."),
        Variable_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage: diag(7043, 2 /* Suggestion */, "Variable_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage_7043", "Variable '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage."),
        Parameter_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage: diag(7044, 2 /* Suggestion */, "Parameter_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage_7044", "Parameter '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage."),
        Member_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage: diag(7045, 2 /* Suggestion */, "Member_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage_7045", "Member '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage."),
        Variable_0_implicitly_has_type_1_in_some_locations_but_a_better_type_may_be_inferred_from_usage: diag(7046, 2 /* Suggestion */, "Variable_0_implicitly_has_type_1_in_some_locations_but_a_better_type_may_be_inferred_from_usage_7046", "Variable '{0}' implicitly has type '{1}' in some locations, but a better type may be inferred from usage."),
        Rest_parameter_0_implicitly_has_an_any_type_but_a_better_type_may_be_inferred_from_usage: diag(7047, 2 /* Suggestion */, "Rest_parameter_0_implicitly_has_an_any_type_but_a_better_type_may_be_inferred_from_usage_7047", "Rest parameter '{0}' implicitly has an 'any[]' type, but a better type may be inferred from usage."),
        Property_0_implicitly_has_type_any_but_a_better_type_for_its_get_accessor_may_be_inferred_from_usage: diag(7048, 2 /* Suggestion */, "Property_0_implicitly_has_type_any_but_a_better_type_for_its_get_accessor_may_be_inferred_from_usage_7048", "Property '{0}' implicitly has type 'any', but a better type for its get accessor may be inferred from usage."),
        Property_0_implicitly_has_type_any_but_a_better_type_for_its_set_accessor_may_be_inferred_from_usage: diag(7049, 2 /* Suggestion */, "Property_0_implicitly_has_type_any_but_a_better_type_for_its_set_accessor_may_be_inferred_from_usage_7049", "Property '{0}' implicitly has type 'any', but a better type for its set accessor may be inferred from usage."),
        _0_implicitly_has_an_1_return_type_but_a_better_type_may_be_inferred_from_usage: diag(7050, 2 /* Suggestion */, "_0_implicitly_has_an_1_return_type_but_a_better_type_may_be_inferred_from_usage_7050", "'{0}' implicitly has an '{1}' return type, but a better type may be inferred from usage."),
        Parameter_has_a_name_but_no_type_Did_you_mean_0_Colon_1: diag(7051, 1 /* Error */, "Parameter_has_a_name_but_no_type_Did_you_mean_0_Colon_1_7051", "Parameter has a name but no type. Did you mean '{0}: {1}'?"),
        Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_Did_you_mean_to_call_1: diag(7052, 1 /* Error */, "Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_Did_you_mean_to_call_1_7052", "Element implicitly has an 'any' type because type '{0}' has no index signature. Did you mean to call '{1}'?"),
        Element_implicitly_has_an_any_type_because_expression_of_type_0_can_t_be_used_to_index_type_1: diag(7053, 1 /* Error */, "Element_implicitly_has_an_any_type_because_expression_of_type_0_can_t_be_used_to_index_type_1_7053", "Element implicitly has an 'any' type because expression of type '{0}' can't be used to index type '{1}'."),
        No_index_signature_with_a_parameter_of_type_0_was_found_on_type_1: diag(7054, 1 /* Error */, "No_index_signature_with_a_parameter_of_type_0_was_found_on_type_1_7054", "No index signature with a parameter of type '{0}' was found on type '{1}'."),
        _0_which_lacks_return_type_annotation_implicitly_has_an_1_yield_type: diag(7055, 1 /* Error */, "_0_which_lacks_return_type_annotation_implicitly_has_an_1_yield_type_7055", "'{0}', which lacks return-type annotation, implicitly has an '{1}' yield type."),
        The_inferred_type_of_this_node_exceeds_the_maximum_length_the_compiler_will_serialize_An_explicit_type_annotation_is_needed: diag(7056, 1 /* Error */, "The_inferred_type_of_this_node_exceeds_the_maximum_length_the_compiler_will_serialize_An_explicit_ty_7056", "The inferred type of this node exceeds the maximum length the compiler will serialize. An explicit type annotation is needed."),
        yield_expression_implicitly_results_in_an_any_type_because_its_containing_generator_lacks_a_return_type_annotation: diag(7057, 1 /* Error */, "yield_expression_implicitly_results_in_an_any_type_because_its_containing_generator_lacks_a_return_t_7057", "'yield' expression implicitly results in an 'any' type because its containing generator lacks a return-type annotation."),
        If_the_0_package_actually_exposes_this_module_try_adding_a_new_declaration_d_ts_file_containing_declare_module_1: diag(7058, 1 /* Error */, "If_the_0_package_actually_exposes_this_module_try_adding_a_new_declaration_d_ts_file_containing_decl_7058", "If the '{0}' package actually exposes this module, try adding a new declaration (.d.ts) file containing `declare module '{1}';`"),
        This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Use_an_as_expression_instead: diag(7059, 1 /* Error */, "This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Use_an_as_expression_instead_7059", "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead."),
        This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Add_a_trailing_comma_or_explicit_constraint: diag(7060, 1 /* Error */, "This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Add_a_trailing_comma_or_explicit_cons_7060", "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint."),
        A_mapped_type_may_not_declare_properties_or_methods: diag(7061, 1 /* Error */, "A_mapped_type_may_not_declare_properties_or_methods_7061", "A mapped type may not declare properties or methods."),
        You_cannot_rename_this_element: diag(8e3, 1 /* Error */, "You_cannot_rename_this_element_8000", "You cannot rename this element."),
        You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library: diag(8001, 1 /* Error */, "You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library_8001", "You cannot rename elements that are defined in the standard TypeScript library."),
        import_can_only_be_used_in_TypeScript_files: diag(8002, 1 /* Error */, "import_can_only_be_used_in_TypeScript_files_8002", "'import ... =' can only be used in TypeScript files."),
        export_can_only_be_used_in_TypeScript_files: diag(8003, 1 /* Error */, "export_can_only_be_used_in_TypeScript_files_8003", "'export =' can only be used in TypeScript files."),
        Type_parameter_declarations_can_only_be_used_in_TypeScript_files: diag(8004, 1 /* Error */, "Type_parameter_declarations_can_only_be_used_in_TypeScript_files_8004", "Type parameter declarations can only be used in TypeScript files."),
        implements_clauses_can_only_be_used_in_TypeScript_files: diag(8005, 1 /* Error */, "implements_clauses_can_only_be_used_in_TypeScript_files_8005", "'implements' clauses can only be used in TypeScript files."),
        _0_declarations_can_only_be_used_in_TypeScript_files: diag(8006, 1 /* Error */, "_0_declarations_can_only_be_used_in_TypeScript_files_8006", "'{0}' declarations can only be used in TypeScript files."),
        Type_aliases_can_only_be_used_in_TypeScript_files: diag(8008, 1 /* Error */, "Type_aliases_can_only_be_used_in_TypeScript_files_8008", "Type aliases can only be used in TypeScript files."),
        The_0_modifier_can_only_be_used_in_TypeScript_files: diag(8009, 1 /* Error */, "The_0_modifier_can_only_be_used_in_TypeScript_files_8009", "The '{0}' modifier can only be used in TypeScript files."),
        Type_annotations_can_only_be_used_in_TypeScript_files: diag(8010, 1 /* Error */, "Type_annotations_can_only_be_used_in_TypeScript_files_8010", "Type annotations can only be used in TypeScript files."),
        Type_arguments_can_only_be_used_in_TypeScript_files: diag(8011, 1 /* Error */, "Type_arguments_can_only_be_used_in_TypeScript_files_8011", "Type arguments can only be used in TypeScript files."),
        Parameter_modifiers_can_only_be_used_in_TypeScript_files: diag(8012, 1 /* Error */, "Parameter_modifiers_can_only_be_used_in_TypeScript_files_8012", "Parameter modifiers can only be used in TypeScript files."),
        Non_null_assertions_can_only_be_used_in_TypeScript_files: diag(8013, 1 /* Error */, "Non_null_assertions_can_only_be_used_in_TypeScript_files_8013", "Non-null assertions can only be used in TypeScript files."),
        Type_assertion_expressions_can_only_be_used_in_TypeScript_files: diag(8016, 1 /* Error */, "Type_assertion_expressions_can_only_be_used_in_TypeScript_files_8016", "Type assertion expressions can only be used in TypeScript files."),
        Octal_literal_types_must_use_ES2015_syntax_Use_the_syntax_0: diag(8017, 1 /* Error */, "Octal_literal_types_must_use_ES2015_syntax_Use_the_syntax_0_8017", "Octal literal types must use ES2015 syntax. Use the syntax '{0}'."),
        Octal_literals_are_not_allowed_in_enums_members_initializer_Use_the_syntax_0: diag(8018, 1 /* Error */, "Octal_literals_are_not_allowed_in_enums_members_initializer_Use_the_syntax_0_8018", "Octal literals are not allowed in enums members initializer. Use the syntax '{0}'."),
        Report_errors_in_js_files: diag(8019, 3 /* Message */, "Report_errors_in_js_files_8019", "Report errors in .js files."),
        JSDoc_types_can_only_be_used_inside_documentation_comments: diag(8020, 1 /* Error */, "JSDoc_types_can_only_be_used_inside_documentation_comments_8020", "JSDoc types can only be used inside documentation comments."),
        JSDoc_typedef_tag_should_either_have_a_type_annotation_or_be_followed_by_property_or_member_tags: diag(8021, 1 /* Error */, "JSDoc_typedef_tag_should_either_have_a_type_annotation_or_be_followed_by_property_or_member_tags_8021", "JSDoc '@typedef' tag should either have a type annotation or be followed by '@property' or '@member' tags."),
        JSDoc_0_is_not_attached_to_a_class: diag(8022, 1 /* Error */, "JSDoc_0_is_not_attached_to_a_class_8022", "JSDoc '@{0}' is not attached to a class."),
        JSDoc_0_1_does_not_match_the_extends_2_clause: diag(8023, 1 /* Error */, "JSDoc_0_1_does_not_match_the_extends_2_clause_8023", "JSDoc '@{0} {1}' does not match the 'extends {2}' clause."),
        JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name: diag(8024, 1 /* Error */, "JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_8024", "JSDoc '@param' tag has name '{0}', but there is no parameter with that name."),
        Class_declarations_cannot_have_more_than_one_augments_or_extends_tag: diag(8025, 1 /* Error */, "Class_declarations_cannot_have_more_than_one_augments_or_extends_tag_8025", "Class declarations cannot have more than one '@augments' or '@extends' tag."),
        Expected_0_type_arguments_provide_these_with_an_extends_tag: diag(8026, 1 /* Error */, "Expected_0_type_arguments_provide_these_with_an_extends_tag_8026", "Expected {0} type arguments; provide these with an '@extends' tag."),
        Expected_0_1_type_arguments_provide_these_with_an_extends_tag: diag(8027, 1 /* Error */, "Expected_0_1_type_arguments_provide_these_with_an_extends_tag_8027", "Expected {0}-{1} type arguments; provide these with an '@extends' tag."),
        JSDoc_may_only_appear_in_the_last_parameter_of_a_signature: diag(8028, 1 /* Error */, "JSDoc_may_only_appear_in_the_last_parameter_of_a_signature_8028", "JSDoc '...' may only appear in the last parameter of a signature."),
        JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_It_would_match_arguments_if_it_had_an_array_type: diag(8029, 1 /* Error */, "JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_It_would_match_arguments_if_it_h_8029", "JSDoc '@param' tag has name '{0}', but there is no parameter with that name. It would match 'arguments' if it had an array type."),
        The_type_of_a_function_declaration_must_match_the_function_s_signature: diag(8030, 1 /* Error */, "The_type_of_a_function_declaration_must_match_the_function_s_signature_8030", "The type of a function declaration must match the function's signature."),
        You_cannot_rename_a_module_via_a_global_import: diag(8031, 1 /* Error */, "You_cannot_rename_a_module_via_a_global_import_8031", "You cannot rename a module via a global import."),
        Qualified_name_0_is_not_allowed_without_a_leading_param_object_1: diag(8032, 1 /* Error */, "Qualified_name_0_is_not_allowed_without_a_leading_param_object_1_8032", "Qualified name '{0}' is not allowed without a leading '@param {object} {1}'."),
        A_JSDoc_typedef_comment_may_not_contain_multiple_type_tags: diag(8033, 1 /* Error */, "A_JSDoc_typedef_comment_may_not_contain_multiple_type_tags_8033", "A JSDoc '@typedef' comment may not contain multiple '@type' tags."),
        The_tag_was_first_specified_here: diag(8034, 1 /* Error */, "The_tag_was_first_specified_here_8034", "The tag was first specified here."),
        You_cannot_rename_elements_that_are_defined_in_a_node_modules_folder: diag(8035, 1 /* Error */, "You_cannot_rename_elements_that_are_defined_in_a_node_modules_folder_8035", "You cannot rename elements that are defined in a 'node_modules' folder."),
        You_cannot_rename_elements_that_are_defined_in_another_node_modules_folder: diag(8036, 1 /* Error */, "You_cannot_rename_elements_that_are_defined_in_another_node_modules_folder_8036", "You cannot rename elements that are defined in another 'node_modules' folder."),
        Type_satisfaction_expressions_can_only_be_used_in_TypeScript_files: diag(8037, 1 /* Error */, "Type_satisfaction_expressions_can_only_be_used_in_TypeScript_files_8037", "Type satisfaction expressions can only be used in TypeScript files."),
        Decorators_may_not_appear_after_export_or_export_default_if_they_also_appear_before_export: diag(8038, 1 /* Error */, "Decorators_may_not_appear_after_export_or_export_default_if_they_also_appear_before_export_8038", "Decorators may not appear after 'export' or 'export default' if they also appear before 'export'."),
        Declaration_emit_for_this_file_requires_using_private_name_0_An_explicit_type_annotation_may_unblock_declaration_emit: diag(9005, 1 /* Error */, "Declaration_emit_for_this_file_requires_using_private_name_0_An_explicit_type_annotation_may_unblock_9005", "Declaration emit for this file requires using private name '{0}'. An explicit type annotation may unblock declaration emit."),
        Declaration_emit_for_this_file_requires_using_private_name_0_from_module_1_An_explicit_type_annotation_may_unblock_declaration_emit: diag(9006, 1 /* Error */, "Declaration_emit_for_this_file_requires_using_private_name_0_from_module_1_An_explicit_type_annotati_9006", "Declaration emit for this file requires using private name '{0}' from module '{1}'. An explicit type annotation may unblock declaration emit."),
        JSX_attributes_must_only_be_assigned_a_non_empty_expression: diag(17e3, 1 /* Error */, "JSX_attributes_must_only_be_assigned_a_non_empty_expression_17000", "JSX attributes must only be assigned a non-empty 'expression'."),
        JSX_elements_cannot_have_multiple_attributes_with_the_same_name: diag(17001, 1 /* Error */, "JSX_elements_cannot_have_multiple_attributes_with_the_same_name_17001", "JSX elements cannot have multiple attributes with the same name."),
        Expected_corresponding_JSX_closing_tag_for_0: diag(17002, 1 /* Error */, "Expected_corresponding_JSX_closing_tag_for_0_17002", "Expected corresponding JSX closing tag for '{0}'."),
        Cannot_use_JSX_unless_the_jsx_flag_is_provided: diag(17004, 1 /* Error */, "Cannot_use_JSX_unless_the_jsx_flag_is_provided_17004", "Cannot use JSX unless the '--jsx' flag is provided."),
        A_constructor_cannot_contain_a_super_call_when_its_class_extends_null: diag(17005, 1 /* Error */, "A_constructor_cannot_contain_a_super_call_when_its_class_extends_null_17005", "A constructor cannot contain a 'super' call when its class extends 'null'."),
        An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses: diag(17006, 1 /* Error */, "An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_ex_17006", "An unary expression with the '{0}' operator is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses."),
        A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses: diag(17007, 1 /* Error */, "A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Con_17007", "A type assertion expression is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses."),
        JSX_element_0_has_no_corresponding_closing_tag: diag(17008, 1 /* Error */, "JSX_element_0_has_no_corresponding_closing_tag_17008", "JSX element '{0}' has no corresponding closing tag."),
        super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class: diag(17009, 1 /* Error */, "super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class_17009", "'super' must be called before accessing 'this' in the constructor of a derived class."),
        Unknown_type_acquisition_option_0: diag(17010, 1 /* Error */, "Unknown_type_acquisition_option_0_17010", "Unknown type acquisition option '{0}'."),
        super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class: diag(17011, 1 /* Error */, "super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class_17011", "'super' must be called before accessing a property of 'super' in the constructor of a derived class."),
        _0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2: diag(17012, 1 /* Error */, "_0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2_17012", "'{0}' is not a valid meta-property for keyword '{1}'. Did you mean '{2}'?"),
        Meta_property_0_is_only_allowed_in_the_body_of_a_function_declaration_function_expression_or_constructor: diag(17013, 1 /* Error */, "Meta_property_0_is_only_allowed_in_the_body_of_a_function_declaration_function_expression_or_constru_17013", "Meta-property '{0}' is only allowed in the body of a function declaration, function expression, or constructor."),
        JSX_fragment_has_no_corresponding_closing_tag: diag(17014, 1 /* Error */, "JSX_fragment_has_no_corresponding_closing_tag_17014", "JSX fragment has no corresponding closing tag."),
        Expected_corresponding_closing_tag_for_JSX_fragment: diag(17015, 1 /* Error */, "Expected_corresponding_closing_tag_for_JSX_fragment_17015", "Expected corresponding closing tag for JSX fragment."),
        The_jsxFragmentFactory_compiler_option_must_be_provided_to_use_JSX_fragments_with_the_jsxFactory_compiler_option: diag(17016, 1 /* Error */, "The_jsxFragmentFactory_compiler_option_must_be_provided_to_use_JSX_fragments_with_the_jsxFactory_com_17016", "The 'jsxFragmentFactory' compiler option must be provided to use JSX fragments with the 'jsxFactory' compiler option."),
        An_jsxFrag_pragma_is_required_when_using_an_jsx_pragma_with_JSX_fragments: diag(17017, 1 /* Error */, "An_jsxFrag_pragma_is_required_when_using_an_jsx_pragma_with_JSX_fragments_17017", "An @jsxFrag pragma is required when using an @jsx pragma with JSX fragments."),
        Unknown_type_acquisition_option_0_Did_you_mean_1: diag(17018, 1 /* Error */, "Unknown_type_acquisition_option_0_Did_you_mean_1_17018", "Unknown type acquisition option '{0}'. Did you mean '{1}'?"),
        _0_at_the_end_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1: diag(17019, 1 /* Error */, "_0_at_the_end_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1_17019", "'{0}' at the end of a type is not valid TypeScript syntax. Did you mean to write '{1}'?"),
        _0_at_the_start_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1: diag(17020, 1 /* Error */, "_0_at_the_start_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1_17020", "'{0}' at the start of a type is not valid TypeScript syntax. Did you mean to write '{1}'?"),
        Circularity_detected_while_resolving_configuration_Colon_0: diag(18e3, 1 /* Error */, "Circularity_detected_while_resolving_configuration_Colon_0_18000", "Circularity detected while resolving configuration: {0}"),
        The_files_list_in_config_file_0_is_empty: diag(18002, 1 /* Error */, "The_files_list_in_config_file_0_is_empty_18002", "The 'files' list in config file '{0}' is empty."),
        No_inputs_were_found_in_config_file_0_Specified_include_paths_were_1_and_exclude_paths_were_2: diag(18003, 1 /* Error */, "No_inputs_were_found_in_config_file_0_Specified_include_paths_were_1_and_exclude_paths_were_2_18003", "No inputs were found in config file '{0}'. Specified 'include' paths were '{1}' and 'exclude' paths were '{2}'."),
        File_is_a_CommonJS_module_it_may_be_converted_to_an_ES_module: diag(80001, 2 /* Suggestion */, "File_is_a_CommonJS_module_it_may_be_converted_to_an_ES_module_80001", "File is a CommonJS module; it may be converted to an ES module."),
        This_constructor_function_may_be_converted_to_a_class_declaration: diag(80002, 2 /* Suggestion */, "This_constructor_function_may_be_converted_to_a_class_declaration_80002", "This constructor function may be converted to a class declaration."),
        Import_may_be_converted_to_a_default_import: diag(80003, 2 /* Suggestion */, "Import_may_be_converted_to_a_default_import_80003", "Import may be converted to a default import."),
        JSDoc_types_may_be_moved_to_TypeScript_types: diag(80004, 2 /* Suggestion */, "JSDoc_types_may_be_moved_to_TypeScript_types_80004", "JSDoc types may be moved to TypeScript types."),
        require_call_may_be_converted_to_an_import: diag(80005, 2 /* Suggestion */, "require_call_may_be_converted_to_an_import_80005", "'require' call may be converted to an import."),
        This_may_be_converted_to_an_async_function: diag(80006, 2 /* Suggestion */, "This_may_be_converted_to_an_async_function_80006", "This may be converted to an async function."),
        await_has_no_effect_on_the_type_of_this_expression: diag(80007, 2 /* Suggestion */, "await_has_no_effect_on_the_type_of_this_expression_80007", "'await' has no effect on the type of this expression."),
        Numeric_literals_with_absolute_values_equal_to_2_53_or_greater_are_too_large_to_be_represented_accurately_as_integers: diag(80008, 2 /* Suggestion */, "Numeric_literals_with_absolute_values_equal_to_2_53_or_greater_are_too_large_to_be_represented_accur_80008", "Numeric literals with absolute values equal to 2^53 or greater are too large to be represented accurately as integers."),
        Add_missing_super_call: diag(90001, 3 /* Message */, "Add_missing_super_call_90001", "Add missing 'super()' call"),
        Make_super_call_the_first_statement_in_the_constructor: diag(90002, 3 /* Message */, "Make_super_call_the_first_statement_in_the_constructor_90002", "Make 'super()' call the first statement in the constructor"),
        Change_extends_to_implements: diag(90003, 3 /* Message */, "Change_extends_to_implements_90003", "Change 'extends' to 'implements'"),
        Remove_unused_declaration_for_Colon_0: diag(90004, 3 /* Message */, "Remove_unused_declaration_for_Colon_0_90004", "Remove unused declaration for: '{0}'"),
        Remove_import_from_0: diag(90005, 3 /* Message */, "Remove_import_from_0_90005", "Remove import from '{0}'"),
        Implement_interface_0: diag(90006, 3 /* Message */, "Implement_interface_0_90006", "Implement interface '{0}'"),
        Implement_inherited_abstract_class: diag(90007, 3 /* Message */, "Implement_inherited_abstract_class_90007", "Implement inherited abstract class"),
        Add_0_to_unresolved_variable: diag(90008, 3 /* Message */, "Add_0_to_unresolved_variable_90008", "Add '{0}.' to unresolved variable"),
        Remove_variable_statement: diag(90010, 3 /* Message */, "Remove_variable_statement_90010", "Remove variable statement"),
        Remove_template_tag: diag(90011, 3 /* Message */, "Remove_template_tag_90011", "Remove template tag"),
        Remove_type_parameters: diag(90012, 3 /* Message */, "Remove_type_parameters_90012", "Remove type parameters"),
        Import_0_from_1: diag(90013, 3 /* Message */, "Import_0_from_1_90013", `Import '{0}' from "{1}"`),
        Change_0_to_1: diag(90014, 3 /* Message */, "Change_0_to_1_90014", "Change '{0}' to '{1}'"),
        Declare_property_0: diag(90016, 3 /* Message */, "Declare_property_0_90016", "Declare property '{0}'"),
        Add_index_signature_for_property_0: diag(90017, 3 /* Message */, "Add_index_signature_for_property_0_90017", "Add index signature for property '{0}'"),
        Disable_checking_for_this_file: diag(90018, 3 /* Message */, "Disable_checking_for_this_file_90018", "Disable checking for this file"),
        Ignore_this_error_message: diag(90019, 3 /* Message */, "Ignore_this_error_message_90019", "Ignore this error message"),
        Initialize_property_0_in_the_constructor: diag(90020, 3 /* Message */, "Initialize_property_0_in_the_constructor_90020", "Initialize property '{0}' in the constructor"),
        Initialize_static_property_0: diag(90021, 3 /* Message */, "Initialize_static_property_0_90021", "Initialize static property '{0}'"),
        Change_spelling_to_0: diag(90022, 3 /* Message */, "Change_spelling_to_0_90022", "Change spelling to '{0}'"),
        Declare_method_0: diag(90023, 3 /* Message */, "Declare_method_0_90023", "Declare method '{0}'"),
        Declare_static_method_0: diag(90024, 3 /* Message */, "Declare_static_method_0_90024", "Declare static method '{0}'"),
        Prefix_0_with_an_underscore: diag(90025, 3 /* Message */, "Prefix_0_with_an_underscore_90025", "Prefix '{0}' with an underscore"),
        Rewrite_as_the_indexed_access_type_0: diag(90026, 3 /* Message */, "Rewrite_as_the_indexed_access_type_0_90026", "Rewrite as the indexed access type '{0}'"),
        Declare_static_property_0: diag(90027, 3 /* Message */, "Declare_static_property_0_90027", "Declare static property '{0}'"),
        Call_decorator_expression: diag(90028, 3 /* Message */, "Call_decorator_expression_90028", "Call decorator expression"),
        Add_async_modifier_to_containing_function: diag(90029, 3 /* Message */, "Add_async_modifier_to_containing_function_90029", "Add async modifier to containing function"),
        Replace_infer_0_with_unknown: diag(90030, 3 /* Message */, "Replace_infer_0_with_unknown_90030", "Replace 'infer {0}' with 'unknown'"),
        Replace_all_unused_infer_with_unknown: diag(90031, 3 /* Message */, "Replace_all_unused_infer_with_unknown_90031", "Replace all unused 'infer' with 'unknown'"),
        Add_parameter_name: diag(90034, 3 /* Message */, "Add_parameter_name_90034", "Add parameter name"),
        Declare_private_property_0: diag(90035, 3 /* Message */, "Declare_private_property_0_90035", "Declare private property '{0}'"),
        Replace_0_with_Promise_1: diag(90036, 3 /* Message */, "Replace_0_with_Promise_1_90036", "Replace '{0}' with 'Promise<{1}>'"),
        Fix_all_incorrect_return_type_of_an_async_functions: diag(90037, 3 /* Message */, "Fix_all_incorrect_return_type_of_an_async_functions_90037", "Fix all incorrect return type of an async functions"),
        Declare_private_method_0: diag(90038, 3 /* Message */, "Declare_private_method_0_90038", "Declare private method '{0}'"),
        Remove_unused_destructuring_declaration: diag(90039, 3 /* Message */, "Remove_unused_destructuring_declaration_90039", "Remove unused destructuring declaration"),
        Remove_unused_declarations_for_Colon_0: diag(90041, 3 /* Message */, "Remove_unused_declarations_for_Colon_0_90041", "Remove unused declarations for: '{0}'"),
        Declare_a_private_field_named_0: diag(90053, 3 /* Message */, "Declare_a_private_field_named_0_90053", "Declare a private field named '{0}'."),
        Includes_imports_of_types_referenced_by_0: diag(90054, 3 /* Message */, "Includes_imports_of_types_referenced_by_0_90054", "Includes imports of types referenced by '{0}'"),
        Remove_type_from_import_declaration_from_0: diag(90055, 3 /* Message */, "Remove_type_from_import_declaration_from_0_90055", `Remove 'type' from import declaration from "{0}"`),
        Remove_type_from_import_of_0_from_1: diag(90056, 3 /* Message */, "Remove_type_from_import_of_0_from_1_90056", `Remove 'type' from import of '{0}' from "{1}"`),
        Add_import_from_0: diag(90057, 3 /* Message */, "Add_import_from_0_90057", 'Add import from "{0}"'),
        Update_import_from_0: diag(90058, 3 /* Message */, "Update_import_from_0_90058", 'Update import from "{0}"'),
        Export_0_from_module_1: diag(90059, 3 /* Message */, "Export_0_from_module_1_90059", "Export '{0}' from module '{1}'"),
        Export_all_referenced_locals: diag(90060, 3 /* Message */, "Export_all_referenced_locals_90060", "Export all referenced locals"),
        Convert_function_to_an_ES2015_class: diag(95001, 3 /* Message */, "Convert_function_to_an_ES2015_class_95001", "Convert function to an ES2015 class"),
        Convert_0_to_1_in_0: diag(95003, 3 /* Message */, "Convert_0_to_1_in_0_95003", "Convert '{0}' to '{1} in {0}'"),
        Extract_to_0_in_1: diag(95004, 3 /* Message */, "Extract_to_0_in_1_95004", "Extract to {0} in {1}"),
        Extract_function: diag(95005, 3 /* Message */, "Extract_function_95005", "Extract function"),
        Extract_constant: diag(95006, 3 /* Message */, "Extract_constant_95006", "Extract constant"),
        Extract_to_0_in_enclosing_scope: diag(95007, 3 /* Message */, "Extract_to_0_in_enclosing_scope_95007", "Extract to {0} in enclosing scope"),
        Extract_to_0_in_1_scope: diag(95008, 3 /* Message */, "Extract_to_0_in_1_scope_95008", "Extract to {0} in {1} scope"),
        Annotate_with_type_from_JSDoc: diag(95009, 3 /* Message */, "Annotate_with_type_from_JSDoc_95009", "Annotate with type from JSDoc"),
        Infer_type_of_0_from_usage: diag(95011, 3 /* Message */, "Infer_type_of_0_from_usage_95011", "Infer type of '{0}' from usage"),
        Infer_parameter_types_from_usage: diag(95012, 3 /* Message */, "Infer_parameter_types_from_usage_95012", "Infer parameter types from usage"),
        Convert_to_default_import: diag(95013, 3 /* Message */, "Convert_to_default_import_95013", "Convert to default import"),
        Install_0: diag(95014, 3 /* Message */, "Install_0_95014", "Install '{0}'"),
        Replace_import_with_0: diag(95015, 3 /* Message */, "Replace_import_with_0_95015", "Replace import with '{0}'."),
        Use_synthetic_default_member: diag(95016, 3 /* Message */, "Use_synthetic_default_member_95016", "Use synthetic 'default' member."),
        Convert_to_ES_module: diag(95017, 3 /* Message */, "Convert_to_ES_module_95017", "Convert to ES module"),
        Add_undefined_type_to_property_0: diag(95018, 3 /* Message */, "Add_undefined_type_to_property_0_95018", "Add 'undefined' type to property '{0}'"),
        Add_initializer_to_property_0: diag(95019, 3 /* Message */, "Add_initializer_to_property_0_95019", "Add initializer to property '{0}'"),
        Add_definite_assignment_assertion_to_property_0: diag(95020, 3 /* Message */, "Add_definite_assignment_assertion_to_property_0_95020", "Add definite assignment assertion to property '{0}'"),
        Convert_all_type_literals_to_mapped_type: diag(95021, 3 /* Message */, "Convert_all_type_literals_to_mapped_type_95021", "Convert all type literals to mapped type"),
        Add_all_missing_members: diag(95022, 3 /* Message */, "Add_all_missing_members_95022", "Add all missing members"),
        Infer_all_types_from_usage: diag(95023, 3 /* Message */, "Infer_all_types_from_usage_95023", "Infer all types from usage"),
        Delete_all_unused_declarations: diag(95024, 3 /* Message */, "Delete_all_unused_declarations_95024", "Delete all unused declarations"),
        Prefix_all_unused_declarations_with_where_possible: diag(95025, 3 /* Message */, "Prefix_all_unused_declarations_with_where_possible_95025", "Prefix all unused declarations with '_' where possible"),
        Fix_all_detected_spelling_errors: diag(95026, 3 /* Message */, "Fix_all_detected_spelling_errors_95026", "Fix all detected spelling errors"),
        Add_initializers_to_all_uninitialized_properties: diag(95027, 3 /* Message */, "Add_initializers_to_all_uninitialized_properties_95027", "Add initializers to all uninitialized properties"),
        Add_definite_assignment_assertions_to_all_uninitialized_properties: diag(95028, 3 /* Message */, "Add_definite_assignment_assertions_to_all_uninitialized_properties_95028", "Add definite assignment assertions to all uninitialized properties"),
        Add_undefined_type_to_all_uninitialized_properties: diag(95029, 3 /* Message */, "Add_undefined_type_to_all_uninitialized_properties_95029", "Add undefined type to all uninitialized properties"),
        Change_all_jsdoc_style_types_to_TypeScript: diag(95030, 3 /* Message */, "Change_all_jsdoc_style_types_to_TypeScript_95030", "Change all jsdoc-style types to TypeScript"),
        Change_all_jsdoc_style_types_to_TypeScript_and_add_undefined_to_nullable_types: diag(95031, 3 /* Message */, "Change_all_jsdoc_style_types_to_TypeScript_and_add_undefined_to_nullable_types_95031", "Change all jsdoc-style types to TypeScript (and add '| undefined' to nullable types)"),
        Implement_all_unimplemented_interfaces: diag(95032, 3 /* Message */, "Implement_all_unimplemented_interfaces_95032", "Implement all unimplemented interfaces"),
        Install_all_missing_types_packages: diag(95033, 3 /* Message */, "Install_all_missing_types_packages_95033", "Install all missing types packages"),
        Rewrite_all_as_indexed_access_types: diag(95034, 3 /* Message */, "Rewrite_all_as_indexed_access_types_95034", "Rewrite all as indexed access types"),
        Convert_all_to_default_imports: diag(95035, 3 /* Message */, "Convert_all_to_default_imports_95035", "Convert all to default imports"),
        Make_all_super_calls_the_first_statement_in_their_constructor: diag(95036, 3 /* Message */, "Make_all_super_calls_the_first_statement_in_their_constructor_95036", "Make all 'super()' calls the first statement in their constructor"),
        Add_qualifier_to_all_unresolved_variables_matching_a_member_name: diag(95037, 3 /* Message */, "Add_qualifier_to_all_unresolved_variables_matching_a_member_name_95037", "Add qualifier to all unresolved variables matching a member name"),
        Change_all_extended_interfaces_to_implements: diag(95038, 3 /* Message */, "Change_all_extended_interfaces_to_implements_95038", "Change all extended interfaces to 'implements'"),
        Add_all_missing_super_calls: diag(95039, 3 /* Message */, "Add_all_missing_super_calls_95039", "Add all missing super calls"),
        Implement_all_inherited_abstract_classes: diag(95040, 3 /* Message */, "Implement_all_inherited_abstract_classes_95040", "Implement all inherited abstract classes"),
        Add_all_missing_async_modifiers: diag(95041, 3 /* Message */, "Add_all_missing_async_modifiers_95041", "Add all missing 'async' modifiers"),
        Add_ts_ignore_to_all_error_messages: diag(95042, 3 /* Message */, "Add_ts_ignore_to_all_error_messages_95042", "Add '@ts-ignore' to all error messages"),
        Annotate_everything_with_types_from_JSDoc: diag(95043, 3 /* Message */, "Annotate_everything_with_types_from_JSDoc_95043", "Annotate everything with types from JSDoc"),
        Add_to_all_uncalled_decorators: diag(95044, 3 /* Message */, "Add_to_all_uncalled_decorators_95044", "Add '()' to all uncalled decorators"),
        Convert_all_constructor_functions_to_classes: diag(95045, 3 /* Message */, "Convert_all_constructor_functions_to_classes_95045", "Convert all constructor functions to classes"),
        Generate_get_and_set_accessors: diag(95046, 3 /* Message */, "Generate_get_and_set_accessors_95046", "Generate 'get' and 'set' accessors"),
        Convert_require_to_import: diag(95047, 3 /* Message */, "Convert_require_to_import_95047", "Convert 'require' to 'import'"),
        Convert_all_require_to_import: diag(95048, 3 /* Message */, "Convert_all_require_to_import_95048", "Convert all 'require' to 'import'"),
        Move_to_a_new_file: diag(95049, 3 /* Message */, "Move_to_a_new_file_95049", "Move to a new file"),
        Remove_unreachable_code: diag(95050, 3 /* Message */, "Remove_unreachable_code_95050", "Remove unreachable code"),
        Remove_all_unreachable_code: diag(95051, 3 /* Message */, "Remove_all_unreachable_code_95051", "Remove all unreachable code"),
        Add_missing_typeof: diag(95052, 3 /* Message */, "Add_missing_typeof_95052", "Add missing 'typeof'"),
        Remove_unused_label: diag(95053, 3 /* Message */, "Remove_unused_label_95053", "Remove unused label"),
        Remove_all_unused_labels: diag(95054, 3 /* Message */, "Remove_all_unused_labels_95054", "Remove all unused labels"),
        Convert_0_to_mapped_object_type: diag(95055, 3 /* Message */, "Convert_0_to_mapped_object_type_95055", "Convert '{0}' to mapped object type"),
        Convert_namespace_import_to_named_imports: diag(95056, 3 /* Message */, "Convert_namespace_import_to_named_imports_95056", "Convert namespace import to named imports"),
        Convert_named_imports_to_namespace_import: diag(95057, 3 /* Message */, "Convert_named_imports_to_namespace_import_95057", "Convert named imports to namespace import"),
        Add_or_remove_braces_in_an_arrow_function: diag(95058, 3 /* Message */, "Add_or_remove_braces_in_an_arrow_function_95058", "Add or remove braces in an arrow function"),
        Add_braces_to_arrow_function: diag(95059, 3 /* Message */, "Add_braces_to_arrow_function_95059", "Add braces to arrow function"),
        Remove_braces_from_arrow_function: diag(95060, 3 /* Message */, "Remove_braces_from_arrow_function_95060", "Remove braces from arrow function"),
        Convert_default_export_to_named_export: diag(95061, 3 /* Message */, "Convert_default_export_to_named_export_95061", "Convert default export to named export"),
        Convert_named_export_to_default_export: diag(95062, 3 /* Message */, "Convert_named_export_to_default_export_95062", "Convert named export to default export"),
        Add_missing_enum_member_0: diag(95063, 3 /* Message */, "Add_missing_enum_member_0_95063", "Add missing enum member '{0}'"),
        Add_all_missing_imports: diag(95064, 3 /* Message */, "Add_all_missing_imports_95064", "Add all missing imports"),
        Convert_to_async_function: diag(95065, 3 /* Message */, "Convert_to_async_function_95065", "Convert to async function"),
        Convert_all_to_async_functions: diag(95066, 3 /* Message */, "Convert_all_to_async_functions_95066", "Convert all to async functions"),
        Add_missing_call_parentheses: diag(95067, 3 /* Message */, "Add_missing_call_parentheses_95067", "Add missing call parentheses"),
        Add_all_missing_call_parentheses: diag(95068, 3 /* Message */, "Add_all_missing_call_parentheses_95068", "Add all missing call parentheses"),
        Add_unknown_conversion_for_non_overlapping_types: diag(95069, 3 /* Message */, "Add_unknown_conversion_for_non_overlapping_types_95069", "Add 'unknown' conversion for non-overlapping types"),
        Add_unknown_to_all_conversions_of_non_overlapping_types: diag(95070, 3 /* Message */, "Add_unknown_to_all_conversions_of_non_overlapping_types_95070", "Add 'unknown' to all conversions of non-overlapping types"),
        Add_missing_new_operator_to_call: diag(95071, 3 /* Message */, "Add_missing_new_operator_to_call_95071", "Add missing 'new' operator to call"),
        Add_missing_new_operator_to_all_calls: diag(95072, 3 /* Message */, "Add_missing_new_operator_to_all_calls_95072", "Add missing 'new' operator to all calls"),
        Add_names_to_all_parameters_without_names: diag(95073, 3 /* Message */, "Add_names_to_all_parameters_without_names_95073", "Add names to all parameters without names"),
        Enable_the_experimentalDecorators_option_in_your_configuration_file: diag(95074, 3 /* Message */, "Enable_the_experimentalDecorators_option_in_your_configuration_file_95074", "Enable the 'experimentalDecorators' option in your configuration file"),
        Convert_parameters_to_destructured_object: diag(95075, 3 /* Message */, "Convert_parameters_to_destructured_object_95075", "Convert parameters to destructured object"),
        Extract_type: diag(95077, 3 /* Message */, "Extract_type_95077", "Extract type"),
        Extract_to_type_alias: diag(95078, 3 /* Message */, "Extract_to_type_alias_95078", "Extract to type alias"),
        Extract_to_typedef: diag(95079, 3 /* Message */, "Extract_to_typedef_95079", "Extract to typedef"),
        Infer_this_type_of_0_from_usage: diag(95080, 3 /* Message */, "Infer_this_type_of_0_from_usage_95080", "Infer 'this' type of '{0}' from usage"),
        Add_const_to_unresolved_variable: diag(95081, 3 /* Message */, "Add_const_to_unresolved_variable_95081", "Add 'const' to unresolved variable"),
        Add_const_to_all_unresolved_variables: diag(95082, 3 /* Message */, "Add_const_to_all_unresolved_variables_95082", "Add 'const' to all unresolved variables"),
        Add_await: diag(95083, 3 /* Message */, "Add_await_95083", "Add 'await'"),
        Add_await_to_initializer_for_0: diag(95084, 3 /* Message */, "Add_await_to_initializer_for_0_95084", "Add 'await' to initializer for '{0}'"),
        Fix_all_expressions_possibly_missing_await: diag(95085, 3 /* Message */, "Fix_all_expressions_possibly_missing_await_95085", "Fix all expressions possibly missing 'await'"),
        Remove_unnecessary_await: diag(95086, 3 /* Message */, "Remove_unnecessary_await_95086", "Remove unnecessary 'await'"),
        Remove_all_unnecessary_uses_of_await: diag(95087, 3 /* Message */, "Remove_all_unnecessary_uses_of_await_95087", "Remove all unnecessary uses of 'await'"),
        Enable_the_jsx_flag_in_your_configuration_file: diag(95088, 3 /* Message */, "Enable_the_jsx_flag_in_your_configuration_file_95088", "Enable the '--jsx' flag in your configuration file"),
        Add_await_to_initializers: diag(95089, 3 /* Message */, "Add_await_to_initializers_95089", "Add 'await' to initializers"),
        Extract_to_interface: diag(95090, 3 /* Message */, "Extract_to_interface_95090", "Extract to interface"),
        Convert_to_a_bigint_numeric_literal: diag(95091, 3 /* Message */, "Convert_to_a_bigint_numeric_literal_95091", "Convert to a bigint numeric literal"),
        Convert_all_to_bigint_numeric_literals: diag(95092, 3 /* Message */, "Convert_all_to_bigint_numeric_literals_95092", "Convert all to bigint numeric literals"),
        Convert_const_to_let: diag(95093, 3 /* Message */, "Convert_const_to_let_95093", "Convert 'const' to 'let'"),
        Prefix_with_declare: diag(95094, 3 /* Message */, "Prefix_with_declare_95094", "Prefix with 'declare'"),
        Prefix_all_incorrect_property_declarations_with_declare: diag(95095, 3 /* Message */, "Prefix_all_incorrect_property_declarations_with_declare_95095", "Prefix all incorrect property declarations with 'declare'"),
        Convert_to_template_string: diag(95096, 3 /* Message */, "Convert_to_template_string_95096", "Convert to template string"),
        Add_export_to_make_this_file_into_a_module: diag(95097, 3 /* Message */, "Add_export_to_make_this_file_into_a_module_95097", "Add 'export {}' to make this file into a module"),
        Set_the_target_option_in_your_configuration_file_to_0: diag(95098, 3 /* Message */, "Set_the_target_option_in_your_configuration_file_to_0_95098", "Set the 'target' option in your configuration file to '{0}'"),
        Set_the_module_option_in_your_configuration_file_to_0: diag(95099, 3 /* Message */, "Set_the_module_option_in_your_configuration_file_to_0_95099", "Set the 'module' option in your configuration file to '{0}'"),
        Convert_invalid_character_to_its_html_entity_code: diag(95100, 3 /* Message */, "Convert_invalid_character_to_its_html_entity_code_95100", "Convert invalid character to its html entity code"),
        Convert_all_invalid_characters_to_HTML_entity_code: diag(95101, 3 /* Message */, "Convert_all_invalid_characters_to_HTML_entity_code_95101", "Convert all invalid characters to HTML entity code"),
        Convert_all_const_to_let: diag(95102, 3 /* Message */, "Convert_all_const_to_let_95102", "Convert all 'const' to 'let'"),
        Convert_function_expression_0_to_arrow_function: diag(95105, 3 /* Message */, "Convert_function_expression_0_to_arrow_function_95105", "Convert function expression '{0}' to arrow function"),
        Convert_function_declaration_0_to_arrow_function: diag(95106, 3 /* Message */, "Convert_function_declaration_0_to_arrow_function_95106", "Convert function declaration '{0}' to arrow function"),
        Fix_all_implicit_this_errors: diag(95107, 3 /* Message */, "Fix_all_implicit_this_errors_95107", "Fix all implicit-'this' errors"),
        Wrap_invalid_character_in_an_expression_container: diag(95108, 3 /* Message */, "Wrap_invalid_character_in_an_expression_container_95108", "Wrap invalid character in an expression container"),
        Wrap_all_invalid_characters_in_an_expression_container: diag(95109, 3 /* Message */, "Wrap_all_invalid_characters_in_an_expression_container_95109", "Wrap all invalid characters in an expression container"),
        Visit_https_Colon_Slash_Slashaka_ms_Slashtsconfig_to_read_more_about_this_file: diag(95110, 3 /* Message */, "Visit_https_Colon_Slash_Slashaka_ms_Slashtsconfig_to_read_more_about_this_file_95110", "Visit https://aka.ms/tsconfig to read more about this file"),
        Add_a_return_statement: diag(95111, 3 /* Message */, "Add_a_return_statement_95111", "Add a return statement"),
        Remove_braces_from_arrow_function_body: diag(95112, 3 /* Message */, "Remove_braces_from_arrow_function_body_95112", "Remove braces from arrow function body"),
        Wrap_the_following_body_with_parentheses_which_should_be_an_object_literal: diag(95113, 3 /* Message */, "Wrap_the_following_body_with_parentheses_which_should_be_an_object_literal_95113", "Wrap the following body with parentheses which should be an object literal"),
        Add_all_missing_return_statement: diag(95114, 3 /* Message */, "Add_all_missing_return_statement_95114", "Add all missing return statement"),
        Remove_braces_from_all_arrow_function_bodies_with_relevant_issues: diag(95115, 3 /* Message */, "Remove_braces_from_all_arrow_function_bodies_with_relevant_issues_95115", "Remove braces from all arrow function bodies with relevant issues"),
        Wrap_all_object_literal_with_parentheses: diag(95116, 3 /* Message */, "Wrap_all_object_literal_with_parentheses_95116", "Wrap all object literal with parentheses"),
        Move_labeled_tuple_element_modifiers_to_labels: diag(95117, 3 /* Message */, "Move_labeled_tuple_element_modifiers_to_labels_95117", "Move labeled tuple element modifiers to labels"),
        Convert_overload_list_to_single_signature: diag(95118, 3 /* Message */, "Convert_overload_list_to_single_signature_95118", "Convert overload list to single signature"),
        Generate_get_and_set_accessors_for_all_overriding_properties: diag(95119, 3 /* Message */, "Generate_get_and_set_accessors_for_all_overriding_properties_95119", "Generate 'get' and 'set' accessors for all overriding properties"),
        Wrap_in_JSX_fragment: diag(95120, 3 /* Message */, "Wrap_in_JSX_fragment_95120", "Wrap in JSX fragment"),
        Wrap_all_unparented_JSX_in_JSX_fragment: diag(95121, 3 /* Message */, "Wrap_all_unparented_JSX_in_JSX_fragment_95121", "Wrap all unparented JSX in JSX fragment"),
        Convert_arrow_function_or_function_expression: diag(95122, 3 /* Message */, "Convert_arrow_function_or_function_expression_95122", "Convert arrow function or function expression"),
        Convert_to_anonymous_function: diag(95123, 3 /* Message */, "Convert_to_anonymous_function_95123", "Convert to anonymous function"),
        Convert_to_named_function: diag(95124, 3 /* Message */, "Convert_to_named_function_95124", "Convert to named function"),
        Convert_to_arrow_function: diag(95125, 3 /* Message */, "Convert_to_arrow_function_95125", "Convert to arrow function"),
        Remove_parentheses: diag(95126, 3 /* Message */, "Remove_parentheses_95126", "Remove parentheses"),
        Could_not_find_a_containing_arrow_function: diag(95127, 3 /* Message */, "Could_not_find_a_containing_arrow_function_95127", "Could not find a containing arrow function"),
        Containing_function_is_not_an_arrow_function: diag(95128, 3 /* Message */, "Containing_function_is_not_an_arrow_function_95128", "Containing function is not an arrow function"),
        Could_not_find_export_statement: diag(95129, 3 /* Message */, "Could_not_find_export_statement_95129", "Could not find export statement"),
        This_file_already_has_a_default_export: diag(95130, 3 /* Message */, "This_file_already_has_a_default_export_95130", "This file already has a default export"),
        Could_not_find_import_clause: diag(95131, 3 /* Message */, "Could_not_find_import_clause_95131", "Could not find import clause"),
        Could_not_find_namespace_import_or_named_imports: diag(95132, 3 /* Message */, "Could_not_find_namespace_import_or_named_imports_95132", "Could not find namespace import or named imports"),
        Selection_is_not_a_valid_type_node: diag(95133, 3 /* Message */, "Selection_is_not_a_valid_type_node_95133", "Selection is not a valid type node"),
        No_type_could_be_extracted_from_this_type_node: diag(95134, 3 /* Message */, "No_type_could_be_extracted_from_this_type_node_95134", "No type could be extracted from this type node"),
        Could_not_find_property_for_which_to_generate_accessor: diag(95135, 3 /* Message */, "Could_not_find_property_for_which_to_generate_accessor_95135", "Could not find property for which to generate accessor"),
        Name_is_not_valid: diag(95136, 3 /* Message */, "Name_is_not_valid_95136", "Name is not valid"),
        Can_only_convert_property_with_modifier: diag(95137, 3 /* Message */, "Can_only_convert_property_with_modifier_95137", "Can only convert property with modifier"),
        Switch_each_misused_0_to_1: diag(95138, 3 /* Message */, "Switch_each_misused_0_to_1_95138", "Switch each misused '{0}' to '{1}'"),
        Convert_to_optional_chain_expression: diag(95139, 3 /* Message */, "Convert_to_optional_chain_expression_95139", "Convert to optional chain expression"),
        Could_not_find_convertible_access_expression: diag(95140, 3 /* Message */, "Could_not_find_convertible_access_expression_95140", "Could not find convertible access expression"),
        Could_not_find_matching_access_expressions: diag(95141, 3 /* Message */, "Could_not_find_matching_access_expressions_95141", "Could not find matching access expressions"),
        Can_only_convert_logical_AND_access_chains: diag(95142, 3 /* Message */, "Can_only_convert_logical_AND_access_chains_95142", "Can only convert logical AND access chains"),
        Add_void_to_Promise_resolved_without_a_value: diag(95143, 3 /* Message */, "Add_void_to_Promise_resolved_without_a_value_95143", "Add 'void' to Promise resolved without a value"),
        Add_void_to_all_Promises_resolved_without_a_value: diag(95144, 3 /* Message */, "Add_void_to_all_Promises_resolved_without_a_value_95144", "Add 'void' to all Promises resolved without a value"),
        Use_element_access_for_0: diag(95145, 3 /* Message */, "Use_element_access_for_0_95145", "Use element access for '{0}'"),
        Use_element_access_for_all_undeclared_properties: diag(95146, 3 /* Message */, "Use_element_access_for_all_undeclared_properties_95146", "Use element access for all undeclared properties."),
        Delete_all_unused_imports: diag(95147, 3 /* Message */, "Delete_all_unused_imports_95147", "Delete all unused imports"),
        Infer_function_return_type: diag(95148, 3 /* Message */, "Infer_function_return_type_95148", "Infer function return type"),
        Return_type_must_be_inferred_from_a_function: diag(95149, 3 /* Message */, "Return_type_must_be_inferred_from_a_function_95149", "Return type must be inferred from a function"),
        Could_not_determine_function_return_type: diag(95150, 3 /* Message */, "Could_not_determine_function_return_type_95150", "Could not determine function return type"),
        Could_not_convert_to_arrow_function: diag(95151, 3 /* Message */, "Could_not_convert_to_arrow_function_95151", "Could not convert to arrow function"),
        Could_not_convert_to_named_function: diag(95152, 3 /* Message */, "Could_not_convert_to_named_function_95152", "Could not convert to named function"),
        Could_not_convert_to_anonymous_function: diag(95153, 3 /* Message */, "Could_not_convert_to_anonymous_function_95153", "Could not convert to anonymous function"),
        Can_only_convert_string_concatenation: diag(95154, 3 /* Message */, "Can_only_convert_string_concatenation_95154", "Can only convert string concatenation"),
        Selection_is_not_a_valid_statement_or_statements: diag(95155, 3 /* Message */, "Selection_is_not_a_valid_statement_or_statements_95155", "Selection is not a valid statement or statements"),
        Add_missing_function_declaration_0: diag(95156, 3 /* Message */, "Add_missing_function_declaration_0_95156", "Add missing function declaration '{0}'"),
        Add_all_missing_function_declarations: diag(95157, 3 /* Message */, "Add_all_missing_function_declarations_95157", "Add all missing function declarations"),
        Method_not_implemented: diag(95158, 3 /* Message */, "Method_not_implemented_95158", "Method not implemented."),
        Function_not_implemented: diag(95159, 3 /* Message */, "Function_not_implemented_95159", "Function not implemented."),
        Add_override_modifier: diag(95160, 3 /* Message */, "Add_override_modifier_95160", "Add 'override' modifier"),
        Remove_override_modifier: diag(95161, 3 /* Message */, "Remove_override_modifier_95161", "Remove 'override' modifier"),
        Add_all_missing_override_modifiers: diag(95162, 3 /* Message */, "Add_all_missing_override_modifiers_95162", "Add all missing 'override' modifiers"),
        Remove_all_unnecessary_override_modifiers: diag(95163, 3 /* Message */, "Remove_all_unnecessary_override_modifiers_95163", "Remove all unnecessary 'override' modifiers"),
        Can_only_convert_named_export: diag(95164, 3 /* Message */, "Can_only_convert_named_export_95164", "Can only convert named export"),
        Add_missing_properties: diag(95165, 3 /* Message */, "Add_missing_properties_95165", "Add missing properties"),
        Add_all_missing_properties: diag(95166, 3 /* Message */, "Add_all_missing_properties_95166", "Add all missing properties"),
        Add_missing_attributes: diag(95167, 3 /* Message */, "Add_missing_attributes_95167", "Add missing attributes"),
        Add_all_missing_attributes: diag(95168, 3 /* Message */, "Add_all_missing_attributes_95168", "Add all missing attributes"),
        Add_undefined_to_optional_property_type: diag(95169, 3 /* Message */, "Add_undefined_to_optional_property_type_95169", "Add 'undefined' to optional property type"),
        Convert_named_imports_to_default_import: diag(95170, 3 /* Message */, "Convert_named_imports_to_default_import_95170", "Convert named imports to default import"),
        Delete_unused_param_tag_0: diag(95171, 3 /* Message */, "Delete_unused_param_tag_0_95171", "Delete unused '@param' tag '{0}'"),
        Delete_all_unused_param_tags: diag(95172, 3 /* Message */, "Delete_all_unused_param_tags_95172", "Delete all unused '@param' tags"),
        Rename_param_tag_name_0_to_1: diag(95173, 3 /* Message */, "Rename_param_tag_name_0_to_1_95173", "Rename '@param' tag name '{0}' to '{1}'"),
        Use_0: diag(95174, 3 /* Message */, "Use_0_95174", "Use `{0}`."),
        Use_Number_isNaN_in_all_conditions: diag(95175, 3 /* Message */, "Use_Number_isNaN_in_all_conditions_95175", "Use `Number.isNaN` in all conditions."),
        No_value_exists_in_scope_for_the_shorthand_property_0_Either_declare_one_or_provide_an_initializer: diag(18004, 1 /* Error */, "No_value_exists_in_scope_for_the_shorthand_property_0_Either_declare_one_or_provide_an_initializer_18004", "No value exists in scope for the shorthand property '{0}'. Either declare one or provide an initializer."),
        Classes_may_not_have_a_field_named_constructor: diag(18006, 1 /* Error */, "Classes_may_not_have_a_field_named_constructor_18006", "Classes may not have a field named 'constructor'."),
        JSX_expressions_may_not_use_the_comma_operator_Did_you_mean_to_write_an_array: diag(18007, 1 /* Error */, "JSX_expressions_may_not_use_the_comma_operator_Did_you_mean_to_write_an_array_18007", "JSX expressions may not use the comma operator. Did you mean to write an array?"),
        Private_identifiers_cannot_be_used_as_parameters: diag(18009, 1 /* Error */, "Private_identifiers_cannot_be_used_as_parameters_18009", "Private identifiers cannot be used as parameters."),
        An_accessibility_modifier_cannot_be_used_with_a_private_identifier: diag(18010, 1 /* Error */, "An_accessibility_modifier_cannot_be_used_with_a_private_identifier_18010", "An accessibility modifier cannot be used with a private identifier."),
        The_operand_of_a_delete_operator_cannot_be_a_private_identifier: diag(18011, 1 /* Error */, "The_operand_of_a_delete_operator_cannot_be_a_private_identifier_18011", "The operand of a 'delete' operator cannot be a private identifier."),
        constructor_is_a_reserved_word: diag(18012, 1 /* Error */, "constructor_is_a_reserved_word_18012", "'#constructor' is a reserved word."),
        Property_0_is_not_accessible_outside_class_1_because_it_has_a_private_identifier: diag(18013, 1 /* Error */, "Property_0_is_not_accessible_outside_class_1_because_it_has_a_private_identifier_18013", "Property '{0}' is not accessible outside class '{1}' because it has a private identifier."),
        The_property_0_cannot_be_accessed_on_type_1_within_this_class_because_it_is_shadowed_by_another_private_identifier_with_the_same_spelling: diag(18014, 1 /* Error */, "The_property_0_cannot_be_accessed_on_type_1_within_this_class_because_it_is_shadowed_by_another_priv_18014", "The property '{0}' cannot be accessed on type '{1}' within this class because it is shadowed by another private identifier with the same spelling."),
        Property_0_in_type_1_refers_to_a_different_member_that_cannot_be_accessed_from_within_type_2: diag(18015, 1 /* Error */, "Property_0_in_type_1_refers_to_a_different_member_that_cannot_be_accessed_from_within_type_2_18015", "Property '{0}' in type '{1}' refers to a different member that cannot be accessed from within type '{2}'."),
        Private_identifiers_are_not_allowed_outside_class_bodies: diag(18016, 1 /* Error */, "Private_identifiers_are_not_allowed_outside_class_bodies_18016", "Private identifiers are not allowed outside class bodies."),
        The_shadowing_declaration_of_0_is_defined_here: diag(18017, 1 /* Error */, "The_shadowing_declaration_of_0_is_defined_here_18017", "The shadowing declaration of '{0}' is defined here"),
        The_declaration_of_0_that_you_probably_intended_to_use_is_defined_here: diag(18018, 1 /* Error */, "The_declaration_of_0_that_you_probably_intended_to_use_is_defined_here_18018", "The declaration of '{0}' that you probably intended to use is defined here"),
        _0_modifier_cannot_be_used_with_a_private_identifier: diag(18019, 1 /* Error */, "_0_modifier_cannot_be_used_with_a_private_identifier_18019", "'{0}' modifier cannot be used with a private identifier."),
        An_enum_member_cannot_be_named_with_a_private_identifier: diag(18024, 1 /* Error */, "An_enum_member_cannot_be_named_with_a_private_identifier_18024", "An enum member cannot be named with a private identifier."),
        can_only_be_used_at_the_start_of_a_file: diag(18026, 1 /* Error */, "can_only_be_used_at_the_start_of_a_file_18026", "'#!' can only be used at the start of a file."),
        Compiler_reserves_name_0_when_emitting_private_identifier_downlevel: diag(18027, 1 /* Error */, "Compiler_reserves_name_0_when_emitting_private_identifier_downlevel_18027", "Compiler reserves name '{0}' when emitting private identifier downlevel."),
        Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher: diag(18028, 1 /* Error */, "Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher_18028", "Private identifiers are only available when targeting ECMAScript 2015 and higher."),
        Private_identifiers_are_not_allowed_in_variable_declarations: diag(18029, 1 /* Error */, "Private_identifiers_are_not_allowed_in_variable_declarations_18029", "Private identifiers are not allowed in variable declarations."),
        An_optional_chain_cannot_contain_private_identifiers: diag(18030, 1 /* Error */, "An_optional_chain_cannot_contain_private_identifiers_18030", "An optional chain cannot contain private identifiers."),
        The_intersection_0_was_reduced_to_never_because_property_1_has_conflicting_types_in_some_constituents: diag(18031, 1 /* Error */, "The_intersection_0_was_reduced_to_never_because_property_1_has_conflicting_types_in_some_constituent_18031", "The intersection '{0}' was reduced to 'never' because property '{1}' has conflicting types in some constituents."),
        The_intersection_0_was_reduced_to_never_because_property_1_exists_in_multiple_constituents_and_is_private_in_some: diag(18032, 1 /* Error */, "The_intersection_0_was_reduced_to_never_because_property_1_exists_in_multiple_constituents_and_is_pr_18032", "The intersection '{0}' was reduced to 'never' because property '{1}' exists in multiple constituents and is private in some."),
        Type_0_is_not_assignable_to_type_1_as_required_for_computed_enum_member_values: diag(18033, 1 /* Error */, "Type_0_is_not_assignable_to_type_1_as_required_for_computed_enum_member_values_18033", "Type '{0}' is not assignable to type '{1}' as required for computed enum member values."),
        Specify_the_JSX_fragment_factory_function_to_use_when_targeting_react_JSX_emit_with_jsxFactory_compiler_option_is_specified_e_g_Fragment: diag(18034, 3 /* Message */, "Specify_the_JSX_fragment_factory_function_to_use_when_targeting_react_JSX_emit_with_jsxFactory_compi_18034", "Specify the JSX fragment factory function to use when targeting 'react' JSX emit with 'jsxFactory' compiler option is specified, e.g. 'Fragment'."),
        Invalid_value_for_jsxFragmentFactory_0_is_not_a_valid_identifier_or_qualified_name: diag(18035, 1 /* Error */, "Invalid_value_for_jsxFragmentFactory_0_is_not_a_valid_identifier_or_qualified_name_18035", "Invalid value for 'jsxFragmentFactory'. '{0}' is not a valid identifier or qualified-name."),
        Class_decorators_can_t_be_used_with_static_private_identifier_Consider_removing_the_experimental_decorator: diag(18036, 1 /* Error */, "Class_decorators_can_t_be_used_with_static_private_identifier_Consider_removing_the_experimental_dec_18036", "Class decorators can't be used with static private identifier. Consider removing the experimental decorator."),
        Await_expression_cannot_be_used_inside_a_class_static_block: diag(18037, 1 /* Error */, "Await_expression_cannot_be_used_inside_a_class_static_block_18037", "Await expression cannot be used inside a class static block."),
        For_await_loops_cannot_be_used_inside_a_class_static_block: diag(18038, 1 /* Error */, "For_await_loops_cannot_be_used_inside_a_class_static_block_18038", "'For await' loops cannot be used inside a class static block."),
        Invalid_use_of_0_It_cannot_be_used_inside_a_class_static_block: diag(18039, 1 /* Error */, "Invalid_use_of_0_It_cannot_be_used_inside_a_class_static_block_18039", "Invalid use of '{0}'. It cannot be used inside a class static block."),
        A_return_statement_cannot_be_used_inside_a_class_static_block: diag(18041, 1 /* Error */, "A_return_statement_cannot_be_used_inside_a_class_static_block_18041", "A 'return' statement cannot be used inside a class static block."),
        _0_is_a_type_and_cannot_be_imported_in_JavaScript_files_Use_1_in_a_JSDoc_type_annotation: diag(18042, 1 /* Error */, "_0_is_a_type_and_cannot_be_imported_in_JavaScript_files_Use_1_in_a_JSDoc_type_annotation_18042", "'{0}' is a type and cannot be imported in JavaScript files. Use '{1}' in a JSDoc type annotation."),
        Types_cannot_appear_in_export_declarations_in_JavaScript_files: diag(18043, 1 /* Error */, "Types_cannot_appear_in_export_declarations_in_JavaScript_files_18043", "Types cannot appear in export declarations in JavaScript files."),
        _0_is_automatically_exported_here: diag(18044, 3 /* Message */, "_0_is_automatically_exported_here_18044", "'{0}' is automatically exported here."),
        Properties_with_the_accessor_modifier_are_only_available_when_targeting_ECMAScript_2015_and_higher: diag(18045, 1 /* Error */, "Properties_with_the_accessor_modifier_are_only_available_when_targeting_ECMAScript_2015_and_higher_18045", "Properties with the 'accessor' modifier are only available when targeting ECMAScript 2015 and higher."),
        _0_is_of_type_unknown: diag(18046, 1 /* Error */, "_0_is_of_type_unknown_18046", "'{0}' is of type 'unknown'."),
        _0_is_possibly_null: diag(18047, 1 /* Error */, "_0_is_possibly_null_18047", "'{0}' is possibly 'null'."),
        _0_is_possibly_undefined: diag(18048, 1 /* Error */, "_0_is_possibly_undefined_18048", "'{0}' is possibly 'undefined'."),
        _0_is_possibly_null_or_undefined: diag(18049, 1 /* Error */, "_0_is_possibly_null_or_undefined_18049", "'{0}' is possibly 'null' or 'undefined'."),
        The_value_0_cannot_be_used_here: diag(18050, 1 /* Error */, "The_value_0_cannot_be_used_here_18050", "The value '{0}' cannot be used here."),
        Compiler_option_0_cannot_be_given_an_empty_string: diag(18051, 1 /* Error */, "Compiler_option_0_cannot_be_given_an_empty_string_18051", "Compiler option '{0}' cannot be given an empty string.")
      };
    }
  });

  // src/compiler/scanner.ts
  function tokenIsIdentifierOrKeyword(token) {
    return token >= 79 /* Identifier */;
  }
  function tokenIsIdentifierOrKeywordOrGreaterThan(token) {
    return token === 31 /* GreaterThanToken */ || tokenIsIdentifierOrKeyword(token);
  }
  function lookupInUnicodeMap(code, map2) {
    if (code < map2[0]) {
      return false;
    }
    let lo = 0;
    let hi = map2.length;
    let mid;
    while (lo + 1 < hi) {
      mid = lo + (hi - lo) / 2;
      mid -= mid % 2;
      if (map2[mid] <= code && code <= map2[mid + 1]) {
        return true;
      }
      if (code < map2[mid]) {
        hi = mid;
      } else {
        lo = mid + 2;
      }
    }
    return false;
  }
  function isUnicodeIdentifierStart(code, languageVersion) {
    return languageVersion >= 2 /* ES2015 */ ? lookupInUnicodeMap(code, unicodeESNextIdentifierStart) : languageVersion === 1 /* ES5 */ ? lookupInUnicodeMap(code, unicodeES5IdentifierStart) : lookupInUnicodeMap(code, unicodeES3IdentifierStart);
  }
  function isUnicodeIdentifierPart(code, languageVersion) {
    return languageVersion >= 2 /* ES2015 */ ? lookupInUnicodeMap(code, unicodeESNextIdentifierPart) : languageVersion === 1 /* ES5 */ ? lookupInUnicodeMap(code, unicodeES5IdentifierPart) : lookupInUnicodeMap(code, unicodeES3IdentifierPart);
  }
  function makeReverseMap(source) {
    const result = [];
    source.forEach((value, name) => {
      result[value] = name;
    });
    return result;
  }
  function tokenToString(t) {
    return tokenStrings[t];
  }
  function stringToToken(s) {
    return textToToken.get(s);
  }
  function computeLineStarts(text) {
    const result = [];
    let pos = 0;
    let lineStart = 0;
    while (pos < text.length) {
      const ch = text.charCodeAt(pos);
      pos++;
      switch (ch) {
        case 13 /* carriageReturn */:
          if (text.charCodeAt(pos) === 10 /* lineFeed */) {
            pos++;
          }
        case 10 /* lineFeed */:
          result.push(lineStart);
          lineStart = pos;
          break;
        default:
          if (ch > 127 /* maxAsciiCharacter */ && isLineBreak(ch)) {
            result.push(lineStart);
            lineStart = pos;
          }
          break;
      }
    }
    result.push(lineStart);
    return result;
  }
  function getPositionOfLineAndCharacter(sourceFile, line, character, allowEdits) {
    return sourceFile.getPositionOfLineAndCharacter ? sourceFile.getPositionOfLineAndCharacter(line, character, allowEdits) : computePositionOfLineAndCharacter(getLineStarts(sourceFile), line, character, sourceFile.text, allowEdits);
  }
  function computePositionOfLineAndCharacter(lineStarts, line, character, debugText, allowEdits) {
    if (line < 0 || line >= lineStarts.length) {
      if (allowEdits) {
        line = line < 0 ? 0 : line >= lineStarts.length ? lineStarts.length - 1 : line;
      } else {
        Debug.fail(`Bad line number. Line: ${line}, lineStarts.length: ${lineStarts.length} , line map is correct? ${debugText !== void 0 ? arraysEqual(lineStarts, computeLineStarts(debugText)) : "unknown"}`);
      }
    }
    const res = lineStarts[line] + character;
    if (allowEdits) {
      return res > lineStarts[line + 1] ? lineStarts[line + 1] : typeof debugText === "string" && res > debugText.length ? debugText.length : res;
    }
    if (line < lineStarts.length - 1) {
      Debug.assert(res < lineStarts[line + 1]);
    } else if (debugText !== void 0) {
      Debug.assert(res <= debugText.length);
    }
    return res;
  }
  function getLineStarts(sourceFile) {
    return sourceFile.lineMap || (sourceFile.lineMap = computeLineStarts(sourceFile.text));
  }
  function computeLineAndCharacterOfPosition(lineStarts, position) {
    const lineNumber = computeLineOfPosition(lineStarts, position);
    return {
      line: lineNumber,
      character: position - lineStarts[lineNumber]
    };
  }
  function computeLineOfPosition(lineStarts, position, lowerBound) {
    let lineNumber = binarySearch(lineStarts, position, identity, compareValues, lowerBound);
    if (lineNumber < 0) {
      lineNumber = ~lineNumber - 1;
      Debug.assert(lineNumber !== -1, "position cannot precede the beginning of the file");
    }
    return lineNumber;
  }
  function getLinesBetweenPositions(sourceFile, pos1, pos2) {
    if (pos1 === pos2)
      return 0;
    const lineStarts = getLineStarts(sourceFile);
    const lower = Math.min(pos1, pos2);
    const isNegative = lower === pos2;
    const upper = isNegative ? pos1 : pos2;
    const lowerLine = computeLineOfPosition(lineStarts, lower);
    const upperLine = computeLineOfPosition(lineStarts, upper, lowerLine);
    return isNegative ? lowerLine - upperLine : upperLine - lowerLine;
  }
  function getLineAndCharacterOfPosition(sourceFile, position) {
    return computeLineAndCharacterOfPosition(getLineStarts(sourceFile), position);
  }
  function isWhiteSpaceLike(ch) {
    return isWhiteSpaceSingleLine(ch) || isLineBreak(ch);
  }
  function isWhiteSpaceSingleLine(ch) {
    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ || ch === 160 /* nonBreakingSpace */ || ch === 133 /* nextLine */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ || ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;
  }
  function isLineBreak(ch) {
    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;
  }
  function isDigit(ch) {
    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;
  }
  function isHexDigit(ch) {
    return isDigit(ch) || ch >= 65 /* A */ && ch <= 70 /* F */ || ch >= 97 /* a */ && ch <= 102 /* f */;
  }
  function isCodePoint(code) {
    return code <= 1114111;
  }
  function isOctalDigit(ch) {
    return ch >= 48 /* _0 */ && ch <= 55 /* _7 */;
  }
  function couldStartTrivia(text, pos) {
    const ch = text.charCodeAt(pos);
    switch (ch) {
      case 13 /* carriageReturn */:
      case 10 /* lineFeed */:
      case 9 /* tab */:
      case 11 /* verticalTab */:
      case 12 /* formFeed */:
      case 32 /* space */:
      case 47 /* slash */:
      case 60 /* lessThan */:
      case 124 /* bar */:
      case 61 /* equals */:
      case 62 /* greaterThan */:
        return true;
      case 35 /* hash */:
        return pos === 0;
      default:
        return ch > 127 /* maxAsciiCharacter */;
    }
  }
  function skipTrivia(text, pos, stopAfterLineBreak, stopAtComments, inJSDoc) {
    if (positionIsSynthesized(pos)) {
      return pos;
    }
    let canConsumeStar = false;
    while (true) {
      const ch = text.charCodeAt(pos);
      switch (ch) {
        case 13 /* carriageReturn */:
          if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {
            pos++;
          }
        case 10 /* lineFeed */:
          pos++;
          if (stopAfterLineBreak) {
            return pos;
          }
          canConsumeStar = !!inJSDoc;
          continue;
        case 9 /* tab */:
        case 11 /* verticalTab */:
        case 12 /* formFeed */:
        case 32 /* space */:
          pos++;
          continue;
        case 47 /* slash */:
          if (stopAtComments) {
            break;
          }
          if (text.charCodeAt(pos + 1) === 47 /* slash */) {
            pos += 2;
            while (pos < text.length) {
              if (isLineBreak(text.charCodeAt(pos))) {
                break;
              }
              pos++;
            }
            canConsumeStar = false;
            continue;
          }
          if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {
            pos += 2;
            while (pos < text.length) {
              if (text.charCodeAt(pos) === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {
                pos += 2;
                break;
              }
              pos++;
            }
            canConsumeStar = false;
            continue;
          }
          break;
        case 60 /* lessThan */:
        case 124 /* bar */:
        case 61 /* equals */:
        case 62 /* greaterThan */:
          if (isConflictMarkerTrivia(text, pos)) {
            pos = scanConflictMarkerTrivia(text, pos);
            canConsumeStar = false;
            continue;
          }
          break;
        case 35 /* hash */:
          if (pos === 0 && isShebangTrivia(text, pos)) {
            pos = scanShebangTrivia(text, pos);
            canConsumeStar = false;
            continue;
          }
          break;
        case 42 /* asterisk */:
          if (canConsumeStar) {
            pos++;
            canConsumeStar = false;
            continue;
          }
          break;
        default:
          if (ch > 127 /* maxAsciiCharacter */ && isWhiteSpaceLike(ch)) {
            pos++;
            continue;
          }
          break;
      }
      return pos;
    }
  }
  function isConflictMarkerTrivia(text, pos) {
    Debug.assert(pos >= 0);
    if (pos === 0 || isLineBreak(text.charCodeAt(pos - 1))) {
      const ch = text.charCodeAt(pos);
      if (pos + mergeConflictMarkerLength < text.length) {
        for (let i = 0; i < mergeConflictMarkerLength; i++) {
          if (text.charCodeAt(pos + i) !== ch) {
            return false;
          }
        }
        return ch === 61 /* equals */ || text.charCodeAt(pos + mergeConflictMarkerLength) === 32 /* space */;
      }
    }
    return false;
  }
  function scanConflictMarkerTrivia(text, pos, error) {
    if (error) {
      error(Diagnostics.Merge_conflict_marker_encountered, pos, mergeConflictMarkerLength);
    }
    const ch = text.charCodeAt(pos);
    const len = text.length;
    if (ch === 60 /* lessThan */ || ch === 62 /* greaterThan */) {
      while (pos < len && !isLineBreak(text.charCodeAt(pos))) {
        pos++;
      }
    } else {
      Debug.assert(ch === 124 /* bar */ || ch === 61 /* equals */);
      while (pos < len) {
        const currentChar = text.charCodeAt(pos);
        if ((currentChar === 61 /* equals */ || currentChar === 62 /* greaterThan */) && currentChar !== ch && isConflictMarkerTrivia(text, pos)) {
          break;
        }
        pos++;
      }
    }
    return pos;
  }
  function isShebangTrivia(text, pos) {
    Debug.assert(pos === 0);
    return shebangTriviaRegex.test(text);
  }
  function scanShebangTrivia(text, pos) {
    const shebang = shebangTriviaRegex.exec(text)[0];
    pos = pos + shebang.length;
    return pos;
  }
  function iterateCommentRanges(reduce, text, pos, trailing, cb, state, initial) {
    let pendingPos;
    let pendingEnd;
    let pendingKind;
    let pendingHasTrailingNewLine;
    let hasPendingCommentRange = false;
    let collecting = trailing;
    let accumulator = initial;
    if (pos === 0) {
      collecting = true;
      const shebang = getShebang(text);
      if (shebang) {
        pos = shebang.length;
      }
    }
    scan:
      while (pos >= 0 && pos < text.length) {
        const ch = text.charCodeAt(pos);
        switch (ch) {
          case 13 /* carriageReturn */:
            if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {
              pos++;
            }
          case 10 /* lineFeed */:
            pos++;
            if (trailing) {
              break scan;
            }
            collecting = true;
            if (hasPendingCommentRange) {
              pendingHasTrailingNewLine = true;
            }
            continue;
          case 9 /* tab */:
          case 11 /* verticalTab */:
          case 12 /* formFeed */:
          case 32 /* space */:
            pos++;
            continue;
          case 47 /* slash */:
            const nextChar = text.charCodeAt(pos + 1);
            let hasTrailingNewLine = false;
            if (nextChar === 47 /* slash */ || nextChar === 42 /* asterisk */) {
              const kind = nextChar === 47 /* slash */ ? 2 /* SingleLineCommentTrivia */ : 3 /* MultiLineCommentTrivia */;
              const startPos = pos;
              pos += 2;
              if (nextChar === 47 /* slash */) {
                while (pos < text.length) {
                  if (isLineBreak(text.charCodeAt(pos))) {
                    hasTrailingNewLine = true;
                    break;
                  }
                  pos++;
                }
              } else {
                while (pos < text.length) {
                  if (text.charCodeAt(pos) === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {
                    pos += 2;
                    break;
                  }
                  pos++;
                }
              }
              if (collecting) {
                if (hasPendingCommentRange) {
                  accumulator = cb(pendingPos, pendingEnd, pendingKind, pendingHasTrailingNewLine, state, accumulator);
                  if (!reduce && accumulator) {
                    return accumulator;
                  }
                }
                pendingPos = startPos;
                pendingEnd = pos;
                pendingKind = kind;
                pendingHasTrailingNewLine = hasTrailingNewLine;
                hasPendingCommentRange = true;
              }
              continue;
            }
            break scan;
          default:
            if (ch > 127 /* maxAsciiCharacter */ && isWhiteSpaceLike(ch)) {
              if (hasPendingCommentRange && isLineBreak(ch)) {
                pendingHasTrailingNewLine = true;
              }
              pos++;
              continue;
            }
            break scan;
        }
      }
    if (hasPendingCommentRange) {
      accumulator = cb(pendingPos, pendingEnd, pendingKind, pendingHasTrailingNewLine, state, accumulator);
    }
    return accumulator;
  }
  function forEachLeadingCommentRange(text, pos, cb, state) {
    return iterateCommentRanges(
      /*reduce*/
      false,
      text,
      pos,
      /*trailing*/
      false,
      cb,
      state
    );
  }
  function forEachTrailingCommentRange(text, pos, cb, state) {
    return iterateCommentRanges(
      /*reduce*/
      false,
      text,
      pos,
      /*trailing*/
      true,
      cb,
      state
    );
  }
  function reduceEachLeadingCommentRange(text, pos, cb, state, initial) {
    return iterateCommentRanges(
      /*reduce*/
      true,
      text,
      pos,
      /*trailing*/
      false,
      cb,
      state,
      initial
    );
  }
  function reduceEachTrailingCommentRange(text, pos, cb, state, initial) {
    return iterateCommentRanges(
      /*reduce*/
      true,
      text,
      pos,
      /*trailing*/
      true,
      cb,
      state,
      initial
    );
  }
  function appendCommentRange(pos, end, kind, hasTrailingNewLine, _state, comments = []) {
    comments.push({ kind, pos, end, hasTrailingNewLine });
    return comments;
  }
  function getLeadingCommentRanges(text, pos) {
    return reduceEachLeadingCommentRange(
      text,
      pos,
      appendCommentRange,
      /*state*/
      void 0,
      /*initial*/
      void 0
    );
  }
  function getTrailingCommentRanges(text, pos) {
    return reduceEachTrailingCommentRange(
      text,
      pos,
      appendCommentRange,
      /*state*/
      void 0,
      /*initial*/
      void 0
    );
  }
  function getShebang(text) {
    const match = shebangTriviaRegex.exec(text);
    if (match) {
      return match[0];
    }
  }
  function isIdentifierStart(ch, languageVersion) {
    return ch >= 65 /* A */ && ch <= 90 /* Z */ || ch >= 97 /* a */ && ch <= 122 /* z */ || ch === 36 /* $ */ || ch === 95 /* _ */ || ch > 127 /* maxAsciiCharacter */ && isUnicodeIdentifierStart(ch, languageVersion);
  }
  function isIdentifierPart(ch, languageVersion, identifierVariant) {
    return ch >= 65 /* A */ && ch <= 90 /* Z */ || ch >= 97 /* a */ && ch <= 122 /* z */ || ch >= 48 /* _0 */ && ch <= 57 /* _9 */ || ch === 36 /* $ */ || ch === 95 /* _ */ || // "-" and ":" are valid in JSX Identifiers
    (identifierVariant === 1 /* JSX */ ? ch === 45 /* minus */ || ch === 58 /* colon */ : false) || ch > 127 /* maxAsciiCharacter */ && isUnicodeIdentifierPart(ch, languageVersion);
  }
  function isIdentifierText(name, languageVersion, identifierVariant) {
    let ch = codePointAt(name, 0);
    if (!isIdentifierStart(ch, languageVersion)) {
      return false;
    }
    for (let i = charSize(ch); i < name.length; i += charSize(ch)) {
      if (!isIdentifierPart(ch = codePointAt(name, i), languageVersion, identifierVariant)) {
        return false;
      }
    }
    return true;
  }
  function createScanner(languageVersion, skipTrivia2, languageVariant = 0 /* Standard */, textInitial, onError, start, length2) {
    var text = textInitial;
    var pos;
    var end;
    var startPos;
    var tokenPos;
    var token;
    var tokenValue;
    var tokenFlags;
    var commentDirectives;
    var inJSDocType = 0;
    setText(text, start, length2);
    var scanner2 = {
      getStartPos: () => startPos,
      getTextPos: () => pos,
      getToken: () => token,
      getTokenPos: () => tokenPos,
      getTokenText: () => text.substring(tokenPos, pos),
      getTokenValue: () => tokenValue,
      hasUnicodeEscape: () => (tokenFlags & 1024 /* UnicodeEscape */) !== 0,
      hasExtendedUnicodeEscape: () => (tokenFlags & 8 /* ExtendedUnicodeEscape */) !== 0,
      hasPrecedingLineBreak: () => (tokenFlags & 1 /* PrecedingLineBreak */) !== 0,
      hasPrecedingJSDocComment: () => (tokenFlags & 2 /* PrecedingJSDocComment */) !== 0,
      isIdentifier: () => token === 79 /* Identifier */ || token > 116 /* LastReservedWord */,
      isReservedWord: () => token >= 81 /* FirstReservedWord */ && token <= 116 /* LastReservedWord */,
      isUnterminated: () => (tokenFlags & 4 /* Unterminated */) !== 0,
      getCommentDirectives: () => commentDirectives,
      getNumericLiteralFlags: () => tokenFlags & 1008 /* NumericLiteralFlags */,
      getTokenFlags: () => tokenFlags,
      reScanGreaterToken,
      reScanAsteriskEqualsToken,
      reScanSlashToken,
      reScanTemplateToken,
      reScanTemplateHeadOrNoSubstitutionTemplate,
      scanJsxIdentifier,
      scanJsxAttributeValue,
      reScanJsxAttributeValue,
      reScanJsxToken,
      reScanLessThanToken,
      reScanHashToken,
      reScanQuestionToken,
      reScanInvalidIdentifier,
      scanJsxToken,
      scanJsDocToken,
      scan,
      getText,
      clearCommentDirectives,
      setText,
      setScriptTarget,
      setLanguageVariant,
      setOnError,
      setTextPos,
      setInJSDocType,
      tryScan,
      lookAhead,
      scanRange
    };
    if (Debug.isDebugging) {
      Object.defineProperty(scanner2, "__debugShowCurrentPositionInText", {
        get: () => {
          const text2 = scanner2.getText();
          return text2.slice(0, scanner2.getStartPos()) + "\u2551" + text2.slice(scanner2.getStartPos());
        }
      });
    }
    return scanner2;
    function error(message, errPos = pos, length3) {
      if (onError) {
        const oldPos = pos;
        pos = errPos;
        onError(message, length3 || 0);
        pos = oldPos;
      }
    }
    function scanNumberFragment() {
      let start2 = pos;
      let allowSeparator = false;
      let isPreviousTokenSeparator = false;
      let result = "";
      while (true) {
        const ch = text.charCodeAt(pos);
        if (ch === 95 /* _ */) {
          tokenFlags |= 512 /* ContainsSeparator */;
          if (allowSeparator) {
            allowSeparator = false;
            isPreviousTokenSeparator = true;
            result += text.substring(start2, pos);
          } else if (isPreviousTokenSeparator) {
            error(Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);
          } else {
            error(Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);
          }
          pos++;
          start2 = pos;
          continue;
        }
        if (isDigit(ch)) {
          allowSeparator = true;
          isPreviousTokenSeparator = false;
          pos++;
          continue;
        }
        break;
      }
      if (text.charCodeAt(pos - 1) === 95 /* _ */) {
        error(Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);
      }
      return result + text.substring(start2, pos);
    }
    function scanNumber() {
      const start2 = pos;
      const mainFragment = scanNumberFragment();
      let decimalFragment;
      let scientificFragment;
      if (text.charCodeAt(pos) === 46 /* dot */) {
        pos++;
        decimalFragment = scanNumberFragment();
      }
      let end2 = pos;
      if (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */) {
        pos++;
        tokenFlags |= 16 /* Scientific */;
        if (text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */)
          pos++;
        const preNumericPart = pos;
        const finalFragment = scanNumberFragment();
        if (!finalFragment) {
          error(Diagnostics.Digit_expected);
        } else {
          scientificFragment = text.substring(end2, preNumericPart) + finalFragment;
          end2 = pos;
        }
      }
      let result;
      if (tokenFlags & 512 /* ContainsSeparator */) {
        result = mainFragment;
        if (decimalFragment) {
          result += "." + decimalFragment;
        }
        if (scientificFragment) {
          result += scientificFragment;
        }
      } else {
        result = text.substring(start2, end2);
      }
      if (decimalFragment !== void 0 || tokenFlags & 16 /* Scientific */) {
        checkForIdentifierStartAfterNumericLiteral(start2, decimalFragment === void 0 && !!(tokenFlags & 16 /* Scientific */));
        return {
          type: 8 /* NumericLiteral */,
          value: "" + +result
          // if value is not an integer, it can be safely coerced to a number
        };
      } else {
        tokenValue = result;
        const type = checkBigIntSuffix();
        checkForIdentifierStartAfterNumericLiteral(start2);
        return { type, value: tokenValue };
      }
    }
    function checkForIdentifierStartAfterNumericLiteral(numericStart, isScientific) {
      if (!isIdentifierStart(codePointAt(text, pos), languageVersion)) {
        return;
      }
      const identifierStart = pos;
      const { length: length3 } = scanIdentifierParts();
      if (length3 === 1 && text[identifierStart] === "n") {
        if (isScientific) {
          error(Diagnostics.A_bigint_literal_cannot_use_exponential_notation, numericStart, identifierStart - numericStart + 1);
        } else {
          error(Diagnostics.A_bigint_literal_must_be_an_integer, numericStart, identifierStart - numericStart + 1);
        }
      } else {
        error(Diagnostics.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal, identifierStart, length3);
        pos = identifierStart;
      }
    }
    function scanOctalDigits() {
      const start2 = pos;
      while (isOctalDigit(text.charCodeAt(pos))) {
        pos++;
      }
      return +text.substring(start2, pos);
    }
    function scanExactNumberOfHexDigits(count, canHaveSeparators) {
      const valueString = scanHexDigits(
        /*minCount*/
        count,
        /*scanAsManyAsPossible*/
        false,
        canHaveSeparators
      );
      return valueString ? parseInt(valueString, 16) : -1;
    }
    function scanMinimumNumberOfHexDigits(count, canHaveSeparators) {
      return scanHexDigits(
        /*minCount*/
        count,
        /*scanAsManyAsPossible*/
        true,
        canHaveSeparators
      );
    }
    function scanHexDigits(minCount, scanAsManyAsPossible, canHaveSeparators) {
      let valueChars = [];
      let allowSeparator = false;
      let isPreviousTokenSeparator = false;
      while (valueChars.length < minCount || scanAsManyAsPossible) {
        let ch = text.charCodeAt(pos);
        if (canHaveSeparators && ch === 95 /* _ */) {
          tokenFlags |= 512 /* ContainsSeparator */;
          if (allowSeparator) {
            allowSeparator = false;
            isPreviousTokenSeparator = true;
          } else if (isPreviousTokenSeparator) {
            error(Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);
          } else {
            error(Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);
          }
          pos++;
          continue;
        }
        allowSeparator = canHaveSeparators;
        if (ch >= 65 /* A */ && ch <= 70 /* F */) {
          ch += 97 /* a */ - 65 /* A */;
        } else if (!(ch >= 48 /* _0 */ && ch <= 57 /* _9 */ || ch >= 97 /* a */ && ch <= 102 /* f */)) {
          break;
        }
        valueChars.push(ch);
        pos++;
        isPreviousTokenSeparator = false;
      }
      if (valueChars.length < minCount) {
        valueChars = [];
      }
      if (text.charCodeAt(pos - 1) === 95 /* _ */) {
        error(Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);
      }
      return String.fromCharCode(...valueChars);
    }
    function scanString(jsxAttributeString = false) {
      const quote2 = text.charCodeAt(pos);
      pos++;
      let result = "";
      let start2 = pos;
      while (true) {
        if (pos >= end) {
          result += text.substring(start2, pos);
          tokenFlags |= 4 /* Unterminated */;
          error(Diagnostics.Unterminated_string_literal);
          break;
        }
        const ch = text.charCodeAt(pos);
        if (ch === quote2) {
          result += text.substring(start2, pos);
          pos++;
          break;
        }
        if (ch === 92 /* backslash */ && !jsxAttributeString) {
          result += text.substring(start2, pos);
          result += scanEscapeSequence();
          start2 = pos;
          continue;
        }
        if (isLineBreak(ch) && !jsxAttributeString) {
          result += text.substring(start2, pos);
          tokenFlags |= 4 /* Unterminated */;
          error(Diagnostics.Unterminated_string_literal);
          break;
        }
        pos++;
      }
      return result;
    }
    function scanTemplateAndSetTokenValue(isTaggedTemplate) {
      const startedWithBacktick = text.charCodeAt(pos) === 96 /* backtick */;
      pos++;
      let start2 = pos;
      let contents = "";
      let resultingToken;
      while (true) {
        if (pos >= end) {
          contents += text.substring(start2, pos);
          tokenFlags |= 4 /* Unterminated */;
          error(Diagnostics.Unterminated_template_literal);
          resultingToken = startedWithBacktick ? 14 /* NoSubstitutionTemplateLiteral */ : 17 /* TemplateTail */;
          break;
        }
        const currChar = text.charCodeAt(pos);
        if (currChar === 96 /* backtick */) {
          contents += text.substring(start2, pos);
          pos++;
          resultingToken = startedWithBacktick ? 14 /* NoSubstitutionTemplateLiteral */ : 17 /* TemplateTail */;
          break;
        }
        if (currChar === 36 /* $ */ && pos + 1 < end && text.charCodeAt(pos + 1) === 123 /* openBrace */) {
          contents += text.substring(start2, pos);
          pos += 2;
          resultingToken = startedWithBacktick ? 15 /* TemplateHead */ : 16 /* TemplateMiddle */;
          break;
        }
        if (currChar === 92 /* backslash */) {
          contents += text.substring(start2, pos);
          contents += scanEscapeSequence(isTaggedTemplate);
          start2 = pos;
          continue;
        }
        if (currChar === 13 /* carriageReturn */) {
          contents += text.substring(start2, pos);
          pos++;
          if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {
            pos++;
          }
          contents += "\n";
          start2 = pos;
          continue;
        }
        pos++;
      }
      Debug.assert(resultingToken !== void 0);
      tokenValue = contents;
      return resultingToken;
    }
    function scanEscapeSequence(isTaggedTemplate) {
      const start2 = pos;
      pos++;
      if (pos >= end) {
        error(Diagnostics.Unexpected_end_of_text);
        return "";
      }
      const ch = text.charCodeAt(pos);
      pos++;
      switch (ch) {
        case 48 /* _0 */:
          if (isTaggedTemplate && pos < end && isDigit(text.charCodeAt(pos))) {
            pos++;
            tokenFlags |= 2048 /* ContainsInvalidEscape */;
            return text.substring(start2, pos);
          }
          return "\0";
        case 98 /* b */:
          return "\b";
        case 116 /* t */:
          return "	";
        case 110 /* n */:
          return "\n";
        case 118 /* v */:
          return "\v";
        case 102 /* f */:
          return "\f";
        case 114 /* r */:
          return "\r";
        case 39 /* singleQuote */:
          return "'";
        case 34 /* doubleQuote */:
          return '"';
        case 117 /* u */:
          if (isTaggedTemplate) {
            for (let escapePos = pos; escapePos < pos + 4; escapePos++) {
              if (escapePos < end && !isHexDigit(text.charCodeAt(escapePos)) && text.charCodeAt(escapePos) !== 123 /* openBrace */) {
                pos = escapePos;
                tokenFlags |= 2048 /* ContainsInvalidEscape */;
                return text.substring(start2, pos);
              }
            }
          }
          if (pos < end && text.charCodeAt(pos) === 123 /* openBrace */) {
            pos++;
            if (isTaggedTemplate && !isHexDigit(text.charCodeAt(pos))) {
              tokenFlags |= 2048 /* ContainsInvalidEscape */;
              return text.substring(start2, pos);
            }
            if (isTaggedTemplate) {
              const savePos = pos;
              const escapedValueString = scanMinimumNumberOfHexDigits(
                1,
                /*canHaveSeparators*/
                false
              );
              const escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;
              if (!isCodePoint(escapedValue) || text.charCodeAt(pos) !== 125 /* closeBrace */) {
                tokenFlags |= 2048 /* ContainsInvalidEscape */;
                return text.substring(start2, pos);
              } else {
                pos = savePos;
              }
            }
            tokenFlags |= 8 /* ExtendedUnicodeEscape */;
            return scanExtendedUnicodeEscape();
          }
          tokenFlags |= 1024 /* UnicodeEscape */;
          return scanHexadecimalEscape(
            /*numDigits*/
            4
          );
        case 120 /* x */:
          if (isTaggedTemplate) {
            if (!isHexDigit(text.charCodeAt(pos))) {
              tokenFlags |= 2048 /* ContainsInvalidEscape */;
              return text.substring(start2, pos);
            } else if (!isHexDigit(text.charCodeAt(pos + 1))) {
              pos++;
              tokenFlags |= 2048 /* ContainsInvalidEscape */;
              return text.substring(start2, pos);
            }
          }
          return scanHexadecimalEscape(
            /*numDigits*/
            2
          );
        case 13 /* carriageReturn */:
          if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {
            pos++;
          }
        case 10 /* lineFeed */:
        case 8232 /* lineSeparator */:
        case 8233 /* paragraphSeparator */:
          return "";
        default:
          return String.fromCharCode(ch);
      }
    }
    function scanHexadecimalEscape(numDigits) {
      const escapedValue = scanExactNumberOfHexDigits(
        numDigits,
        /*canHaveSeparators*/
        false
      );
      if (escapedValue >= 0) {
        return String.fromCharCode(escapedValue);
      } else {
        error(Diagnostics.Hexadecimal_digit_expected);
        return "";
      }
    }
    function scanExtendedUnicodeEscape() {
      const escapedValueString = scanMinimumNumberOfHexDigits(
        1,
        /*canHaveSeparators*/
        false
      );
      const escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;
      let isInvalidExtendedEscape = false;
      if (escapedValue < 0) {
        error(Diagnostics.Hexadecimal_digit_expected);
        isInvalidExtendedEscape = true;
      } else if (escapedValue > 1114111) {
        error(Diagnostics.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive);
        isInvalidExtendedEscape = true;
      }
      if (pos >= end) {
        error(Diagnostics.Unexpected_end_of_text);
        isInvalidExtendedEscape = true;
      } else if (text.charCodeAt(pos) === 125 /* closeBrace */) {
        pos++;
      } else {
        error(Diagnostics.Unterminated_Unicode_escape_sequence);
        isInvalidExtendedEscape = true;
      }
      if (isInvalidExtendedEscape) {
        return "";
      }
      return utf16EncodeAsString(escapedValue);
    }
    function peekUnicodeEscape() {
      if (pos + 5 < end && text.charCodeAt(pos + 1) === 117 /* u */) {
        const start2 = pos;
        pos += 2;
        const value = scanExactNumberOfHexDigits(
          4,
          /*canHaveSeparators*/
          false
        );
        pos = start2;
        return value;
      }
      return -1;
    }
    function peekExtendedUnicodeEscape() {
      if (codePointAt(text, pos + 1) === 117 /* u */ && codePointAt(text, pos + 2) === 123 /* openBrace */) {
        const start2 = pos;
        pos += 3;
        const escapedValueString = scanMinimumNumberOfHexDigits(
          1,
          /*canHaveSeparators*/
          false
        );
        const escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;
        pos = start2;
        return escapedValue;
      }
      return -1;
    }
    function scanIdentifierParts() {
      let result = "";
      let start2 = pos;
      while (pos < end) {
        let ch = codePointAt(text, pos);
        if (isIdentifierPart(ch, languageVersion)) {
          pos += charSize(ch);
        } else if (ch === 92 /* backslash */) {
          ch = peekExtendedUnicodeEscape();
          if (ch >= 0 && isIdentifierPart(ch, languageVersion)) {
            pos += 3;
            tokenFlags |= 8 /* ExtendedUnicodeEscape */;
            result += scanExtendedUnicodeEscape();
            start2 = pos;
            continue;
          }
          ch = peekUnicodeEscape();
          if (!(ch >= 0 && isIdentifierPart(ch, languageVersion))) {
            break;
          }
          tokenFlags |= 1024 /* UnicodeEscape */;
          result += text.substring(start2, pos);
          result += utf16EncodeAsString(ch);
          pos += 6;
          start2 = pos;
        } else {
          break;
        }
      }
      result += text.substring(start2, pos);
      return result;
    }
    function getIdentifierToken() {
      const len = tokenValue.length;
      if (len >= 2 && len <= 12) {
        const ch = tokenValue.charCodeAt(0);
        if (ch >= 97 /* a */ && ch <= 122 /* z */) {
          const keyword = textToKeyword.get(tokenValue);
          if (keyword !== void 0) {
            return token = keyword;
          }
        }
      }
      return token = 79 /* Identifier */;
    }
    function scanBinaryOrOctalDigits(base) {
      let value = "";
      let separatorAllowed = false;
      let isPreviousTokenSeparator = false;
      while (true) {
        const ch = text.charCodeAt(pos);
        if (ch === 95 /* _ */) {
          tokenFlags |= 512 /* ContainsSeparator */;
          if (separatorAllowed) {
            separatorAllowed = false;
            isPreviousTokenSeparator = true;
          } else if (isPreviousTokenSeparator) {
            error(Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);
          } else {
            error(Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);
          }
          pos++;
          continue;
        }
        separatorAllowed = true;
        if (!isDigit(ch) || ch - 48 /* _0 */ >= base) {
          break;
        }
        value += text[pos];
        pos++;
        isPreviousTokenSeparator = false;
      }
      if (text.charCodeAt(pos - 1) === 95 /* _ */) {
        error(Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);
      }
      return value;
    }
    function checkBigIntSuffix() {
      if (text.charCodeAt(pos) === 110 /* n */) {
        tokenValue += "n";
        if (tokenFlags & 384 /* BinaryOrOctalSpecifier */) {
          tokenValue = parsePseudoBigInt(tokenValue) + "n";
        }
        pos++;
        return 9 /* BigIntLiteral */;
      } else {
        const numericValue = tokenFlags & 128 /* BinarySpecifier */ ? parseInt(tokenValue.slice(2), 2) : tokenFlags & 256 /* OctalSpecifier */ ? parseInt(tokenValue.slice(2), 8) : +tokenValue;
        tokenValue = "" + numericValue;
        return 8 /* NumericLiteral */;
      }
    }
    function scan() {
      startPos = pos;
      tokenFlags = 0 /* None */;
      let asteriskSeen = false;
      while (true) {
        tokenPos = pos;
        if (pos >= end) {
          return token = 1 /* EndOfFileToken */;
        }
        const ch = codePointAt(text, pos);
        if (ch === 35 /* hash */ && pos === 0 && isShebangTrivia(text, pos)) {
          pos = scanShebangTrivia(text, pos);
          if (skipTrivia2) {
            continue;
          } else {
            return token = 6 /* ShebangTrivia */;
          }
        }
        switch (ch) {
          case 10 /* lineFeed */:
          case 13 /* carriageReturn */:
            tokenFlags |= 1 /* PrecedingLineBreak */;
            if (skipTrivia2) {
              pos++;
              continue;
            } else {
              if (ch === 13 /* carriageReturn */ && pos + 1 < end && text.charCodeAt(pos + 1) === 10 /* lineFeed */) {
                pos += 2;
              } else {
                pos++;
              }
              return token = 4 /* NewLineTrivia */;
            }
          case 9 /* tab */:
          case 11 /* verticalTab */:
          case 12 /* formFeed */:
          case 32 /* space */:
          case 160 /* nonBreakingSpace */:
          case 5760 /* ogham */:
          case 8192 /* enQuad */:
          case 8193 /* emQuad */:
          case 8194 /* enSpace */:
          case 8195 /* emSpace */:
          case 8196 /* threePerEmSpace */:
          case 8197 /* fourPerEmSpace */:
          case 8198 /* sixPerEmSpace */:
          case 8199 /* figureSpace */:
          case 8200 /* punctuationSpace */:
          case 8201 /* thinSpace */:
          case 8202 /* hairSpace */:
          case 8203 /* zeroWidthSpace */:
          case 8239 /* narrowNoBreakSpace */:
          case 8287 /* mathematicalSpace */:
          case 12288 /* ideographicSpace */:
          case 65279 /* byteOrderMark */:
            if (skipTrivia2) {
              pos++;
              continue;
            } else {
              while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {
                pos++;
              }
              return token = 5 /* WhitespaceTrivia */;
            }
          case 33 /* exclamation */:
            if (text.charCodeAt(pos + 1) === 61 /* equals */) {
              if (text.charCodeAt(pos + 2) === 61 /* equals */) {
                return pos += 3, token = 37 /* ExclamationEqualsEqualsToken */;
              }
              return pos += 2, token = 35 /* ExclamationEqualsToken */;
            }
            pos++;
            return token = 53 /* ExclamationToken */;
          case 34 /* doubleQuote */:
          case 39 /* singleQuote */:
            tokenValue = scanString();
            return token = 10 /* StringLiteral */;
          case 96 /* backtick */:
            return token = scanTemplateAndSetTokenValue(
              /* isTaggedTemplate */
              false
            );
          case 37 /* percent */:
            if (text.charCodeAt(pos + 1) === 61 /* equals */) {
              return pos += 2, token = 69 /* PercentEqualsToken */;
            }
            pos++;
            return token = 44 /* PercentToken */;
          case 38 /* ampersand */:
            if (text.charCodeAt(pos + 1) === 38 /* ampersand */) {
              if (text.charCodeAt(pos + 2) === 61 /* equals */) {
                return pos += 3, token = 76 /* AmpersandAmpersandEqualsToken */;
              }
              return pos += 2, token = 55 /* AmpersandAmpersandToken */;
            }
            if (text.charCodeAt(pos + 1) === 61 /* equals */) {
              return pos += 2, token = 73 /* AmpersandEqualsToken */;
            }
            pos++;
            return token = 50 /* AmpersandToken */;
          case 40 /* openParen */:
            pos++;
            return token = 20 /* OpenParenToken */;
          case 41 /* closeParen */:
            pos++;
            return token = 21 /* CloseParenToken */;
          case 42 /* asterisk */:
            if (text.charCodeAt(pos + 1) === 61 /* equals */) {
              return pos += 2, token = 66 /* AsteriskEqualsToken */;
            }
            if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {
              if (text.charCodeAt(pos + 2) === 61 /* equals */) {
                return pos += 3, token = 67 /* AsteriskAsteriskEqualsToken */;
              }
              return pos += 2, token = 42 /* AsteriskAsteriskToken */;
            }
            pos++;
            if (inJSDocType && !asteriskSeen && tokenFlags & 1 /* PrecedingLineBreak */) {
              asteriskSeen = true;
              continue;
            }
            return token = 41 /* AsteriskToken */;
          case 43 /* plus */:
            if (text.charCodeAt(pos + 1) === 43 /* plus */) {
              return pos += 2, token = 45 /* PlusPlusToken */;
            }
            if (text.charCodeAt(pos + 1) === 61 /* equals */) {
              return pos += 2, token = 64 /* PlusEqualsToken */;
            }
            pos++;
            return token = 39 /* PlusToken */;
          case 44 /* comma */:
            pos++;
            return token = 27 /* CommaToken */;
          case 45 /* minus */:
            if (text.charCodeAt(pos + 1) === 45 /* minus */) {
              return pos += 2, token = 46 /* MinusMinusToken */;
            }
            if (text.charCodeAt(pos + 1) === 61 /* equals */) {
              return pos += 2, token = 65 /* MinusEqualsToken */;
            }
            pos++;
            return token = 40 /* MinusToken */;
          case 46 /* dot */:
            if (isDigit(text.charCodeAt(pos + 1))) {
              tokenValue = scanNumber().value;
              return token = 8 /* NumericLiteral */;
            }
            if (text.charCodeAt(pos + 1) === 46 /* dot */ && text.charCodeAt(pos + 2) === 46 /* dot */) {
              return pos += 3, token = 25 /* DotDotDotToken */;
            }
            pos++;
            return token = 24 /* DotToken */;
          case 47 /* slash */:
            if (text.charCodeAt(pos + 1) === 47 /* slash */) {
              pos += 2;
              while (pos < end) {
                if (isLineBreak(text.charCodeAt(pos))) {
                  break;
                }
                pos++;
              }
              commentDirectives = appendIfCommentDirective(
                commentDirectives,
                text.slice(tokenPos, pos),
                commentDirectiveRegExSingleLine,
                tokenPos
              );
              if (skipTrivia2) {
                continue;
              } else {
                return token = 2 /* SingleLineCommentTrivia */;
              }
            }
            if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {
              pos += 2;
              if (text.charCodeAt(pos) === 42 /* asterisk */ && text.charCodeAt(pos + 1) !== 47 /* slash */) {
                tokenFlags |= 2 /* PrecedingJSDocComment */;
              }
              let commentClosed = false;
              let lastLineStart = tokenPos;
              while (pos < end) {
                const ch2 = text.charCodeAt(pos);
                if (ch2 === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {
                  pos += 2;
                  commentClosed = true;
                  break;
                }
                pos++;
                if (isLineBreak(ch2)) {
                  lastLineStart = pos;
                  tokenFlags |= 1 /* PrecedingLineBreak */;
                }
              }
              commentDirectives = appendIfCommentDirective(commentDirectives, text.slice(lastLineStart, pos), commentDirectiveRegExMultiLine, lastLineStart);
              if (!commentClosed) {
                error(Diagnostics.Asterisk_Slash_expected);
              }
              if (skipTrivia2) {
                continue;
              } else {
                if (!commentClosed) {
                  tokenFlags |= 4 /* Unterminated */;
                }
                return token = 3 /* MultiLineCommentTrivia */;
              }
            }
            if (text.charCodeAt(pos + 1) === 61 /* equals */) {
              return pos += 2, token = 68 /* SlashEqualsToken */;
            }
            pos++;
            return token = 43 /* SlashToken */;
          case 48 /* _0 */:
            if (pos + 2 < end && (text.charCodeAt(pos + 1) === 88 /* X */ || text.charCodeAt(pos + 1) === 120 /* x */)) {
              pos += 2;
              tokenValue = scanMinimumNumberOfHexDigits(
                1,
                /*canHaveSeparators*/
                true
              );
              if (!tokenValue) {
                error(Diagnostics.Hexadecimal_digit_expected);
                tokenValue = "0";
              }
              tokenValue = "0x" + tokenValue;
              tokenFlags |= 64 /* HexSpecifier */;
              return token = checkBigIntSuffix();
            } else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 66 /* B */ || text.charCodeAt(pos + 1) === 98 /* b */)) {
              pos += 2;
              tokenValue = scanBinaryOrOctalDigits(
                /* base */
                2
              );
              if (!tokenValue) {
                error(Diagnostics.Binary_digit_expected);
                tokenValue = "0";
              }
              tokenValue = "0b" + tokenValue;
              tokenFlags |= 128 /* BinarySpecifier */;
              return token = checkBigIntSuffix();
            } else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 79 /* O */ || text.charCodeAt(pos + 1) === 111 /* o */)) {
              pos += 2;
              tokenValue = scanBinaryOrOctalDigits(
                /* base */
                8
              );
              if (!tokenValue) {
                error(Diagnostics.Octal_digit_expected);
                tokenValue = "0";
              }
              tokenValue = "0o" + tokenValue;
              tokenFlags |= 256 /* OctalSpecifier */;
              return token = checkBigIntSuffix();
            }
            if (pos + 1 < end && isOctalDigit(text.charCodeAt(pos + 1))) {
              tokenValue = "" + scanOctalDigits();
              tokenFlags |= 32 /* Octal */;
              return token = 8 /* NumericLiteral */;
            }
          case 49 /* _1 */:
          case 50 /* _2 */:
          case 51 /* _3 */:
          case 52 /* _4 */:
          case 53 /* _5 */:
          case 54 /* _6 */:
          case 55 /* _7 */:
          case 56 /* _8 */:
          case 57 /* _9 */:
            ({ type: token, value: tokenValue } = scanNumber());
            return token;
          case 58 /* colon */:
            pos++;
            return token = 58 /* ColonToken */;
          case 59 /* semicolon */:
            pos++;
            return token = 26 /* SemicolonToken */;
          case 60 /* lessThan */:
            if (isConflictMarkerTrivia(text, pos)) {
              pos = scanConflictMarkerTrivia(text, pos, error);
              if (skipTrivia2) {
                continue;
              } else {
                return token = 7 /* ConflictMarkerTrivia */;
              }
            }
            if (text.charCodeAt(pos + 1) === 60 /* lessThan */) {
              if (text.charCodeAt(pos + 2) === 61 /* equals */) {
                return pos += 3, token = 70 /* LessThanLessThanEqualsToken */;
              }
              return pos += 2, token = 47 /* LessThanLessThanToken */;
            }
            if (text.charCodeAt(pos + 1) === 61 /* equals */) {
              return pos += 2, token = 32 /* LessThanEqualsToken */;
            }
            if (languageVariant === 1 /* JSX */ && text.charCodeAt(pos + 1) === 47 /* slash */ && text.charCodeAt(pos + 2) !== 42 /* asterisk */) {
              return pos += 2, token = 30 /* LessThanSlashToken */;
            }
            pos++;
            return token = 29 /* LessThanToken */;
          case 61 /* equals */:
            if (isConflictMarkerTrivia(text, pos)) {
              pos = scanConflictMarkerTrivia(text, pos, error);
              if (skipTrivia2) {
                continue;
              } else {
                return token = 7 /* ConflictMarkerTrivia */;
              }
            }
            if (text.charCodeAt(pos + 1) === 61 /* equals */) {
              if (text.charCodeAt(pos + 2) === 61 /* equals */) {
                return pos += 3, token = 36 /* EqualsEqualsEqualsToken */;
              }
              return pos += 2, token = 34 /* EqualsEqualsToken */;
            }
            if (text.charCodeAt(pos + 1) === 62 /* greaterThan */) {
              return pos += 2, token = 38 /* EqualsGreaterThanToken */;
            }
            pos++;
            return token = 63 /* EqualsToken */;
          case 62 /* greaterThan */:
            if (isConflictMarkerTrivia(text, pos)) {
              pos = scanConflictMarkerTrivia(text, pos, error);
              if (skipTrivia2) {
                continue;
              } else {
                return token = 7 /* ConflictMarkerTrivia */;
              }
            }
            pos++;
            return token = 31 /* GreaterThanToken */;
          case 63 /* question */:
            if (text.charCodeAt(pos + 1) === 46 /* dot */ && !isDigit(text.charCodeAt(pos + 2))) {
              return pos += 2, token = 28 /* QuestionDotToken */;
            }
            if (text.charCodeAt(pos + 1) === 63 /* question */) {
              if (text.charCodeAt(pos + 2) === 61 /* equals */) {
                return pos += 3, token = 77 /* QuestionQuestionEqualsToken */;
              }
              return pos += 2, token = 60 /* QuestionQuestionToken */;
            }
            pos++;
            return token = 57 /* QuestionToken */;
          case 91 /* openBracket */:
            pos++;
            return token = 22 /* OpenBracketToken */;
          case 93 /* closeBracket */:
            pos++;
            return token = 23 /* CloseBracketToken */;
          case 94 /* caret */:
            if (text.charCodeAt(pos + 1) === 61 /* equals */) {
              return pos += 2, token = 78 /* CaretEqualsToken */;
            }
            pos++;
            return token = 52 /* CaretToken */;
          case 123 /* openBrace */:
            pos++;
            return token = 18 /* OpenBraceToken */;
          case 124 /* bar */:
            if (isConflictMarkerTrivia(text, pos)) {
              pos = scanConflictMarkerTrivia(text, pos, error);
              if (skipTrivia2) {
                continue;
              } else {
                return token = 7 /* ConflictMarkerTrivia */;
              }
            }
            if (text.charCodeAt(pos + 1) === 124 /* bar */) {
              if (text.charCodeAt(pos + 2) === 61 /* equals */) {
                return pos += 3, token = 75 /* BarBarEqualsToken */;
              }
              return pos += 2, token = 56 /* BarBarToken */;
            }
            if (text.charCodeAt(pos + 1) === 61 /* equals */) {
              return pos += 2, token = 74 /* BarEqualsToken */;
            }
            pos++;
            return token = 51 /* BarToken */;
          case 125 /* closeBrace */:
            pos++;
            return token = 19 /* CloseBraceToken */;
          case 126 /* tilde */:
            pos++;
            return token = 54 /* TildeToken */;
          case 64 /* at */:
            pos++;
            return token = 59 /* AtToken */;
          case 92 /* backslash */:
            const extendedCookedChar = peekExtendedUnicodeEscape();
            if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {
              pos += 3;
              tokenFlags |= 8 /* ExtendedUnicodeEscape */;
              tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();
              return token = getIdentifierToken();
            }
            const cookedChar = peekUnicodeEscape();
            if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {
              pos += 6;
              tokenFlags |= 1024 /* UnicodeEscape */;
              tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();
              return token = getIdentifierToken();
            }
            error(Diagnostics.Invalid_character);
            pos++;
            return token = 0 /* Unknown */;
          case 35 /* hash */:
            if (pos !== 0 && text[pos + 1] === "!") {
              error(Diagnostics.can_only_be_used_at_the_start_of_a_file);
              pos++;
              return token = 0 /* Unknown */;
            }
            const charAfterHash = codePointAt(text, pos + 1);
            if (charAfterHash === 92 /* backslash */) {
              pos++;
              const extendedCookedChar2 = peekExtendedUnicodeEscape();
              if (extendedCookedChar2 >= 0 && isIdentifierStart(extendedCookedChar2, languageVersion)) {
                pos += 3;
                tokenFlags |= 8 /* ExtendedUnicodeEscape */;
                tokenValue = "#" + scanExtendedUnicodeEscape() + scanIdentifierParts();
                return token = 80 /* PrivateIdentifier */;
              }
              const cookedChar2 = peekUnicodeEscape();
              if (cookedChar2 >= 0 && isIdentifierStart(cookedChar2, languageVersion)) {
                pos += 6;
                tokenFlags |= 1024 /* UnicodeEscape */;
                tokenValue = "#" + String.fromCharCode(cookedChar2) + scanIdentifierParts();
                return token = 80 /* PrivateIdentifier */;
              }
              pos--;
            }
            if (isIdentifierStart(charAfterHash, languageVersion)) {
              pos++;
              scanIdentifier(charAfterHash, languageVersion);
            } else {
              tokenValue = "#";
              error(Diagnostics.Invalid_character, pos++, charSize(ch));
            }
            return token = 80 /* PrivateIdentifier */;
          default:
            const identifierKind = scanIdentifier(ch, languageVersion);
            if (identifierKind) {
              return token = identifierKind;
            } else if (isWhiteSpaceSingleLine(ch)) {
              pos += charSize(ch);
              continue;
            } else if (isLineBreak(ch)) {
              tokenFlags |= 1 /* PrecedingLineBreak */;
              pos += charSize(ch);
              continue;
            }
            const size = charSize(ch);
            error(Diagnostics.Invalid_character, pos, size);
            pos += size;
            return token = 0 /* Unknown */;
        }
      }
    }
    function reScanInvalidIdentifier() {
      Debug.assert(token === 0 /* Unknown */, "'reScanInvalidIdentifier' should only be called when the current token is 'SyntaxKind.Unknown'.");
      pos = tokenPos = startPos;
      tokenFlags = 0;
      const ch = codePointAt(text, pos);
      const identifierKind = scanIdentifier(ch, 99 /* ESNext */);
      if (identifierKind) {
        return token = identifierKind;
      }
      pos += charSize(ch);
      return token;
    }
    function scanIdentifier(startCharacter, languageVersion2) {
      let ch = startCharacter;
      if (isIdentifierStart(ch, languageVersion2)) {
        pos += charSize(ch);
        while (pos < end && isIdentifierPart(ch = codePointAt(text, pos), languageVersion2))
          pos += charSize(ch);
        tokenValue = text.substring(tokenPos, pos);
        if (ch === 92 /* backslash */) {
          tokenValue += scanIdentifierParts();
        }
        return getIdentifierToken();
      }
    }
    function reScanGreaterToken() {
      if (token === 31 /* GreaterThanToken */) {
        if (text.charCodeAt(pos) === 62 /* greaterThan */) {
          if (text.charCodeAt(pos + 1) === 62 /* greaterThan */) {
            if (text.charCodeAt(pos + 2) === 61 /* equals */) {
              return pos += 3, token = 72 /* GreaterThanGreaterThanGreaterThanEqualsToken */;
            }
            return pos += 2, token = 49 /* GreaterThanGreaterThanGreaterThanToken */;
          }
          if (text.charCodeAt(pos + 1) === 61 /* equals */) {
            return pos += 2, token = 71 /* GreaterThanGreaterThanEqualsToken */;
          }
          pos++;
          return token = 48 /* GreaterThanGreaterThanToken */;
        }
        if (text.charCodeAt(pos) === 61 /* equals */) {
          pos++;
          return token = 33 /* GreaterThanEqualsToken */;
        }
      }
      return token;
    }
    function reScanAsteriskEqualsToken() {
      Debug.assert(token === 66 /* AsteriskEqualsToken */, "'reScanAsteriskEqualsToken' should only be called on a '*='");
      pos = tokenPos + 1;
      return token = 63 /* EqualsToken */;
    }
    function reScanSlashToken() {
      if (token === 43 /* SlashToken */ || token === 68 /* SlashEqualsToken */) {
        let p = tokenPos + 1;
        let inEscape = false;
        let inCharacterClass = false;
        while (true) {
          if (p >= end) {
            tokenFlags |= 4 /* Unterminated */;
            error(Diagnostics.Unterminated_regular_expression_literal);
            break;
          }
          const ch = text.charCodeAt(p);
          if (isLineBreak(ch)) {
            tokenFlags |= 4 /* Unterminated */;
            error(Diagnostics.Unterminated_regular_expression_literal);
            break;
          }
          if (inEscape) {
            inEscape = false;
          } else if (ch === 47 /* slash */ && !inCharacterClass) {
            p++;
            break;
          } else if (ch === 91 /* openBracket */) {
            inCharacterClass = true;
          } else if (ch === 92 /* backslash */) {
            inEscape = true;
          } else if (ch === 93 /* closeBracket */) {
            inCharacterClass = false;
          }
          p++;
        }
        while (p < end && isIdentifierPart(text.charCodeAt(p), languageVersion)) {
          p++;
        }
        pos = p;
        tokenValue = text.substring(tokenPos, pos);
        token = 13 /* RegularExpressionLiteral */;
      }
      return token;
    }
    function appendIfCommentDirective(commentDirectives2, text2, commentDirectiveRegEx, lineStart) {
      const type = getDirectiveFromComment(trimStringStart(text2), commentDirectiveRegEx);
      if (type === void 0) {
        return commentDirectives2;
      }
      return append(
        commentDirectives2,
        {
          range: { pos: lineStart, end: pos },
          type
        }
      );
    }
    function getDirectiveFromComment(text2, commentDirectiveRegEx) {
      const match = commentDirectiveRegEx.exec(text2);
      if (!match) {
        return void 0;
      }
      switch (match[1]) {
        case "ts-expect-error":
          return 0 /* ExpectError */;
        case "ts-ignore":
          return 1 /* Ignore */;
      }
      return void 0;
    }
    function reScanTemplateToken(isTaggedTemplate) {
      Debug.assert(token === 19 /* CloseBraceToken */, "'reScanTemplateToken' should only be called on a '}'");
      pos = tokenPos;
      return token = scanTemplateAndSetTokenValue(isTaggedTemplate);
    }
    function reScanTemplateHeadOrNoSubstitutionTemplate() {
      pos = tokenPos;
      return token = scanTemplateAndSetTokenValue(
        /* isTaggedTemplate */
        true
      );
    }
    function reScanJsxToken(allowMultilineJsxText = true) {
      pos = tokenPos = startPos;
      return token = scanJsxToken(allowMultilineJsxText);
    }
    function reScanLessThanToken() {
      if (token === 47 /* LessThanLessThanToken */) {
        pos = tokenPos + 1;
        return token = 29 /* LessThanToken */;
      }
      return token;
    }
    function reScanHashToken() {
      if (token === 80 /* PrivateIdentifier */) {
        pos = tokenPos + 1;
        return token = 62 /* HashToken */;
      }
      return token;
    }
    function reScanQuestionToken() {
      Debug.assert(token === 60 /* QuestionQuestionToken */, "'reScanQuestionToken' should only be called on a '??'");
      pos = tokenPos + 1;
      return token = 57 /* QuestionToken */;
    }
    function scanJsxToken(allowMultilineJsxText = true) {
      startPos = tokenPos = pos;
      if (pos >= end) {
        return token = 1 /* EndOfFileToken */;
      }
      let char = text.charCodeAt(pos);
      if (char === 60 /* lessThan */) {
        if (text.charCodeAt(pos + 1) === 47 /* slash */) {
          pos += 2;
          return token = 30 /* LessThanSlashToken */;
        }
        pos++;
        return token = 29 /* LessThanToken */;
      }
      if (char === 123 /* openBrace */) {
        pos++;
        return token = 18 /* OpenBraceToken */;
      }
      let firstNonWhitespace = 0;
      while (pos < end) {
        char = text.charCodeAt(pos);
        if (char === 123 /* openBrace */) {
          break;
        }
        if (char === 60 /* lessThan */) {
          if (isConflictMarkerTrivia(text, pos)) {
            pos = scanConflictMarkerTrivia(text, pos, error);
            return token = 7 /* ConflictMarkerTrivia */;
          }
          break;
        }
        if (char === 62 /* greaterThan */) {
          error(Diagnostics.Unexpected_token_Did_you_mean_or_gt, pos, 1);
        }
        if (char === 125 /* closeBrace */) {
          error(Diagnostics.Unexpected_token_Did_you_mean_or_rbrace, pos, 1);
        }
        if (isLineBreak(char) && firstNonWhitespace === 0) {
          firstNonWhitespace = -1;
        } else if (!allowMultilineJsxText && isLineBreak(char) && firstNonWhitespace > 0) {
          break;
        } else if (!isWhiteSpaceLike(char)) {
          firstNonWhitespace = pos;
        }
        pos++;
      }
      tokenValue = text.substring(startPos, pos);
      return firstNonWhitespace === -1 ? 12 /* JsxTextAllWhiteSpaces */ : 11 /* JsxText */;
    }
    function scanJsxIdentifier() {
      if (tokenIsIdentifierOrKeyword(token)) {
        let namespaceSeparator = false;
        while (pos < end) {
          const ch = text.charCodeAt(pos);
          if (ch === 45 /* minus */) {
            tokenValue += "-";
            pos++;
            continue;
          } else if (ch === 58 /* colon */ && !namespaceSeparator) {
            tokenValue += ":";
            pos++;
            namespaceSeparator = true;
            token = 79 /* Identifier */;
            continue;
          }
          const oldPos = pos;
          tokenValue += scanIdentifierParts();
          if (pos === oldPos) {
            break;
          }
        }
        if (tokenValue.slice(-1) === ":") {
          tokenValue = tokenValue.slice(0, -1);
          pos--;
        }
        return getIdentifierToken();
      }
      return token;
    }
    function scanJsxAttributeValue() {
      startPos = pos;
      switch (text.charCodeAt(pos)) {
        case 34 /* doubleQuote */:
        case 39 /* singleQuote */:
          tokenValue = scanString(
            /*jsxAttributeString*/
            true
          );
          return token = 10 /* StringLiteral */;
        default:
          return scan();
      }
    }
    function reScanJsxAttributeValue() {
      pos = tokenPos = startPos;
      return scanJsxAttributeValue();
    }
    function scanJsDocToken() {
      startPos = tokenPos = pos;
      tokenFlags = 0 /* None */;
      if (pos >= end) {
        return token = 1 /* EndOfFileToken */;
      }
      const ch = codePointAt(text, pos);
      pos += charSize(ch);
      switch (ch) {
        case 9 /* tab */:
        case 11 /* verticalTab */:
        case 12 /* formFeed */:
        case 32 /* space */:
          while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {
            pos++;
          }
          return token = 5 /* WhitespaceTrivia */;
        case 64 /* at */:
          return token = 59 /* AtToken */;
        case 13 /* carriageReturn */:
          if (text.charCodeAt(pos) === 10 /* lineFeed */) {
            pos++;
          }
        case 10 /* lineFeed */:
          tokenFlags |= 1 /* PrecedingLineBreak */;
          return token = 4 /* NewLineTrivia */;
        case 42 /* asterisk */:
          return token = 41 /* AsteriskToken */;
        case 123 /* openBrace */:
          return token = 18 /* OpenBraceToken */;
        case 125 /* closeBrace */:
          return token = 19 /* CloseBraceToken */;
        case 91 /* openBracket */:
          return token = 22 /* OpenBracketToken */;
        case 93 /* closeBracket */:
          return token = 23 /* CloseBracketToken */;
        case 60 /* lessThan */:
          return token = 29 /* LessThanToken */;
        case 62 /* greaterThan */:
          return token = 31 /* GreaterThanToken */;
        case 61 /* equals */:
          return token = 63 /* EqualsToken */;
        case 44 /* comma */:
          return token = 27 /* CommaToken */;
        case 46 /* dot */:
          return token = 24 /* DotToken */;
        case 96 /* backtick */:
          return token = 61 /* BacktickToken */;
        case 35 /* hash */:
          return token = 62 /* HashToken */;
        case 92 /* backslash */:
          pos--;
          const extendedCookedChar = peekExtendedUnicodeEscape();
          if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {
            pos += 3;
            tokenFlags |= 8 /* ExtendedUnicodeEscape */;
            tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();
            return token = getIdentifierToken();
          }
          const cookedChar = peekUnicodeEscape();
          if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {
            pos += 6;
            tokenFlags |= 1024 /* UnicodeEscape */;
            tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();
            return token = getIdentifierToken();
          }
          pos++;
          return token = 0 /* Unknown */;
      }
      if (isIdentifierStart(ch, languageVersion)) {
        let char = ch;
        while (pos < end && isIdentifierPart(char = codePointAt(text, pos), languageVersion) || text.charCodeAt(pos) === 45 /* minus */)
          pos += charSize(char);
        tokenValue = text.substring(tokenPos, pos);
        if (char === 92 /* backslash */) {
          tokenValue += scanIdentifierParts();
        }
        return token = getIdentifierToken();
      } else {
        return token = 0 /* Unknown */;
      }
    }
    function speculationHelper(callback, isLookahead) {
      const savePos = pos;
      const saveStartPos = startPos;
      const saveTokenPos = tokenPos;
      const saveToken = token;
      const saveTokenValue = tokenValue;
      const saveTokenFlags = tokenFlags;
      const result = callback();
      if (!result || isLookahead) {
        pos = savePos;
        startPos = saveStartPos;
        tokenPos = saveTokenPos;
        token = saveToken;
        tokenValue = saveTokenValue;
        tokenFlags = saveTokenFlags;
      }
      return result;
    }
    function scanRange(start2, length3, callback) {
      const saveEnd = end;
      const savePos = pos;
      const saveStartPos = startPos;
      const saveTokenPos = tokenPos;
      const saveToken = token;
      const saveTokenValue = tokenValue;
      const saveTokenFlags = tokenFlags;
      const saveErrorExpectations = commentDirectives;
      setText(text, start2, length3);
      const result = callback();
      end = saveEnd;
      pos = savePos;
      startPos = saveStartPos;
      tokenPos = saveTokenPos;
      token = saveToken;
      tokenValue = saveTokenValue;
      tokenFlags = saveTokenFlags;
      commentDirectives = saveErrorExpectations;
      return result;
    }
    function lookAhead(callback) {
      return speculationHelper(
        callback,
        /*isLookahead*/
        true
      );
    }
    function tryScan(callback) {
      return speculationHelper(
        callback,
        /*isLookahead*/
        false
      );
    }
    function getText() {
      return text;
    }
    function clearCommentDirectives() {
      commentDirectives = void 0;
    }
    function setText(newText, start2, length3) {
      text = newText || "";
      end = length3 === void 0 ? text.length : start2 + length3;
      setTextPos(start2 || 0);
    }
    function setOnError(errorCallback) {
      onError = errorCallback;
    }
    function setScriptTarget(scriptTarget) {
      languageVersion = scriptTarget;
    }
    function setLanguageVariant(variant) {
      languageVariant = variant;
    }
    function setTextPos(textPos) {
      Debug.assert(textPos >= 0);
      pos = textPos;
      startPos = textPos;
      tokenPos = textPos;
      token = 0 /* Unknown */;
      tokenValue = void 0;
      tokenFlags = 0 /* None */;
    }
    function setInJSDocType(inType) {
      inJSDocType += inType ? 1 : -1;
    }
  }
  function charSize(ch) {
    if (ch >= 65536) {
      return 2;
    }
    return 1;
  }
  function utf16EncodeAsStringFallback(codePoint) {
    Debug.assert(0 <= codePoint && codePoint <= 1114111);
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    const codeUnit1 = Math.floor((codePoint - 65536) / 1024) + 55296;
    const codeUnit2 = (codePoint - 65536) % 1024 + 56320;
    return String.fromCharCode(codeUnit1, codeUnit2);
  }
  function utf16EncodeAsString(codePoint) {
    return utf16EncodeAsStringWorker(codePoint);
  }
  var textToKeywordObj, textToKeyword, textToToken, unicodeES3IdentifierStart, unicodeES3IdentifierPart, unicodeES5IdentifierStart, unicodeES5IdentifierPart, unicodeESNextIdentifierStart, unicodeESNextIdentifierPart, commentDirectiveRegExSingleLine, commentDirectiveRegExMultiLine, tokenStrings, mergeConflictMarkerLength, shebangTriviaRegex, codePointAt, utf16EncodeAsStringWorker;
  var init_scanner = __esm({
    "src/compiler/scanner.ts"() {
      "use strict";
      init_ts2();
      textToKeywordObj = {
        abstract: 126 /* AbstractKeyword */,
        accessor: 127 /* AccessorKeyword */,
        any: 131 /* AnyKeyword */,
        as: 128 /* AsKeyword */,
        asserts: 129 /* AssertsKeyword */,
        assert: 130 /* AssertKeyword */,
        bigint: 160 /* BigIntKeyword */,
        boolean: 134 /* BooleanKeyword */,
        break: 81 /* BreakKeyword */,
        case: 82 /* CaseKeyword */,
        catch: 83 /* CatchKeyword */,
        class: 84 /* ClassKeyword */,
        continue: 86 /* ContinueKeyword */,
        const: 85 /* ConstKeyword */,
        ["constructor"]: 135 /* ConstructorKeyword */,
        debugger: 87 /* DebuggerKeyword */,
        declare: 136 /* DeclareKeyword */,
        default: 88 /* DefaultKeyword */,
        delete: 89 /* DeleteKeyword */,
        do: 90 /* DoKeyword */,
        else: 91 /* ElseKeyword */,
        enum: 92 /* EnumKeyword */,
        export: 93 /* ExportKeyword */,
        extends: 94 /* ExtendsKeyword */,
        false: 95 /* FalseKeyword */,
        finally: 96 /* FinallyKeyword */,
        for: 97 /* ForKeyword */,
        from: 158 /* FromKeyword */,
        function: 98 /* FunctionKeyword */,
        get: 137 /* GetKeyword */,
        if: 99 /* IfKeyword */,
        implements: 117 /* ImplementsKeyword */,
        import: 100 /* ImportKeyword */,
        in: 101 /* InKeyword */,
        infer: 138 /* InferKeyword */,
        instanceof: 102 /* InstanceOfKeyword */,
        interface: 118 /* InterfaceKeyword */,
        intrinsic: 139 /* IntrinsicKeyword */,
        is: 140 /* IsKeyword */,
        keyof: 141 /* KeyOfKeyword */,
        let: 119 /* LetKeyword */,
        module: 142 /* ModuleKeyword */,
        namespace: 143 /* NamespaceKeyword */,
        never: 144 /* NeverKeyword */,
        new: 103 /* NewKeyword */,
        null: 104 /* NullKeyword */,
        number: 148 /* NumberKeyword */,
        object: 149 /* ObjectKeyword */,
        package: 120 /* PackageKeyword */,
        private: 121 /* PrivateKeyword */,
        protected: 122 /* ProtectedKeyword */,
        public: 123 /* PublicKeyword */,
        override: 161 /* OverrideKeyword */,
        out: 145 /* OutKeyword */,
        readonly: 146 /* ReadonlyKeyword */,
        require: 147 /* RequireKeyword */,
        global: 159 /* GlobalKeyword */,
        return: 105 /* ReturnKeyword */,
        satisfies: 150 /* SatisfiesKeyword */,
        set: 151 /* SetKeyword */,
        static: 124 /* StaticKeyword */,
        string: 152 /* StringKeyword */,
        super: 106 /* SuperKeyword */,
        switch: 107 /* SwitchKeyword */,
        symbol: 153 /* SymbolKeyword */,
        this: 108 /* ThisKeyword */,
        throw: 109 /* ThrowKeyword */,
        true: 110 /* TrueKeyword */,
        try: 111 /* TryKeyword */,
        type: 154 /* TypeKeyword */,
        typeof: 112 /* TypeOfKeyword */,
        undefined: 155 /* UndefinedKeyword */,
        unique: 156 /* UniqueKeyword */,
        unknown: 157 /* UnknownKeyword */,
        var: 113 /* VarKeyword */,
        void: 114 /* VoidKeyword */,
        while: 115 /* WhileKeyword */,
        with: 116 /* WithKeyword */,
        yield: 125 /* YieldKeyword */,
        async: 132 /* AsyncKeyword */,
        await: 133 /* AwaitKeyword */,
        of: 162 /* OfKeyword */
      };
      textToKeyword = new Map(Object.entries(textToKeywordObj));
      textToToken = new Map(Object.entries({
        ...textToKeywordObj,
        "{": 18 /* OpenBraceToken */,
        "}": 19 /* CloseBraceToken */,
        "(": 20 /* OpenParenToken */,
        ")": 21 /* CloseParenToken */,
        "[": 22 /* OpenBracketToken */,
        "]": 23 /* CloseBracketToken */,
        ".": 24 /* DotToken */,
        "...": 25 /* DotDotDotToken */,
        ";": 26 /* SemicolonToken */,
        ",": 27 /* CommaToken */,
        "<": 29 /* LessThanToken */,
        ">": 31 /* GreaterThanToken */,
        "<=": 32 /* LessThanEqualsToken */,
        ">=": 33 /* GreaterThanEqualsToken */,
        "==": 34 /* EqualsEqualsToken */,
        "!=": 35 /* ExclamationEqualsToken */,
        "===": 36 /* EqualsEqualsEqualsToken */,
        "!==": 37 /* ExclamationEqualsEqualsToken */,
        "=>": 38 /* EqualsGreaterThanToken */,
        "+": 39 /* PlusToken */,
        "-": 40 /* MinusToken */,
        "**": 42 /* AsteriskAsteriskToken */,
        "*": 41 /* AsteriskToken */,
        "/": 43 /* SlashToken */,
        "%": 44 /* PercentToken */,
        "++": 45 /* PlusPlusToken */,
        "--": 46 /* MinusMinusToken */,
        "<<": 47 /* LessThanLessThanToken */,
        "</": 30 /* LessThanSlashToken */,
        ">>": 48 /* GreaterThanGreaterThanToken */,
        ">>>": 49 /* GreaterThanGreaterThanGreaterThanToken */,
        "&": 50 /* AmpersandToken */,
        "|": 51 /* BarToken */,
        "^": 52 /* CaretToken */,
        "!": 53 /* ExclamationToken */,
        "~": 54 /* TildeToken */,
        "&&": 55 /* AmpersandAmpersandToken */,
        "||": 56 /* BarBarToken */,
        "?": 57 /* QuestionToken */,
        "??": 60 /* QuestionQuestionToken */,
        "?.": 28 /* QuestionDotToken */,
        ":": 58 /* ColonToken */,
        "=": 63 /* EqualsToken */,
        "+=": 64 /* PlusEqualsToken */,
        "-=": 65 /* MinusEqualsToken */,
        "*=": 66 /* AsteriskEqualsToken */,
        "**=": 67 /* AsteriskAsteriskEqualsToken */,
        "/=": 68 /* SlashEqualsToken */,
        "%=": 69 /* PercentEqualsToken */,
        "<<=": 70 /* LessThanLessThanEqualsToken */,
        ">>=": 71 /* GreaterThanGreaterThanEqualsToken */,
        ">>>=": 72 /* GreaterThanGreaterThanGreaterThanEqualsToken */,
        "&=": 73 /* AmpersandEqualsToken */,
        "|=": 74 /* BarEqualsToken */,
        "^=": 78 /* CaretEqualsToken */,
        "||=": 75 /* BarBarEqualsToken */,
        "&&=": 76 /* AmpersandAmpersandEqualsToken */,
        "??=": 77 /* QuestionQuestionEqualsToken */,
        "@": 59 /* AtToken */,
        "#": 62 /* HashToken */,
        "`": 61 /* BacktickToken */
      }));
      unicodeES3IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
      unicodeES3IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1155, 1158, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768, 1770, 1773, 1776, 1788, 1808, 1836, 1840, 1866, 1920, 1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388, 2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2562, 2562, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2649, 2652, 2654, 2654, 2662, 2676, 2689, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2784, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2876, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3805, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3946, 3953, 3972, 3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153, 4160, 4169, 4176, 4185, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6313, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12346, 12353, 12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075, 65076, 65101, 65103, 65136, 65138, 65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
      unicodeES5IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6e3, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43e3, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
      unicodeES5IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6e3, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43e3, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];
      unicodeESNextIdentifierStart = [65, 90, 97, 122, 170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 895, 895, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1327, 1329, 1366, 1369, 1369, 1376, 1416, 1488, 1514, 1519, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2144, 2154, 2208, 2228, 2230, 2237, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2432, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2556, 2556, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2809, 2809, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3133, 3133, 3160, 3162, 3168, 3169, 3200, 3200, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3412, 3414, 3423, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3718, 3722, 3724, 3747, 3749, 3749, 3751, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5880, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6e3, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6264, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6430, 6480, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7401, 7404, 7406, 7411, 7413, 7414, 7418, 7418, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12443, 12447, 12449, 12538, 12540, 12543, 12549, 12591, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40943, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42653, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42943, 42946, 42950, 42999, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43261, 43262, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43488, 43492, 43494, 43503, 43514, 43518, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43646, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43879, 43888, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 65856, 65908, 66176, 66204, 66208, 66256, 66304, 66335, 66349, 66378, 66384, 66421, 66432, 66461, 66464, 66499, 66504, 66511, 66513, 66517, 66560, 66717, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669, 67680, 67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897, 67968, 68023, 68030, 68031, 68096, 68096, 68112, 68115, 68117, 68119, 68121, 68149, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68324, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 68736, 68786, 68800, 68850, 68864, 68899, 69376, 69404, 69415, 69415, 69424, 69445, 69600, 69622, 69635, 69687, 69763, 69807, 69840, 69864, 69891, 69926, 69956, 69956, 69968, 70002, 70006, 70006, 70019, 70066, 70081, 70084, 70106, 70106, 70108, 70108, 70144, 70161, 70163, 70187, 70272, 70278, 70280, 70280, 70282, 70285, 70287, 70301, 70303, 70312, 70320, 70366, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70461, 70461, 70480, 70480, 70493, 70497, 70656, 70708, 70727, 70730, 70751, 70751, 70784, 70831, 70852, 70853, 70855, 70855, 71040, 71086, 71128, 71131, 71168, 71215, 71236, 71236, 71296, 71338, 71352, 71352, 71424, 71450, 71680, 71723, 71840, 71903, 71935, 71935, 72096, 72103, 72106, 72144, 72161, 72161, 72163, 72163, 72192, 72192, 72203, 72242, 72250, 72250, 72272, 72272, 72284, 72329, 72349, 72349, 72384, 72440, 72704, 72712, 72714, 72750, 72768, 72768, 72818, 72847, 72960, 72966, 72968, 72969, 72971, 73008, 73030, 73030, 73056, 73061, 73063, 73064, 73066, 73097, 73112, 73112, 73440, 73458, 73728, 74649, 74752, 74862, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92766, 92880, 92909, 92928, 92975, 92992, 92995, 93027, 93047, 93053, 93071, 93760, 93823, 93952, 94026, 94032, 94032, 94099, 94111, 94176, 94177, 94179, 94179, 94208, 100343, 100352, 101106, 110592, 110878, 110928, 110930, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 123136, 123180, 123191, 123197, 123214, 123214, 123584, 123627, 124928, 125124, 125184, 125251, 125259, 125259, 126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500, 126503, 126503, 126505, 126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530, 126530, 126535, 126535, 126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546, 126548, 126548, 126551, 126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559, 126559, 126561, 126562, 126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126590, 126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101];
      unicodeESNextIdentifierPart = [48, 57, 65, 90, 95, 95, 97, 122, 170, 170, 181, 181, 183, 183, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 895, 895, 902, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1327, 1329, 1366, 1369, 1369, 1376, 1416, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1519, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2045, 2045, 2048, 2093, 2112, 2139, 2144, 2154, 2208, 2228, 2230, 2237, 2259, 2273, 2275, 2403, 2406, 2415, 2417, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2556, 2556, 2558, 2558, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2809, 2815, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3072, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3162, 3168, 3171, 3174, 3183, 3200, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3328, 3331, 3333, 3340, 3342, 3344, 3346, 3396, 3398, 3400, 3402, 3406, 3412, 3415, 3423, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3558, 3567, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3718, 3722, 3724, 3747, 3749, 3749, 3751, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4969, 4977, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5880, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6e3, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6264, 6272, 6314, 6320, 6389, 6400, 6430, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6832, 6845, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7376, 7378, 7380, 7418, 7424, 7673, 7675, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12447, 12449, 12538, 12540, 12543, 12549, 12591, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40943, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42737, 42775, 42783, 42786, 42888, 42891, 42943, 42946, 42950, 42999, 43047, 43072, 43123, 43136, 43205, 43216, 43225, 43232, 43255, 43259, 43259, 43261, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43488, 43518, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43879, 43888, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65071, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 65856, 65908, 66045, 66045, 66176, 66204, 66208, 66256, 66272, 66272, 66304, 66335, 66349, 66378, 66384, 66426, 66432, 66461, 66464, 66499, 66504, 66511, 66513, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669, 67680, 67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897, 67968, 68023, 68030, 68031, 68096, 68099, 68101, 68102, 68108, 68115, 68117, 68119, 68121, 68149, 68152, 68154, 68159, 68159, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68326, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 68736, 68786, 68800, 68850, 68864, 68903, 68912, 68921, 69376, 69404, 69415, 69415, 69424, 69456, 69600, 69622, 69632, 69702, 69734, 69743, 69759, 69818, 69840, 69864, 69872, 69881, 69888, 69940, 69942, 69951, 69956, 69958, 69968, 70003, 70006, 70006, 70016, 70084, 70089, 70092, 70096, 70106, 70108, 70108, 70144, 70161, 70163, 70199, 70206, 70206, 70272, 70278, 70280, 70280, 70282, 70285, 70287, 70301, 70303, 70312, 70320, 70378, 70384, 70393, 70400, 70403, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70459, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70730, 70736, 70745, 70750, 70751, 70784, 70853, 70855, 70855, 70864, 70873, 71040, 71093, 71096, 71104, 71128, 71133, 71168, 71232, 71236, 71236, 71248, 71257, 71296, 71352, 71360, 71369, 71424, 71450, 71453, 71467, 71472, 71481, 71680, 71738, 71840, 71913, 71935, 71935, 72096, 72103, 72106, 72151, 72154, 72161, 72163, 72164, 72192, 72254, 72263, 72263, 72272, 72345, 72349, 72349, 72384, 72440, 72704, 72712, 72714, 72758, 72760, 72768, 72784, 72793, 72818, 72847, 72850, 72871, 72873, 72886, 72960, 72966, 72968, 72969, 72971, 73014, 73018, 73018, 73020, 73021, 73023, 73031, 73040, 73049, 73056, 73061, 73063, 73064, 73066, 73102, 73104, 73105, 73107, 73112, 73120, 73129, 73440, 73462, 73728, 74649, 74752, 74862, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92766, 92768, 92777, 92880, 92909, 92912, 92916, 92928, 92982, 92992, 92995, 93008, 93017, 93027, 93047, 93053, 93071, 93760, 93823, 93952, 94026, 94031, 94087, 94095, 94111, 94176, 94177, 94179, 94179, 94208, 100343, 100352, 101106, 110592, 110878, 110928, 110930, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113821, 113822, 119141, 119145, 119149, 119154, 119163, 119170, 119173, 119179, 119210, 119213, 119362, 119364, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 120782, 120831, 121344, 121398, 121403, 121452, 121461, 121461, 121476, 121476, 121499, 121503, 121505, 121519, 122880, 122886, 122888, 122904, 122907, 122913, 122915, 122916, 122918, 122922, 123136, 123180, 123184, 123197, 123200, 123209, 123214, 123214, 123584, 123641, 124928, 125124, 125136, 125142, 125184, 125259, 125264, 125273, 126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500, 126503, 126503, 126505, 126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530, 126530, 126535, 126535, 126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546, 126548, 126548, 126551, 126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559, 126559, 126561, 126562, 126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126590, 126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 917760, 917999];
      commentDirectiveRegExSingleLine = /^\/\/\/?\s*@(ts-expect-error|ts-ignore)/;
      commentDirectiveRegExMultiLine = /^(?:\/|\*)*\s*@(ts-expect-error|ts-ignore)/;
      tokenStrings = makeReverseMap(textToToken);
      mergeConflictMarkerLength = "<<<<<<<".length;
      shebangTriviaRegex = /^#!.*/;
      codePointAt = String.prototype.codePointAt ? (s, i) => s.codePointAt(i) : function codePointAt2(str, i) {
        const size = str.length;
        if (i < 0 || i >= size) {
          return void 0;
        }
        const first2 = str.charCodeAt(i);
        if (first2 >= 55296 && first2 <= 56319 && size > i + 1) {
          const second = str.charCodeAt(i + 1);
          if (second >= 56320 && second <= 57343) {
            return (first2 - 55296) * 1024 + second - 56320 + 65536;
          }
        }
        return first2;
      };
      utf16EncodeAsStringWorker = String.fromCodePoint ? (codePoint) => String.fromCodePoint(codePoint) : utf16EncodeAsStringFallback;
    }
  });

  // src/compiler/utilitiesPublic.ts
  function isExternalModuleNameRelative(moduleName) {
    return pathIsRelative(moduleName) || isRootedDiskPath(moduleName);
  }
  function sortAndDeduplicateDiagnostics(diagnostics) {
    return sortAndDeduplicate(diagnostics, compareDiagnostics);
  }
  function getDefaultLibFileName(options) {
    switch (getEmitScriptTarget(options)) {
      case 99 /* ESNext */:
        return "lib.esnext.full.d.ts";
      case 9 /* ES2022 */:
        return "lib.es2022.full.d.ts";
      case 8 /* ES2021 */:
        return "lib.es2021.full.d.ts";
      case 7 /* ES2020 */:
        return "lib.es2020.full.d.ts";
      case 6 /* ES2019 */:
        return "lib.es2019.full.d.ts";
      case 5 /* ES2018 */:
        return "lib.es2018.full.d.ts";
      case 4 /* ES2017 */:
        return "lib.es2017.full.d.ts";
      case 3 /* ES2016 */:
        return "lib.es2016.full.d.ts";
      case 2 /* ES2015 */:
        return "lib.es6.d.ts";
      default:
        return "lib.d.ts";
    }
  }
  function textSpanEnd(span) {
    return span.start + span.length;
  }
  function textSpanIsEmpty(span) {
    return span.length === 0;
  }
  function textSpanContainsPosition(span, position) {
    return position >= span.start && position < textSpanEnd(span);
  }
  function textRangeContainsPositionInclusive(span, position) {
    return position >= span.pos && position <= span.end;
  }
  function textSpanContainsTextSpan(span, other) {
    return other.start >= span.start && textSpanEnd(other) <= textSpanEnd(span);
  }
  function textSpanOverlapsWith(span, other) {
    return textSpanOverlap(span, other) !== void 0;
  }
  function textSpanOverlap(span1, span2) {
    const overlap = textSpanIntersection(span1, span2);
    return overlap && overlap.length === 0 ? void 0 : overlap;
  }
  function textSpanIntersectsWithTextSpan(span, other) {
    return decodedTextSpanIntersectsWith(span.start, span.length, other.start, other.length);
  }
  function textSpanIntersectsWith(span, start, length2) {
    return decodedTextSpanIntersectsWith(span.start, span.length, start, length2);
  }
  function decodedTextSpanIntersectsWith(start1, length1, start2, length2) {
    const end1 = start1 + length1;
    const end2 = start2 + length2;
    return start2 <= end1 && end2 >= start1;
  }
  function textSpanIntersectsWithPosition(span, position) {
    return position <= textSpanEnd(span) && position >= span.start;
  }
  function textSpanIntersection(span1, span2) {
    const start = Math.max(span1.start, span2.start);
    const end = Math.min(textSpanEnd(span1), textSpanEnd(span2));
    return start <= end ? createTextSpanFromBounds(start, end) : void 0;
  }
  function createTextSpan(start, length2) {
    if (start < 0) {
      throw new Error("start < 0");
    }
    if (length2 < 0) {
      throw new Error("length < 0");
    }
    return { start, length: length2 };
  }
  function createTextSpanFromBounds(start, end) {
    return createTextSpan(start, end - start);
  }
  function textChangeRangeNewSpan(range) {
    return createTextSpan(range.span.start, range.newLength);
  }
  function textChangeRangeIsUnchanged(range) {
    return textSpanIsEmpty(range.span) && range.newLength === 0;
  }
  function createTextChangeRange(span, newLength) {
    if (newLength < 0) {
      throw new Error("newLength < 0");
    }
    return { span, newLength };
  }
  function collapseTextChangeRangesAcrossMultipleVersions(changes) {
    if (changes.length === 0) {
      return unchangedTextChangeRange;
    }
    if (changes.length === 1) {
      return changes[0];
    }
    const change0 = changes[0];
    let oldStartN = change0.span.start;
    let oldEndN = textSpanEnd(change0.span);
    let newEndN = oldStartN + change0.newLength;
    for (let i = 1; i < changes.length; i++) {
      const nextChange = changes[i];
      const oldStart1 = oldStartN;
      const oldEnd1 = oldEndN;
      const newEnd1 = newEndN;
      const oldStart2 = nextChange.span.start;
      const oldEnd2 = textSpanEnd(nextChange.span);
      const newEnd2 = oldStart2 + nextChange.newLength;
      oldStartN = Math.min(oldStart1, oldStart2);
      oldEndN = Math.max(oldEnd1, oldEnd1 + (oldEnd2 - newEnd1));
      newEndN = Math.max(newEnd2, newEnd2 + (newEnd1 - oldEnd2));
    }
    return createTextChangeRange(
      createTextSpanFromBounds(oldStartN, oldEndN),
      /*newLength*/
      newEndN - oldStartN
    );
  }
  function getTypeParameterOwner(d) {
    if (d && d.kind === 165 /* TypeParameter */) {
      for (let current = d; current; current = current.parent) {
        if (isFunctionLike(current) || isClassLike(current) || current.kind === 261 /* InterfaceDeclaration */) {
          return current;
        }
      }
    }
  }
  function isParameterPropertyDeclaration(node, parent2) {
    return isParameter(node) && hasSyntacticModifier(node, 16476 /* ParameterPropertyModifier */) && parent2.kind === 173 /* Constructor */;
  }
  function isEmptyBindingPattern(node) {
    if (isBindingPattern(node)) {
      return every(node.elements, isEmptyBindingElement);
    }
    return false;
  }
  function isEmptyBindingElement(node) {
    if (isOmittedExpression(node)) {
      return true;
    }
    return isEmptyBindingPattern(node.name);
  }
  function walkUpBindingElementsAndPatterns(binding) {
    let node = binding.parent;
    while (isBindingElement(node.parent)) {
      node = node.parent.parent;
    }
    return node.parent;
  }
  function getCombinedFlags(node, getFlags) {
    if (isBindingElement(node)) {
      node = walkUpBindingElementsAndPatterns(node);
    }
    let flags = getFlags(node);
    if (node.kind === 257 /* VariableDeclaration */) {
      node = node.parent;
    }
    if (node && node.kind === 258 /* VariableDeclarationList */) {
      flags |= getFlags(node);
      node = node.parent;
    }
    if (node && node.kind === 240 /* VariableStatement */) {
      flags |= getFlags(node);
    }
    return flags;
  }
  function getCombinedModifierFlags(node) {
    return getCombinedFlags(node, getEffectiveModifierFlags);
  }
  function getCombinedNodeFlagsAlwaysIncludeJSDoc(node) {
    return getCombinedFlags(node, getEffectiveModifierFlagsAlwaysIncludeJSDoc);
  }
  function getCombinedNodeFlags(node) {
    return getCombinedFlags(node, (n) => n.flags);
  }
  function validateLocaleAndSetLanguage(locale, sys2, errors) {
    const lowerCaseLocale = locale.toLowerCase();
    const matchResult = /^([a-z]+)([_\-]([a-z]+))?$/.exec(lowerCaseLocale);
    if (!matchResult) {
      if (errors) {
        errors.push(createCompilerDiagnostic(Diagnostics.Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1, "en", "ja-jp"));
      }
      return;
    }
    const language = matchResult[1];
    const territory = matchResult[3];
    if (contains(supportedLocaleDirectories, lowerCaseLocale) && !trySetLanguageAndTerritory(language, territory, errors)) {
      trySetLanguageAndTerritory(
        language,
        /*territory*/
        void 0,
        errors
      );
    }
    setUILocale(locale);
    function trySetLanguageAndTerritory(language2, territory2, errors2) {
      const compilerFilePath = normalizePath(sys2.getExecutingFilePath());
      const containingDirectoryPath = getDirectoryPath(compilerFilePath);
      let filePath = combinePaths(containingDirectoryPath, language2);
      if (territory2) {
        filePath = filePath + "-" + territory2;
      }
      filePath = sys2.resolvePath(combinePaths(filePath, "diagnosticMessages.generated.json"));
      if (!sys2.fileExists(filePath)) {
        return false;
      }
      let fileContents = "";
      try {
        fileContents = sys2.readFile(filePath);
      } catch (e) {
        if (errors2) {
          errors2.push(createCompilerDiagnostic(Diagnostics.Unable_to_open_file_0, filePath));
        }
        return false;
      }
      try {
        setLocalizedDiagnosticMessages(JSON.parse(fileContents));
      } catch (e) {
        if (errors2) {
          errors2.push(createCompilerDiagnostic(Diagnostics.Corrupted_locale_file_0, filePath));
        }
        return false;
      }
      return true;
    }
  }
  function getOriginalNode(node, nodeTest) {
    if (node) {
      while (node.original !== void 0) {
        node = node.original;
      }
    }
    if (!node || !nodeTest) {
      return node;
    }
    return nodeTest(node) ? node : void 0;
  }
  function findAncestor(node, callback) {
    while (node) {
      const result = callback(node);
      if (result === "quit") {
        return void 0;
      } else if (result) {
        return node;
      }
      node = node.parent;
    }
    return void 0;
  }
  function isParseTreeNode(node) {
    return (node.flags & 8 /* Synthesized */) === 0;
  }
  function getParseTreeNode(node, nodeTest) {
    if (node === void 0 || isParseTreeNode(node)) {
      return node;
    }
    node = node.original;
    while (node) {
      if (isParseTreeNode(node)) {
        return !nodeTest || nodeTest(node) ? node : void 0;
      }
      node = node.original;
    }
  }
  function escapeLeadingUnderscores(identifier) {
    return identifier.length >= 2 && identifier.charCodeAt(0) === 95 /* _ */ && identifier.charCodeAt(1) === 95 /* _ */ ? "_" + identifier : identifier;
  }
  function unescapeLeadingUnderscores(identifier) {
    const id = identifier;
    return id.length >= 3 && id.charCodeAt(0) === 95 /* _ */ && id.charCodeAt(1) === 95 /* _ */ && id.charCodeAt(2) === 95 /* _ */ ? id.substr(1) : id;
  }
  function idText(identifierOrPrivateName) {
    return unescapeLeadingUnderscores(identifierOrPrivateName.escapedText);
  }
  function identifierToKeywordKind(node) {
    const token = stringToToken(node.escapedText);
    return token ? tryCast(token, isKeyword) : void 0;
  }
  function symbolName(symbol) {
    if (symbol.valueDeclaration && isPrivateIdentifierClassElementDeclaration(symbol.valueDeclaration)) {
      return idText(symbol.valueDeclaration.name);
    }
    return unescapeLeadingUnderscores(symbol.escapedName);
  }
  function nameForNamelessJSDocTypedef(declaration) {
    const hostNode = declaration.parent.parent;
    if (!hostNode) {
      return void 0;
    }
    if (isDeclaration(hostNode)) {
      return getDeclarationIdentifier(hostNode);
    }
    switch (hostNode.kind) {
      case 240 /* VariableStatement */:
        if (hostNode.declarationList && hostNode.declarationList.declarations[0]) {
          return getDeclarationIdentifier(hostNode.declarationList.declarations[0]);
        }
        break;
      case 241 /* ExpressionStatement */:
        let expr = hostNode.expression;
        if (expr.kind === 223 /* BinaryExpression */ && expr.operatorToken.kind === 63 /* EqualsToken */) {
          expr = expr.left;
        }
        switch (expr.kind) {
          case 208 /* PropertyAccessExpression */:
            return expr.name;
          case 209 /* ElementAccessExpression */:
            const arg = expr.argumentExpression;
            if (isIdentifier(arg)) {
              return arg;
            }
        }
        break;
      case 214 /* ParenthesizedExpression */: {
        return getDeclarationIdentifier(hostNode.expression);
      }
      case 253 /* LabeledStatement */: {
        if (isDeclaration(hostNode.statement) || isExpression(hostNode.statement)) {
          return getDeclarationIdentifier(hostNode.statement);
        }
        break;
      }
    }
  }
  function getDeclarationIdentifier(node) {
    const name = getNameOfDeclaration(node);
    return name && isIdentifier(name) ? name : void 0;
  }
  function nodeHasName(statement, name) {
    if (isNamedDeclaration(statement) && isIdentifier(statement.name) && idText(statement.name) === idText(name)) {
      return true;
    }
    if (isVariableStatement(statement) && some(statement.declarationList.declarations, (d) => nodeHasName(d, name))) {
      return true;
    }
    return false;
  }
  function getNameOfJSDocTypedef(declaration) {
    return declaration.name || nameForNamelessJSDocTypedef(declaration);
  }
  function isNamedDeclaration(node) {
    return !!node.name;
  }
  function getNonAssignedNameOfDeclaration(declaration) {
    switch (declaration.kind) {
      case 79 /* Identifier */:
        return declaration;
      case 351 /* JSDocPropertyTag */:
      case 344 /* JSDocParameterTag */: {
        const { name } = declaration;
        if (name.kind === 163 /* QualifiedName */) {
          return name.right;
        }
        break;
      }
      case 210 /* CallExpression */:
      case 223 /* BinaryExpression */: {
        const expr2 = declaration;
        switch (getAssignmentDeclarationKind(expr2)) {
          case 1 /* ExportsProperty */:
          case 4 /* ThisProperty */:
          case 5 /* Property */:
          case 3 /* PrototypeProperty */:
            return getElementOrPropertyAccessArgumentExpressionOrName(expr2.left);
          case 7 /* ObjectDefinePropertyValue */:
          case 8 /* ObjectDefinePropertyExports */:
          case 9 /* ObjectDefinePrototypeProperty */:
            return expr2.arguments[1];
          default:
            return void 0;
        }
      }
      case 349 /* JSDocTypedefTag */:
        return getNameOfJSDocTypedef(declaration);
      case 343 /* JSDocEnumTag */:
        return nameForNamelessJSDocTypedef(declaration);
      case 274 /* ExportAssignment */: {
        const { expression } = declaration;
        return isIdentifier(expression) ? expression : void 0;
      }
      case 209 /* ElementAccessExpression */:
        const expr = declaration;
        if (isBindableStaticElementAccessExpression(expr)) {
          return expr.argumentExpression;
        }
    }
    return declaration.name;
  }
  function getNameOfDeclaration(declaration) {
    if (declaration === void 0)
      return void 0;
    return getNonAssignedNameOfDeclaration(declaration) || (isFunctionExpression(declaration) || isArrowFunction(declaration) || isClassExpression(declaration) ? getAssignedName(declaration) : void 0);
  }
  function getAssignedName(node) {
    if (!node.parent) {
      return void 0;
    } else if (isPropertyAssignment(node.parent) || isBindingElement(node.parent)) {
      return node.parent.name;
    } else if (isBinaryExpression(node.parent) && node === node.parent.right) {
      if (isIdentifier(node.parent.left)) {
        return node.parent.left;
      } else if (isAccessExpression(node.parent.left)) {
        return getElementOrPropertyAccessArgumentExpressionOrName(node.parent.left);
      }
    } else if (isVariableDeclaration(node.parent) && isIdentifier(node.parent.name)) {
      return node.parent.name;
    }
  }
  function getDecorators(node) {
    if (hasDecorators(node)) {
      return filter(node.modifiers, isDecorator);
    }
  }
  function getModifiers(node) {
    if (hasSyntacticModifier(node, 126975 /* Modifier */)) {
      return filter(node.modifiers, isModifier);
    }
  }
  function getJSDocParameterTagsWorker(param, noCache) {
    if (param.name) {
      if (isIdentifier(param.name)) {
        const name = param.name.escapedText;
        return getJSDocTagsWorker(param.parent, noCache).filter((tag) => isJSDocParameterTag(tag) && isIdentifier(tag.name) && tag.name.escapedText === name);
      } else {
        const i = param.parent.parameters.indexOf(param);
        Debug.assert(i > -1, "Parameters should always be in their parents' parameter list");
        const paramTags = getJSDocTagsWorker(param.parent, noCache).filter(isJSDocParameterTag);
        if (i < paramTags.length) {
          return [paramTags[i]];
        }
      }
    }
    return emptyArray;
  }
  function getJSDocParameterTags(param) {
    return getJSDocParameterTagsWorker(
      param,
      /*noCache*/
      false
    );
  }
  function getJSDocParameterTagsNoCache(param) {
    return getJSDocParameterTagsWorker(
      param,
      /*noCache*/
      true
    );
  }
  function getJSDocTypeParameterTagsWorker(param, noCache) {
    const name = param.name.escapedText;
    return getJSDocTagsWorker(param.parent, noCache).filter((tag) => isJSDocTemplateTag(tag) && tag.typeParameters.some((tp) => tp.name.escapedText === name));
  }
  function getJSDocTypeParameterTags(param) {
    return getJSDocTypeParameterTagsWorker(
      param,
      /*noCache*/
      false
    );
  }
  function getJSDocTypeParameterTagsNoCache(param) {
    return getJSDocTypeParameterTagsWorker(
      param,
      /*noCache*/
      true
    );
  }
  function hasJSDocParameterTags(node) {
    return !!getFirstJSDocTag(node, isJSDocParameterTag);
  }
  function getJSDocAugmentsTag(node) {
    return getFirstJSDocTag(node, isJSDocAugmentsTag);
  }
  function getJSDocImplementsTags(node) {
    return getAllJSDocTags(node, isJSDocImplementsTag);
  }
  function getJSDocClassTag(node) {
    return getFirstJSDocTag(node, isJSDocClassTag);
  }
  function getJSDocPublicTag(node) {
    return getFirstJSDocTag(node, isJSDocPublicTag);
  }
  function getJSDocPublicTagNoCache(node) {
    return getFirstJSDocTag(
      node,
      isJSDocPublicTag,
      /*noCache*/
      true
    );
  }
  function getJSDocPrivateTag(node) {
    return getFirstJSDocTag(node, isJSDocPrivateTag);
  }
  function getJSDocPrivateTagNoCache(node) {
    return getFirstJSDocTag(
      node,
      isJSDocPrivateTag,
      /*noCache*/
      true
    );
  }
  function getJSDocProtectedTag(node) {
    return getFirstJSDocTag(node, isJSDocProtectedTag);
  }
  function getJSDocProtectedTagNoCache(node) {
    return getFirstJSDocTag(
      node,
      isJSDocProtectedTag,
      /*noCache*/
      true
    );
  }
  function getJSDocReadonlyTag(node) {
    return getFirstJSDocTag(node, isJSDocReadonlyTag);
  }
  function getJSDocReadonlyTagNoCache(node) {
    return getFirstJSDocTag(
      node,
      isJSDocReadonlyTag,
      /*noCache*/
      true
    );
  }
  function getJSDocOverrideTagNoCache(node) {
    return getFirstJSDocTag(
      node,
      isJSDocOverrideTag,
      /*noCache*/
      true
    );
  }
  function getJSDocDeprecatedTag(node) {
    return getFirstJSDocTag(node, isJSDocDeprecatedTag);
  }
  function getJSDocDeprecatedTagNoCache(node) {
    return getFirstJSDocTag(
      node,
      isJSDocDeprecatedTag,
      /*noCache*/
      true
    );
  }
  function getJSDocEnumTag(node) {
    return getFirstJSDocTag(node, isJSDocEnumTag);
  }
  function getJSDocThisTag(node) {
    return getFirstJSDocTag(node, isJSDocThisTag);
  }
  function getJSDocReturnTag(node) {
    return getFirstJSDocTag(node, isJSDocReturnTag);
  }
  function getJSDocTemplateTag(node) {
    return getFirstJSDocTag(node, isJSDocTemplateTag);
  }
  function getJSDocSatisfiesTag(node) {
    return getFirstJSDocTag(node, isJSDocSatisfiesTag);
  }
  function getJSDocTypeTag(node) {
    const tag = getFirstJSDocTag(node, isJSDocTypeTag);
    if (tag && tag.typeExpression && tag.typeExpression.type) {
      return tag;
    }
    return void 0;
  }
  function getJSDocType(node) {
    let tag = getFirstJSDocTag(node, isJSDocTypeTag);
    if (!tag && isParameter(node)) {
      tag = find(getJSDocParameterTags(node), (tag2) => !!tag2.typeExpression);
    }
    return tag && tag.typeExpression && tag.typeExpression.type;
  }
  function getJSDocReturnType(node) {
    const returnTag = getJSDocReturnTag(node);
    if (returnTag && returnTag.typeExpression) {
      return returnTag.typeExpression.type;
    }
    const typeTag = getJSDocTypeTag(node);
    if (typeTag && typeTag.typeExpression) {
      const type = typeTag.typeExpression.type;
      if (isTypeLiteralNode(type)) {
        const sig = find(type.members, isCallSignatureDeclaration);
        return sig && sig.type;
      }
      if (isFunctionTypeNode(type) || isJSDocFunctionType(type)) {
        return type.type;
      }
    }
  }
  function getJSDocTagsWorker(node, noCache) {
    var _a2, _b;
    if (!canHaveJSDoc(node))
      return emptyArray;
    let tags = (_a2 = node.jsDoc) == null ? void 0 : _a2.jsDocCache;
    if (tags === void 0 || noCache) {
      const comments = getJSDocCommentsAndTags(node, noCache);
      Debug.assert(comments.length < 2 || comments[0] !== comments[1]);
      tags = flatMap(comments, (j) => isJSDoc(j) ? j.tags : j);
      if (!noCache) {
        (_b = node.jsDoc) != null ? _b : node.jsDoc = [];
        node.jsDoc.jsDocCache = tags;
      }
    }
    return tags;
  }
  function getJSDocTags(node) {
    return getJSDocTagsWorker(
      node,
      /*noCache*/
      false
    );
  }
  function getJSDocTagsNoCache(node) {
    return getJSDocTagsWorker(
      node,
      /*noCache*/
      true
    );
  }
  function getFirstJSDocTag(node, predicate, noCache) {
    return find(getJSDocTagsWorker(node, noCache), predicate);
  }
  function getAllJSDocTags(node, predicate) {
    return getJSDocTags(node).filter(predicate);
  }
  function getAllJSDocTagsOfKind(node, kind) {
    return getJSDocTags(node).filter((doc) => doc.kind === kind);
  }
  function getTextOfJSDocComment(comment) {
    return typeof comment === "string" ? comment : comment == null ? void 0 : comment.map((c) => c.kind === 324 /* JSDocText */ ? c.text : formatJSDocLink(c)).join("");
  }
  function formatJSDocLink(link) {
    const kind = link.kind === 327 /* JSDocLink */ ? "link" : link.kind === 328 /* JSDocLinkCode */ ? "linkcode" : "linkplain";
    const name = link.name ? entityNameToString(link.name) : "";
    const space = link.name && link.text.startsWith("://") ? "" : " ";
    return `{@${kind} ${name}${space}${link.text}}`;
  }
  function getEffectiveTypeParameterDeclarations(node) {
    if (isJSDocSignature(node)) {
      if (isJSDocOverloadTag(node.parent)) {
        const jsDoc = getJSDocRoot(node.parent);
        if (jsDoc && length(jsDoc.tags)) {
          return flatMap(jsDoc.tags, (tag) => isJSDocTemplateTag(tag) ? tag.typeParameters : void 0);
        }
      }
      return emptyArray;
    }
    if (isJSDocTypeAlias(node)) {
      Debug.assert(node.parent.kind === 323 /* JSDoc */);
      return flatMap(node.parent.tags, (tag) => isJSDocTemplateTag(tag) ? tag.typeParameters : void 0);
    }
    if (node.typeParameters) {
      return node.typeParameters;
    }
    if (canHaveIllegalTypeParameters(node) && node.typeParameters) {
      return node.typeParameters;
    }
    if (isInJSFile(node)) {
      const decls = getJSDocTypeParameterDeclarations(node);
      if (decls.length) {
        return decls;
      }
      const typeTag = getJSDocType(node);
      if (typeTag && isFunctionTypeNode(typeTag) && typeTag.typeParameters) {
        return typeTag.typeParameters;
      }
    }
    return emptyArray;
  }
  function getEffectiveConstraintOfTypeParameter(node) {
    return node.constraint ? node.constraint : isJSDocTemplateTag(node.parent) && node === node.parent.typeParameters[0] ? node.parent.constraint : void 0;
  }
  function isMemberName(node) {
    return node.kind === 79 /* Identifier */ || node.kind === 80 /* PrivateIdentifier */;
  }
  function isGetOrSetAccessorDeclaration(node) {
    return node.kind === 175 /* SetAccessor */ || node.kind === 174 /* GetAccessor */;
  }
  function isPropertyAccessChain(node) {
    return isPropertyAccessExpression(node) && !!(node.flags & 32 /* OptionalChain */);
  }
  function isElementAccessChain(node) {
    return isElementAccessExpression(node) && !!(node.flags & 32 /* OptionalChain */);
  }
  function isCallChain(node) {
    return isCallExpression(node) && !!(node.flags & 32 /* OptionalChain */);
  }
  function isOptionalChain(node) {
    const kind = node.kind;
    return !!(node.flags & 32 /* OptionalChain */) && (kind === 208 /* PropertyAccessExpression */ || kind === 209 /* ElementAccessExpression */ || kind === 210 /* CallExpression */ || kind === 232 /* NonNullExpression */);
  }
  function isOptionalChainRoot(node) {
    return isOptionalChain(node) && !isNonNullExpression(node) && !!node.questionDotToken;
  }
  function isExpressionOfOptionalChainRoot(node) {
    return isOptionalChainRoot(node.parent) && node.parent.expression === node;
  }
  function isOutermostOptionalChain(node) {
    return !isOptionalChain(node.parent) || isOptionalChainRoot(node.parent) || node !== node.parent.expression;
  }
  function isNullishCoalesce(node) {
    return node.kind === 223 /* BinaryExpression */ && node.operatorToken.kind === 60 /* QuestionQuestionToken */;
  }
  function isConstTypeReference(node) {
    return isTypeReferenceNode(node) && isIdentifier(node.typeName) && node.typeName.escapedText === "const" && !node.typeArguments;
  }
  function skipPartiallyEmittedExpressions(node) {
    return skipOuterExpressions(node, 8 /* PartiallyEmittedExpressions */);
  }
  function isNonNullChain(node) {
    return isNonNullExpression(node) && !!(node.flags & 32 /* OptionalChain */);
  }
  function isBreakOrContinueStatement(node) {
    return node.kind === 249 /* BreakStatement */ || node.kind === 248 /* ContinueStatement */;
  }
  function isNamedExportBindings(node) {
    return node.kind === 277 /* NamespaceExport */ || node.kind === 276 /* NamedExports */;
  }
  function isUnparsedTextLike(node) {
    switch (node.kind) {
      case 305 /* UnparsedText */:
      case 306 /* UnparsedInternalText */:
        return true;
      default:
        return false;
    }
  }
  function isUnparsedNode(node) {
    return isUnparsedTextLike(node) || node.kind === 303 /* UnparsedPrologue */ || node.kind === 307 /* UnparsedSyntheticReference */;
  }
  function isJSDocPropertyLikeTag(node) {
    return node.kind === 351 /* JSDocPropertyTag */ || node.kind === 344 /* JSDocParameterTag */;
  }
  function isNode(node) {
    return isNodeKind(node.kind);
  }
  function isNodeKind(kind) {
    return kind >= 163 /* FirstNode */;
  }
  function isTokenKind(kind) {
    return kind >= 0 /* FirstToken */ && kind <= 162 /* LastToken */;
  }
  function isToken(n) {
    return isTokenKind(n.kind);
  }
  function isNodeArray(array) {
    return hasProperty(array, "pos") && hasProperty(array, "end");
  }
  function isLiteralKind(kind) {
    return 8 /* FirstLiteralToken */ <= kind && kind <= 14 /* LastLiteralToken */;
  }
  function isLiteralExpression(node) {
    return isLiteralKind(node.kind);
  }
  function isLiteralExpressionOfObject(node) {
    switch (node.kind) {
      case 207 /* ObjectLiteralExpression */:
      case 206 /* ArrayLiteralExpression */:
      case 13 /* RegularExpressionLiteral */:
      case 215 /* FunctionExpression */:
      case 228 /* ClassExpression */:
        return true;
    }
    return false;
  }
  function isTemplateLiteralKind(kind) {
    return 14 /* FirstTemplateToken */ <= kind && kind <= 17 /* LastTemplateToken */;
  }
  function isTemplateLiteralToken(node) {
    return isTemplateLiteralKind(node.kind);
  }
  function isTemplateMiddleOrTemplateTail(node) {
    const kind = node.kind;
    return kind === 16 /* TemplateMiddle */ || kind === 17 /* TemplateTail */;
  }
  function isImportOrExportSpecifier(node) {
    return isImportSpecifier(node) || isExportSpecifier(node);
  }
  function isTypeOnlyImportDeclaration(node) {
    switch (node.kind) {
      case 273 /* ImportSpecifier */:
        return node.isTypeOnly || node.parent.parent.isTypeOnly;
      case 271 /* NamespaceImport */:
        return node.parent.isTypeOnly;
      case 270 /* ImportClause */:
      case 268 /* ImportEqualsDeclaration */:
        return node.isTypeOnly;
    }
    return false;
  }
  function isTypeOnlyExportDeclaration(node) {
    switch (node.kind) {
      case 278 /* ExportSpecifier */:
        return node.isTypeOnly || node.parent.parent.isTypeOnly;
      case 275 /* ExportDeclaration */:
        return node.isTypeOnly && !!node.moduleSpecifier && !node.exportClause;
      case 277 /* NamespaceExport */:
        return node.parent.isTypeOnly;
    }
    return false;
  }
  function isTypeOnlyImportOrExportDeclaration(node) {
    return isTypeOnlyImportDeclaration(node) || isTypeOnlyExportDeclaration(node);
  }
  function isAssertionKey(node) {
    return isStringLiteral(node) || isIdentifier(node);
  }
  function isStringTextContainingNode(node) {
    return node.kind === 10 /* StringLiteral */ || isTemplateLiteralKind(node.kind);
  }
  function isGeneratedIdentifier(node) {
    var _a2;
    return isIdentifier(node) && ((_a2 = node.emitNode) == null ? void 0 : _a2.autoGenerate) !== void 0;
  }
  function isGeneratedPrivateIdentifier(node) {
    var _a2;
    return isPrivateIdentifier(node) && ((_a2 = node.emitNode) == null ? void 0 : _a2.autoGenerate) !== void 0;
  }
  function isPrivateIdentifierClassElementDeclaration(node) {
    return (isPropertyDeclaration(node) || isMethodOrAccessor(node)) && isPrivateIdentifier(node.name);
  }
  function isPrivateIdentifierPropertyAccessExpression(node) {
    return isPropertyAccessExpression(node) && isPrivateIdentifier(node.name);
  }
  function isModifierKind(token) {
    switch (token) {
      case 126 /* AbstractKeyword */:
      case 127 /* AccessorKeyword */:
      case 132 /* AsyncKeyword */:
      case 85 /* ConstKeyword */:
      case 136 /* DeclareKeyword */:
      case 88 /* DefaultKeyword */:
      case 93 /* ExportKeyword */:
      case 101 /* InKeyword */:
      case 123 /* PublicKeyword */:
      case 121 /* PrivateKeyword */:
      case 122 /* ProtectedKeyword */:
      case 146 /* ReadonlyKeyword */:
      case 124 /* StaticKeyword */:
      case 145 /* OutKeyword */:
      case 161 /* OverrideKeyword */:
        return true;
    }
    return false;
  }
  function isParameterPropertyModifier(kind) {
    return !!(modifierToFlag(kind) & 16476 /* ParameterPropertyModifier */);
  }
  function isClassMemberModifier(idToken) {
    return isParameterPropertyModifier(idToken) || idToken === 124 /* StaticKeyword */ || idToken === 161 /* OverrideKeyword */ || idToken === 127 /* AccessorKeyword */;
  }
  function isModifier(node) {
    return isModifierKind(node.kind);
  }
  function isEntityName(node) {
    const kind = node.kind;
    return kind === 163 /* QualifiedName */ || kind === 79 /* Identifier */;
  }
  function isPropertyName(node) {
    const kind = node.kind;
    return kind === 79 /* Identifier */ || kind === 80 /* PrivateIdentifier */ || kind === 10 /* StringLiteral */ || kind === 8 /* NumericLiteral */ || kind === 164 /* ComputedPropertyName */;
  }
  function isBindingName(node) {
    const kind = node.kind;
    return kind === 79 /* Identifier */ || kind === 203 /* ObjectBindingPattern */ || kind === 204 /* ArrayBindingPattern */;
  }
  function isFunctionLike(node) {
    return !!node && isFunctionLikeKind(node.kind);
  }
  function isFunctionLikeOrClassStaticBlockDeclaration(node) {
    return !!node && (isFunctionLikeKind(node.kind) || isClassStaticBlockDeclaration(node));
  }
  function isFunctionLikeDeclaration(node) {
    return node && isFunctionLikeDeclarationKind(node.kind);
  }
  function isBooleanLiteral(node) {
    return node.kind === 110 /* TrueKeyword */ || node.kind === 95 /* FalseKeyword */;
  }
  function isFunctionLikeDeclarationKind(kind) {
    switch (kind) {
      case 259 /* FunctionDeclaration */:
      case 171 /* MethodDeclaration */:
      case 173 /* Constructor */:
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
      case 215 /* FunctionExpression */:
      case 216 /* ArrowFunction */:
        return true;
      default:
        return false;
    }
  }
  function isFunctionLikeKind(kind) {
    switch (kind) {
      case 170 /* MethodSignature */:
      case 176 /* CallSignature */:
      case 326 /* JSDocSignature */:
      case 177 /* ConstructSignature */:
      case 178 /* IndexSignature */:
      case 181 /* FunctionType */:
      case 320 /* JSDocFunctionType */:
      case 182 /* ConstructorType */:
        return true;
      default:
        return isFunctionLikeDeclarationKind(kind);
    }
  }
  function isFunctionOrModuleBlock(node) {
    return isSourceFile(node) || isModuleBlock(node) || isBlock(node) && isFunctionLike(node.parent);
  }
  function isClassElement(node) {
    const kind = node.kind;
    return kind === 173 /* Constructor */ || kind === 169 /* PropertyDeclaration */ || kind === 171 /* MethodDeclaration */ || kind === 174 /* GetAccessor */ || kind === 175 /* SetAccessor */ || kind === 178 /* IndexSignature */ || kind === 172 /* ClassStaticBlockDeclaration */ || kind === 237 /* SemicolonClassElement */;
  }
  function isClassLike(node) {
    return node && (node.kind === 260 /* ClassDeclaration */ || node.kind === 228 /* ClassExpression */);
  }
  function isAccessor(node) {
    return node && (node.kind === 174 /* GetAccessor */ || node.kind === 175 /* SetAccessor */);
  }
  function isAutoAccessorPropertyDeclaration(node) {
    return isPropertyDeclaration(node) && hasAccessorModifier(node);
  }
  function isMethodOrAccessor(node) {
    switch (node.kind) {
      case 171 /* MethodDeclaration */:
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
        return true;
      default:
        return false;
    }
  }
  function isNamedClassElement(node) {
    switch (node.kind) {
      case 171 /* MethodDeclaration */:
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
      case 169 /* PropertyDeclaration */:
        return true;
      default:
        return false;
    }
  }
  function isModifierLike(node) {
    return isModifier(node) || isDecorator(node);
  }
  function isTypeElement(node) {
    const kind = node.kind;
    return kind === 177 /* ConstructSignature */ || kind === 176 /* CallSignature */ || kind === 168 /* PropertySignature */ || kind === 170 /* MethodSignature */ || kind === 178 /* IndexSignature */ || kind === 174 /* GetAccessor */ || kind === 175 /* SetAccessor */;
  }
  function isClassOrTypeElement(node) {
    return isTypeElement(node) || isClassElement(node);
  }
  function isObjectLiteralElementLike(node) {
    const kind = node.kind;
    return kind === 299 /* PropertyAssignment */ || kind === 300 /* ShorthandPropertyAssignment */ || kind === 301 /* SpreadAssignment */ || kind === 171 /* MethodDeclaration */ || kind === 174 /* GetAccessor */ || kind === 175 /* SetAccessor */;
  }
  function isTypeNode(node) {
    return isTypeNodeKind(node.kind);
  }
  function isFunctionOrConstructorTypeNode(node) {
    switch (node.kind) {
      case 181 /* FunctionType */:
      case 182 /* ConstructorType */:
        return true;
    }
    return false;
  }
  function isBindingPattern(node) {
    if (node) {
      const kind = node.kind;
      return kind === 204 /* ArrayBindingPattern */ || kind === 203 /* ObjectBindingPattern */;
    }
    return false;
  }
  function isAssignmentPattern(node) {
    const kind = node.kind;
    return kind === 206 /* ArrayLiteralExpression */ || kind === 207 /* ObjectLiteralExpression */;
  }
  function isArrayBindingElement(node) {
    const kind = node.kind;
    return kind === 205 /* BindingElement */ || kind === 229 /* OmittedExpression */;
  }
  function isDeclarationBindingElement(bindingElement) {
    switch (bindingElement.kind) {
      case 257 /* VariableDeclaration */:
      case 166 /* Parameter */:
      case 205 /* BindingElement */:
        return true;
    }
    return false;
  }
  function isBindingOrAssignmentElement(node) {
    return isVariableDeclaration(node) || isParameter(node) || isObjectBindingOrAssignmentElement(node) || isArrayBindingOrAssignmentElement(node);
  }
  function isBindingOrAssignmentPattern(node) {
    return isObjectBindingOrAssignmentPattern(node) || isArrayBindingOrAssignmentPattern(node);
  }
  function isObjectBindingOrAssignmentPattern(node) {
    switch (node.kind) {
      case 203 /* ObjectBindingPattern */:
      case 207 /* ObjectLiteralExpression */:
        return true;
    }
    return false;
  }
  function isObjectBindingOrAssignmentElement(node) {
    switch (node.kind) {
      case 205 /* BindingElement */:
      case 299 /* PropertyAssignment */:
      case 300 /* ShorthandPropertyAssignment */:
      case 301 /* SpreadAssignment */:
        return true;
    }
    return false;
  }
  function isArrayBindingOrAssignmentPattern(node) {
    switch (node.kind) {
      case 204 /* ArrayBindingPattern */:
      case 206 /* ArrayLiteralExpression */:
        return true;
    }
    return false;
  }
  function isArrayBindingOrAssignmentElement(node) {
    switch (node.kind) {
      case 205 /* BindingElement */:
      case 229 /* OmittedExpression */:
      case 227 /* SpreadElement */:
      case 206 /* ArrayLiteralExpression */:
      case 207 /* ObjectLiteralExpression */:
      case 79 /* Identifier */:
      case 208 /* PropertyAccessExpression */:
      case 209 /* ElementAccessExpression */:
        return true;
    }
    return isAssignmentExpression(
      node,
      /*excludeCompoundAssignment*/
      true
    );
  }
  function isPropertyAccessOrQualifiedNameOrImportTypeNode(node) {
    const kind = node.kind;
    return kind === 208 /* PropertyAccessExpression */ || kind === 163 /* QualifiedName */ || kind === 202 /* ImportType */;
  }
  function isPropertyAccessOrQualifiedName(node) {
    const kind = node.kind;
    return kind === 208 /* PropertyAccessExpression */ || kind === 163 /* QualifiedName */;
  }
  function isCallLikeExpression(node) {
    switch (node.kind) {
      case 283 /* JsxOpeningElement */:
      case 282 /* JsxSelfClosingElement */:
      case 210 /* CallExpression */:
      case 211 /* NewExpression */:
      case 212 /* TaggedTemplateExpression */:
      case 167 /* Decorator */:
        return true;
      default:
        return false;
    }
  }
  function isCallOrNewExpression(node) {
    return node.kind === 210 /* CallExpression */ || node.kind === 211 /* NewExpression */;
  }
  function isTemplateLiteral(node) {
    const kind = node.kind;
    return kind === 225 /* TemplateExpression */ || kind === 14 /* NoSubstitutionTemplateLiteral */;
  }
  function isLeftHandSideExpression(node) {
    return isLeftHandSideExpressionKind(skipPartiallyEmittedExpressions(node).kind);
  }
  function isLeftHandSideExpressionKind(kind) {
    switch (kind) {
      case 208 /* PropertyAccessExpression */:
      case 209 /* ElementAccessExpression */:
      case 211 /* NewExpression */:
      case 210 /* CallExpression */:
      case 281 /* JsxElement */:
      case 282 /* JsxSelfClosingElement */:
      case 285 /* JsxFragment */:
      case 212 /* TaggedTemplateExpression */:
      case 206 /* ArrayLiteralExpression */:
      case 214 /* ParenthesizedExpression */:
      case 207 /* ObjectLiteralExpression */:
      case 228 /* ClassExpression */:
      case 215 /* FunctionExpression */:
      case 79 /* Identifier */:
      case 80 /* PrivateIdentifier */:
      case 13 /* RegularExpressionLiteral */:
      case 8 /* NumericLiteral */:
      case 9 /* BigIntLiteral */:
      case 10 /* StringLiteral */:
      case 14 /* NoSubstitutionTemplateLiteral */:
      case 225 /* TemplateExpression */:
      case 95 /* FalseKeyword */:
      case 104 /* NullKeyword */:
      case 108 /* ThisKeyword */:
      case 110 /* TrueKeyword */:
      case 106 /* SuperKeyword */:
      case 232 /* NonNullExpression */:
      case 230 /* ExpressionWithTypeArguments */:
      case 233 /* MetaProperty */:
      case 100 /* ImportKeyword */:
      case 279 /* MissingDeclaration */:
        return true;
      default:
        return false;
    }
  }
  function isUnaryExpression(node) {
    return isUnaryExpressionKind(skipPartiallyEmittedExpressions(node).kind);
  }
  function isUnaryExpressionKind(kind) {
    switch (kind) {
      case 221 /* PrefixUnaryExpression */:
      case 222 /* PostfixUnaryExpression */:
      case 217 /* DeleteExpression */:
      case 218 /* TypeOfExpression */:
      case 219 /* VoidExpression */:
      case 220 /* AwaitExpression */:
      case 213 /* TypeAssertionExpression */:
        return true;
      default:
        return isLeftHandSideExpressionKind(kind);
    }
  }
  function isUnaryExpressionWithWrite(expr) {
    switch (expr.kind) {
      case 222 /* PostfixUnaryExpression */:
        return true;
      case 221 /* PrefixUnaryExpression */:
        return expr.operator === 45 /* PlusPlusToken */ || expr.operator === 46 /* MinusMinusToken */;
      default:
        return false;
    }
  }
  function isLiteralTypeLiteral(node) {
    switch (node.kind) {
      case 104 /* NullKeyword */:
      case 110 /* TrueKeyword */:
      case 95 /* FalseKeyword */:
      case 221 /* PrefixUnaryExpression */:
        return true;
      default:
        return isLiteralExpression(node);
    }
  }
  function isExpression(node) {
    return isExpressionKind(skipPartiallyEmittedExpressions(node).kind);
  }
  function isExpressionKind(kind) {
    switch (kind) {
      case 224 /* ConditionalExpression */:
      case 226 /* YieldExpression */:
      case 216 /* ArrowFunction */:
      case 223 /* BinaryExpression */:
      case 227 /* SpreadElement */:
      case 231 /* AsExpression */:
      case 229 /* OmittedExpression */:
      case 357 /* CommaListExpression */:
      case 356 /* PartiallyEmittedExpression */:
      case 235 /* SatisfiesExpression */:
        return true;
      default:
        return isUnaryExpressionKind(kind);
    }
  }
  function isAssertionExpression(node) {
    const kind = node.kind;
    return kind === 213 /* TypeAssertionExpression */ || kind === 231 /* AsExpression */;
  }
  function isNotEmittedOrPartiallyEmittedNode(node) {
    return isNotEmittedStatement(node) || isPartiallyEmittedExpression(node);
  }
  function isIterationStatement(node, lookInLabeledStatements) {
    switch (node.kind) {
      case 245 /* ForStatement */:
      case 246 /* ForInStatement */:
      case 247 /* ForOfStatement */:
      case 243 /* DoStatement */:
      case 244 /* WhileStatement */:
        return true;
      case 253 /* LabeledStatement */:
        return lookInLabeledStatements && isIterationStatement(node.statement, lookInLabeledStatements);
    }
    return false;
  }
  function isScopeMarker(node) {
    return isExportAssignment(node) || isExportDeclaration(node);
  }
  function hasScopeMarker(statements) {
    return some(statements, isScopeMarker);
  }
  function needsScopeMarker(result) {
    return !isAnyImportOrReExport(result) && !isExportAssignment(result) && !hasSyntacticModifier(result, 1 /* Export */) && !isAmbientModule(result);
  }
  function isExternalModuleIndicator(result) {
    return isAnyImportOrReExport(result) || isExportAssignment(result) || hasSyntacticModifier(result, 1 /* Export */);
  }
  function isForInOrOfStatement(node) {
    return node.kind === 246 /* ForInStatement */ || node.kind === 247 /* ForOfStatement */;
  }
  function isConciseBody(node) {
    return isBlock(node) || isExpression(node);
  }
  function isFunctionBody(node) {
    return isBlock(node);
  }
  function isForInitializer(node) {
    return isVariableDeclarationList(node) || isExpression(node);
  }
  function isModuleBody(node) {
    const kind = node.kind;
    return kind === 265 /* ModuleBlock */ || kind === 264 /* ModuleDeclaration */ || kind === 79 /* Identifier */;
  }
  function isNamespaceBody(node) {
    const kind = node.kind;
    return kind === 265 /* ModuleBlock */ || kind === 264 /* ModuleDeclaration */;
  }
  function isJSDocNamespaceBody(node) {
    const kind = node.kind;
    return kind === 79 /* Identifier */ || kind === 264 /* ModuleDeclaration */;
  }
  function isNamedImportBindings(node) {
    const kind = node.kind;
    return kind === 272 /* NamedImports */ || kind === 271 /* NamespaceImport */;
  }
  function isModuleOrEnumDeclaration(node) {
    return node.kind === 264 /* ModuleDeclaration */ || node.kind === 263 /* EnumDeclaration */;
  }
  function canHaveSymbol(node) {
    switch (node.kind) {
      case 216 /* ArrowFunction */:
      case 223 /* BinaryExpression */:
      case 205 /* BindingElement */:
      case 210 /* CallExpression */:
      case 176 /* CallSignature */:
      case 260 /* ClassDeclaration */:
      case 228 /* ClassExpression */:
      case 172 /* ClassStaticBlockDeclaration */:
      case 173 /* Constructor */:
      case 182 /* ConstructorType */:
      case 177 /* ConstructSignature */:
      case 209 /* ElementAccessExpression */:
      case 263 /* EnumDeclaration */:
      case 302 /* EnumMember */:
      case 274 /* ExportAssignment */:
      case 275 /* ExportDeclaration */:
      case 278 /* ExportSpecifier */:
      case 259 /* FunctionDeclaration */:
      case 215 /* FunctionExpression */:
      case 181 /* FunctionType */:
      case 174 /* GetAccessor */:
      case 79 /* Identifier */:
      case 270 /* ImportClause */:
      case 268 /* ImportEqualsDeclaration */:
      case 273 /* ImportSpecifier */:
      case 178 /* IndexSignature */:
      case 261 /* InterfaceDeclaration */:
      case 341 /* JSDocCallbackTag */:
      case 343 /* JSDocEnumTag */:
      case 320 /* JSDocFunctionType */:
      case 344 /* JSDocParameterTag */:
      case 351 /* JSDocPropertyTag */:
      case 326 /* JSDocSignature */:
      case 349 /* JSDocTypedefTag */:
      case 325 /* JSDocTypeLiteral */:
      case 288 /* JsxAttribute */:
      case 289 /* JsxAttributes */:
      case 290 /* JsxSpreadAttribute */:
      case 197 /* MappedType */:
      case 171 /* MethodDeclaration */:
      case 170 /* MethodSignature */:
      case 264 /* ModuleDeclaration */:
      case 199 /* NamedTupleMember */:
      case 277 /* NamespaceExport */:
      case 267 /* NamespaceExportDeclaration */:
      case 271 /* NamespaceImport */:
      case 211 /* NewExpression */:
      case 14 /* NoSubstitutionTemplateLiteral */:
      case 8 /* NumericLiteral */:
      case 207 /* ObjectLiteralExpression */:
      case 166 /* Parameter */:
      case 208 /* PropertyAccessExpression */:
      case 299 /* PropertyAssignment */:
      case 169 /* PropertyDeclaration */:
      case 168 /* PropertySignature */:
      case 175 /* SetAccessor */:
      case 300 /* ShorthandPropertyAssignment */:
      case 308 /* SourceFile */:
      case 301 /* SpreadAssignment */:
      case 10 /* StringLiteral */:
      case 262 /* TypeAliasDeclaration */:
      case 184 /* TypeLiteral */:
      case 165 /* TypeParameter */:
      case 257 /* VariableDeclaration */:
        return true;
      default:
        return false;
    }
  }
  function canHaveLocals(node) {
    switch (node.kind) {
      case 216 /* ArrowFunction */:
      case 238 /* Block */:
      case 176 /* CallSignature */:
      case 266 /* CaseBlock */:
      case 295 /* CatchClause */:
      case 172 /* ClassStaticBlockDeclaration */:
      case 191 /* ConditionalType */:
      case 173 /* Constructor */:
      case 182 /* ConstructorType */:
      case 177 /* ConstructSignature */:
      case 245 /* ForStatement */:
      case 246 /* ForInStatement */:
      case 247 /* ForOfStatement */:
      case 259 /* FunctionDeclaration */:
      case 215 /* FunctionExpression */:
      case 181 /* FunctionType */:
      case 174 /* GetAccessor */:
      case 178 /* IndexSignature */:
      case 341 /* JSDocCallbackTag */:
      case 343 /* JSDocEnumTag */:
      case 320 /* JSDocFunctionType */:
      case 326 /* JSDocSignature */:
      case 349 /* JSDocTypedefTag */:
      case 197 /* MappedType */:
      case 171 /* MethodDeclaration */:
      case 170 /* MethodSignature */:
      case 264 /* ModuleDeclaration */:
      case 175 /* SetAccessor */:
      case 308 /* SourceFile */:
      case 262 /* TypeAliasDeclaration */:
        return true;
      default:
        return false;
    }
  }
  function isDeclarationKind(kind) {
    return kind === 216 /* ArrowFunction */ || kind === 205 /* BindingElement */ || kind === 260 /* ClassDeclaration */ || kind === 228 /* ClassExpression */ || kind === 172 /* ClassStaticBlockDeclaration */ || kind === 173 /* Constructor */ || kind === 263 /* EnumDeclaration */ || kind === 302 /* EnumMember */ || kind === 278 /* ExportSpecifier */ || kind === 259 /* FunctionDeclaration */ || kind === 215 /* FunctionExpression */ || kind === 174 /* GetAccessor */ || kind === 270 /* ImportClause */ || kind === 268 /* ImportEqualsDeclaration */ || kind === 273 /* ImportSpecifier */ || kind === 261 /* InterfaceDeclaration */ || kind === 288 /* JsxAttribute */ || kind === 171 /* MethodDeclaration */ || kind === 170 /* MethodSignature */ || kind === 264 /* ModuleDeclaration */ || kind === 267 /* NamespaceExportDeclaration */ || kind === 271 /* NamespaceImport */ || kind === 277 /* NamespaceExport */ || kind === 166 /* Parameter */ || kind === 299 /* PropertyAssignment */ || kind === 169 /* PropertyDeclaration */ || kind === 168 /* PropertySignature */ || kind === 175 /* SetAccessor */ || kind === 300 /* ShorthandPropertyAssignment */ || kind === 262 /* TypeAliasDeclaration */ || kind === 165 /* TypeParameter */ || kind === 257 /* VariableDeclaration */ || kind === 349 /* JSDocTypedefTag */ || kind === 341 /* JSDocCallbackTag */ || kind === 351 /* JSDocPropertyTag */;
  }
  function isDeclarationStatementKind(kind) {
    return kind === 259 /* FunctionDeclaration */ || kind === 279 /* MissingDeclaration */ || kind === 260 /* ClassDeclaration */ || kind === 261 /* InterfaceDeclaration */ || kind === 262 /* TypeAliasDeclaration */ || kind === 263 /* EnumDeclaration */ || kind === 264 /* ModuleDeclaration */ || kind === 269 /* ImportDeclaration */ || kind === 268 /* ImportEqualsDeclaration */ || kind === 275 /* ExportDeclaration */ || kind === 274 /* ExportAssignment */ || kind === 267 /* NamespaceExportDeclaration */;
  }
  function isStatementKindButNotDeclarationKind(kind) {
    return kind === 249 /* BreakStatement */ || kind === 248 /* ContinueStatement */ || kind === 256 /* DebuggerStatement */ || kind === 243 /* DoStatement */ || kind === 241 /* ExpressionStatement */ || kind === 239 /* EmptyStatement */ || kind === 246 /* ForInStatement */ || kind === 247 /* ForOfStatement */ || kind === 245 /* ForStatement */ || kind === 242 /* IfStatement */ || kind === 253 /* LabeledStatement */ || kind === 250 /* ReturnStatement */ || kind === 252 /* SwitchStatement */ || kind === 254 /* ThrowStatement */ || kind === 255 /* TryStatement */ || kind === 240 /* VariableStatement */ || kind === 244 /* WhileStatement */ || kind === 251 /* WithStatement */ || kind === 355 /* NotEmittedStatement */ || kind === 359 /* EndOfDeclarationMarker */ || kind === 358 /* MergeDeclarationMarker */;
  }
  function isDeclaration(node) {
    if (node.kind === 165 /* TypeParameter */) {
      return node.parent && node.parent.kind !== 348 /* JSDocTemplateTag */ || isInJSFile(node);
    }
    return isDeclarationKind(node.kind);
  }
  function isDeclarationStatement(node) {
    return isDeclarationStatementKind(node.kind);
  }
  function isStatementButNotDeclaration(node) {
    return isStatementKindButNotDeclarationKind(node.kind);
  }
  function isStatement(node) {
    const kind = node.kind;
    return isStatementKindButNotDeclarationKind(kind) || isDeclarationStatementKind(kind) || isBlockStatement(node);
  }
  function isBlockStatement(node) {
    if (node.kind !== 238 /* Block */)
      return false;
    if (node.parent !== void 0) {
      if (node.parent.kind === 255 /* TryStatement */ || node.parent.kind === 295 /* CatchClause */) {
        return false;
      }
    }
    return !isFunctionBlock(node);
  }
  function isStatementOrBlock(node) {
    const kind = node.kind;
    return isStatementKindButNotDeclarationKind(kind) || isDeclarationStatementKind(kind) || kind === 238 /* Block */;
  }
  function isModuleReference(node) {
    const kind = node.kind;
    return kind === 280 /* ExternalModuleReference */ || kind === 163 /* QualifiedName */ || kind === 79 /* Identifier */;
  }
  function isJsxTagNameExpression(node) {
    const kind = node.kind;
    return kind === 108 /* ThisKeyword */ || kind === 79 /* Identifier */ || kind === 208 /* PropertyAccessExpression */;
  }
  function isJsxChild(node) {
    const kind = node.kind;
    return kind === 281 /* JsxElement */ || kind === 291 /* JsxExpression */ || kind === 282 /* JsxSelfClosingElement */ || kind === 11 /* JsxText */ || kind === 285 /* JsxFragment */;
  }
  function isJsxAttributeLike(node) {
    const kind = node.kind;
    return kind === 288 /* JsxAttribute */ || kind === 290 /* JsxSpreadAttribute */;
  }
  function isStringLiteralOrJsxExpression(node) {
    const kind = node.kind;
    return kind === 10 /* StringLiteral */ || kind === 291 /* JsxExpression */;
  }
  function isJsxOpeningLikeElement(node) {
    const kind = node.kind;
    return kind === 283 /* JsxOpeningElement */ || kind === 282 /* JsxSelfClosingElement */;
  }
  function isCaseOrDefaultClause(node) {
    const kind = node.kind;
    return kind === 292 /* CaseClause */ || kind === 293 /* DefaultClause */;
  }
  function isJSDocNode(node) {
    return node.kind >= 312 /* FirstJSDocNode */ && node.kind <= 353 /* LastJSDocNode */;
  }
  function isJSDocCommentContainingNode(node) {
    return node.kind === 323 /* JSDoc */ || node.kind === 322 /* JSDocNamepathType */ || node.kind === 324 /* JSDocText */ || isJSDocLinkLike(node) || isJSDocTag(node) || isJSDocTypeLiteral(node) || isJSDocSignature(node);
  }
  function isJSDocTag(node) {
    return node.kind >= 330 /* FirstJSDocTagNode */ && node.kind <= 353 /* LastJSDocTagNode */;
  }
  function isSetAccessor(node) {
    return node.kind === 175 /* SetAccessor */;
  }
  function isGetAccessor(node) {
    return node.kind === 174 /* GetAccessor */;
  }
  function hasJSDocNodes(node) {
    if (!canHaveJSDoc(node))
      return false;
    const { jsDoc } = node;
    return !!jsDoc && jsDoc.length > 0;
  }
  function hasType(node) {
    return !!node.type;
  }
  function hasInitializer(node) {
    return !!node.initializer;
  }
  function hasOnlyExpressionInitializer(node) {
    switch (node.kind) {
      case 257 /* VariableDeclaration */:
      case 166 /* Parameter */:
      case 205 /* BindingElement */:
      case 169 /* PropertyDeclaration */:
      case 299 /* PropertyAssignment */:
      case 302 /* EnumMember */:
        return true;
      default:
        return false;
    }
  }
  function isObjectLiteralElement(node) {
    return node.kind === 288 /* JsxAttribute */ || node.kind === 290 /* JsxSpreadAttribute */ || isObjectLiteralElementLike(node);
  }
  function isTypeReferenceType(node) {
    return node.kind === 180 /* TypeReference */ || node.kind === 230 /* ExpressionWithTypeArguments */;
  }
  function guessIndentation(lines) {
    let indentation = MAX_SMI_X86;
    for (const line of lines) {
      if (!line.length) {
        continue;
      }
      let i = 0;
      for (; i < line.length && i < indentation; i++) {
        if (!isWhiteSpaceLike(line.charCodeAt(i))) {
          break;
        }
      }
      if (i < indentation) {
        indentation = i;
      }
      if (indentation === 0) {
        return 0;
      }
    }
    return indentation === MAX_SMI_X86 ? void 0 : indentation;
  }
  function isStringLiteralLike(node) {
    return node.kind === 10 /* StringLiteral */ || node.kind === 14 /* NoSubstitutionTemplateLiteral */;
  }
  function isJSDocLinkLike(node) {
    return node.kind === 327 /* JSDocLink */ || node.kind === 328 /* JSDocLinkCode */ || node.kind === 329 /* JSDocLinkPlain */;
  }
  function hasRestParameter(s) {
    const last2 = lastOrUndefined(s.parameters);
    return !!last2 && isRestParameter(last2);
  }
  function isRestParameter(node) {
    const type = isJSDocParameterTag(node) ? node.typeExpression && node.typeExpression.type : node.type;
    return node.dotDotDotToken !== void 0 || !!type && type.kind === 321 /* JSDocVariadicType */;
  }
  var unchangedTextChangeRange, supportedLocaleDirectories, MAX_SMI_X86;
  var init_utilitiesPublic = __esm({
    "src/compiler/utilitiesPublic.ts"() {
      "use strict";
      init_ts2();
      unchangedTextChangeRange = createTextChangeRange(createTextSpan(0, 0), 0);
      supportedLocaleDirectories = ["cs", "de", "es", "fr", "it", "ja", "ko", "pl", "pt-br", "ru", "tr", "zh-cn", "zh-tw"];
      MAX_SMI_X86 = 1073741823;
    }
  });

  // src/compiler/utilities.ts
  function getDeclarationOfKind(symbol, kind) {
    const declarations = symbol.declarations;
    if (declarations) {
      for (const declaration of declarations) {
        if (declaration.kind === kind) {
          return declaration;
        }
      }
    }
    return void 0;
  }
  function getDeclarationsOfKind(symbol, kind) {
    return filter(symbol.declarations || emptyArray, (d) => d.kind === kind);
  }
  function createSymbolTable(symbols) {
    const result = /* @__PURE__ */ new Map();
    if (symbols) {
      for (const symbol of symbols) {
        result.set(symbol.escapedName, symbol);
      }
    }
    return result;
  }
  function isTransientSymbol(symbol) {
    return (symbol.flags & 33554432 /* Transient */) !== 0;
  }
  function createSingleLineStringWriter() {
    var str = "";
    const writeText = (text) => str += text;
    return {
      getText: () => str,
      write: writeText,
      rawWrite: writeText,
      writeKeyword: writeText,
      writeOperator: writeText,
      writePunctuation: writeText,
      writeSpace: writeText,
      writeStringLiteral: writeText,
      writeLiteral: writeText,
      writeParameter: writeText,
      writeProperty: writeText,
      writeSymbol: (s, _) => writeText(s),
      writeTrailingSemicolon: writeText,
      writeComment: writeText,
      getTextPos: () => str.length,
      getLine: () => 0,
      getColumn: () => 0,
      getIndent: () => 0,
      isAtStartOfLine: () => false,
      hasTrailingComment: () => false,
      hasTrailingWhitespace: () => !!str.length && isWhiteSpaceLike(str.charCodeAt(str.length - 1)),
      // Completely ignore indentation for string writers.  And map newlines to
      // a single space.
      writeLine: () => str += " ",
      increaseIndent: noop,
      decreaseIndent: noop,
      clear: () => str = ""
    };
  }
  function changesAffectModuleResolution(oldOptions, newOptions) {
    return oldOptions.configFilePath !== newOptions.configFilePath || optionsHaveModuleResolutionChanges(oldOptions, newOptions);
  }
  function optionsHaveModuleResolutionChanges(oldOptions, newOptions) {
    return optionsHaveChanges(oldOptions, newOptions, moduleResolutionOptionDeclarations);
  }
  function changesAffectingProgramStructure(oldOptions, newOptions) {
    return optionsHaveChanges(oldOptions, newOptions, optionsAffectingProgramStructure);
  }
  function optionsHaveChanges(oldOptions, newOptions, optionDeclarations2) {
    return oldOptions !== newOptions && optionDeclarations2.some((o) => !isJsonEqual(getCompilerOptionValue(oldOptions, o), getCompilerOptionValue(newOptions, o)));
  }
  function forEachAncestor(node, callback) {
    while (true) {
      const res = callback(node);
      if (res === "quit")
        return void 0;
      if (res !== void 0)
        return res;
      if (isSourceFile(node))
        return void 0;
      node = node.parent;
    }
  }
  function forEachEntry(map2, callback) {
    const iterator = map2.entries();
    for (const [key, value] of iterator) {
      const result = callback(value, key);
      if (result) {
        return result;
      }
    }
    return void 0;
  }
  function forEachKey(map2, callback) {
    const iterator = map2.keys();
    for (const key of iterator) {
      const result = callback(key);
      if (result) {
        return result;
      }
    }
    return void 0;
  }
  function copyEntries(source, target) {
    source.forEach((value, key) => {
      target.set(key, value);
    });
  }
  function usingSingleLineStringWriter(action) {
    const oldString = stringWriter.getText();
    try {
      action(stringWriter);
      return stringWriter.getText();
    } finally {
      stringWriter.clear();
      stringWriter.writeKeyword(oldString);
    }
  }
  function getFullWidth(node) {
    return node.end - node.pos;
  }
  function getResolvedModule(sourceFile, moduleNameText, mode) {
    var _a2, _b;
    return (_b = (_a2 = sourceFile == null ? void 0 : sourceFile.resolvedModules) == null ? void 0 : _a2.get(moduleNameText, mode)) == null ? void 0 : _b.resolvedModule;
  }
  function setResolvedModule(sourceFile, moduleNameText, resolvedModule, mode) {
    if (!sourceFile.resolvedModules) {
      sourceFile.resolvedModules = createModeAwareCache();
    }
    sourceFile.resolvedModules.set(moduleNameText, mode, resolvedModule);
  }
  function setResolvedTypeReferenceDirective(sourceFile, typeReferenceDirectiveName, resolvedTypeReferenceDirective, mode) {
    if (!sourceFile.resolvedTypeReferenceDirectiveNames) {
      sourceFile.resolvedTypeReferenceDirectiveNames = createModeAwareCache();
    }
    sourceFile.resolvedTypeReferenceDirectiveNames.set(typeReferenceDirectiveName, mode, resolvedTypeReferenceDirective);
  }
  function getResolvedTypeReferenceDirective(sourceFile, typeReferenceDirectiveName, mode) {
    var _a2, _b;
    return (_b = (_a2 = sourceFile == null ? void 0 : sourceFile.resolvedTypeReferenceDirectiveNames) == null ? void 0 : _a2.get(typeReferenceDirectiveName, mode)) == null ? void 0 : _b.resolvedTypeReferenceDirective;
  }
  function projectReferenceIsEqualTo(oldRef, newRef) {
    return oldRef.path === newRef.path && !oldRef.prepend === !newRef.prepend && !oldRef.circular === !newRef.circular;
  }
  function moduleResolutionIsEqualTo(oldResolution, newResolution) {
    return oldResolution === newResolution || oldResolution.resolvedModule === newResolution.resolvedModule || !!oldResolution.resolvedModule && !!newResolution.resolvedModule && oldResolution.resolvedModule.isExternalLibraryImport === newResolution.resolvedModule.isExternalLibraryImport && oldResolution.resolvedModule.extension === newResolution.resolvedModule.extension && oldResolution.resolvedModule.resolvedFileName === newResolution.resolvedModule.resolvedFileName && oldResolution.resolvedModule.originalPath === newResolution.resolvedModule.originalPath && packageIdIsEqual(oldResolution.resolvedModule.packageId, newResolution.resolvedModule.packageId);
  }
  function packageIdIsEqual(a, b) {
    return a === b || !!a && !!b && a.name === b.name && a.subModuleName === b.subModuleName && a.version === b.version;
  }
  function packageIdToPackageName({ name, subModuleName }) {
    return subModuleName ? `${name}/${subModuleName}` : name;
  }
  function packageIdToString(packageId) {
    return `${packageIdToPackageName(packageId)}@${packageId.version}`;
  }
  function typeDirectiveIsEqualTo(oldResolution, newResolution) {
    return oldResolution === newResolution || oldResolution.resolvedTypeReferenceDirective === newResolution.resolvedTypeReferenceDirective || !!oldResolution.resolvedTypeReferenceDirective && !!newResolution.resolvedTypeReferenceDirective && oldResolution.resolvedTypeReferenceDirective.resolvedFileName === newResolution.resolvedTypeReferenceDirective.resolvedFileName && !!oldResolution.resolvedTypeReferenceDirective.primary === !!newResolution.resolvedTypeReferenceDirective.primary && oldResolution.resolvedTypeReferenceDirective.originalPath === newResolution.resolvedTypeReferenceDirective.originalPath;
  }
  function hasChangesInResolutions(names, newSourceFile, newResolutions, oldResolutions, comparer, nameAndModeGetter) {
    Debug.assert(names.length === newResolutions.length);
    for (let i = 0; i < names.length; i++) {
      const newResolution = newResolutions[i];
      const entry = names[i];
      const name = nameAndModeGetter.getName(entry);
      const mode = nameAndModeGetter.getMode(entry, newSourceFile);
      const oldResolution = oldResolutions && oldResolutions.get(name, mode);
      const changed = oldResolution ? !newResolution || !comparer(oldResolution, newResolution) : newResolution;
      if (changed) {
        return true;
      }
    }
    return false;
  }
  function containsParseError(node) {
    aggregateChildData(node);
    return (node.flags & 524288 /* ThisNodeOrAnySubNodesHasError */) !== 0;
  }
  function aggregateChildData(node) {
    if (!(node.flags & 1048576 /* HasAggregatedChildData */)) {
      const thisNodeOrAnySubNodesHasError = (node.flags & 131072 /* ThisNodeHasError */) !== 0 || forEachChild(node, containsParseError);
      if (thisNodeOrAnySubNodesHasError) {
        node.flags |= 524288 /* ThisNodeOrAnySubNodesHasError */;
      }
      node.flags |= 1048576 /* HasAggregatedChildData */;
    }
  }
  function getSourceFileOfNode(node) {
    while (node && node.kind !== 308 /* SourceFile */) {
      node = node.parent;
    }
    return node;
  }
  function getSourceFileOfModule(module2) {
    return getSourceFileOfNode(module2.valueDeclaration || getNonAugmentationDeclaration(module2));
  }
  function isPlainJsFile(file, checkJs) {
    return !!file && (file.scriptKind === 1 /* JS */ || file.scriptKind === 2 /* JSX */) && !file.checkJsDirective && checkJs === void 0;
  }
  function isStatementWithLocals(node) {
    switch (node.kind) {
      case 238 /* Block */:
      case 266 /* CaseBlock */:
      case 245 /* ForStatement */:
      case 246 /* ForInStatement */:
      case 247 /* ForOfStatement */:
        return true;
    }
    return false;
  }
  function getStartPositionOfLine(line, sourceFile) {
    Debug.assert(line >= 0);
    return getLineStarts(sourceFile)[line];
  }
  function nodePosToString(node) {
    const file = getSourceFileOfNode(node);
    const loc = getLineAndCharacterOfPosition(file, node.pos);
    return `${file.fileName}(${loc.line + 1},${loc.character + 1})`;
  }
  function getEndLinePosition(line, sourceFile) {
    Debug.assert(line >= 0);
    const lineStarts = getLineStarts(sourceFile);
    const lineIndex = line;
    const sourceText = sourceFile.text;
    if (lineIndex + 1 === lineStarts.length) {
      return sourceText.length - 1;
    } else {
      const start = lineStarts[lineIndex];
      let pos = lineStarts[lineIndex + 1] - 1;
      Debug.assert(isLineBreak(sourceText.charCodeAt(pos)));
      while (start <= pos && isLineBreak(sourceText.charCodeAt(pos))) {
        pos--;
      }
      return pos;
    }
  }
  function isFileLevelUniqueName(sourceFile, name, hasGlobalName) {
    return !(hasGlobalName && hasGlobalName(name)) && !sourceFile.identifiers.has(name);
  }
  function nodeIsMissing(node) {
    if (node === void 0) {
      return true;
    }
    return node.pos === node.end && node.pos >= 0 && node.kind !== 1 /* EndOfFileToken */;
  }
  function nodeIsPresent(node) {
    return !nodeIsMissing(node);
  }
  function isGrammarError(parent2, child) {
    if (isTypeParameterDeclaration(parent2))
      return child === parent2.expression;
    if (isClassStaticBlockDeclaration(parent2))
      return child === parent2.modifiers;
    if (isPropertySignature(parent2))
      return child === parent2.initializer;
    if (isPropertyDeclaration(parent2))
      return child === parent2.questionToken && isAutoAccessorPropertyDeclaration(parent2);
    if (isPropertyAssignment(parent2))
      return child === parent2.modifiers || child === parent2.questionToken || child === parent2.exclamationToken || isGrammarErrorElement(parent2.modifiers, child, isModifierLike);
    if (isShorthandPropertyAssignment(parent2))
      return child === parent2.equalsToken || child === parent2.modifiers || child === parent2.questionToken || child === parent2.exclamationToken || isGrammarErrorElement(parent2.modifiers, child, isModifierLike);
    if (isMethodDeclaration(parent2))
      return child === parent2.exclamationToken;
    if (isConstructorDeclaration(parent2))
      return child === parent2.typeParameters || child === parent2.type || isGrammarErrorElement(parent2.typeParameters, child, isTypeParameterDeclaration);
    if (isGetAccessorDeclaration(parent2))
      return child === parent2.typeParameters || isGrammarErrorElement(parent2.typeParameters, child, isTypeParameterDeclaration);
    if (isSetAccessorDeclaration(parent2))
      return child === parent2.typeParameters || child === parent2.type || isGrammarErrorElement(parent2.typeParameters, child, isTypeParameterDeclaration);
    if (isNamespaceExportDeclaration(parent2))
      return child === parent2.modifiers || isGrammarErrorElement(parent2.modifiers, child, isModifierLike);
    return false;
  }
  function isGrammarErrorElement(nodeArray, child, isElement) {
    if (!nodeArray || isArray(child) || !isElement(child))
      return false;
    return contains(nodeArray, child);
  }
  function insertStatementsAfterPrologue(to, from, isPrologueDirective2) {
    if (from === void 0 || from.length === 0)
      return to;
    let statementIndex = 0;
    for (; statementIndex < to.length; ++statementIndex) {
      if (!isPrologueDirective2(to[statementIndex])) {
        break;
      }
    }
    to.splice(statementIndex, 0, ...from);
    return to;
  }
  function insertStatementAfterPrologue(to, statement, isPrologueDirective2) {
    if (statement === void 0)
      return to;
    let statementIndex = 0;
    for (; statementIndex < to.length; ++statementIndex) {
      if (!isPrologueDirective2(to[statementIndex])) {
        break;
      }
    }
    to.splice(statementIndex, 0, statement);
    return to;
  }
  function isAnyPrologueDirective(node) {
    return isPrologueDirective(node) || !!(getEmitFlags(node) & 2097152 /* CustomPrologue */);
  }
  function insertStatementsAfterStandardPrologue(to, from) {
    return insertStatementsAfterPrologue(to, from, isPrologueDirective);
  }
  function insertStatementsAfterCustomPrologue(to, from) {
    return insertStatementsAfterPrologue(to, from, isAnyPrologueDirective);
  }
  function insertStatementAfterStandardPrologue(to, statement) {
    return insertStatementAfterPrologue(to, statement, isPrologueDirective);
  }
  function insertStatementAfterCustomPrologue(to, statement) {
    return insertStatementAfterPrologue(to, statement, isAnyPrologueDirective);
  }
  function isRecognizedTripleSlashComment(text, commentPos, commentEnd) {
    if (text.charCodeAt(commentPos + 1) === 47 /* slash */ && commentPos + 2 < commentEnd && text.charCodeAt(commentPos + 2) === 47 /* slash */) {
      const textSubStr = text.substring(commentPos, commentEnd);
      return fullTripleSlashReferencePathRegEx.test(textSubStr) || fullTripleSlashAMDReferencePathRegEx.test(textSubStr) || fullTripleSlashReferenceTypeReferenceDirectiveRegEx.test(textSubStr) || defaultLibReferenceRegEx.test(textSubStr) ? true : false;
    }
    return false;
  }
  function isPinnedComment(text, start) {
    return text.charCodeAt(start + 1) === 42 /* asterisk */ && text.charCodeAt(start + 2) === 33 /* exclamation */;
  }
  function createCommentDirectivesMap(sourceFile, commentDirectives) {
    const directivesByLine = new Map(
      commentDirectives.map((commentDirective) => [
        `${getLineAndCharacterOfPosition(sourceFile, commentDirective.range.end).line}`,
        commentDirective
      ])
    );
    const usedLines = /* @__PURE__ */ new Map();
    return { getUnusedExpectations, markUsed };
    function getUnusedExpectations() {
      return arrayFrom(directivesByLine.entries()).filter(([line, directive]) => directive.type === 0 /* ExpectError */ && !usedLines.get(line)).map(([_, directive]) => directive);
    }
    function markUsed(line) {
      if (!directivesByLine.has(`${line}`)) {
        return false;
      }
      usedLines.set(`${line}`, true);
      return true;
    }
  }
  function getTokenPosOfNode(node, sourceFile, includeJsDoc) {
    if (nodeIsMissing(node)) {
      return node.pos;
    }
    if (isJSDocNode(node) || node.kind === 11 /* JsxText */) {
      return skipTrivia(
        (sourceFile || getSourceFileOfNode(node)).text,
        node.pos,
        /*stopAfterLineBreak*/
        false,
        /*stopAtComments*/
        true
      );
    }
    if (includeJsDoc && hasJSDocNodes(node)) {
      return getTokenPosOfNode(node.jsDoc[0], sourceFile);
    }
    if (node.kind === 354 /* SyntaxList */ && node._children.length > 0) {
      return getTokenPosOfNode(node._children[0], sourceFile, includeJsDoc);
    }
    return skipTrivia(
      (sourceFile || getSourceFileOfNode(node)).text,
      node.pos,
      /*stopAfterLineBreak*/
      false,
      /*stopAtComments*/
      false,
      isInJSDoc(node)
    );
  }
  function getNonDecoratorTokenPosOfNode(node, sourceFile) {
    const lastDecorator = !nodeIsMissing(node) && canHaveModifiers(node) ? findLast(node.modifiers, isDecorator) : void 0;
    if (!lastDecorator) {
      return getTokenPosOfNode(node, sourceFile);
    }
    return skipTrivia((sourceFile || getSourceFileOfNode(node)).text, lastDecorator.end);
  }
  function getSourceTextOfNodeFromSourceFile(sourceFile, node, includeTrivia = false) {
    return getTextOfNodeFromSourceText(sourceFile.text, node, includeTrivia);
  }
  function isJSDocTypeExpressionOrChild(node) {
    return !!findAncestor(node, isJSDocTypeExpression);
  }
  function isExportNamespaceAsDefaultDeclaration(node) {
    return !!(isExportDeclaration(node) && node.exportClause && isNamespaceExport(node.exportClause) && node.exportClause.name.escapedText === "default");
  }
  function getTextOfNodeFromSourceText(sourceText, node, includeTrivia = false) {
    if (nodeIsMissing(node)) {
      return "";
    }
    let text = sourceText.substring(includeTrivia ? node.pos : skipTrivia(sourceText, node.pos), node.end);
    if (isJSDocTypeExpressionOrChild(node)) {
      text = text.split(/\r\n|\n|\r/).map((line) => trimStringStart(line.replace(/^\s*\*/, ""))).join("\n");
    }
    return text;
  }
  function getTextOfNode(node, includeTrivia = false) {
    return getSourceTextOfNodeFromSourceFile(getSourceFileOfNode(node), node, includeTrivia);
  }
  function getPos(range) {
    return range.pos;
  }
  function indexOfNode(nodeArray, node) {
    return binarySearch(nodeArray, node, getPos, compareValues);
  }
  function getEmitFlags(node) {
    const emitNode = node.emitNode;
    return emitNode && emitNode.flags || 0;
  }
  function getInternalEmitFlags(node) {
    const emitNode = node.emitNode;
    return emitNode && emitNode.internalFlags || 0;
  }
  function getScriptTargetFeatures() {
    return new Map(Object.entries({
      Array: new Map(Object.entries({
        es2015: [
          "find",
          "findIndex",
          "fill",
          "copyWithin",
          "entries",
          "keys",
          "values"
        ],
        es2016: [
          "includes"
        ],
        es2019: [
          "flat",
          "flatMap"
        ],
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      Iterator: new Map(Object.entries({
        es2015: emptyArray
      })),
      AsyncIterator: new Map(Object.entries({
        es2015: emptyArray
      })),
      Atomics: new Map(Object.entries({
        es2017: emptyArray
      })),
      SharedArrayBuffer: new Map(Object.entries({
        es2017: emptyArray
      })),
      AsyncIterable: new Map(Object.entries({
        es2018: emptyArray
      })),
      AsyncIterableIterator: new Map(Object.entries({
        es2018: emptyArray
      })),
      AsyncGenerator: new Map(Object.entries({
        es2018: emptyArray
      })),
      AsyncGeneratorFunction: new Map(Object.entries({
        es2018: emptyArray
      })),
      RegExp: new Map(Object.entries({
        es2015: [
          "flags",
          "sticky",
          "unicode"
        ],
        es2018: [
          "dotAll"
        ]
      })),
      Reflect: new Map(Object.entries({
        es2015: [
          "apply",
          "construct",
          "defineProperty",
          "deleteProperty",
          "get",
          " getOwnPropertyDescriptor",
          "getPrototypeOf",
          "has",
          "isExtensible",
          "ownKeys",
          "preventExtensions",
          "set",
          "setPrototypeOf"
        ]
      })),
      ArrayConstructor: new Map(Object.entries({
        es2015: [
          "from",
          "of"
        ]
      })),
      ObjectConstructor: new Map(Object.entries({
        es2015: [
          "assign",
          "getOwnPropertySymbols",
          "keys",
          "is",
          "setPrototypeOf"
        ],
        es2017: [
          "values",
          "entries",
          "getOwnPropertyDescriptors"
        ],
        es2019: [
          "fromEntries"
        ],
        es2022: [
          "hasOwn"
        ]
      })),
      NumberConstructor: new Map(Object.entries({
        es2015: [
          "isFinite",
          "isInteger",
          "isNaN",
          "isSafeInteger",
          "parseFloat",
          "parseInt"
        ]
      })),
      Math: new Map(Object.entries({
        es2015: [
          "clz32",
          "imul",
          "sign",
          "log10",
          "log2",
          "log1p",
          "expm1",
          "cosh",
          "sinh",
          "tanh",
          "acosh",
          "asinh",
          "atanh",
          "hypot",
          "trunc",
          "fround",
          "cbrt"
        ]
      })),
      Map: new Map(Object.entries({
        es2015: [
          "entries",
          "keys",
          "values"
        ]
      })),
      Set: new Map(Object.entries({
        es2015: [
          "entries",
          "keys",
          "values"
        ]
      })),
      PromiseConstructor: new Map(Object.entries({
        es2015: [
          "all",
          "race",
          "reject",
          "resolve"
        ],
        es2020: [
          "allSettled"
        ],
        es2021: [
          "any"
        ]
      })),
      Symbol: new Map(Object.entries({
        es2015: [
          "for",
          "keyFor"
        ],
        es2019: [
          "description"
        ]
      })),
      WeakMap: new Map(Object.entries({
        es2015: [
          "entries",
          "keys",
          "values"
        ]
      })),
      WeakSet: new Map(Object.entries({
        es2015: [
          "entries",
          "keys",
          "values"
        ]
      })),
      String: new Map(Object.entries({
        es2015: [
          "codePointAt",
          "includes",
          "endsWith",
          "normalize",
          "repeat",
          "startsWith",
          "anchor",
          "big",
          "blink",
          "bold",
          "fixed",
          "fontcolor",
          "fontsize",
          "italics",
          "link",
          "small",
          "strike",
          "sub",
          "sup"
        ],
        es2017: [
          "padStart",
          "padEnd"
        ],
        es2019: [
          "trimStart",
          "trimEnd",
          "trimLeft",
          "trimRight"
        ],
        es2020: [
          "matchAll"
        ],
        es2021: [
          "replaceAll"
        ],
        es2022: [
          "at"
        ]
      })),
      StringConstructor: new Map(Object.entries({
        es2015: [
          "fromCodePoint",
          "raw"
        ]
      })),
      DateTimeFormat: new Map(Object.entries({
        es2017: [
          "formatToParts"
        ]
      })),
      Promise: new Map(Object.entries({
        es2015: emptyArray,
        es2018: [
          "finally"
        ]
      })),
      RegExpMatchArray: new Map(Object.entries({
        es2018: [
          "groups"
        ]
      })),
      RegExpExecArray: new Map(Object.entries({
        es2018: [
          "groups"
        ]
      })),
      Intl: new Map(Object.entries({
        es2018: [
          "PluralRules"
        ]
      })),
      NumberFormat: new Map(Object.entries({
        es2018: [
          "formatToParts"
        ]
      })),
      SymbolConstructor: new Map(Object.entries({
        es2020: [
          "matchAll"
        ]
      })),
      DataView: new Map(Object.entries({
        es2020: [
          "setBigInt64",
          "setBigUint64",
          "getBigInt64",
          "getBigUint64"
        ]
      })),
      BigInt: new Map(Object.entries({
        es2020: emptyArray
      })),
      RelativeTimeFormat: new Map(Object.entries({
        es2020: [
          "format",
          "formatToParts",
          "resolvedOptions"
        ]
      })),
      Int8Array: new Map(Object.entries({
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      Uint8Array: new Map(Object.entries({
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      Uint8ClampedArray: new Map(Object.entries({
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      Int16Array: new Map(Object.entries({
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      Uint16Array: new Map(Object.entries({
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      Int32Array: new Map(Object.entries({
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      Uint32Array: new Map(Object.entries({
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      Float32Array: new Map(Object.entries({
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      Float64Array: new Map(Object.entries({
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      BigInt64Array: new Map(Object.entries({
        es2020: emptyArray,
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      BigUint64Array: new Map(Object.entries({
        es2020: emptyArray,
        es2022: [
          "at"
        ],
        es2023: [
          "findLastIndex",
          "findLast"
        ]
      })),
      Error: new Map(Object.entries({
        es2022: [
          "cause"
        ]
      }))
    }));
  }
  function getLiteralText(node, sourceFile, flags) {
    var _a2;
    if (sourceFile && canUseOriginalText(node, flags)) {
      return getSourceTextOfNodeFromSourceFile(sourceFile, node);
    }
    switch (node.kind) {
      case 10 /* StringLiteral */: {
        const escapeText = flags & 2 /* JsxAttributeEscape */ ? escapeJsxAttributeString : flags & 1 /* NeverAsciiEscape */ || getEmitFlags(node) & 33554432 /* NoAsciiEscaping */ ? escapeString : escapeNonAsciiString;
        if (node.singleQuote) {
          return "'" + escapeText(node.text, 39 /* singleQuote */) + "'";
        } else {
          return '"' + escapeText(node.text, 34 /* doubleQuote */) + '"';
        }
      }
      case 14 /* NoSubstitutionTemplateLiteral */:
      case 15 /* TemplateHead */:
      case 16 /* TemplateMiddle */:
      case 17 /* TemplateTail */: {
        const escapeText = flags & 1 /* NeverAsciiEscape */ || getEmitFlags(node) & 33554432 /* NoAsciiEscaping */ ? escapeString : escapeNonAsciiString;
        const rawText = (_a2 = node.rawText) != null ? _a2 : escapeTemplateSubstitution(escapeText(node.text, 96 /* backtick */));
        switch (node.kind) {
          case 14 /* NoSubstitutionTemplateLiteral */:
            return "`" + rawText + "`";
          case 15 /* TemplateHead */:
            return "`" + rawText + "${";
          case 16 /* TemplateMiddle */:
            return "}" + rawText + "${";
          case 17 /* TemplateTail */:
            return "}" + rawText + "`";
        }
        break;
      }
      case 8 /* NumericLiteral */:
      case 9 /* BigIntLiteral */:
        return node.text;
      case 13 /* RegularExpressionLiteral */:
        if (flags & 4 /* TerminateUnterminatedLiterals */ && node.isUnterminated) {
          return node.text + (node.text.charCodeAt(node.text.length - 1) === 92 /* backslash */ ? " /" : "/");
        }
        return node.text;
    }
    return Debug.fail(`Literal kind '${node.kind}' not accounted for.`);
  }
  function canUseOriginalText(node, flags) {
    if (nodeIsSynthesized(node) || !node.parent || flags & 4 /* TerminateUnterminatedLiterals */ && node.isUnterminated) {
      return false;
    }
    if (isNumericLiteral(node) && node.numericLiteralFlags & 512 /* ContainsSeparator */) {
      return !!(flags & 8 /* AllowNumericSeparator */);
    }
    return !isBigIntLiteral(node);
  }
  function getTextOfConstantValue(value) {
    return isString(value) ? '"' + escapeNonAsciiString(value) + '"' : "" + value;
  }
  function makeIdentifierFromModuleName(moduleName) {
    return getBaseFileName(moduleName).replace(/^(\d)/, "_$1").replace(/\W/g, "_");
  }
  function isBlockOrCatchScoped(declaration) {
    return (getCombinedNodeFlags(declaration) & 3 /* BlockScoped */) !== 0 || isCatchClauseVariableDeclarationOrBindingElement(declaration);
  }
  function isCatchClauseVariableDeclarationOrBindingElement(declaration) {
    const node = getRootDeclaration(declaration);
    return node.kind === 257 /* VariableDeclaration */ && node.parent.kind === 295 /* CatchClause */;
  }
  function isAmbientModule(node) {
    return isModuleDeclaration(node) && (node.name.kind === 10 /* StringLiteral */ || isGlobalScopeAugmentation(node));
  }
  function isModuleWithStringLiteralName(node) {
    return isModuleDeclaration(node) && node.name.kind === 10 /* StringLiteral */;
  }
  function isNonGlobalAmbientModule(node) {
    return isModuleDeclaration(node) && isStringLiteral(node.name);
  }
  function isEffectiveModuleDeclaration(node) {
    return isModuleDeclaration(node) || isIdentifier(node);
  }
  function isShorthandAmbientModuleSymbol(moduleSymbol) {
    return isShorthandAmbientModule(moduleSymbol.valueDeclaration);
  }
  function isShorthandAmbientModule(node) {
    return !!node && node.kind === 264 /* ModuleDeclaration */ && !node.body;
  }
  function isBlockScopedContainerTopLevel(node) {
    return node.kind === 308 /* SourceFile */ || node.kind === 264 /* ModuleDeclaration */ || isFunctionLikeOrClassStaticBlockDeclaration(node);
  }
  function isGlobalScopeAugmentation(module2) {
    return !!(module2.flags & 1024 /* GlobalAugmentation */);
  }
  function isExternalModuleAugmentation(node) {
    return isAmbientModule(node) && isModuleAugmentationExternal(node);
  }
  function isModuleAugmentationExternal(node) {
    switch (node.parent.kind) {
      case 308 /* SourceFile */:
        return isExternalModule(node.parent);
      case 265 /* ModuleBlock */:
        return isAmbientModule(node.parent.parent) && isSourceFile(node.parent.parent.parent) && !isExternalModule(node.parent.parent.parent);
    }
    return false;
  }
  function getNonAugmentationDeclaration(symbol) {
    var _a2;
    return (_a2 = symbol.declarations) == null ? void 0 : _a2.find((d) => !isExternalModuleAugmentation(d) && !(isModuleDeclaration(d) && isGlobalScopeAugmentation(d)));
  }
  function isCommonJSContainingModuleKind(kind) {
    return kind === 1 /* CommonJS */ || kind === 100 /* Node16 */ || kind === 199 /* NodeNext */;
  }
  function isEffectiveExternalModule(node, compilerOptions) {
    return isExternalModule(node) || getIsolatedModules(compilerOptions) || isCommonJSContainingModuleKind(getEmitModuleKind(compilerOptions)) && !!node.commonJsModuleIndicator;
  }
  function isEffectiveStrictModeSourceFile(node, compilerOptions) {
    switch (node.scriptKind) {
      case 1 /* JS */:
      case 3 /* TS */:
      case 2 /* JSX */:
      case 4 /* TSX */:
        break;
      default:
        return false;
    }
    if (node.isDeclarationFile) {
      return false;
    }
    if (getStrictOptionValue(compilerOptions, "alwaysStrict")) {
      return true;
    }
    if (startsWithUseStrict(node.statements)) {
      return true;
    }
    if (isExternalModule(node) || getIsolatedModules(compilerOptions)) {
      if (getEmitModuleKind(compilerOptions) >= 5 /* ES2015 */) {
        return true;
      }
      return !compilerOptions.noImplicitUseStrict;
    }
    return false;
  }
  function isAmbientPropertyDeclaration(node) {
    return !!(node.flags & 16777216 /* Ambient */) || hasSyntacticModifier(node, 2 /* Ambient */);
  }
  function isBlockScope(node, parentNode) {
    switch (node.kind) {
      case 308 /* SourceFile */:
      case 266 /* CaseBlock */:
      case 295 /* CatchClause */:
      case 264 /* ModuleDeclaration */:
      case 245 /* ForStatement */:
      case 246 /* ForInStatement */:
      case 247 /* ForOfStatement */:
      case 173 /* Constructor */:
      case 171 /* MethodDeclaration */:
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
      case 259 /* FunctionDeclaration */:
      case 215 /* FunctionExpression */:
      case 216 /* ArrowFunction */:
      case 169 /* PropertyDeclaration */:
      case 172 /* ClassStaticBlockDeclaration */:
        return true;
      case 238 /* Block */:
        return !isFunctionLikeOrClassStaticBlockDeclaration(parentNode);
    }
    return false;
  }
  function isDeclarationWithTypeParameters(node) {
    Debug.type(node);
    switch (node.kind) {
      case 341 /* JSDocCallbackTag */:
      case 349 /* JSDocTypedefTag */:
      case 326 /* JSDocSignature */:
        return true;
      default:
        assertType(node);
        return isDeclarationWithTypeParameterChildren(node);
    }
  }
  function isDeclarationWithTypeParameterChildren(node) {
    Debug.type(node);
    switch (node.kind) {
      case 176 /* CallSignature */:
      case 177 /* ConstructSignature */:
      case 170 /* MethodSignature */:
      case 178 /* IndexSignature */:
      case 181 /* FunctionType */:
      case 182 /* ConstructorType */:
      case 320 /* JSDocFunctionType */:
      case 260 /* ClassDeclaration */:
      case 228 /* ClassExpression */:
      case 261 /* InterfaceDeclaration */:
      case 262 /* TypeAliasDeclaration */:
      case 348 /* JSDocTemplateTag */:
      case 259 /* FunctionDeclaration */:
      case 171 /* MethodDeclaration */:
      case 173 /* Constructor */:
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
      case 215 /* FunctionExpression */:
      case 216 /* ArrowFunction */:
        return true;
      default:
        assertType(node);
        return false;
    }
  }
  function isAnyImportSyntax(node) {
    switch (node.kind) {
      case 269 /* ImportDeclaration */:
      case 268 /* ImportEqualsDeclaration */:
        return true;
      default:
        return false;
    }
  }
  function isAnyImportOrBareOrAccessedRequire(node) {
    return isAnyImportSyntax(node) || isVariableDeclarationInitializedToBareOrAccessedRequire(node);
  }
  function isLateVisibilityPaintedStatement(node) {
    switch (node.kind) {
      case 269 /* ImportDeclaration */:
      case 268 /* ImportEqualsDeclaration */:
      case 240 /* VariableStatement */:
      case 260 /* ClassDeclaration */:
      case 259 /* FunctionDeclaration */:
      case 264 /* ModuleDeclaration */:
      case 262 /* TypeAliasDeclaration */:
      case 261 /* InterfaceDeclaration */:
      case 263 /* EnumDeclaration */:
        return true;
      default:
        return false;
    }
  }
  function hasPossibleExternalModuleReference(node) {
    return isAnyImportOrReExport(node) || isModuleDeclaration(node) || isImportTypeNode(node) || isImportCall(node);
  }
  function isAnyImportOrReExport(node) {
    return isAnyImportSyntax(node) || isExportDeclaration(node);
  }
  function getEnclosingBlockScopeContainer(node) {
    return findAncestor(node.parent, (current) => isBlockScope(current, current.parent));
  }
  function forEachEnclosingBlockScopeContainer(node, cb) {
    let container = getEnclosingBlockScopeContainer(node);
    while (container) {
      cb(container);
      container = getEnclosingBlockScopeContainer(container);
    }
  }
  function declarationNameToString(name) {
    return !name || getFullWidth(name) === 0 ? "(Missing)" : getTextOfNode(name);
  }
  function getNameFromIndexInfo(info) {
    return info.declaration ? declarationNameToString(info.declaration.parameters[0].name) : void 0;
  }
  function isComputedNonLiteralName(name) {
    return name.kind === 164 /* ComputedPropertyName */ && !isStringOrNumericLiteralLike(name.expression);
  }
  function tryGetTextOfPropertyName(name) {
    var _a2;
    switch (name.kind) {
      case 79 /* Identifier */:
      case 80 /* PrivateIdentifier */:
        return ((_a2 = name.emitNode) == null ? void 0 : _a2.autoGenerate) ? void 0 : name.escapedText;
      case 10 /* StringLiteral */:
      case 8 /* NumericLiteral */:
      case 14 /* NoSubstitutionTemplateLiteral */:
        return escapeLeadingUnderscores(name.text);
      case 164 /* ComputedPropertyName */:
        if (isStringOrNumericLiteralLike(name.expression))
          return escapeLeadingUnderscores(name.expression.text);
        return void 0;
      default:
        return Debug.assertNever(name);
    }
  }
  function getTextOfPropertyName(name) {
    return Debug.checkDefined(tryGetTextOfPropertyName(name));
  }
  function entityNameToString(name) {
    switch (name.kind) {
      case 108 /* ThisKeyword */:
        return "this";
      case 80 /* PrivateIdentifier */:
      case 79 /* Identifier */:
        return getFullWidth(name) === 0 ? idText(name) : getTextOfNode(name);
      case 163 /* QualifiedName */:
        return entityNameToString(name.left) + "." + entityNameToString(name.right);
      case 208 /* PropertyAccessExpression */:
        if (isIdentifier(name.name) || isPrivateIdentifier(name.name)) {
          return entityNameToString(name.expression) + "." + entityNameToString(name.name);
        } else {
          return Debug.assertNever(name.name);
        }
      case 314 /* JSDocMemberName */:
        return entityNameToString(name.left) + entityNameToString(name.right);
      default:
        return Debug.assertNever(name);
    }
  }
  function createDiagnosticForNode(node, message, arg0, arg1, arg2, arg3) {
    const sourceFile = getSourceFileOfNode(node);
    return createDiagnosticForNodeInSourceFile(sourceFile, node, message, arg0, arg1, arg2, arg3);
  }
  function createDiagnosticForNodeArray(sourceFile, nodes, message, arg0, arg1, arg2, arg3) {
    const start = skipTrivia(sourceFile.text, nodes.pos);
    return createFileDiagnostic(sourceFile, start, nodes.end - start, message, arg0, arg1, arg2, arg3);
  }
  function createDiagnosticForNodeInSourceFile(sourceFile, node, message, arg0, arg1, arg2, arg3) {
    const span = getErrorSpanForNode(sourceFile, node);
    return createFileDiagnostic(sourceFile, span.start, span.length, message, arg0, arg1, arg2, arg3);
  }
  function createDiagnosticForNodeFromMessageChain(sourceFile, node, messageChain, relatedInformation) {
    const span = getErrorSpanForNode(sourceFile, node);
    return createFileDiagnosticFromMessageChain(sourceFile, span.start, span.length, messageChain, relatedInformation);
  }
  function createDiagnosticForNodeArrayFromMessageChain(sourceFile, nodes, messageChain, relatedInformation) {
    const start = skipTrivia(sourceFile.text, nodes.pos);
    return createFileDiagnosticFromMessageChain(sourceFile, start, nodes.end - start, messageChain, relatedInformation);
  }
  function assertDiagnosticLocation(file, start, length2) {
    Debug.assertGreaterThanOrEqual(start, 0);
    Debug.assertGreaterThanOrEqual(length2, 0);
    if (file) {
      Debug.assertLessThanOrEqual(start, file.text.length);
      Debug.assertLessThanOrEqual(start + length2, file.text.length);
    }
  }
  function createFileDiagnosticFromMessageChain(file, start, length2, messageChain, relatedInformation) {
    assertDiagnosticLocation(file, start, length2);
    return {
      file,
      start,
      length: length2,
      code: messageChain.code,
      category: messageChain.category,
      messageText: messageChain.next ? messageChain : messageChain.messageText,
      relatedInformation
    };
  }
  function createDiagnosticForFileFromMessageChain(sourceFile, messageChain, relatedInformation) {
    return {
      file: sourceFile,
      start: 0,
      length: 0,
      code: messageChain.code,
      category: messageChain.category,
      messageText: messageChain.next ? messageChain : messageChain.messageText,
      relatedInformation
    };
  }
  function createDiagnosticMessageChainFromDiagnostic(diagnostic) {
    return typeof diagnostic.messageText === "string" ? {
      code: diagnostic.code,
      category: diagnostic.category,
      messageText: diagnostic.messageText,
      next: diagnostic.next
    } : diagnostic.messageText;
  }
  function createDiagnosticForRange(sourceFile, range, message) {
    return {
      file: sourceFile,
      start: range.pos,
      length: range.end - range.pos,
      code: message.code,
      category: message.category,
      messageText: message.message
    };
  }
  function getSpanOfTokenAtPosition(sourceFile, pos) {
    const scanner2 = createScanner(
      sourceFile.languageVersion,
      /*skipTrivia*/
      true,
      sourceFile.languageVariant,
      sourceFile.text,
      /*onError:*/
      void 0,
      pos
    );
    scanner2.scan();
    const start = scanner2.getTokenPos();
    return createTextSpanFromBounds(start, scanner2.getTextPos());
  }
  function scanTokenAtPosition(sourceFile, pos) {
    const scanner2 = createScanner(
      sourceFile.languageVersion,
      /*skipTrivia*/
      true,
      sourceFile.languageVariant,
      sourceFile.text,
      /*onError:*/
      void 0,
      pos
    );
    scanner2.scan();
    return scanner2.getToken();
  }
  function getErrorSpanForArrowFunction(sourceFile, node) {
    const pos = skipTrivia(sourceFile.text, node.pos);
    if (node.body && node.body.kind === 238 /* Block */) {
      const { line: startLine } = getLineAndCharacterOfPosition(sourceFile, node.body.pos);
      const { line: endLine } = getLineAndCharacterOfPosition(sourceFile, node.body.end);
      if (startLine < endLine) {
        return createTextSpan(pos, getEndLinePosition(startLine, sourceFile) - pos + 1);
      }
    }
    return createTextSpanFromBounds(pos, node.end);
  }
  function getErrorSpanForNode(sourceFile, node) {
    let errorNode = node;
    switch (node.kind) {
      case 308 /* SourceFile */:
        const pos2 = skipTrivia(
          sourceFile.text,
          0,
          /*stopAfterLineBreak*/
          false
        );
        if (pos2 === sourceFile.text.length) {
          return createTextSpan(0, 0);
        }
        return getSpanOfTokenAtPosition(sourceFile, pos2);
      case 257 /* VariableDeclaration */:
      case 205 /* BindingElement */:
      case 260 /* ClassDeclaration */:
      case 228 /* ClassExpression */:
      case 261 /* InterfaceDeclaration */:
      case 264 /* ModuleDeclaration */:
      case 263 /* EnumDeclaration */:
      case 302 /* EnumMember */:
      case 259 /* FunctionDeclaration */:
      case 215 /* FunctionExpression */:
      case 171 /* MethodDeclaration */:
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
      case 262 /* TypeAliasDeclaration */:
      case 169 /* PropertyDeclaration */:
      case 168 /* PropertySignature */:
      case 271 /* NamespaceImport */:
        errorNode = node.name;
        break;
      case 216 /* ArrowFunction */:
        return getErrorSpanForArrowFunction(sourceFile, node);
      case 292 /* CaseClause */:
      case 293 /* DefaultClause */:
        const start = skipTrivia(sourceFile.text, node.pos);
        const end = node.statements.length > 0 ? node.statements[0].pos : node.end;
        return createTextSpanFromBounds(start, end);
    }
    if (errorNode === void 0) {
      return getSpanOfTokenAtPosition(sourceFile, node.pos);
    }
    Debug.assert(!isJSDoc(errorNode));
    const isMissing = nodeIsMissing(errorNode);
    const pos = isMissing || isJsxText(node) ? errorNode.pos : skipTrivia(sourceFile.text, errorNode.pos);
    if (isMissing) {
      Debug.assert(pos === errorNode.pos, "This failure could trigger https://github.com/Microsoft/TypeScript/issues/20809");
      Debug.assert(pos === errorNode.end, "This failure could trigger https://github.com/Microsoft/TypeScript/issues/20809");
    } else {
      Debug.assert(pos >= errorNode.pos, "This failure could trigger https://github.com/Microsoft/TypeScript/issues/20809");
      Debug.assert(pos <= errorNode.end, "This failure could trigger https://github.com/Microsoft/TypeScript/issues/20809");
    }
    return createTextSpanFromBounds(pos, errorNode.end);
  }
  function isExternalOrCommonJsModule(file) {
    return (file.externalModuleIndicator || file.commonJsModuleIndicator) !== void 0;
  }
  function isJsonSourceFile(file) {
    return file.scriptKind === 6 /* JSON */;
  }
  function isEnumConst(node) {
    return !!(getCombinedModifierFlags(node) & 2048 /* Const */);
  }
  function isDeclarationReadonly(declaration) {
    return !!(getCombinedModifierFlags(declaration) & 64 /* Readonly */ && !isParameterPropertyDeclaration(declaration, declaration.parent));
  }
  function isVarConst(node) {
    return !!(getCombinedNodeFlags(node) & 2 /* Const */);
  }
  function isLet(node) {
    return !!(getCombinedNodeFlags(node) & 1 /* Let */);
  }
  function isSuperCall(n) {
    return n.kind === 210 /* CallExpression */ && n.expression.kind === 106 /* SuperKeyword */;
  }
  function isImportCall(n) {
    return n.kind === 210 /* CallExpression */ && n.expression.kind === 100 /* ImportKeyword */;
  }
  function isImportMeta(n) {
    return isMetaProperty(n) && n.keywordToken === 100 /* ImportKeyword */ && n.name.escapedText === "meta";
  }
  function isLiteralImportTypeNode(n) {
    return isImportTypeNode(n) && isLiteralTypeNode(n.argument) && isStringLiteral(n.argument.literal);
  }
  function isPrologueDirective(node) {
    return node.kind === 241 /* ExpressionStatement */ && node.expression.kind === 10 /* StringLiteral */;
  }
  function isCustomPrologue(node) {
    return !!(getEmitFlags(node) & 2097152 /* CustomPrologue */);
  }
  function isHoistedFunction(node) {
    return isCustomPrologue(node) && isFunctionDeclaration(node);
  }
  function isHoistedVariable(node) {
    return isIdentifier(node.name) && !node.initializer;
  }
  function isHoistedVariableStatement(node) {
    return isCustomPrologue(node) && isVariableStatement(node) && every(node.declarationList.declarations, isHoistedVariable);
  }
  function getLeadingCommentRangesOfNode(node, sourceFileOfNode) {
    return node.kind !== 11 /* JsxText */ ? getLeadingCommentRanges(sourceFileOfNode.text, node.pos) : void 0;
  }
  function getJSDocCommentRanges(node, text) {
    const commentRanges = node.kind === 166 /* Parameter */ || node.kind === 165 /* TypeParameter */ || node.kind === 215 /* FunctionExpression */ || node.kind === 216 /* ArrowFunction */ || node.kind === 214 /* ParenthesizedExpression */ || node.kind === 257 /* VariableDeclaration */ || node.kind === 278 /* ExportSpecifier */ ? concatenate(getTrailingCommentRanges(text, node.pos), getLeadingCommentRanges(text, node.pos)) : getLeadingCommentRanges(text, node.pos);
    return filter(commentRanges, (comment) => text.charCodeAt(comment.pos + 1) === 42 /* asterisk */ && text.charCodeAt(comment.pos + 2) === 42 /* asterisk */ && text.charCodeAt(comment.pos + 3) !== 47 /* slash */);
  }
  function isPartOfTypeNode(node) {
    if (179 /* FirstTypeNode */ <= node.kind && node.kind <= 202 /* LastTypeNode */) {
      return true;
    }
    switch (node.kind) {
      case 131 /* AnyKeyword */:
      case 157 /* UnknownKeyword */:
      case 148 /* NumberKeyword */:
      case 160 /* BigIntKeyword */:
      case 152 /* StringKeyword */:
      case 134 /* BooleanKeyword */:
      case 153 /* SymbolKeyword */:
      case 149 /* ObjectKeyword */:
      case 155 /* UndefinedKeyword */:
      case 144 /* NeverKeyword */:
        return true;
      case 114 /* VoidKeyword */:
        return node.parent.kind !== 219 /* VoidExpression */;
      case 230 /* ExpressionWithTypeArguments */:
        return isHeritageClause(node.parent) && !isExpressionWithTypeArgumentsInClassExtendsClause(node);
      case 165 /* TypeParameter */:
        return node.parent.kind === 197 /* MappedType */ || node.parent.kind === 192 /* InferType */;
      case 79 /* Identifier */:
        if (node.parent.kind === 163 /* QualifiedName */ && node.parent.right === node) {
          node = node.parent;
        } else if (node.parent.kind === 208 /* PropertyAccessExpression */ && node.parent.name === node) {
          node = node.parent;
        }
        Debug.assert(
          node.kind === 79 /* Identifier */ || node.kind === 163 /* QualifiedName */ || node.kind === 208 /* PropertyAccessExpression */,
          "'node' was expected to be a qualified name, identifier or property access in 'isPartOfTypeNode'."
        );
      case 163 /* QualifiedName */:
      case 208 /* PropertyAccessExpression */:
      case 108 /* ThisKeyword */: {
        const { parent: parent2 } = node;
        if (parent2.kind === 183 /* TypeQuery */) {
          return false;
        }
        if (parent2.kind === 202 /* ImportType */) {
          return !parent2.isTypeOf;
        }
        if (179 /* FirstTypeNode */ <= parent2.kind && parent2.kind <= 202 /* LastTypeNode */) {
          return true;
        }
        switch (parent2.kind) {
          case 230 /* ExpressionWithTypeArguments */:
            return isHeritageClause(parent2.parent) && !isExpressionWithTypeArgumentsInClassExtendsClause(parent2);
          case 165 /* TypeParameter */:
            return node === parent2.constraint;
          case 348 /* JSDocTemplateTag */:
            return node === parent2.constraint;
          case 169 /* PropertyDeclaration */:
          case 168 /* PropertySignature */:
          case 166 /* Parameter */:
          case 257 /* VariableDeclaration */:
            return node === parent2.type;
          case 259 /* FunctionDeclaration */:
          case 215 /* FunctionExpression */:
          case 216 /* ArrowFunction */:
          case 173 /* Constructor */:
          case 171 /* MethodDeclaration */:
          case 170 /* MethodSignature */:
          case 174 /* GetAccessor */:
          case 175 /* SetAccessor */:
            return node === parent2.type;
          case 176 /* CallSignature */:
          case 177 /* ConstructSignature */:
          case 178 /* IndexSignature */:
            return node === parent2.type;
          case 213 /* TypeAssertionExpression */:
            return node === parent2.type;
          case 210 /* CallExpression */:
          case 211 /* NewExpression */:
            return contains(parent2.typeArguments, node);
          case 212 /* TaggedTemplateExpression */:
            return false;
        }
      }
    }
    return false;
  }
  function isChildOfNodeWithKind(node, kind) {
    while (node) {
      if (node.kind === kind) {
        return true;
      }
      node = node.parent;
    }
    return false;
  }
  function forEachReturnStatement(body, visitor) {
    return traverse(body);
    function traverse(node) {
      switch (node.kind) {
        case 250 /* ReturnStatement */:
          return visitor(node);
        case 266 /* CaseBlock */:
        case 238 /* Block */:
        case 242 /* IfStatement */:
        case 243 /* DoStatement */:
        case 244 /* WhileStatement */:
        case 245 /* ForStatement */:
        case 246 /* ForInStatement */:
        case 247 /* ForOfStatement */:
        case 251 /* WithStatement */:
        case 252 /* SwitchStatement */:
        case 292 /* CaseClause */:
        case 293 /* DefaultClause */:
        case 253 /* LabeledStatement */:
        case 255 /* TryStatement */:
        case 295 /* CatchClause */:
          return forEachChild(node, traverse);
      }
    }
  }
  function forEachYieldExpression(body, visitor) {
    return traverse(body);
    function traverse(node) {
      switch (node.kind) {
        case 226 /* YieldExpression */:
          visitor(node);
          const operand = node.expression;
          if (operand) {
            traverse(operand);
          }
          return;
        case 263 /* EnumDeclaration */:
        case 261 /* InterfaceDeclaration */:
        case 264 /* ModuleDeclaration */:
        case 262 /* TypeAliasDeclaration */:
          return;
        default:
          if (isFunctionLike(node)) {
            if (node.name && node.name.kind === 164 /* ComputedPropertyName */) {
              traverse(node.name.expression);
              return;
            }
          } else if (!isPartOfTypeNode(node)) {
            forEachChild(node, traverse);
          }
      }
    }
  }
  function getRestParameterElementType(node) {
    if (node && node.kind === 185 /* ArrayType */) {
      return node.elementType;
    } else if (node && node.kind === 180 /* TypeReference */) {
      return singleOrUndefined(node.typeArguments);
    } else {
      return void 0;
    }
  }
  function getMembersOfDeclaration(node) {
    switch (node.kind) {
      case 261 /* InterfaceDeclaration */:
      case 260 /* ClassDeclaration */:
      case 228 /* ClassExpression */:
      case 184 /* TypeLiteral */:
        return node.members;
      case 207 /* ObjectLiteralExpression */:
        return node.properties;
    }
  }
  function isVariableLike(node) {
    if (node) {
      switch (node.kind) {
        case 205 /* BindingElement */:
        case 302 /* EnumMember */:
        case 166 /* Parameter */:
        case 299 /* PropertyAssignment */:
        case 169 /* PropertyDeclaration */:
        case 168 /* PropertySignature */:
        case 300 /* ShorthandPropertyAssignment */:
        case 257 /* VariableDeclaration */:
          return true;
      }
    }
    return false;
  }
  function isVariableLikeOrAccessor(node) {
    return isVariableLike(node) || isAccessor(node);
  }
  function isVariableDeclarationInVariableStatement(node) {
    return node.parent.kind === 258 /* VariableDeclarationList */ && node.parent.parent.kind === 240 /* VariableStatement */;
  }
  function isCommonJsExportedExpression(node) {
    if (!isInJSFile(node))
      return false;
    return isObjectLiteralExpression(node.parent) && isBinaryExpression(node.parent.parent) && getAssignmentDeclarationKind(node.parent.parent) === 2 /* ModuleExports */ || isCommonJsExportPropertyAssignment(node.parent);
  }
  function isCommonJsExportPropertyAssignment(node) {
    if (!isInJSFile(node))
      return false;
    return isBinaryExpression(node) && getAssignmentDeclarationKind(node) === 1 /* ExportsProperty */;
  }
  function isValidESSymbolDeclaration(node) {
    return (isVariableDeclaration(node) ? isVarConst(node) && isIdentifier(node.name) && isVariableDeclarationInVariableStatement(node) : isPropertyDeclaration(node) ? hasEffectiveReadonlyModifier(node) && hasStaticModifier(node) : isPropertySignature(node) && hasEffectiveReadonlyModifier(node)) || isCommonJsExportPropertyAssignment(node);
  }
  function introducesArgumentsExoticObject(node) {
    switch (node.kind) {
      case 171 /* MethodDeclaration */:
      case 170 /* MethodSignature */:
      case 173 /* Constructor */:
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
      case 259 /* FunctionDeclaration */:
      case 215 /* FunctionExpression */:
        return true;
    }
    return false;
  }
  function unwrapInnermostStatementOfLabel(node, beforeUnwrapLabelCallback) {
    while (true) {
      if (beforeUnwrapLabelCallback) {
        beforeUnwrapLabelCallback(node);
      }
      if (node.statement.kind !== 253 /* LabeledStatement */) {
        return node.statement;
      }
      node = node.statement;
    }
  }
  function isFunctionBlock(node) {
    return node && node.kind === 238 /* Block */ && isFunctionLike(node.parent);
  }
  function isObjectLiteralMethod(node) {
    return node && node.kind === 171 /* MethodDeclaration */ && node.parent.kind === 207 /* ObjectLiteralExpression */;
  }
  function isObjectLiteralOrClassExpressionMethodOrAccessor(node) {
    return (node.kind === 171 /* MethodDeclaration */ || node.kind === 174 /* GetAccessor */ || node.kind === 175 /* SetAccessor */) && (node.parent.kind === 207 /* ObjectLiteralExpression */ || node.parent.kind === 228 /* ClassExpression */);
  }
  function isIdentifierTypePredicate(predicate) {
    return predicate && predicate.kind === 1 /* Identifier */;
  }
  function isThisTypePredicate(predicate) {
    return predicate && predicate.kind === 0 /* This */;
  }
  function getPropertyAssignment(objectLiteral, key, key2) {
    return objectLiteral.properties.filter((property) => {
      if (property.kind === 299 /* PropertyAssignment */) {
        const propName = tryGetTextOfPropertyName(property.name);
        return key === propName || !!key2 && key2 === propName;
      }
      return false;
    });
  }
  function getPropertyArrayElementValue(objectLiteral, propKey, elementValue) {
    return firstDefined(getPropertyAssignment(objectLiteral, propKey), (property) => isArrayLiteralExpression(property.initializer) ? find(property.initializer.elements, (element) => isStringLiteral(element) && element.text === elementValue) : void 0);
  }
  function getTsConfigObjectLiteralExpression(tsConfigSourceFile) {
    if (tsConfigSourceFile && tsConfigSourceFile.statements.length) {
      const expression = tsConfigSourceFile.statements[0].expression;
      return tryCast(expression, isObjectLiteralExpression);
    }
  }
  function getTsConfigPropArrayElementValue(tsConfigSourceFile, propKey, elementValue) {
    return firstDefined(getTsConfigPropArray(tsConfigSourceFile, propKey), (property) => isArrayLiteralExpression(property.initializer) ? find(property.initializer.elements, (element) => isStringLiteral(element) && element.text === elementValue) : void 0);
  }
  function getTsConfigPropArray(tsConfigSourceFile, propKey) {
    const jsonObjectLiteral = getTsConfigObjectLiteralExpression(tsConfigSourceFile);
    return jsonObjectLiteral ? getPropertyAssignment(jsonObjectLiteral, propKey) : emptyArray;
  }
  function getContainingFunction(node) {
    return findAncestor(node.parent, isFunctionLike);
  }
  function getContainingFunctionDeclaration(node) {
    return findAncestor(node.parent, isFunctionLikeDeclaration);
  }
  function getContainingClass(node) {
    return findAncestor(node.parent, isClassLike);
  }
  function getContainingClassStaticBlock(node) {
    return findAncestor(node.parent, (n) => {
      if (isClassLike(n) || isFunctionLike(n)) {
        return "quit";
      }
      return isClassStaticBlockDeclaration(n);
    });
  }
  function getContainingFunctionOrClassStaticBlock(node) {
    return findAncestor(node.parent, isFunctionLikeOrClassStaticBlockDeclaration);
  }
  function getThisContainer(node, includeArrowFunctions, includeClassComputedPropertyName) {
    Debug.assert(node.kind !== 308 /* SourceFile */);
    while (true) {
      node = node.parent;
      if (!node) {
        return Debug.fail();
      }
      switch (node.kind) {
        case 164 /* ComputedPropertyName */:
          if (includeClassComputedPropertyName && isClassLike(node.parent.parent)) {
            return node;
          }
          node = node.parent.parent;
          break;
        case 167 /* Decorator */:
          if (node.parent.kind === 166 /* Parameter */ && isClassElement(node.parent.parent)) {
            node = node.parent.parent;
          } else if (isClassElement(node.parent)) {
            node = node.parent;
          }
          break;
        case 216 /* ArrowFunction */:
          if (!includeArrowFunctions) {
            continue;
          }
        case 259 /* FunctionDeclaration */:
        case 215 /* FunctionExpression */:
        case 264 /* ModuleDeclaration */:
        case 172 /* ClassStaticBlockDeclaration */:
        case 169 /* PropertyDeclaration */:
        case 168 /* PropertySignature */:
        case 171 /* MethodDeclaration */:
        case 170 /* MethodSignature */:
        case 173 /* Constructor */:
        case 174 /* GetAccessor */:
        case 175 /* SetAccessor */:
        case 176 /* CallSignature */:
        case 177 /* ConstructSignature */:
        case 178 /* IndexSignature */:
        case 263 /* EnumDeclaration */:
        case 308 /* SourceFile */:
          return node;
      }
    }
  }
  function isThisContainerOrFunctionBlock(node) {
    switch (node.kind) {
      case 216 /* ArrowFunction */:
      case 259 /* FunctionDeclaration */:
      case 215 /* FunctionExpression */:
      case 169 /* PropertyDeclaration */:
        return true;
      case 238 /* Block */:
        switch (node.parent.kind) {
          case 173 /* Constructor */:
          case 171 /* MethodDeclaration */:
          case 174 /* GetAccessor */:
          case 175 /* SetAccessor */:
            return true;
          default:
            return false;
        }
      default:
        return false;
    }
  }
  function isInTopLevelContext(node) {
    if (isIdentifier(node) && (isClassDeclaration(node.parent) || isFunctionDeclaration(node.parent)) && node.parent.name === node) {
      node = node.parent;
    }
    const container = getThisContainer(
      node,
      /*includeArrowFunctions*/
      true,
      /*includeClassComputedPropertyName*/
      false
    );
    return isSourceFile(container);
  }
  function getNewTargetContainer(node) {
    const container = getThisContainer(
      node,
      /*includeArrowFunctions*/
      false,
      /*includeClassComputedPropertyName*/
      false
    );
    if (container) {
      switch (container.kind) {
        case 173 /* Constructor */:
        case 259 /* FunctionDeclaration */:
        case 215 /* FunctionExpression */:
          return container;
      }
    }
    return void 0;
  }
  function getSuperContainer(node, stopOnFunctions) {
    while (true) {
      node = node.parent;
      if (!node) {
        return void 0;
      }
      switch (node.kind) {
        case 164 /* ComputedPropertyName */:
          node = node.parent;
          break;
        case 259 /* FunctionDeclaration */:
        case 215 /* FunctionExpression */:
        case 216 /* ArrowFunction */:
          if (!stopOnFunctions) {
            continue;
          }
        case 169 /* PropertyDeclaration */:
        case 168 /* PropertySignature */:
        case 171 /* MethodDeclaration */:
        case 170 /* MethodSignature */:
        case 173 /* Constructor */:
        case 174 /* GetAccessor */:
        case 175 /* SetAccessor */:
        case 172 /* ClassStaticBlockDeclaration */:
          return node;
        case 167 /* Decorator */:
          if (node.parent.kind === 166 /* Parameter */ && isClassElement(node.parent.parent)) {
            node = node.parent.parent;
          } else if (isClassElement(node.parent)) {
            node = node.parent;
          }
          break;
      }
    }
  }
  function getImmediatelyInvokedFunctionExpression(func) {
    if (func.kind === 215 /* FunctionExpression */ || func.kind === 216 /* ArrowFunction */) {
      let prev = func;
      let parent2 = func.parent;
      while (parent2.kind === 214 /* ParenthesizedExpression */) {
        prev = parent2;
        parent2 = parent2.parent;
      }
      if (parent2.kind === 210 /* CallExpression */ && parent2.expression === prev) {
        return parent2;
      }
    }
  }
  function isSuperOrSuperProperty(node) {
    return node.kind === 106 /* SuperKeyword */ || isSuperProperty(node);
  }
  function isSuperProperty(node) {
    const kind = node.kind;
    return (kind === 208 /* PropertyAccessExpression */ || kind === 209 /* ElementAccessExpression */) && node.expression.kind === 106 /* SuperKeyword */;
  }
  function isThisProperty(node) {
    const kind = node.kind;
    return (kind === 208 /* PropertyAccessExpression */ || kind === 209 /* ElementAccessExpression */) && node.expression.kind === 108 /* ThisKeyword */;
  }
  function isThisInitializedDeclaration(node) {
    var _a2;
    return !!node && isVariableDeclaration(node) && ((_a2 = node.initializer) == null ? void 0 : _a2.kind) === 108 /* ThisKeyword */;
  }
  function isThisInitializedObjectBindingExpression(node) {
    return !!node && (isShorthandPropertyAssignment(node) || isPropertyAssignment(node)) && isBinaryExpression(node.parent.parent) && node.parent.parent.operatorToken.kind === 63 /* EqualsToken */ && node.parent.parent.right.kind === 108 /* ThisKeyword */;
  }
  function getEntityNameFromTypeNode(node) {
    switch (node.kind) {
      case 180 /* TypeReference */:
        return node.typeName;
      case 230 /* ExpressionWithTypeArguments */:
        return isEntityNameExpression(node.expression) ? node.expression : void 0;
      case 79 /* Identifier */:
      case 163 /* QualifiedName */:
        return node;
    }
    return void 0;
  }
  function getInvokedExpression(node) {
    switch (node.kind) {
      case 212 /* TaggedTemplateExpression */:
        return node.tag;
      case 283 /* JsxOpeningElement */:
      case 282 /* JsxSelfClosingElement */:
        return node.tagName;
      default:
        return node.expression;
    }
  }
  function nodeCanBeDecorated(useLegacyDecorators, node, parent2, grandparent) {
    if (useLegacyDecorators && isNamedDeclaration(node) && isPrivateIdentifier(node.name)) {
      return false;
    }
    switch (node.kind) {
      case 260 /* ClassDeclaration */:
        return true;
      case 228 /* ClassExpression */:
        return !useLegacyDecorators;
      case 169 /* PropertyDeclaration */:
        return parent2 !== void 0 && (useLegacyDecorators ? isClassDeclaration(parent2) : isClassLike(parent2) && !hasAbstractModifier(node) && !hasAmbientModifier(node));
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
      case 171 /* MethodDeclaration */:
        return node.body !== void 0 && parent2 !== void 0 && (useLegacyDecorators ? isClassDeclaration(parent2) : isClassLike(parent2));
      case 166 /* Parameter */:
        if (!useLegacyDecorators)
          return false;
        return parent2 !== void 0 && parent2.body !== void 0 && (parent2.kind === 173 /* Constructor */ || parent2.kind === 171 /* MethodDeclaration */ || parent2.kind === 175 /* SetAccessor */) && getThisParameter(parent2) !== node && grandparent !== void 0 && grandparent.kind === 260 /* ClassDeclaration */;
    }
    return false;
  }
  function nodeIsDecorated(useLegacyDecorators, node, parent2, grandparent) {
    return hasDecorators(node) && nodeCanBeDecorated(useLegacyDecorators, node, parent2, grandparent);
  }
  function nodeOrChildIsDecorated(useLegacyDecorators, node, parent2, grandparent) {
    return nodeIsDecorated(useLegacyDecorators, node, parent2, grandparent) || childIsDecorated(useLegacyDecorators, node, parent2);
  }
  function childIsDecorated(useLegacyDecorators, node, parent2) {
    switch (node.kind) {
      case 260 /* ClassDeclaration */:
        return some(node.members, (m) => nodeOrChildIsDecorated(useLegacyDecorators, m, node, parent2));
      case 228 /* ClassExpression */:
        return !useLegacyDecorators && some(node.members, (m) => nodeOrChildIsDecorated(useLegacyDecorators, m, node, parent2));
      case 171 /* MethodDeclaration */:
      case 175 /* SetAccessor */:
      case 173 /* Constructor */:
        return some(node.parameters, (p) => nodeIsDecorated(useLegacyDecorators, p, node, parent2));
      default:
        return false;
    }
  }
  function classOrConstructorParameterIsDecorated(useLegacyDecorators, node) {
    if (nodeIsDecorated(useLegacyDecorators, node))
      return true;
    const constructor = getFirstConstructorWithBody(node);
    return !!constructor && childIsDecorated(useLegacyDecorators, constructor, node);
  }
  function classElementOrClassElementParameterIsDecorated(useLegacyDecorators, node, parent2) {
    let parameters;
    if (isAccessor(node)) {
      const { firstAccessor, secondAccessor, setAccessor } = getAllAccessorDeclarations(parent2.members, node);
      const firstAccessorWithDecorators = hasDecorators(firstAccessor) ? firstAccessor : secondAccessor && hasDecorators(secondAccessor) ? secondAccessor : void 0;
      if (!firstAccessorWithDecorators || node !== firstAccessorWithDecorators) {
        return false;
      }
      parameters = setAccessor == null ? void 0 : setAccessor.parameters;
    } else if (isMethodDeclaration(node)) {
      parameters = node.parameters;
    }
    if (nodeIsDecorated(useLegacyDecorators, node, parent2)) {
      return true;
    }
    if (parameters) {
      for (const parameter of parameters) {
        if (parameterIsThisKeyword(parameter))
          continue;
        if (nodeIsDecorated(useLegacyDecorators, parameter, node, parent2))
          return true;
      }
    }
    return false;
  }
  function isEmptyStringLiteral(node) {
    if (node.textSourceNode) {
      switch (node.textSourceNode.kind) {
        case 10 /* StringLiteral */:
          return isEmptyStringLiteral(node.textSourceNode);
        case 14 /* NoSubstitutionTemplateLiteral */:
          return node.text === "";
      }
      return false;
    }
    return node.text === "";
  }
  function isJSXTagName(node) {
    const { parent: parent2 } = node;
    if (parent2.kind === 283 /* JsxOpeningElement */ || parent2.kind === 282 /* JsxSelfClosingElement */ || parent2.kind === 284 /* JsxClosingElement */) {
      return parent2.tagName === node;
    }
    return false;
  }
  function isExpressionNode(node) {
    switch (node.kind) {
      case 106 /* SuperKeyword */:
      case 104 /* NullKeyword */:
      case 110 /* TrueKeyword */:
      case 95 /* FalseKeyword */:
      case 13 /* RegularExpressionLiteral */:
      case 206 /* ArrayLiteralExpression */:
      case 207 /* ObjectLiteralExpression */:
      case 208 /* PropertyAccessExpression */:
      case 209 /* ElementAccessExpression */:
      case 210 /* CallExpression */:
      case 211 /* NewExpression */:
      case 212 /* TaggedTemplateExpression */:
      case 231 /* AsExpression */:
      case 213 /* TypeAssertionExpression */:
      case 235 /* SatisfiesExpression */:
      case 232 /* NonNullExpression */:
      case 214 /* ParenthesizedExpression */:
      case 215 /* FunctionExpression */:
      case 228 /* ClassExpression */:
      case 216 /* ArrowFunction */:
      case 219 /* VoidExpression */:
      case 217 /* DeleteExpression */:
      case 218 /* TypeOfExpression */:
      case 221 /* PrefixUnaryExpression */:
      case 222 /* PostfixUnaryExpression */:
      case 223 /* BinaryExpression */:
      case 224 /* ConditionalExpression */:
      case 227 /* SpreadElement */:
      case 225 /* TemplateExpression */:
      case 229 /* OmittedExpression */:
      case 281 /* JsxElement */:
      case 282 /* JsxSelfClosingElement */:
      case 285 /* JsxFragment */:
      case 226 /* YieldExpression */:
      case 220 /* AwaitExpression */:
      case 233 /* MetaProperty */:
        return true;
      case 230 /* ExpressionWithTypeArguments */:
        return !isHeritageClause(node.parent) && !isJSDocAugmentsTag(node.parent);
      case 163 /* QualifiedName */:
        while (node.parent.kind === 163 /* QualifiedName */) {
          node = node.parent;
        }
        return node.parent.kind === 183 /* TypeQuery */ || isJSDocLinkLike(node.parent) || isJSDocNameReference(node.parent) || isJSDocMemberName(node.parent) || isJSXTagName(node);
      case 314 /* JSDocMemberName */:
        while (isJSDocMemberName(node.parent)) {
          node = node.parent;
        }
        return node.parent.kind === 183 /* TypeQuery */ || isJSDocLinkLike(node.parent) || isJSDocNameReference(node.parent) || isJSDocMemberName(node.parent) || isJSXTagName(node);
      case 80 /* PrivateIdentifier */:
        return isBinaryExpression(node.parent) && node.parent.left === node && node.parent.operatorToken.kind === 101 /* InKeyword */;
      case 79 /* Identifier */:
        if (node.parent.kind === 183 /* TypeQuery */ || isJSDocLinkLike(node.parent) || isJSDocNameReference(node.parent) || isJSDocMemberName(node.parent) || isJSXTagName(node)) {
          return true;
        }
      case 8 /* NumericLiteral */:
      case 9 /* BigIntLiteral */:
      case 10 /* StringLiteral */:
      case 14 /* NoSubstitutionTemplateLiteral */:
      case 108 /* ThisKeyword */:
        return isInExpressionContext(node);
      default:
        return false;
    }
  }
  function isInExpressionContext(node) {
    const { parent: parent2 } = node;
    switch (parent2.kind) {
      case 257 /* VariableDeclaration */:
      case 166 /* Parameter */:
      case 169 /* PropertyDeclaration */:
      case 168 /* PropertySignature */:
      case 302 /* EnumMember */:
      case 299 /* PropertyAssignment */:
      case 205 /* BindingElement */:
        return parent2.initializer === node;
      case 241 /* ExpressionStatement */:
      case 242 /* IfStatement */:
      case 243 /* DoStatement */:
      case 244 /* WhileStatement */:
      case 250 /* ReturnStatement */:
      case 251 /* WithStatement */:
      case 252 /* SwitchStatement */:
      case 292 /* CaseClause */:
      case 254 /* ThrowStatement */:
        return parent2.expression === node;
      case 245 /* ForStatement */:
        const forStatement = parent2;
        return forStatement.initializer === node && forStatement.initializer.kind !== 258 /* VariableDeclarationList */ || forStatement.condition === node || forStatement.incrementor === node;
      case 246 /* ForInStatement */:
      case 247 /* ForOfStatement */:
        const forInStatement = parent2;
        return forInStatement.initializer === node && forInStatement.initializer.kind !== 258 /* VariableDeclarationList */ || forInStatement.expression === node;
      case 213 /* TypeAssertionExpression */:
      case 231 /* AsExpression */:
        return node === parent2.expression;
      case 236 /* TemplateSpan */:
        return node === parent2.expression;
      case 164 /* ComputedPropertyName */:
        return node === parent2.expression;
      case 167 /* Decorator */:
      case 291 /* JsxExpression */:
      case 290 /* JsxSpreadAttribute */:
      case 301 /* SpreadAssignment */:
        return true;
      case 230 /* ExpressionWithTypeArguments */:
        return parent2.expression === node && !isPartOfTypeNode(parent2);
      case 300 /* ShorthandPropertyAssignment */:
        return parent2.objectAssignmentInitializer === node;
      case 235 /* SatisfiesExpression */:
        return node === parent2.expression;
      default:
        return isExpressionNode(parent2);
    }
  }
  function isPartOfTypeQuery(node) {
    while (node.kind === 163 /* QualifiedName */ || node.kind === 79 /* Identifier */) {
      node = node.parent;
    }
    return node.kind === 183 /* TypeQuery */;
  }
  function isNamespaceReexportDeclaration(node) {
    return isNamespaceExport(node) && !!node.parent.moduleSpecifier;
  }
  function isExternalModuleImportEqualsDeclaration(node) {
    return node.kind === 268 /* ImportEqualsDeclaration */ && node.moduleReference.kind === 280 /* ExternalModuleReference */;
  }
  function getExternalModuleImportEqualsDeclarationExpression(node) {
    Debug.assert(isExternalModuleImportEqualsDeclaration(node));
    return node.moduleReference.expression;
  }
  function getExternalModuleRequireArgument(node) {
    return isVariableDeclarationInitializedToBareOrAccessedRequire(node) && getLeftmostAccessExpression(node.initializer).arguments[0];
  }
  function isInternalModuleImportEqualsDeclaration(node) {
    return node.kind === 268 /* ImportEqualsDeclaration */ && node.moduleReference.kind !== 280 /* ExternalModuleReference */;
  }
  function isSourceFileJS(file) {
    return isInJSFile(file);
  }
  function isSourceFileNotJS(file) {
    return !isInJSFile(file);
  }
  function isInJSFile(node) {
    return !!node && !!(node.flags & 262144 /* JavaScriptFile */);
  }
  function isInJsonFile(node) {
    return !!node && !!(node.flags & 67108864 /* JsonFile */);
  }
  function isSourceFileNotJson(file) {
    return !isJsonSourceFile(file);
  }
  function isInJSDoc(node) {
    return !!node && !!(node.flags & 8388608 /* JSDoc */);
  }
  function isJSDocIndexSignature(node) {
    return isTypeReferenceNode(node) && isIdentifier(node.typeName) && node.typeName.escapedText === "Object" && node.typeArguments && node.typeArguments.length === 2 && (node.typeArguments[0].kind === 152 /* StringKeyword */ || node.typeArguments[0].kind === 148 /* NumberKeyword */);
  }
  function isRequireCall(callExpression, requireStringLiteralLikeArgument) {
    if (callExpression.kind !== 210 /* CallExpression */) {
      return false;
    }
    const { expression, arguments: args } = callExpression;
    if (expression.kind !== 79 /* Identifier */ || expression.escapedText !== "require") {
      return false;
    }
    if (args.length !== 1) {
      return false;
    }
    const arg = args[0];
    return !requireStringLiteralLikeArgument || isStringLiteralLike(arg);
  }
  function isVariableDeclarationInitializedToRequire(node) {
    return isVariableDeclarationInitializedWithRequireHelper(
      node,
      /*allowAccessedRequire*/
      false
    );
  }
  function isVariableDeclarationInitializedToBareOrAccessedRequire(node) {
    return isVariableDeclarationInitializedWithRequireHelper(
      node,
      /*allowAccessedRequire*/
      true
    );
  }
  function isBindingElementOfBareOrAccessedRequire(node) {
    return isBindingElement(node) && isVariableDeclarationInitializedToBareOrAccessedRequire(node.parent.parent);
  }
  function isVariableDeclarationInitializedWithRequireHelper(node, allowAccessedRequire) {
    return isVariableDeclaration(node) && !!node.initializer && isRequireCall(
      allowAccessedRequire ? getLeftmostAccessExpression(node.initializer) : node.initializer,
      /*requireStringLiteralLikeArgument*/
      true
    );
  }
  function isRequireVariableStatement(node) {
    return isVariableStatement(node) && node.declarationList.declarations.length > 0 && every(node.declarationList.declarations, (decl) => isVariableDeclarationInitializedToRequire(decl));
  }
  function isSingleOrDoubleQuote(charCode) {
    return charCode === 39 /* singleQuote */ || charCode === 34 /* doubleQuote */;
  }
  function isStringDoubleQuoted(str, sourceFile) {
    return getSourceTextOfNodeFromSourceFile(sourceFile, str).charCodeAt(0) === 34 /* doubleQuote */;
  }
  function isAssignmentDeclaration(decl) {
    return isBinaryExpression(decl) || isAccessExpression(decl) || isIdentifier(decl) || isCallExpression(decl);
  }
  function getEffectiveInitializer(node) {
    if (isInJSFile(node) && node.initializer && isBinaryExpression(node.initializer) && (node.initializer.operatorToken.kind === 56 /* BarBarToken */ || node.initializer.operatorToken.kind === 60 /* QuestionQuestionToken */) && node.name && isEntityNameExpression(node.name) && isSameEntityName(node.name, node.initializer.left)) {
      return node.initializer.right;
    }
    return node.initializer;
  }
  function getDeclaredExpandoInitializer(node) {
    const init = getEffectiveInitializer(node);
    return init && getExpandoInitializer(init, isPrototypeAccess(node.name));
  }
  function hasExpandoValueProperty(node, isPrototypeAssignment) {
    return forEach(node.properties, (p) => isPropertyAssignment(p) && isIdentifier(p.name) && p.name.escapedText === "value" && p.initializer && getExpandoInitializer(p.initializer, isPrototypeAssignment));
  }
  function getAssignedExpandoInitializer(node) {
    if (node && node.parent && isBinaryExpression(node.parent) && node.parent.operatorToken.kind === 63 /* EqualsToken */) {
      const isPrototypeAssignment = isPrototypeAccess(node.parent.left);
      return getExpandoInitializer(node.parent.right, isPrototypeAssignment) || getDefaultedExpandoInitializer(node.parent.left, node.parent.right, isPrototypeAssignment);
    }
    if (node && isCallExpression(node) && isBindableObjectDefinePropertyCall(node)) {
      const result = hasExpandoValueProperty(node.arguments[2], node.arguments[1].text === "prototype");
      if (result) {
        return result;
      }
    }
  }
  function getExpandoInitializer(initializer, isPrototypeAssignment) {
    if (isCallExpression(initializer)) {
      const e = skipParentheses(initializer.expression);
      return e.kind === 215 /* FunctionExpression */ || e.kind === 216 /* ArrowFunction */ ? initializer : void 0;
    }
    if (initializer.kind === 215 /* FunctionExpression */ || initializer.kind === 228 /* ClassExpression */ || initializer.kind === 216 /* ArrowFunction */) {
      return initializer;
    }
    if (isObjectLiteralExpression(initializer) && (initializer.properties.length === 0 || isPrototypeAssignment)) {
      return initializer;
    }
  }
  function getDefaultedExpandoInitializer(name, initializer, isPrototypeAssignment) {
    const e = isBinaryExpression(initializer) && (initializer.operatorToken.kind === 56 /* BarBarToken */ || initializer.operatorToken.kind === 60 /* QuestionQuestionToken */) && getExpandoInitializer(initializer.right, isPrototypeAssignment);
    if (e && isSameEntityName(name, initializer.left)) {
      return e;
    }
  }
  function isDefaultedExpandoInitializer(node) {
    const name = isVariableDeclaration(node.parent) ? node.parent.name : isBinaryExpression(node.parent) && node.parent.operatorToken.kind === 63 /* EqualsToken */ ? node.parent.left : void 0;
    return name && getExpandoInitializer(node.right, isPrototypeAccess(name)) && isEntityNameExpression(name) && isSameEntityName(name, node.left);
  }
  function getNameOfExpando(node) {
    if (isBinaryExpression(node.parent)) {
      const parent2 = (node.parent.operatorToken.kind === 56 /* BarBarToken */ || node.parent.operatorToken.kind === 60 /* QuestionQuestionToken */) && isBinaryExpression(node.parent.parent) ? node.parent.parent : node.parent;
      if (parent2.operatorToken.kind === 63 /* EqualsToken */ && isIdentifier(parent2.left)) {
        return parent2.left;
      }
    } else if (isVariableDeclaration(node.parent)) {
      return node.parent.name;
    }
  }
  function isSameEntityName(name, initializer) {
    if (isPropertyNameLiteral(name) && isPropertyNameLiteral(initializer)) {
      return getTextOfIdentifierOrLiteral(name) === getTextOfIdentifierOrLiteral(initializer);
    }
    if (isMemberName(name) && isLiteralLikeAccess(initializer) && (initializer.expression.kind === 108 /* ThisKeyword */ || isIdentifier(initializer.expression) && (initializer.expression.escapedText === "window" || initializer.expression.escapedText === "self" || initializer.expression.escapedText === "global"))) {
      return isSameEntityName(name, getNameOrArgument(initializer));
    }
    if (isLiteralLikeAccess(name) && isLiteralLikeAccess(initializer)) {
      return getElementOrPropertyAccessName(name) === getElementOrPropertyAccessName(initializer) && isSameEntityName(name.expression, initializer.expression);
    }
    return false;
  }
  function getRightMostAssignedExpression(node) {
    while (isAssignmentExpression(
      node,
      /*excludeCompoundAssignments*/
      true
    )) {
      node = node.right;
    }
    return node;
  }
  function isExportsIdentifier(node) {
    return isIdentifier(node) && node.escapedText === "exports";
  }
  function isModuleIdentifier(node) {
    return isIdentifier(node) && node.escapedText === "module";
  }
  function isModuleExportsAccessExpression(node) {
    return (isPropertyAccessExpression(node) || isLiteralLikeElementAccess(node)) && isModuleIdentifier(node.expression) && getElementOrPropertyAccessName(node) === "exports";
  }
  function getAssignmentDeclarationKind(expr) {
    const special = getAssignmentDeclarationKindWorker(expr);
    return special === 5 /* Property */ || isInJSFile(expr) ? special : 0 /* None */;
  }
  function isBindableObjectDefinePropertyCall(expr) {
    return length(expr.arguments) === 3 && isPropertyAccessExpression(expr.expression) && isIdentifier(expr.expression.expression) && idText(expr.expression.expression) === "Object" && idText(expr.expression.name) === "defineProperty" && isStringOrNumericLiteralLike(expr.arguments[1]) && isBindableStaticNameExpression(
      expr.arguments[0],
      /*excludeThisKeyword*/
      true
    );
  }
  function isLiteralLikeAccess(node) {
    return isPropertyAccessExpression(node) || isLiteralLikeElementAccess(node);
  }
  function isLiteralLikeElementAccess(node) {
    return isElementAccessExpression(node) && isStringOrNumericLiteralLike(node.argumentExpression);
  }
  function isBindableStaticAccessExpression(node, excludeThisKeyword) {
    return isPropertyAccessExpression(node) && (!excludeThisKeyword && node.expression.kind === 108 /* ThisKeyword */ || isIdentifier(node.name) && isBindableStaticNameExpression(
      node.expression,
      /*excludeThisKeyword*/
      true
    )) || isBindableStaticElementAccessExpression(node, excludeThisKeyword);
  }
  function isBindableStaticElementAccessExpression(node, excludeThisKeyword) {
    return isLiteralLikeElementAccess(node) && (!excludeThisKeyword && node.expression.kind === 108 /* ThisKeyword */ || isEntityNameExpression(node.expression) || isBindableStaticAccessExpression(
      node.expression,
      /*excludeThisKeyword*/
      true
    ));
  }
  function isBindableStaticNameExpression(node, excludeThisKeyword) {
    return isEntityNameExpression(node) || isBindableStaticAccessExpression(node, excludeThisKeyword);
  }
  function getNameOrArgument(expr) {
    if (isPropertyAccessExpression(expr)) {
      return expr.name;
    }
    return expr.argumentExpression;
  }
  function getAssignmentDeclarationKindWorker(expr) {
    if (isCallExpression(expr)) {
      if (!isBindableObjectDefinePropertyCall(expr)) {
        return 0 /* None */;
      }
      const entityName = expr.arguments[0];
      if (isExportsIdentifier(entityName) || isModuleExportsAccessExpression(entityName)) {
        return 8 /* ObjectDefinePropertyExports */;
      }
      if (isBindableStaticAccessExpression(entityName) && getElementOrPropertyAccessName(entityName) === "prototype") {
        return 9 /* ObjectDefinePrototypeProperty */;
      }
      return 7 /* ObjectDefinePropertyValue */;
    }
    if (expr.operatorToken.kind !== 63 /* EqualsToken */ || !isAccessExpression(expr.left) || isVoidZero(getRightMostAssignedExpression(expr))) {
      return 0 /* None */;
    }
    if (isBindableStaticNameExpression(
      expr.left.expression,
      /*excludeThisKeyword*/
      true
    ) && getElementOrPropertyAccessName(expr.left) === "prototype" && isObjectLiteralExpression(getInitializerOfBinaryExpression(expr))) {
      return 6 /* Prototype */;
    }
    return getAssignmentDeclarationPropertyAccessKind(expr.left);
  }
  function isVoidZero(node) {
    return isVoidExpression(node) && isNumericLiteral(node.expression) && node.expression.text === "0";
  }
  function getElementOrPropertyAccessArgumentExpressionOrName(node) {
    if (isPropertyAccessExpression(node)) {
      return node.name;
    }
    const arg = skipParentheses(node.argumentExpression);
    if (isNumericLiteral(arg) || isStringLiteralLike(arg)) {
      return arg;
    }
    return node;
  }
  function getElementOrPropertyAccessName(node) {
    const name = getElementOrPropertyAccessArgumentExpressionOrName(node);
    if (name) {
      if (isIdentifier(name)) {
        return name.escapedText;
      }
      if (isStringLiteralLike(name) || isNumericLiteral(name)) {
        return escapeLeadingUnderscores(name.text);
      }
    }
    return void 0;
  }
  function getAssignmentDeclarationPropertyAccessKind(lhs) {
    if (lhs.expression.kind === 108 /* ThisKeyword */) {
      return 4 /* ThisProperty */;
    } else if (isModuleExportsAccessExpression(lhs)) {
      return 2 /* ModuleExports */;
    } else if (isBindableStaticNameExpression(
      lhs.expression,
      /*excludeThisKeyword*/
      true
    )) {
      if (isPrototypeAccess(lhs.expression)) {
        return 3 /* PrototypeProperty */;
      }
      let nextToLast = lhs;
      while (!isIdentifier(nextToLast.expression)) {
        nextToLast = nextToLast.expression;
      }
      const id = nextToLast.expression;
      if ((id.escapedText === "exports" || id.escapedText === "module" && getElementOrPropertyAccessName(nextToLast) === "exports") && // ExportsProperty does not support binding with computed names
      isBindableStaticAccessExpression(lhs)) {
        return 1 /* ExportsProperty */;
      }
      if (isBindableStaticNameExpression(
        lhs,
        /*excludeThisKeyword*/
        true
      ) || isElementAccessExpression(lhs) && isDynamicName(lhs)) {
        return 5 /* Property */;
      }
    }
    return 0 /* None */;
  }
  function getInitializerOfBinaryExpression(expr) {
    while (isBinaryExpression(expr.right)) {
      expr = expr.right;
    }
    return expr.right;
  }
  function isPrototypePropertyAssignment(node) {
    return isBinaryExpression(node) && getAssignmentDeclarationKind(node) === 3 /* PrototypeProperty */;
  }
  function isSpecialPropertyDeclaration(expr) {
    return isInJSFile(expr) && expr.parent && expr.parent.kind === 241 /* ExpressionStatement */ && (!isElementAccessExpression(expr) || isLiteralLikeElementAccess(expr)) && !!getJSDocTypeTag(expr.parent);
  }
  function setValueDeclaration(symbol, node) {
    const { valueDeclaration } = symbol;
    if (!valueDeclaration || !(node.flags & 16777216 /* Ambient */ && !isInJSFile(node) && !(valueDeclaration.flags & 16777216 /* Ambient */)) && (isAssignmentDeclaration(valueDeclaration) && !isAssignmentDeclaration(node)) || valueDeclaration.kind !== node.kind && isEffectiveModuleDeclaration(valueDeclaration)) {
      symbol.valueDeclaration = node;
    }
  }
  function isFunctionSymbol(symbol) {
    if (!symbol || !symbol.valueDeclaration) {
      return false;
    }
    const decl = symbol.valueDeclaration;
    return decl.kind === 259 /* FunctionDeclaration */ || isVariableDeclaration(decl) && decl.initializer && isFunctionLike(decl.initializer);
  }
  function tryGetModuleSpecifierFromDeclaration(node) {
    var _a2, _b;
    switch (node.kind) {
      case 257 /* VariableDeclaration */:
      case 205 /* BindingElement */:
        return (_a2 = findAncestor(node.initializer, (node2) => isRequireCall(
          node2,
          /*requireStringLiteralLikeArgument*/
          true
        ))) == null ? void 0 : _a2.arguments[0];
      case 269 /* ImportDeclaration */:
        return tryCast(node.moduleSpecifier, isStringLiteralLike);
      case 268 /* ImportEqualsDeclaration */:
        return tryCast((_b = tryCast(node.moduleReference, isExternalModuleReference)) == null ? void 0 : _b.expression, isStringLiteralLike);
      case 270 /* ImportClause */:
      case 277 /* NamespaceExport */:
        return tryCast(node.parent.moduleSpecifier, isStringLiteralLike);
      case 271 /* NamespaceImport */:
      case 278 /* ExportSpecifier */:
        return tryCast(node.parent.parent.moduleSpecifier, isStringLiteralLike);
      case 273 /* ImportSpecifier */:
        return tryCast(node.parent.parent.parent.moduleSpecifier, isStringLiteralLike);
      default:
        Debug.assertNever(node);
    }
  }
  function importFromModuleSpecifier(node) {
    return tryGetImportFromModuleSpecifier(node) || Debug.failBadSyntaxKind(node.parent);
  }
  function tryGetImportFromModuleSpecifier(node) {
    switch (node.parent.kind) {
      case 269 /* ImportDeclaration */:
      case 275 /* ExportDeclaration */:
        return node.parent;
      case 280 /* ExternalModuleReference */:
        return node.parent.parent;
      case 210 /* CallExpression */:
        return isImportCall(node.parent) || isRequireCall(
          node.parent,
          /*checkArg*/
          false
        ) ? node.parent : void 0;
      case 198 /* LiteralType */:
        Debug.assert(isStringLiteral(node));
        return tryCast(node.parent.parent, isImportTypeNode);
      default:
        return void 0;
    }
  }
  function getExternalModuleName(node) {
    switch (node.kind) {
      case 269 /* ImportDeclaration */:
      case 275 /* ExportDeclaration */:
        return node.moduleSpecifier;
      case 268 /* ImportEqualsDeclaration */:
        return node.moduleReference.kind === 280 /* ExternalModuleReference */ ? node.moduleReference.expression : void 0;
      case 202 /* ImportType */:
        return isLiteralImportTypeNode(node) ? node.argument.literal : void 0;
      case 210 /* CallExpression */:
        return node.arguments[0];
      case 264 /* ModuleDeclaration */:
        return node.name.kind === 10 /* StringLiteral */ ? node.name : void 0;
      default:
        return Debug.assertNever(node);
    }
  }
  function getNamespaceDeclarationNode(node) {
    switch (node.kind) {
      case 269 /* ImportDeclaration */:
        return node.importClause && tryCast(node.importClause.namedBindings, isNamespaceImport);
      case 268 /* ImportEqualsDeclaration */:
        return node;
      case 275 /* ExportDeclaration */:
        return node.exportClause && tryCast(node.exportClause, isNamespaceExport);
      default:
        return Debug.assertNever(node);
    }
  }
  function isDefaultImport(node) {
    return node.kind === 269 /* ImportDeclaration */ && !!node.importClause && !!node.importClause.name;
  }
  function forEachImportClauseDeclaration(node, action) {
    if (node.name) {
      const result = action(node);
      if (result)
        return result;
    }
    if (node.namedBindings) {
      const result = isNamespaceImport(node.namedBindings) ? action(node.namedBindings) : forEach(node.namedBindings.elements, action);
      if (result)
        return result;
    }
  }
  function hasQuestionToken(node) {
    if (node) {
      switch (node.kind) {
        case 166 /* Parameter */:
        case 171 /* MethodDeclaration */:
        case 170 /* MethodSignature */:
        case 300 /* ShorthandPropertyAssignment */:
        case 299 /* PropertyAssignment */:
        case 169 /* PropertyDeclaration */:
        case 168 /* PropertySignature */:
          return node.questionToken !== void 0;
      }
    }
    return false;
  }
  function isJSDocConstructSignature(node) {
    const param = isJSDocFunctionType(node) ? firstOrUndefined(node.parameters) : void 0;
    const name = tryCast(param && param.name, isIdentifier);
    return !!name && name.escapedText === "new";
  }
  function isJSDocTypeAlias(node) {
    return node.kind === 349 /* JSDocTypedefTag */ || node.kind === 341 /* JSDocCallbackTag */ || node.kind === 343 /* JSDocEnumTag */;
  }
  function isTypeAlias(node) {
    return isJSDocTypeAlias(node) || isTypeAliasDeclaration(node);
  }
  function getSourceOfAssignment(node) {
    return isExpressionStatement(node) && isBinaryExpression(node.expression) && node.expression.operatorToken.kind === 63 /* EqualsToken */ ? getRightMostAssignedExpression(node.expression) : void 0;
  }
  function getSourceOfDefaultedAssignment(node) {
    return isExpressionStatement(node) && isBinaryExpression(node.expression) && getAssignmentDeclarationKind(node.expression) !== 0 /* None */ && isBinaryExpression(node.expression.right) && (node.expression.right.operatorToken.kind === 56 /* BarBarToken */ || node.expression.right.operatorToken.kind === 60 /* QuestionQuestionToken */) ? node.expression.right.right : void 0;
  }
  function getSingleInitializerOfVariableStatementOrPropertyDeclaration(node) {
    switch (node.kind) {
      case 240 /* VariableStatement */:
        const v = getSingleVariableOfVariableStatement(node);
        return v && v.initializer;
      case 169 /* PropertyDeclaration */:
        return node.initializer;
      case 299 /* PropertyAssignment */:
        return node.initializer;
    }
  }
  function getSingleVariableOfVariableStatement(node) {
    return isVariableStatement(node) ? firstOrUndefined(node.declarationList.declarations) : void 0;
  }
  function getNestedModuleDeclaration(node) {
    return isModuleDeclaration(node) && node.body && node.body.kind === 264 /* ModuleDeclaration */ ? node.body : void 0;
  }
  function canHaveFlowNode(node) {
    if (node.kind >= 240 /* FirstStatement */ && node.kind <= 256 /* LastStatement */) {
      return true;
    }
    switch (node.kind) {
      case 79 /* Identifier */:
      case 108 /* ThisKeyword */:
      case 106 /* SuperKeyword */:
      case 163 /* QualifiedName */:
      case 233 /* MetaProperty */:
      case 209 /* ElementAccessExpression */:
      case 208 /* PropertyAccessExpression */:
      case 205 /* BindingElement */:
      case 215 /* FunctionExpression */:
      case 216 /* ArrowFunction */:
      case 171 /* MethodDeclaration */:
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
        return true;
      default:
        return false;
    }
  }
  function canHaveJSDoc(node) {
    switch (node.kind) {
      case 216 /* ArrowFunction */:
      case 223 /* BinaryExpression */:
      case 238 /* Block */:
      case 249 /* BreakStatement */:
      case 176 /* CallSignature */:
      case 292 /* CaseClause */:
      case 260 /* ClassDeclaration */:
      case 228 /* ClassExpression */:
      case 172 /* ClassStaticBlockDeclaration */:
      case 173 /* Constructor */:
      case 182 /* ConstructorType */:
      case 177 /* ConstructSignature */:
      case 248 /* ContinueStatement */:
      case 256 /* DebuggerStatement */:
      case 243 /* DoStatement */:
      case 209 /* ElementAccessExpression */:
      case 239 /* EmptyStatement */:
      case 1 /* EndOfFileToken */:
      case 263 /* EnumDeclaration */:
      case 302 /* EnumMember */:
      case 274 /* ExportAssignment */:
      case 275 /* ExportDeclaration */:
      case 278 /* ExportSpecifier */:
      case 241 /* ExpressionStatement */:
      case 246 /* ForInStatement */:
      case 247 /* ForOfStatement */:
      case 245 /* ForStatement */:
      case 259 /* FunctionDeclaration */:
      case 215 /* FunctionExpression */:
      case 181 /* FunctionType */:
      case 174 /* GetAccessor */:
      case 79 /* Identifier */:
      case 242 /* IfStatement */:
      case 269 /* ImportDeclaration */:
      case 268 /* ImportEqualsDeclaration */:
      case 178 /* IndexSignature */:
      case 261 /* InterfaceDeclaration */:
      case 320 /* JSDocFunctionType */:
      case 326 /* JSDocSignature */:
      case 253 /* LabeledStatement */:
      case 171 /* MethodDeclaration */:
      case 170 /* MethodSignature */:
      case 264 /* ModuleDeclaration */:
      case 199 /* NamedTupleMember */:
      case 267 /* NamespaceExportDeclaration */:
      case 207 /* ObjectLiteralExpression */:
      case 166 /* Parameter */:
      case 214 /* ParenthesizedExpression */:
      case 208 /* PropertyAccessExpression */:
      case 299 /* PropertyAssignment */:
      case 169 /* PropertyDeclaration */:
      case 168 /* PropertySignature */:
      case 250 /* ReturnStatement */:
      case 175 /* SetAccessor */:
      case 300 /* ShorthandPropertyAssignment */:
      case 301 /* SpreadAssignment */:
      case 252 /* SwitchStatement */:
      case 254 /* ThrowStatement */:
      case 255 /* TryStatement */:
      case 262 /* TypeAliasDeclaration */:
      case 165 /* TypeParameter */:
      case 257 /* VariableDeclaration */:
      case 240 /* VariableStatement */:
      case 244 /* WhileStatement */:
      case 251 /* WithStatement */:
        return true;
      default:
        return false;
    }
  }
  function getJSDocCommentsAndTags(hostNode, noCache) {
    let result;
    if (isVariableLike(hostNode) && hasInitializer(hostNode) && hasJSDocNodes(hostNode.initializer)) {
      result = addRange(result, filterOwnedJSDocTags(hostNode, last(hostNode.initializer.jsDoc)));
    }
    let node = hostNode;
    while (node && node.parent) {
      if (hasJSDocNodes(node)) {
        result = addRange(result, filterOwnedJSDocTags(hostNode, last(node.jsDoc)));
      }
      if (node.kind === 166 /* Parameter */) {
        result = addRange(result, (noCache ? getJSDocParameterTagsNoCache : getJSDocParameterTags)(node));
        break;
      }
      if (node.kind === 165 /* TypeParameter */) {
        result = addRange(result, (noCache ? getJSDocTypeParameterTagsNoCache : getJSDocTypeParameterTags)(node));
        break;
      }
      node = getNextJSDocCommentLocation(node);
    }
    return result || emptyArray;
  }
  function filterOwnedJSDocTags(hostNode, jsDoc) {
    if (isJSDoc(jsDoc)) {
      const ownedTags = filter(jsDoc.tags, (tag) => ownsJSDocTag(hostNode, tag));
      return jsDoc.tags === ownedTags ? [jsDoc] : ownedTags;
    }
    return ownsJSDocTag(hostNode, jsDoc) ? [jsDoc] : void 0;
  }
  function ownsJSDocTag(hostNode, tag) {
    return !(isJSDocTypeTag(tag) || isJSDocSatisfiesTag(tag)) || !tag.parent || !isJSDoc(tag.parent) || !isParenthesizedExpression(tag.parent.parent) || tag.parent.parent === hostNode;
  }
  function getNextJSDocCommentLocation(node) {
    const parent2 = node.parent;
    if (parent2.kind === 299 /* PropertyAssignment */ || parent2.kind === 274 /* ExportAssignment */ || parent2.kind === 169 /* PropertyDeclaration */ || parent2.kind === 241 /* ExpressionStatement */ && node.kind === 208 /* PropertyAccessExpression */ || parent2.kind === 250 /* ReturnStatement */ || getNestedModuleDeclaration(parent2) || isBinaryExpression(node) && node.operatorToken.kind === 63 /* EqualsToken */) {
      return parent2;
    } else if (parent2.parent && (getSingleVariableOfVariableStatement(parent2.parent) === node || isBinaryExpression(parent2) && parent2.operatorToken.kind === 63 /* EqualsToken */)) {
      return parent2.parent;
    } else if (parent2.parent && parent2.parent.parent && (getSingleVariableOfVariableStatement(parent2.parent.parent) || getSingleInitializerOfVariableStatementOrPropertyDeclaration(parent2.parent.parent) === node || getSourceOfDefaultedAssignment(parent2.parent.parent))) {
      return parent2.parent.parent;
    }
  }
  function getParameterSymbolFromJSDoc(node) {
    if (node.symbol) {
      return node.symbol;
    }
    if (!isIdentifier(node.name)) {
      return void 0;
    }
    const name = node.name.escapedText;
    const decl = getHostSignatureFromJSDoc(node);
    if (!decl) {
      return void 0;
    }
    const parameter = find(decl.parameters, (p) => p.name.kind === 79 /* Identifier */ && p.name.escapedText === name);
    return parameter && parameter.symbol;
  }
  function getEffectiveContainerForJSDocTemplateTag(node) {
    if (isJSDoc(node.parent) && node.parent.tags) {
      const typeAlias = find(node.parent.tags, isJSDocTypeAlias);
      if (typeAlias) {
        return typeAlias;
      }
    }
    return getHostSignatureFromJSDoc(node);
  }
  function getHostSignatureFromJSDoc(node) {
    const host = getEffectiveJSDocHost(node);
    if (host) {
      return isPropertySignature(host) && host.type && isFunctionLike(host.type) ? host.type : isFunctionLike(host) ? host : void 0;
    }
    return void 0;
  }
  function getEffectiveJSDocHost(node) {
    const host = getJSDocHost(node);
    if (host) {
      return getSourceOfDefaultedAssignment(host) || getSourceOfAssignment(host) || getSingleInitializerOfVariableStatementOrPropertyDeclaration(host) || getSingleVariableOfVariableStatement(host) || getNestedModuleDeclaration(host) || host;
    }
  }
  function getJSDocHost(node) {
    const jsDoc = getJSDocRoot(node);
    if (!jsDoc) {
      return void 0;
    }
    const host = jsDoc.parent;
    if (host && host.jsDoc && jsDoc === lastOrUndefined(host.jsDoc)) {
      return host;
    }
  }
  function getJSDocRoot(node) {
    return findAncestor(node.parent, isJSDoc);
  }
  function getTypeParameterFromJsDoc(node) {
    const name = node.name.escapedText;
    const { typeParameters } = node.parent.parent.parent;
    return typeParameters && find(typeParameters, (p) => p.name.escapedText === name);
  }
  function hasTypeArguments(node) {
    return !!node.typeArguments;
  }
  function getAssignmentTargetKind(node) {
    let parent2 = node.parent;
    while (true) {
      switch (parent2.kind) {
        case 223 /* BinaryExpression */:
          const binaryOperator = parent2.operatorToken.kind;
          return isAssignmentOperator(binaryOperator) && parent2.left === node ? binaryOperator === 63 /* EqualsToken */ || isLogicalOrCoalescingAssignmentOperator(binaryOperator) ? 1 /* Definite */ : 2 /* Compound */ : 0 /* None */;
        case 221 /* PrefixUnaryExpression */:
        case 222 /* PostfixUnaryExpression */:
          const unaryOperator = parent2.operator;
          return unaryOperator === 45 /* PlusPlusToken */ || unaryOperator === 46 /* MinusMinusToken */ ? 2 /* Compound */ : 0 /* None */;
        case 246 /* ForInStatement */:
        case 247 /* ForOfStatement */:
          return parent2.initializer === node ? 1 /* Definite */ : 0 /* None */;
        case 214 /* ParenthesizedExpression */:
        case 206 /* ArrayLiteralExpression */:
        case 227 /* SpreadElement */:
        case 232 /* NonNullExpression */:
          node = parent2;
          break;
        case 301 /* SpreadAssignment */:
          node = parent2.parent;
          break;
        case 300 /* ShorthandPropertyAssignment */:
          if (parent2.name !== node) {
            return 0 /* None */;
          }
          node = parent2.parent;
          break;
        case 299 /* PropertyAssignment */:
          if (parent2.name === node) {
            return 0 /* None */;
          }
          node = parent2.parent;
          break;
        default:
          return 0 /* None */;
      }
      parent2 = node.parent;
    }
  }
  function isAssignmentTarget(node) {
    return getAssignmentTargetKind(node) !== 0 /* None */;
  }
  function isNodeWithPossibleHoistedDeclaration(node) {
    switch (node.kind) {
      case 238 /* Block */:
      case 240 /* VariableStatement */:
      case 251 /* WithStatement */:
      case 242 /* IfStatement */:
      case 252 /* SwitchStatement */:
      case 266 /* CaseBlock */:
      case 292 /* CaseClause */:
      case 293 /* DefaultClause */:
      case 253 /* LabeledStatement */:
      case 245 /* ForStatement */:
      case 246 /* ForInStatement */:
      case 247 /* ForOfStatement */:
      case 243 /* DoStatement */:
      case 244 /* WhileStatement */:
      case 255 /* TryStatement */:
      case 295 /* CatchClause */:
        return true;
    }
    return false;
  }
  function isValueSignatureDeclaration(node) {
    return isFunctionExpression(node) || isArrowFunction(node) || isMethodOrAccessor(node) || isFunctionDeclaration(node) || isConstructorDeclaration(node);
  }
  function walkUp(node, kind) {
    while (node && node.kind === kind) {
      node = node.parent;
    }
    return node;
  }
  function walkUpParenthesizedTypes(node) {
    return walkUp(node, 193 /* ParenthesizedType */);
  }
  function walkUpParenthesizedExpressions(node) {
    return walkUp(node, 214 /* ParenthesizedExpression */);
  }
  function walkUpParenthesizedTypesAndGetParentAndChild(node) {
    let child;
    while (node && node.kind === 193 /* ParenthesizedType */) {
      child = node;
      node = node.parent;
    }
    return [child, node];
  }
  function skipTypeParentheses(node) {
    while (isParenthesizedTypeNode(node))
      node = node.type;
    return node;
  }
  function skipParentheses(node, excludeJSDocTypeAssertions) {
    const flags = excludeJSDocTypeAssertions ? 1 /* Parentheses */ | 16 /* ExcludeJSDocTypeAssertion */ : 1 /* Parentheses */;
    return skipOuterExpressions(node, flags);
  }
  function isDeleteTarget(node) {
    if (node.kind !== 208 /* PropertyAccessExpression */ && node.kind !== 209 /* ElementAccessExpression */) {
      return false;
    }
    node = walkUpParenthesizedExpressions(node.parent);
    return node && node.kind === 217 /* DeleteExpression */;
  }
  function isNodeDescendantOf(node, ancestor) {
    while (node) {
      if (node === ancestor)
        return true;
      node = node.parent;
    }
    return false;
  }
  function isDeclarationName(name) {
    return !isSourceFile(name) && !isBindingPattern(name) && isDeclaration(name.parent) && name.parent.name === name;
  }
  function getDeclarationFromName(name) {
    const parent2 = name.parent;
    switch (name.kind) {
      case 10 /* StringLiteral */:
      case 14 /* NoSubstitutionTemplateLiteral */:
      case 8 /* NumericLiteral */:
        if (isComputedPropertyName(parent2))
          return parent2.parent;
      case 79 /* Identifier */:
        if (isDeclaration(parent2)) {
          return parent2.name === name ? parent2 : void 0;
        } else if (isQualifiedName(parent2)) {
          const tag = parent2.parent;
          return isJSDocParameterTag(tag) && tag.name === parent2 ? tag : void 0;
        } else {
          const binExp = parent2.parent;
          return isBinaryExpression(binExp) && getAssignmentDeclarationKind(binExp) !== 0 /* None */ && (binExp.left.symbol || binExp.symbol) && getNameOfDeclaration(binExp) === name ? binExp : void 0;
        }
      case 80 /* PrivateIdentifier */:
        return isDeclaration(parent2) && parent2.name === name ? parent2 : void 0;
      default:
        return void 0;
    }
  }
  function isLiteralComputedPropertyDeclarationName(node) {
    return isStringOrNumericLiteralLike(node) && node.parent.kind === 164 /* ComputedPropertyName */ && isDeclaration(node.parent.parent);
  }
  function isIdentifierName(node) {
    const parent2 = node.parent;
    switch (parent2.kind) {
      case 169 /* PropertyDeclaration */:
      case 168 /* PropertySignature */:
      case 171 /* MethodDeclaration */:
      case 170 /* MethodSignature */:
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
      case 302 /* EnumMember */:
      case 299 /* PropertyAssignment */:
      case 208 /* PropertyAccessExpression */:
        return parent2.name === node;
      case 163 /* QualifiedName */:
        return parent2.right === node;
      case 205 /* BindingElement */:
      case 273 /* ImportSpecifier */:
        return parent2.propertyName === node;
      case 278 /* ExportSpecifier */:
      case 288 /* JsxAttribute */:
      case 282 /* JsxSelfClosingElement */:
      case 283 /* JsxOpeningElement */:
      case 284 /* JsxClosingElement */:
        return true;
    }
    return false;
  }
  function isAliasSymbolDeclaration(node) {
    if (node.kind === 268 /* ImportEqualsDeclaration */ || node.kind === 267 /* NamespaceExportDeclaration */ || node.kind === 270 /* ImportClause */ && !!node.name || node.kind === 271 /* NamespaceImport */ || node.kind === 277 /* NamespaceExport */ || node.kind === 273 /* ImportSpecifier */ || node.kind === 278 /* ExportSpecifier */ || node.kind === 274 /* ExportAssignment */ && exportAssignmentIsAlias(node)) {
      return true;
    }
    return isInJSFile(node) && (isBinaryExpression(node) && getAssignmentDeclarationKind(node) === 2 /* ModuleExports */ && exportAssignmentIsAlias(node) || isPropertyAccessExpression(node) && isBinaryExpression(node.parent) && node.parent.left === node && node.parent.operatorToken.kind === 63 /* EqualsToken */ && isAliasableExpression(node.parent.right));
  }
  function getAliasDeclarationFromName(node) {
    switch (node.parent.kind) {
      case 270 /* ImportClause */:
      case 273 /* ImportSpecifier */:
      case 271 /* NamespaceImport */:
      case 278 /* ExportSpecifier */:
      case 274 /* ExportAssignment */:
      case 268 /* ImportEqualsDeclaration */:
      case 277 /* NamespaceExport */:
        return node.parent;
      case 163 /* QualifiedName */:
        do {
          node = node.parent;
        } while (node.parent.kind === 163 /* QualifiedName */);
        return getAliasDeclarationFromName(node);
    }
  }
  function isAliasableExpression(e) {
    return isEntityNameExpression(e) || isClassExpression(e);
  }
  function exportAssignmentIsAlias(node) {
    const e = getExportAssignmentExpression(node);
    return isAliasableExpression(e);
  }
  function getExportAssignmentExpression(node) {
    return isExportAssignment(node) ? node.expression : node.right;
  }
  function getPropertyAssignmentAliasLikeExpression(node) {
    return node.kind === 300 /* ShorthandPropertyAssignment */ ? node.name : node.kind === 299 /* PropertyAssignment */ ? node.initializer : node.parent.right;
  }
  function getEffectiveBaseTypeNode(node) {
    const baseType = getClassExtendsHeritageElement(node);
    if (baseType && isInJSFile(node)) {
      const tag = getJSDocAugmentsTag(node);
      if (tag) {
        return tag.class;
      }
    }
    return baseType;
  }
  function getClassExtendsHeritageElement(node) {
    const heritageClause = getHeritageClause(node.heritageClauses, 94 /* ExtendsKeyword */);
    return heritageClause && heritageClause.types.length > 0 ? heritageClause.types[0] : void 0;
  }
  function getEffectiveImplementsTypeNodes(node) {
    if (isInJSFile(node)) {
      return getJSDocImplementsTags(node).map((n) => n.class);
    } else {
      const heritageClause = getHeritageClause(node.heritageClauses, 117 /* ImplementsKeyword */);
      return heritageClause == null ? void 0 : heritageClause.types;
    }
  }
  function getAllSuperTypeNodes(node) {
    return isInterfaceDeclaration(node) ? getInterfaceBaseTypeNodes(node) || emptyArray : isClassLike(node) ? concatenate(singleElementArray(getEffectiveBaseTypeNode(node)), getEffectiveImplementsTypeNodes(node)) || emptyArray : emptyArray;
  }
  function getInterfaceBaseTypeNodes(node) {
    const heritageClause = getHeritageClause(node.heritageClauses, 94 /* ExtendsKeyword */);
    return heritageClause ? heritageClause.types : void 0;
  }
  function getHeritageClause(clauses, kind) {
    if (clauses) {
      for (const clause of clauses) {
        if (clause.token === kind) {
          return clause;
        }
      }
    }
    return void 0;
  }
  function getAncestor(node, kind) {
    while (node) {
      if (node.kind === kind) {
        return node;
      }
      node = node.parent;
    }
    return void 0;
  }
  function isKeyword(token) {
    return 81 /* FirstKeyword */ <= token && token <= 162 /* LastKeyword */;
  }
  function isContextualKeyword(token) {
    return 126 /* FirstContextualKeyword */ <= token && token <= 162 /* LastContextualKeyword */;
  }
  function isNonContextualKeyword(token) {
    return isKeyword(token) && !isContextualKeyword(token);
  }
  function isFutureReservedKeyword(token) {
    return 117 /* FirstFutureReservedWord */ <= token && token <= 125 /* LastFutureReservedWord */;
  }
  function isStringANonContextualKeyword(name) {
    const token = stringToToken(name);
    return token !== void 0 && isNonContextualKeyword(token);
  }
  function isStringAKeyword(name) {
    const token = stringToToken(name);
    return token !== void 0 && isKeyword(token);
  }
  function isIdentifierANonContextualKeyword(node) {
    const originalKeywordKind = identifierToKeywordKind(node);
    return !!originalKeywordKind && !isContextualKeyword(originalKeywordKind);
  }
  function isTrivia(token) {
    return 2 /* FirstTriviaToken */ <= token && token <= 7 /* LastTriviaToken */;
  }
  function getFunctionFlags(node) {
    if (!node) {
      return 4 /* Invalid */;
    }
    let flags = 0 /* Normal */;
    switch (node.kind) {
      case 259 /* FunctionDeclaration */:
      case 215 /* FunctionExpression */:
      case 171 /* MethodDeclaration */:
        if (node.asteriskToken) {
          flags |= 1 /* Generator */;
        }
      case 216 /* ArrowFunction */:
        if (hasSyntacticModifier(node, 512 /* Async */)) {
          flags |= 2 /* Async */;
        }
        break;
    }
    if (!node.body) {
      flags |= 4 /* Invalid */;
    }
    return flags;
  }
  function isAsyncFunction(node) {
    switch (node.kind) {
      case 259 /* FunctionDeclaration */:
      case 215 /* FunctionExpression */:
      case 216 /* ArrowFunction */:
      case 171 /* MethodDeclaration */:
        return node.body !== void 0 && node.asteriskToken === void 0 && hasSyntacticModifier(node, 512 /* Async */);
    }
    return false;
  }
  function isStringOrNumericLiteralLike(node) {
    return isStringLiteralLike(node) || isNumericLiteral(node);
  }
  function isSignedNumericLiteral(node) {
    return isPrefixUnaryExpression(node) && (node.operator === 39 /* PlusToken */ || node.operator === 40 /* MinusToken */) && isNumericLiteral(node.operand);
  }
  function hasDynamicName(declaration) {
    const name = getNameOfDeclaration(declaration);
    return !!name && isDynamicName(name);
  }
  function isDynamicName(name) {
    if (!(name.kind === 164 /* ComputedPropertyName */ || name.kind === 209 /* ElementAccessExpression */)) {
      return false;
    }
    const expr = isElementAccessExpression(name) ? skipParentheses(name.argumentExpression) : name.expression;
    return !isStringOrNumericLiteralLike(expr) && !isSignedNumericLiteral(expr);
  }
  function getPropertyNameForPropertyNameNode(name) {
    switch (name.kind) {
      case 79 /* Identifier */:
      case 80 /* PrivateIdentifier */:
        return name.escapedText;
      case 10 /* StringLiteral */:
      case 8 /* NumericLiteral */:
        return escapeLeadingUnderscores(name.text);
      case 164 /* ComputedPropertyName */:
        const nameExpression = name.expression;
        if (isStringOrNumericLiteralLike(nameExpression)) {
          return escapeLeadingUnderscores(nameExpression.text);
        } else if (isSignedNumericLiteral(nameExpression)) {
          if (nameExpression.operator === 40 /* MinusToken */) {
            return tokenToString(nameExpression.operator) + nameExpression.operand.text;
          }
          return nameExpression.operand.text;
        }
        return void 0;
      default:
        return Debug.assertNever(name);
    }
  }
  function isPropertyNameLiteral(node) {
    switch (node.kind) {
      case 79 /* Identifier */:
      case 10 /* StringLiteral */:
      case 14 /* NoSubstitutionTemplateLiteral */:
      case 8 /* NumericLiteral */:
        return true;
      default:
        return false;
    }
  }
  function getTextOfIdentifierOrLiteral(node) {
    return isMemberName(node) ? idText(node) : node.text;
  }
  function getEscapedTextOfIdentifierOrLiteral(node) {
    return isMemberName(node) ? node.escapedText : escapeLeadingUnderscores(node.text);
  }
  function getPropertyNameForUniqueESSymbol(symbol) {
    return `__@${getSymbolId(symbol)}@${symbol.escapedName}`;
  }
  function getSymbolNameForPrivateIdentifier(containingClassSymbol, description2) {
    return `__#${getSymbolId(containingClassSymbol)}@${description2}`;
  }
  function isKnownSymbol(symbol) {
    return startsWith(symbol.escapedName, "__@");
  }
  function isPrivateIdentifierSymbol(symbol) {
    return startsWith(symbol.escapedName, "__#");
  }
  function isESSymbolIdentifier(node) {
    return node.kind === 79 /* Identifier */ && node.escapedText === "Symbol";
  }
  function isProtoSetter(node) {
    return isIdentifier(node) ? idText(node) === "__proto__" : isStringLiteral(node) && node.text === "__proto__";
  }
  function isAnonymousFunctionDefinition(node, cb) {
    node = skipOuterExpressions(node);
    switch (node.kind) {
      case 228 /* ClassExpression */:
      case 215 /* FunctionExpression */:
        if (node.name) {
          return false;
        }
        break;
      case 216 /* ArrowFunction */:
        break;
      default:
        return false;
    }
    return typeof cb === "function" ? cb(node) : true;
  }
  function isNamedEvaluationSource(node) {
    switch (node.kind) {
      case 299 /* PropertyAssignment */:
        return !isProtoSetter(node.name);
      case 300 /* ShorthandPropertyAssignment */:
        return !!node.objectAssignmentInitializer;
      case 257 /* VariableDeclaration */:
        return isIdentifier(node.name) && !!node.initializer;
      case 166 /* Parameter */:
        return isIdentifier(node.name) && !!node.initializer && !node.dotDotDotToken;
      case 205 /* BindingElement */:
        return isIdentifier(node.name) && !!node.initializer && !node.dotDotDotToken;
      case 169 /* PropertyDeclaration */:
        return !!node.initializer;
      case 223 /* BinaryExpression */:
        switch (node.operatorToken.kind) {
          case 63 /* EqualsToken */:
          case 76 /* AmpersandAmpersandEqualsToken */:
          case 75 /* BarBarEqualsToken */:
          case 77 /* QuestionQuestionEqualsToken */:
            return isIdentifier(node.left);
        }
        break;
      case 274 /* ExportAssignment */:
        return true;
    }
    return false;
  }
  function isNamedEvaluation(node, cb) {
    if (!isNamedEvaluationSource(node))
      return false;
    switch (node.kind) {
      case 299 /* PropertyAssignment */:
        return isAnonymousFunctionDefinition(node.initializer, cb);
      case 300 /* ShorthandPropertyAssignment */:
        return isAnonymousFunctionDefinition(node.objectAssignmentInitializer, cb);
      case 257 /* VariableDeclaration */:
      case 166 /* Parameter */:
      case 205 /* BindingElement */:
      case 169 /* PropertyDeclaration */:
        return isAnonymousFunctionDefinition(node.initializer, cb);
      case 223 /* BinaryExpression */:
        return isAnonymousFunctionDefinition(node.right, cb);
      case 274 /* ExportAssignment */:
        return isAnonymousFunctionDefinition(node.expression, cb);
    }
  }
  function isPushOrUnshiftIdentifier(node) {
    return node.escapedText === "push" || node.escapedText === "unshift";
  }
  function isParameterDeclaration(node) {
    const root = getRootDeclaration(node);
    return root.kind === 166 /* Parameter */;
  }
  function getRootDeclaration(node) {
    while (node.kind === 205 /* BindingElement */) {
      node = node.parent.parent;
    }
    return node;
  }
  function nodeStartsNewLexicalEnvironment(node) {
    const kind = node.kind;
    return kind === 173 /* Constructor */ || kind === 215 /* FunctionExpression */ || kind === 259 /* FunctionDeclaration */ || kind === 216 /* ArrowFunction */ || kind === 171 /* MethodDeclaration */ || kind === 174 /* GetAccessor */ || kind === 175 /* SetAccessor */ || kind === 264 /* ModuleDeclaration */ || kind === 308 /* SourceFile */;
  }
  function nodeIsSynthesized(range) {
    return positionIsSynthesized(range.pos) || positionIsSynthesized(range.end);
  }
  function getOriginalSourceFile(sourceFile) {
    return getParseTreeNode(sourceFile, isSourceFile) || sourceFile;
  }
  function getExpressionAssociativity(expression) {
    const operator = getOperator(expression);
    const hasArguments = expression.kind === 211 /* NewExpression */ && expression.arguments !== void 0;
    return getOperatorAssociativity(expression.kind, operator, hasArguments);
  }
  function getOperatorAssociativity(kind, operator, hasArguments) {
    switch (kind) {
      case 211 /* NewExpression */:
        return hasArguments ? 0 /* Left */ : 1 /* Right */;
      case 221 /* PrefixUnaryExpression */:
      case 218 /* TypeOfExpression */:
      case 219 /* VoidExpression */:
      case 217 /* DeleteExpression */:
      case 220 /* AwaitExpression */:
      case 224 /* ConditionalExpression */:
      case 226 /* YieldExpression */:
        return 1 /* Right */;
      case 223 /* BinaryExpression */:
        switch (operator) {
          case 42 /* AsteriskAsteriskToken */:
          case 63 /* EqualsToken */:
          case 64 /* PlusEqualsToken */:
          case 65 /* MinusEqualsToken */:
          case 67 /* AsteriskAsteriskEqualsToken */:
          case 66 /* AsteriskEqualsToken */:
          case 68 /* SlashEqualsToken */:
          case 69 /* PercentEqualsToken */:
          case 70 /* LessThanLessThanEqualsToken */:
          case 71 /* GreaterThanGreaterThanEqualsToken */:
          case 72 /* GreaterThanGreaterThanGreaterThanEqualsToken */:
          case 73 /* AmpersandEqualsToken */:
          case 78 /* CaretEqualsToken */:
          case 74 /* BarEqualsToken */:
          case 75 /* BarBarEqualsToken */:
          case 76 /* AmpersandAmpersandEqualsToken */:
          case 77 /* QuestionQuestionEqualsToken */:
            return 1 /* Right */;
        }
    }
    return 0 /* Left */;
  }
  function getExpressionPrecedence(expression) {
    const operator = getOperator(expression);
    const hasArguments = expression.kind === 211 /* NewExpression */ && expression.arguments !== void 0;
    return getOperatorPrecedence(expression.kind, operator, hasArguments);
  }
  function getOperator(expression) {
    if (expression.kind === 223 /* BinaryExpression */) {
      return expression.operatorToken.kind;
    } else if (expression.kind === 221 /* PrefixUnaryExpression */ || expression.kind === 222 /* PostfixUnaryExpression */) {
      return expression.operator;
    } else {
      return expression.kind;
    }
  }
  function getOperatorPrecedence(nodeKind, operatorKind, hasArguments) {
    switch (nodeKind) {
      case 357 /* CommaListExpression */:
        return 0 /* Comma */;
      case 227 /* SpreadElement */:
        return 1 /* Spread */;
      case 226 /* YieldExpression */:
        return 2 /* Yield */;
      case 224 /* ConditionalExpression */:
        return 4 /* Conditional */;
      case 223 /* BinaryExpression */:
        switch (operatorKind) {
          case 27 /* CommaToken */:
            return 0 /* Comma */;
          case 63 /* EqualsToken */:
          case 64 /* PlusEqualsToken */:
          case 65 /* MinusEqualsToken */:
          case 67 /* AsteriskAsteriskEqualsToken */:
          case 66 /* AsteriskEqualsToken */:
          case 68 /* SlashEqualsToken */:
          case 69 /* PercentEqualsToken */:
          case 70 /* LessThanLessThanEqualsToken */:
          case 71 /* GreaterThanGreaterThanEqualsToken */:
          case 72 /* GreaterThanGreaterThanGreaterThanEqualsToken */:
          case 73 /* AmpersandEqualsToken */:
          case 78 /* CaretEqualsToken */:
          case 74 /* BarEqualsToken */:
          case 75 /* BarBarEqualsToken */:
          case 76 /* AmpersandAmpersandEqualsToken */:
          case 77 /* QuestionQuestionEqualsToken */:
            return 3 /* Assignment */;
          default:
            return getBinaryOperatorPrecedence(operatorKind);
        }
      case 213 /* TypeAssertionExpression */:
      case 232 /* NonNullExpression */:
      case 221 /* PrefixUnaryExpression */:
      case 218 /* TypeOfExpression */:
      case 219 /* VoidExpression */:
      case 217 /* DeleteExpression */:
      case 220 /* AwaitExpression */:
        return 16 /* Unary */;
      case 222 /* PostfixUnaryExpression */:
        return 17 /* Update */;
      case 210 /* CallExpression */:
        return 18 /* LeftHandSide */;
      case 211 /* NewExpression */:
        return hasArguments ? 19 /* Member */ : 18 /* LeftHandSide */;
      case 212 /* TaggedTemplateExpression */:
      case 208 /* PropertyAccessExpression */:
      case 209 /* ElementAccessExpression */:
      case 233 /* MetaProperty */:
        return 19 /* Member */;
      case 231 /* AsExpression */:
      case 235 /* SatisfiesExpression */:
        return 11 /* Relational */;
      case 108 /* ThisKeyword */:
      case 106 /* SuperKeyword */:
      case 79 /* Identifier */:
      case 80 /* PrivateIdentifier */:
      case 104 /* NullKeyword */:
      case 110 /* TrueKeyword */:
      case 95 /* FalseKeyword */:
      case 8 /* NumericLiteral */:
      case 9 /* BigIntLiteral */:
      case 10 /* StringLiteral */:
      case 206 /* ArrayLiteralExpression */:
      case 207 /* ObjectLiteralExpression */:
      case 215 /* FunctionExpression */:
      case 216 /* ArrowFunction */:
      case 228 /* ClassExpression */:
      case 13 /* RegularExpressionLiteral */:
      case 14 /* NoSubstitutionTemplateLiteral */:
      case 225 /* TemplateExpression */:
      case 214 /* ParenthesizedExpression */:
      case 229 /* OmittedExpression */:
      case 281 /* JsxElement */:
      case 282 /* JsxSelfClosingElement */:
      case 285 /* JsxFragment */:
        return 20 /* Primary */;
      default:
        return -1 /* Invalid */;
    }
  }
  function getBinaryOperatorPrecedence(kind) {
    switch (kind) {
      case 60 /* QuestionQuestionToken */:
        return 4 /* Coalesce */;
      case 56 /* BarBarToken */:
        return 5 /* LogicalOR */;
      case 55 /* AmpersandAmpersandToken */:
        return 6 /* LogicalAND */;
      case 51 /* BarToken */:
        return 7 /* BitwiseOR */;
      case 52 /* CaretToken */:
        return 8 /* BitwiseXOR */;
      case 50 /* AmpersandToken */:
        return 9 /* BitwiseAND */;
      case 34 /* EqualsEqualsToken */:
      case 35 /* ExclamationEqualsToken */:
      case 36 /* EqualsEqualsEqualsToken */:
      case 37 /* ExclamationEqualsEqualsToken */:
        return 10 /* Equality */;
      case 29 /* LessThanToken */:
      case 31 /* GreaterThanToken */:
      case 32 /* LessThanEqualsToken */:
      case 33 /* GreaterThanEqualsToken */:
      case 102 /* InstanceOfKeyword */:
      case 101 /* InKeyword */:
      case 128 /* AsKeyword */:
      case 150 /* SatisfiesKeyword */:
        return 11 /* Relational */;
      case 47 /* LessThanLessThanToken */:
      case 48 /* GreaterThanGreaterThanToken */:
      case 49 /* GreaterThanGreaterThanGreaterThanToken */:
        return 12 /* Shift */;
      case 39 /* PlusToken */:
      case 40 /* MinusToken */:
        return 13 /* Additive */;
      case 41 /* AsteriskToken */:
      case 43 /* SlashToken */:
      case 44 /* PercentToken */:
        return 14 /* Multiplicative */;
      case 42 /* AsteriskAsteriskToken */:
        return 15 /* Exponentiation */;
    }
    return -1;
  }
  function getSemanticJsxChildren(children) {
    return filter(children, (i) => {
      switch (i.kind) {
        case 291 /* JsxExpression */:
          return !!i.expression;
        case 11 /* JsxText */:
          return !i.containsOnlyTriviaWhiteSpaces;
        default:
          return true;
      }
    });
  }
  function createDiagnosticCollection() {
    let nonFileDiagnostics = [];
    const filesWithDiagnostics = [];
    const fileDiagnostics = /* @__PURE__ */ new Map();
    let hasReadNonFileDiagnostics = false;
    return {
      add,
      lookup,
      getGlobalDiagnostics,
      getDiagnostics: getDiagnostics2
    };
    function lookup(diagnostic) {
      let diagnostics;
      if (diagnostic.file) {
        diagnostics = fileDiagnostics.get(diagnostic.file.fileName);
      } else {
        diagnostics = nonFileDiagnostics;
      }
      if (!diagnostics) {
        return void 0;
      }
      const result = binarySearch(diagnostics, diagnostic, identity, compareDiagnosticsSkipRelatedInformation);
      if (result >= 0) {
        return diagnostics[result];
      }
      return void 0;
    }
    function add(diagnostic) {
      let diagnostics;
      if (diagnostic.file) {
        diagnostics = fileDiagnostics.get(diagnostic.file.fileName);
        if (!diagnostics) {
          diagnostics = [];
          fileDiagnostics.set(diagnostic.file.fileName, diagnostics);
          insertSorted(filesWithDiagnostics, diagnostic.file.fileName, compareStringsCaseSensitive);
        }
      } else {
        if (hasReadNonFileDiagnostics) {
          hasReadNonFileDiagnostics = false;
          nonFileDiagnostics = nonFileDiagnostics.slice();
        }
        diagnostics = nonFileDiagnostics;
      }
      insertSorted(diagnostics, diagnostic, compareDiagnosticsSkipRelatedInformation);
    }
    function getGlobalDiagnostics() {
      hasReadNonFileDiagnostics = true;
      return nonFileDiagnostics;
    }
    function getDiagnostics2(fileName) {
      if (fileName) {
        return fileDiagnostics.get(fileName) || [];
      }
      const fileDiags = flatMapToMutable(filesWithDiagnostics, (f) => fileDiagnostics.get(f));
      if (!nonFileDiagnostics.length) {
        return fileDiags;
      }
      fileDiags.unshift(...nonFileDiagnostics);
      return fileDiags;
    }
  }
  function escapeTemplateSubstitution(str) {
    return str.replace(templateSubstitutionRegExp, "\\${");
  }
  function hasInvalidEscape(template) {
    return template && !!(isNoSubstitutionTemplateLiteral(template) ? template.templateFlags : template.head.templateFlags || some(template.templateSpans, (span) => !!span.literal.templateFlags));
  }
  function encodeUtf16EscapeSequence(charCode) {
    const hexCharCode = charCode.toString(16).toUpperCase();
    const paddedHexCode = ("0000" + hexCharCode).slice(-4);
    return "\\u" + paddedHexCode;
  }
  function getReplacement(c, offset, input) {
    if (c.charCodeAt(0) === 0 /* nullCharacter */) {
      const lookAhead = input.charCodeAt(offset + c.length);
      if (lookAhead >= 48 /* _0 */ && lookAhead <= 57 /* _9 */) {
        return "\\x00";
      }
      return "\\0";
    }
    return escapedCharsMap.get(c) || encodeUtf16EscapeSequence(c.charCodeAt(0));
  }
  function escapeString(s, quoteChar) {
    const escapedCharsRegExp = quoteChar === 96 /* backtick */ ? backtickQuoteEscapedCharsRegExp : quoteChar === 39 /* singleQuote */ ? singleQuoteEscapedCharsRegExp : doubleQuoteEscapedCharsRegExp;
    return s.replace(escapedCharsRegExp, getReplacement);
  }
  function escapeNonAsciiString(s, quoteChar) {
    s = escapeString(s, quoteChar);
    return nonAsciiCharacters.test(s) ? s.replace(nonAsciiCharacters, (c) => encodeUtf16EscapeSequence(c.charCodeAt(0))) : s;
  }
  function encodeJsxCharacterEntity(charCode) {
    const hexCharCode = charCode.toString(16).toUpperCase();
    return "&#x" + hexCharCode + ";";
  }
  function getJsxAttributeStringReplacement(c) {
    if (c.charCodeAt(0) === 0 /* nullCharacter */) {
      return "&#0;";
    }
    return jsxEscapedCharsMap.get(c) || encodeJsxCharacterEntity(c.charCodeAt(0));
  }
  function escapeJsxAttributeString(s, quoteChar) {
    const escapedCharsRegExp = quoteChar === 39 /* singleQuote */ ? jsxSingleQuoteEscapedCharsRegExp : jsxDoubleQuoteEscapedCharsRegExp;
    return s.replace(escapedCharsRegExp, getJsxAttributeStringReplacement);
  }
  function stripQuotes(name) {
    const length2 = name.length;
    if (length2 >= 2 && name.charCodeAt(0) === name.charCodeAt(length2 - 1) && isQuoteOrBacktick(name.charCodeAt(0))) {
      return name.substring(1, length2 - 1);
    }
    return name;
  }
  function isQuoteOrBacktick(charCode) {
    return charCode === 39 /* singleQuote */ || charCode === 34 /* doubleQuote */ || charCode === 96 /* backtick */;
  }
  function isIntrinsicJsxName(name) {
    const ch = name.charCodeAt(0);
    return ch >= 97 /* a */ && ch <= 122 /* z */ || stringContains(name, "-") || stringContains(name, ":");
  }
  function getIndentString(level) {
    const singleLevel = indentStrings[1];
    for (let current = indentStrings.length; current <= level; current++) {
      indentStrings.push(indentStrings[current - 1] + singleLevel);
    }
    return indentStrings[level];
  }
  function getIndentSize() {
    return indentStrings[1].length;
  }
  function isNightly() {
    return stringContains(version, "-dev") || stringContains(version, "-insiders");
  }
  function createTextWriter(newLine) {
    var output;
    var indent2;
    var lineStart;
    var lineCount;
    var linePos;
    var hasTrailingComment = false;
    function updateLineCountAndPosFor(s) {
      const lineStartsOfS = computeLineStarts(s);
      if (lineStartsOfS.length > 1) {
        lineCount = lineCount + lineStartsOfS.length - 1;
        linePos = output.length - s.length + last(lineStartsOfS);
        lineStart = linePos - output.length === 0;
      } else {
        lineStart = false;
      }
    }
    function writeText(s) {
      if (s && s.length) {
        if (lineStart) {
          s = getIndentString(indent2) + s;
          lineStart = false;
        }
        output += s;
        updateLineCountAndPosFor(s);
      }
    }
    function write(s) {
      if (s)
        hasTrailingComment = false;
      writeText(s);
    }
    function writeComment(s) {
      if (s)
        hasTrailingComment = true;
      writeText(s);
    }
    function reset2() {
      output = "";
      indent2 = 0;
      lineStart = true;
      lineCount = 0;
      linePos = 0;
      hasTrailingComment = false;
    }
    function rawWrite(s) {
      if (s !== void 0) {
        output += s;
        updateLineCountAndPosFor(s);
        hasTrailingComment = false;
      }
    }
    function writeLiteral(s) {
      if (s && s.length) {
        write(s);
      }
    }
    function writeLine(force) {
      if (!lineStart || force) {
        output += newLine;
        lineCount++;
        linePos = output.length;
        lineStart = true;
        hasTrailingComment = false;
      }
    }
    function getTextPosWithWriteLine() {
      return lineStart ? output.length : output.length + newLine.length;
    }
    reset2();
    return {
      write,
      rawWrite,
      writeLiteral,
      writeLine,
      increaseIndent: () => {
        indent2++;
      },
      decreaseIndent: () => {
        indent2--;
      },
      getIndent: () => indent2,
      getTextPos: () => output.length,
      getLine: () => lineCount,
      getColumn: () => lineStart ? indent2 * getIndentSize() : output.length - linePos,
      getText: () => output,
      isAtStartOfLine: () => lineStart,
      hasTrailingComment: () => hasTrailingComment,
      hasTrailingWhitespace: () => !!output.length && isWhiteSpaceLike(output.charCodeAt(output.length - 1)),
      clear: reset2,
      writeKeyword: write,
      writeOperator: write,
      writeParameter: write,
      writeProperty: write,
      writePunctuation: write,
      writeSpace: write,
      writeStringLiteral: write,
      writeSymbol: (s, _) => write(s),
      writeTrailingSemicolon: write,
      writeComment,
      getTextPosWithWriteLine
    };
  }
  function getTrailingSemicolonDeferringWriter(writer) {
    let pendingTrailingSemicolon = false;
    function commitPendingTrailingSemicolon() {
      if (pendingTrailingSemicolon) {
        writer.writeTrailingSemicolon(";");
        pendingTrailingSemicolon = false;
      }
    }
    return {
      ...writer,
      writeTrailingSemicolon() {
        pendingTrailingSemicolon = true;
      },
      writeLiteral(s) {
        commitPendingTrailingSemicolon();
        writer.writeLiteral(s);
      },
      writeStringLiteral(s) {
        commitPendingTrailingSemicolon();
        writer.writeStringLiteral(s);
      },
      writeSymbol(s, sym) {
        commitPendingTrailingSemicolon();
        writer.writeSymbol(s, sym);
      },
      writePunctuation(s) {
        commitPendingTrailingSemicolon();
        writer.writePunctuation(s);
      },
      writeKeyword(s) {
        commitPendingTrailingSemicolon();
        writer.writeKeyword(s);
      },
      writeOperator(s) {
        commitPendingTrailingSemicolon();
        writer.writeOperator(s);
      },
      writeParameter(s) {
        commitPendingTrailingSemicolon();
        writer.writeParameter(s);
      },
      writeSpace(s) {
        commitPendingTrailingSemicolon();
        writer.writeSpace(s);
      },
      writeProperty(s) {
        commitPendingTrailingSemicolon();
        writer.writeProperty(s);
      },
      writeComment(s) {
        commitPendingTrailingSemicolon();
        writer.writeComment(s);
      },
      writeLine() {
        commitPendingTrailingSemicolon();
        writer.writeLine();
      },
      increaseIndent() {
        commitPendingTrailingSemicolon();
        writer.increaseIndent();
      },
      decreaseIndent() {
        commitPendingTrailingSemicolon();
        writer.decreaseIndent();
      }
    };
  }
  function hostUsesCaseSensitiveFileNames(host) {
    return host.useCaseSensitiveFileNames ? host.useCaseSensitiveFileNames() : false;
  }
  function hostGetCanonicalFileName(host) {
    return createGetCanonicalFileName(hostUsesCaseSensitiveFileNames(host));
  }
  function getResolvedExternalModuleName(host, file, referenceFile) {
    return file.moduleName || getExternalModuleNameFromPath(host, file.fileName, referenceFile && referenceFile.fileName);
  }
  function getCanonicalAbsolutePath(host, path) {
    return host.getCanonicalFileName(getNormalizedAbsolutePath(path, host.getCurrentDirectory()));
  }
  function getExternalModuleNameFromDeclaration(host, resolver, declaration) {
    const file = resolver.getExternalModuleFileFromDeclaration(declaration);
    if (!file || file.isDeclarationFile) {
      return void 0;
    }
    const specifier = getExternalModuleName(declaration);
    if (specifier && isStringLiteralLike(specifier) && !pathIsRelative(specifier.text) && getCanonicalAbsolutePath(host, file.path).indexOf(getCanonicalAbsolutePath(host, ensureTrailingDirectorySeparator(host.getCommonSourceDirectory()))) === -1) {
      return void 0;
    }
    return getResolvedExternalModuleName(host, file);
  }
  function getExternalModuleNameFromPath(host, fileName, referencePath) {
    const getCanonicalFileName = (f) => host.getCanonicalFileName(f);
    const dir = toPath(referencePath ? getDirectoryPath(referencePath) : host.getCommonSourceDirectory(), host.getCurrentDirectory(), getCanonicalFileName);
    const filePath = getNormalizedAbsolutePath(fileName, host.getCurrentDirectory());
    const relativePath = getRelativePathToDirectoryOrUrl(
      dir,
      filePath,
      dir,
      getCanonicalFileName,
      /*isAbsolutePathAnUrl*/
      false
    );
    const extensionless = removeFileExtension(relativePath);
    return referencePath ? ensurePathIsNonModuleName(extensionless) : extensionless;
  }
  function getOwnEmitOutputFilePath(fileName, host, extension) {
    const compilerOptions = host.getCompilerOptions();
    let emitOutputFilePathWithoutExtension;
    if (compilerOptions.outDir) {
      emitOutputFilePathWithoutExtension = removeFileExtension(getSourceFilePathInNewDir(fileName, host, compilerOptions.outDir));
    } else {
      emitOutputFilePathWithoutExtension = removeFileExtension(fileName);
    }
    return emitOutputFilePathWithoutExtension + extension;
  }
  function getDeclarationEmitOutputFilePath(fileName, host) {
    return getDeclarationEmitOutputFilePathWorker(fileName, host.getCompilerOptions(), host.getCurrentDirectory(), host.getCommonSourceDirectory(), (f) => host.getCanonicalFileName(f));
  }
  function getDeclarationEmitOutputFilePathWorker(fileName, options, currentDirectory, commonSourceDirectory, getCanonicalFileName) {
    const outputDir = options.declarationDir || options.outDir;
    const path = outputDir ? getSourceFilePathInNewDirWorker(fileName, outputDir, currentDirectory, commonSourceDirectory, getCanonicalFileName) : fileName;
    const declarationExtension = getDeclarationEmitExtensionForPath(path);
    return removeFileExtension(path) + declarationExtension;
  }
  function getDeclarationEmitExtensionForPath(path) {
    return fileExtensionIsOneOf(path, [".mjs" /* Mjs */, ".mts" /* Mts */]) ? ".d.mts" /* Dmts */ : fileExtensionIsOneOf(path, [".cjs" /* Cjs */, ".cts" /* Cts */]) ? ".d.cts" /* Dcts */ : fileExtensionIsOneOf(path, [".json" /* Json */]) ? `.d.json.ts` : (
      // Drive-by redefinition of json declaration file output name so if it's ever enabled, it behaves well
      ".d.ts" /* Dts */
    );
  }
  function getPossibleOriginalInputExtensionForExtension(path) {
    return fileExtensionIsOneOf(path, [".d.mts" /* Dmts */, ".mjs" /* Mjs */, ".mts" /* Mts */]) ? [".mts" /* Mts */, ".mjs" /* Mjs */] : fileExtensionIsOneOf(path, [".d.cts" /* Dcts */, ".cjs" /* Cjs */, ".cts" /* Cts */]) ? [".cts" /* Cts */, ".cjs" /* Cjs */] : fileExtensionIsOneOf(path, [`.d.json.ts`]) ? [".json" /* Json */] : [".tsx" /* Tsx */, ".ts" /* Ts */, ".jsx" /* Jsx */, ".js" /* Js */];
  }
  function outFile(options) {
    return options.outFile || options.out;
  }
  function getPathsBasePath(options, host) {
    var _a2, _b;
    if (!options.paths)
      return void 0;
    return (_b = options.baseUrl) != null ? _b : Debug.checkDefined(options.pathsBasePath || ((_a2 = host.getCurrentDirectory) == null ? void 0 : _a2.call(host)), "Encountered 'paths' without a 'baseUrl', config file, or host 'getCurrentDirectory'.");
  }
  function getSourceFilesToEmit(host, targetSourceFile, forceDtsEmit) {
    const options = host.getCompilerOptions();
    if (outFile(options)) {
      const moduleKind = getEmitModuleKind(options);
      const moduleEmitEnabled = options.emitDeclarationOnly || moduleKind === 2 /* AMD */ || moduleKind === 4 /* System */;
      return filter(
        host.getSourceFiles(),
        (sourceFile) => (moduleEmitEnabled || !isExternalModule(sourceFile)) && sourceFileMayBeEmitted(sourceFile, host, forceDtsEmit)
      );
    } else {
      const sourceFiles = targetSourceFile === void 0 ? host.getSourceFiles() : [targetSourceFile];
      return filter(
        sourceFiles,
        (sourceFile) => sourceFileMayBeEmitted(sourceFile, host, forceDtsEmit)
      );
    }
  }
  function sourceFileMayBeEmitted(sourceFile, host, forceDtsEmit) {
    const options = host.getCompilerOptions();
    return !(options.noEmitForJsFiles && isSourceFileJS(sourceFile)) && !sourceFile.isDeclarationFile && !host.isSourceFileFromExternalLibrary(sourceFile) && (forceDtsEmit || !(isJsonSourceFile(sourceFile) && host.getResolvedProjectReferenceToRedirect(sourceFile.fileName)) && !host.isSourceOfProjectReferenceRedirect(sourceFile.fileName));
  }
  function getSourceFilePathInNewDir(fileName, host, newDirPath) {
    return getSourceFilePathInNewDirWorker(fileName, newDirPath, host.getCurrentDirectory(), host.getCommonSourceDirectory(), (f) => host.getCanonicalFileName(f));
  }
  function getSourceFilePathInNewDirWorker(fileName, newDirPath, currentDirectory, commonSourceDirectory, getCanonicalFileName) {
    let sourceFilePath = getNormalizedAbsolutePath(fileName, currentDirectory);
    const isSourceFileInCommonSourceDirectory = getCanonicalFileName(sourceFilePath).indexOf(getCanonicalFileName(commonSourceDirectory)) === 0;
    sourceFilePath = isSourceFileInCommonSourceDirectory ? sourceFilePath.substring(commonSourceDirectory.length) : sourceFilePath;
    return combinePaths(newDirPath, sourceFilePath);
  }
  function writeFile(host, diagnostics, fileName, text, writeByteOrderMark, sourceFiles, data) {
    host.writeFile(fileName, text, writeByteOrderMark, (hostErrorMessage) => {
      diagnostics.add(createCompilerDiagnostic(Diagnostics.Could_not_write_file_0_Colon_1, fileName, hostErrorMessage));
    }, sourceFiles, data);
  }
  function ensureDirectoriesExist(directoryPath, createDirectory, directoryExists) {
    if (directoryPath.length > getRootLength(directoryPath) && !directoryExists(directoryPath)) {
      const parentDirectory = getDirectoryPath(directoryPath);
      ensureDirectoriesExist(parentDirectory, createDirectory, directoryExists);
      createDirectory(directoryPath);
    }
  }
  function writeFileEnsuringDirectories(path, data, writeByteOrderMark, writeFile2, createDirectory, directoryExists) {
    try {
      writeFile2(path, data, writeByteOrderMark);
    } catch (e) {
      ensureDirectoriesExist(getDirectoryPath(normalizePath(path)), createDirectory, directoryExists);
      writeFile2(path, data, writeByteOrderMark);
    }
  }
  function getLineOfLocalPosition(sourceFile, pos) {
    const lineStarts = getLineStarts(sourceFile);
    return computeLineOfPosition(lineStarts, pos);
  }
  function getLineOfLocalPositionFromLineMap(lineMap, pos) {
    return computeLineOfPosition(lineMap, pos);
  }
  function getFirstConstructorWithBody(node) {
    return find(node.members, (member) => isConstructorDeclaration(member) && nodeIsPresent(member.body));
  }
  function getSetAccessorValueParameter(accessor) {
    if (accessor && accessor.parameters.length > 0) {
      const hasThis = accessor.parameters.length === 2 && parameterIsThisKeyword(accessor.parameters[0]);
      return accessor.parameters[hasThis ? 1 : 0];
    }
  }
  function getSetAccessorTypeAnnotationNode(accessor) {
    const parameter = getSetAccessorValueParameter(accessor);
    return parameter && parameter.type;
  }
  function getThisParameter(signature) {
    if (signature.parameters.length && !isJSDocSignature(signature)) {
      const thisParameter = signature.parameters[0];
      if (parameterIsThisKeyword(thisParameter)) {
        return thisParameter;
      }
    }
  }
  function parameterIsThisKeyword(parameter) {
    return isThisIdentifier(parameter.name);
  }
  function isThisIdentifier(node) {
    return !!node && node.kind === 79 /* Identifier */ && identifierIsThisKeyword(node);
  }
  function isThisInTypeQuery(node) {
    if (!isThisIdentifier(node)) {
      return false;
    }
    while (isQualifiedName(node.parent) && node.parent.left === node) {
      node = node.parent;
    }
    return node.parent.kind === 183 /* TypeQuery */;
  }
  function identifierIsThisKeyword(id) {
    return id.escapedText === "this";
  }
  function getAllAccessorDeclarations(declarations, accessor) {
    let firstAccessor;
    let secondAccessor;
    let getAccessor;
    let setAccessor;
    if (hasDynamicName(accessor)) {
      firstAccessor = accessor;
      if (accessor.kind === 174 /* GetAccessor */) {
        getAccessor = accessor;
      } else if (accessor.kind === 175 /* SetAccessor */) {
        setAccessor = accessor;
      } else {
        Debug.fail("Accessor has wrong kind");
      }
    } else {
      forEach(declarations, (member) => {
        if (isAccessor(member) && isStatic(member) === isStatic(accessor)) {
          const memberName = getPropertyNameForPropertyNameNode(member.name);
          const accessorName = getPropertyNameForPropertyNameNode(accessor.name);
          if (memberName === accessorName) {
            if (!firstAccessor) {
              firstAccessor = member;
            } else if (!secondAccessor) {
              secondAccessor = member;
            }
            if (member.kind === 174 /* GetAccessor */ && !getAccessor) {
              getAccessor = member;
            }
            if (member.kind === 175 /* SetAccessor */ && !setAccessor) {
              setAccessor = member;
            }
          }
        }
      });
    }
    return {
      firstAccessor,
      secondAccessor,
      getAccessor,
      setAccessor
    };
  }
  function getEffectiveTypeAnnotationNode(node) {
    if (!isInJSFile(node) && isFunctionDeclaration(node))
      return void 0;
    const type = node.type;
    if (type || !isInJSFile(node))
      return type;
    return isJSDocPropertyLikeTag(node) ? node.typeExpression && node.typeExpression.type : getJSDocType(node);
  }
  function getTypeAnnotationNode(node) {
    return node.type;
  }
  function getEffectiveReturnTypeNode(node) {
    return isJSDocSignature(node) ? node.type && node.type.typeExpression && node.type.typeExpression.type : node.type || (isInJSFile(node) ? getJSDocReturnType(node) : void 0);
  }
  function getJSDocTypeParameterDeclarations(node) {
    return flatMap(getJSDocTags(node), (tag) => isNonTypeAliasTemplate(tag) ? tag.typeParameters : void 0);
  }
  function isNonTypeAliasTemplate(tag) {
    return isJSDocTemplateTag(tag) && !(tag.parent.kind === 323 /* JSDoc */ && (tag.parent.tags.some(isJSDocTypeAlias) || tag.parent.tags.some(isJSDocOverloadTag)));
  }
  function getEffectiveSetAccessorTypeAnnotationNode(node) {
    const parameter = getSetAccessorValueParameter(node);
    return parameter && getEffectiveTypeAnnotationNode(parameter);
  }
  function emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments) {
    emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, node.pos, leadingComments);
  }
  function emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, pos, leadingComments) {
    if (leadingComments && leadingComments.length && pos !== leadingComments[0].pos && getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, leadingComments[0].pos)) {
      writer.writeLine();
    }
  }
  function emitNewLineBeforeLeadingCommentOfPosition(lineMap, writer, pos, commentPos) {
    if (pos !== commentPos && getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, commentPos)) {
      writer.writeLine();
    }
  }
  function emitComments(text, lineMap, writer, comments, leadingSeparator, trailingSeparator, newLine, writeComment) {
    if (comments && comments.length > 0) {
      if (leadingSeparator) {
        writer.writeSpace(" ");
      }
      let emitInterveningSeparator = false;
      for (const comment of comments) {
        if (emitInterveningSeparator) {
          writer.writeSpace(" ");
          emitInterveningSeparator = false;
        }
        writeComment(text, lineMap, writer, comment.pos, comment.end, newLine);
        if (comment.hasTrailingNewLine) {
          writer.writeLine();
        } else {
          emitInterveningSeparator = true;
        }
      }
      if (emitInterveningSeparator && trailingSeparator) {
        writer.writeSpace(" ");
      }
    }
  }
  function emitDetachedComments(text, lineMap, writer, writeComment, node, newLine, removeComments) {
    let leadingComments;
    let currentDetachedCommentInfo;
    if (removeComments) {
      if (node.pos === 0) {
        leadingComments = filter(getLeadingCommentRanges(text, node.pos), isPinnedCommentLocal);
      }
    } else {
      leadingComments = getLeadingCommentRanges(text, node.pos);
    }
    if (leadingComments) {
      const detachedComments = [];
      let lastComment;
      for (const comment of leadingComments) {
        if (lastComment) {
          const lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, lastComment.end);
          const commentLine = getLineOfLocalPositionFromLineMap(lineMap, comment.pos);
          if (commentLine >= lastCommentLine + 2) {
            break;
          }
        }
        detachedComments.push(comment);
        lastComment = comment;
      }
      if (detachedComments.length) {
        const lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, last(detachedComments).end);
        const nodeLine = getLineOfLocalPositionFromLineMap(lineMap, skipTrivia(text, node.pos));
        if (nodeLine >= lastCommentLine + 2) {
          emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments);
          emitComments(
            text,
            lineMap,
            writer,
            detachedComments,
            /*leadingSeparator*/
            false,
            /*trailingSeparator*/
            true,
            newLine,
            writeComment
          );
          currentDetachedCommentInfo = { nodePos: node.pos, detachedCommentEndPos: last(detachedComments).end };
        }
      }
    }
    return currentDetachedCommentInfo;
    function isPinnedCommentLocal(comment) {
      return isPinnedComment(text, comment.pos);
    }
  }
  function writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine) {
    if (text.charCodeAt(commentPos + 1) === 42 /* asterisk */) {
      const firstCommentLineAndCharacter = computeLineAndCharacterOfPosition(lineMap, commentPos);
      const lineCount = lineMap.length;
      let firstCommentLineIndent;
      for (let pos = commentPos, currentLine = firstCommentLineAndCharacter.line; pos < commentEnd; currentLine++) {
        const nextLineStart = currentLine + 1 === lineCount ? text.length + 1 : lineMap[currentLine + 1];
        if (pos !== commentPos) {
          if (firstCommentLineIndent === void 0) {
            firstCommentLineIndent = calculateIndent(text, lineMap[firstCommentLineAndCharacter.line], commentPos);
          }
          const currentWriterIndentSpacing = writer.getIndent() * getIndentSize();
          const spacesToEmit = currentWriterIndentSpacing - firstCommentLineIndent + calculateIndent(text, pos, nextLineStart);
          if (spacesToEmit > 0) {
            let numberOfSingleSpacesToEmit = spacesToEmit % getIndentSize();
            const indentSizeSpaceString = getIndentString((spacesToEmit - numberOfSingleSpacesToEmit) / getIndentSize());
            writer.rawWrite(indentSizeSpaceString);
            while (numberOfSingleSpacesToEmit) {
              writer.rawWrite(" ");
              numberOfSingleSpacesToEmit--;
            }
          } else {
            writer.rawWrite("");
          }
        }
        writeTrimmedCurrentLine(text, commentEnd, writer, newLine, pos, nextLineStart);
        pos = nextLineStart;
      }
    } else {
      writer.writeComment(text.substring(commentPos, commentEnd));
    }
  }
  function writeTrimmedCurrentLine(text, commentEnd, writer, newLine, pos, nextLineStart) {
    const end = Math.min(commentEnd, nextLineStart - 1);
    const currentLineText = trimString(text.substring(pos, end));
    if (currentLineText) {
      writer.writeComment(currentLineText);
      if (end !== commentEnd) {
        writer.writeLine();
      }
    } else {
      writer.rawWrite(newLine);
    }
  }
  function calculateIndent(text, pos, end) {
    let currentLineIndent = 0;
    for (; pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos)); pos++) {
      if (text.charCodeAt(pos) === 9 /* tab */) {
        currentLineIndent += getIndentSize() - currentLineIndent % getIndentSize();
      } else {
        currentLineIndent++;
      }
    }
    return currentLineIndent;
  }
  function hasEffectiveModifiers(node) {
    return getEffectiveModifierFlags(node) !== 0 /* None */;
  }
  function hasSyntacticModifiers(node) {
    return getSyntacticModifierFlags(node) !== 0 /* None */;
  }
  function hasEffectiveModifier(node, flags) {
    return !!getSelectedEffectiveModifierFlags(node, flags);
  }
  function hasSyntacticModifier(node, flags) {
    return !!getSelectedSyntacticModifierFlags(node, flags);
  }
  function isStatic(node) {
    return isClassElement(node) && hasStaticModifier(node) || isClassStaticBlockDeclaration(node);
  }
  function hasStaticModifier(node) {
    return hasSyntacticModifier(node, 32 /* Static */);
  }
  function hasOverrideModifier(node) {
    return hasEffectiveModifier(node, 16384 /* Override */);
  }
  function hasAbstractModifier(node) {
    return hasSyntacticModifier(node, 256 /* Abstract */);
  }
  function hasAmbientModifier(node) {
    return hasSyntacticModifier(node, 2 /* Ambient */);
  }
  function hasAccessorModifier(node) {
    return hasSyntacticModifier(node, 128 /* Accessor */);
  }
  function hasEffectiveReadonlyModifier(node) {
    return hasEffectiveModifier(node, 64 /* Readonly */);
  }
  function hasDecorators(node) {
    return hasSyntacticModifier(node, 131072 /* Decorator */);
  }
  function getSelectedEffectiveModifierFlags(node, flags) {
    return getEffectiveModifierFlags(node) & flags;
  }
  function getSelectedSyntacticModifierFlags(node, flags) {
    return getSyntacticModifierFlags(node) & flags;
  }
  function getModifierFlagsWorker(node, includeJSDoc, alwaysIncludeJSDoc) {
    if (node.kind >= 0 /* FirstToken */ && node.kind <= 162 /* LastToken */) {
      return 0 /* None */;
    }
    if (!(node.modifierFlagsCache & 536870912 /* HasComputedFlags */)) {
      node.modifierFlagsCache = getSyntacticModifierFlagsNoCache(node) | 536870912 /* HasComputedFlags */;
    }
    if (includeJSDoc && !(node.modifierFlagsCache & 4096 /* HasComputedJSDocModifiers */) && (alwaysIncludeJSDoc || isInJSFile(node)) && node.parent) {
      node.modifierFlagsCache |= getJSDocModifierFlagsNoCache(node) | 4096 /* HasComputedJSDocModifiers */;
    }
    return node.modifierFlagsCache & ~(536870912 /* HasComputedFlags */ | 4096 /* HasComputedJSDocModifiers */);
  }
  function getEffectiveModifierFlags(node) {
    return getModifierFlagsWorker(
      node,
      /*includeJSDoc*/
      true
    );
  }
  function getEffectiveModifierFlagsAlwaysIncludeJSDoc(node) {
    return getModifierFlagsWorker(
      node,
      /*includeJSDOc*/
      true,
      /*alwaysIncludeJSDOc*/
      true
    );
  }
  function getSyntacticModifierFlags(node) {
    return getModifierFlagsWorker(
      node,
      /*includeJSDoc*/
      false
    );
  }
  function getJSDocModifierFlagsNoCache(node) {
    let flags = 0 /* None */;
    if (!!node.parent && !isParameter(node)) {
      if (isInJSFile(node)) {
        if (getJSDocPublicTagNoCache(node))
          flags |= 4 /* Public */;
        if (getJSDocPrivateTagNoCache(node))
          flags |= 8 /* Private */;
        if (getJSDocProtectedTagNoCache(node))
          flags |= 16 /* Protected */;
        if (getJSDocReadonlyTagNoCache(node))
          flags |= 64 /* Readonly */;
        if (getJSDocOverrideTagNoCache(node))
          flags |= 16384 /* Override */;
      }
      if (getJSDocDeprecatedTagNoCache(node))
        flags |= 8192 /* Deprecated */;
    }
    return flags;
  }
  function getEffectiveModifierFlagsNoCache(node) {
    return getSyntacticModifierFlagsNoCache(node) | getJSDocModifierFlagsNoCache(node);
  }
  function getSyntacticModifierFlagsNoCache(node) {
    let flags = canHaveModifiers(node) ? modifiersToFlags(node.modifiers) : 0 /* None */;
    if (node.flags & 4 /* NestedNamespace */ || node.kind === 79 /* Identifier */ && node.flags & 2048 /* IdentifierIsInJSDocNamespace */) {
      flags |= 1 /* Export */;
    }
    return flags;
  }
  function modifiersToFlags(modifiers) {
    let flags = 0 /* None */;
    if (modifiers) {
      for (const modifier of modifiers) {
        flags |= modifierToFlag(modifier.kind);
      }
    }
    return flags;
  }
  function modifierToFlag(token) {
    switch (token) {
      case 124 /* StaticKeyword */:
        return 32 /* Static */;
      case 123 /* PublicKeyword */:
        return 4 /* Public */;
      case 122 /* ProtectedKeyword */:
        return 16 /* Protected */;
      case 121 /* PrivateKeyword */:
        return 8 /* Private */;
      case 126 /* AbstractKeyword */:
        return 256 /* Abstract */;
      case 127 /* AccessorKeyword */:
        return 128 /* Accessor */;
      case 93 /* ExportKeyword */:
        return 1 /* Export */;
      case 136 /* DeclareKeyword */:
        return 2 /* Ambient */;
      case 85 /* ConstKeyword */:
        return 2048 /* Const */;
      case 88 /* DefaultKeyword */:
        return 1024 /* Default */;
      case 132 /* AsyncKeyword */:
        return 512 /* Async */;
      case 146 /* ReadonlyKeyword */:
        return 64 /* Readonly */;
      case 161 /* OverrideKeyword */:
        return 16384 /* Override */;
      case 101 /* InKeyword */:
        return 32768 /* In */;
      case 145 /* OutKeyword */:
        return 65536 /* Out */;
      case 167 /* Decorator */:
        return 131072 /* Decorator */;
    }
    return 0 /* None */;
  }
  function isBinaryLogicalOperator(token) {
    return token === 56 /* BarBarToken */ || token === 55 /* AmpersandAmpersandToken */;
  }
  function isLogicalOperator(token) {
    return isBinaryLogicalOperator(token) || token === 53 /* ExclamationToken */;
  }
  function isLogicalOrCoalescingAssignmentOperator(token) {
    return token === 75 /* BarBarEqualsToken */ || token === 76 /* AmpersandAmpersandEqualsToken */ || token === 77 /* QuestionQuestionEqualsToken */;
  }
  function isLogicalOrCoalescingAssignmentExpression(expr) {
    return isBinaryExpression(expr) && isLogicalOrCoalescingAssignmentOperator(expr.operatorToken.kind);
  }
  function isLogicalOrCoalescingBinaryOperator(token) {
    return isBinaryLogicalOperator(token) || token === 60 /* QuestionQuestionToken */;
  }
  function isLogicalOrCoalescingBinaryExpression(expr) {
    return isBinaryExpression(expr) && isLogicalOrCoalescingBinaryOperator(expr.operatorToken.kind);
  }
  function isAssignmentOperator(token) {
    return token >= 63 /* FirstAssignment */ && token <= 78 /* LastAssignment */;
  }
  function tryGetClassExtendingExpressionWithTypeArguments(node) {
    const cls = tryGetClassImplementingOrExtendingExpressionWithTypeArguments(node);
    return cls && !cls.isImplements ? cls.class : void 0;
  }
  function tryGetClassImplementingOrExtendingExpressionWithTypeArguments(node) {
    if (isExpressionWithTypeArguments(node)) {
      if (isHeritageClause(node.parent) && isClassLike(node.parent.parent)) {
        return { class: node.parent.parent, isImplements: node.parent.token === 117 /* ImplementsKeyword */ };
      }
      if (isJSDocAugmentsTag(node.parent)) {
        const host = getEffectiveJSDocHost(node.parent);
        if (host && isClassLike(host)) {
          return { class: host, isImplements: false };
        }
      }
    }
    return void 0;
  }
  function isAssignmentExpression(node, excludeCompoundAssignment) {
    return isBinaryExpression(node) && (excludeCompoundAssignment ? node.operatorToken.kind === 63 /* EqualsToken */ : isAssignmentOperator(node.operatorToken.kind)) && isLeftHandSideExpression(node.left);
  }
  function isLeftHandSideOfAssignment(node) {
    return isAssignmentExpression(node.parent) && node.parent.left === node;
  }
  function isDestructuringAssignment(node) {
    if (isAssignmentExpression(
      node,
      /*excludeCompoundAssignment*/
      true
    )) {
      const kind = node.left.kind;
      return kind === 207 /* ObjectLiteralExpression */ || kind === 206 /* ArrayLiteralExpression */;
    }
    return false;
  }
  function isExpressionWithTypeArgumentsInClassExtendsClause(node) {
    return tryGetClassExtendingExpressionWithTypeArguments(node) !== void 0;
  }
  function isEntityNameExpression(node) {
    return node.kind === 79 /* Identifier */ || isPropertyAccessEntityNameExpression(node);
  }
  function getFirstIdentifier(node) {
    switch (node.kind) {
      case 79 /* Identifier */:
        return node;
      case 163 /* QualifiedName */:
        do {
          node = node.left;
        } while (node.kind !== 79 /* Identifier */);
        return node;
      case 208 /* PropertyAccessExpression */:
        do {
          node = node.expression;
        } while (node.kind !== 79 /* Identifier */);
        return node;
    }
  }
  function isDottedName(node) {
    return node.kind === 79 /* Identifier */ || node.kind === 108 /* ThisKeyword */ || node.kind === 106 /* SuperKeyword */ || node.kind === 233 /* MetaProperty */ || node.kind === 208 /* PropertyAccessExpression */ && isDottedName(node.expression) || node.kind === 214 /* ParenthesizedExpression */ && isDottedName(node.expression);
  }
  function isPropertyAccessEntityNameExpression(node) {
    return isPropertyAccessExpression(node) && isIdentifier(node.name) && isEntityNameExpression(node.expression);
  }
  function tryGetPropertyAccessOrIdentifierToString(expr) {
    if (isPropertyAccessExpression(expr)) {
      const baseStr = tryGetPropertyAccessOrIdentifierToString(expr.expression);
      if (baseStr !== void 0) {
        return baseStr + "." + entityNameToString(expr.name);
      }
    } else if (isElementAccessExpression(expr)) {
      const baseStr = tryGetPropertyAccessOrIdentifierToString(expr.expression);
      if (baseStr !== void 0 && isPropertyName(expr.argumentExpression)) {
        return baseStr + "." + getPropertyNameForPropertyNameNode(expr.argumentExpression);
      }
    } else if (isIdentifier(expr)) {
      return unescapeLeadingUnderscores(expr.escapedText);
    }
    return void 0;
  }
  function isPrototypeAccess(node) {
    return isBindableStaticAccessExpression(node) && getElementOrPropertyAccessName(node) === "prototype";
  }
  function isRightSideOfQualifiedNameOrPropertyAccess(node) {
    return node.parent.kind === 163 /* QualifiedName */ && node.parent.right === node || node.parent.kind === 208 /* PropertyAccessExpression */ && node.parent.name === node;
  }
  function isRightSideOfAccessExpression(node) {
    return isPropertyAccessExpression(node.parent) && node.parent.name === node || isElementAccessExpression(node.parent) && node.parent.argumentExpression === node;
  }
  function isRightSideOfQualifiedNameOrPropertyAccessOrJSDocMemberName(node) {
    return isQualifiedName(node.parent) && node.parent.right === node || isPropertyAccessExpression(node.parent) && node.parent.name === node || isJSDocMemberName(node.parent) && node.parent.right === node;
  }
  function isEmptyObjectLiteral(expression) {
    return expression.kind === 207 /* ObjectLiteralExpression */ && expression.properties.length === 0;
  }
  function isEmptyArrayLiteral(expression) {
    return expression.kind === 206 /* ArrayLiteralExpression */ && expression.elements.length === 0;
  }
  function getLocalSymbolForExportDefault(symbol) {
    if (!isExportDefaultSymbol(symbol) || !symbol.declarations)
      return void 0;
    for (const decl of symbol.declarations) {
      if (decl.localSymbol)
        return decl.localSymbol;
    }
    return void 0;
  }
  function isExportDefaultSymbol(symbol) {
    return symbol && length(symbol.declarations) > 0 && hasSyntacticModifier(symbol.declarations[0], 1024 /* Default */);
  }
  function tryExtractTSExtension(fileName) {
    return find(supportedTSExtensionsForExtractExtension, (extension) => fileExtensionIs(fileName, extension));
  }
  function getExpandedCharCodes(input) {
    const output = [];
    const length2 = input.length;
    for (let i = 0; i < length2; i++) {
      const charCode = input.charCodeAt(i);
      if (charCode < 128) {
        output.push(charCode);
      } else if (charCode < 2048) {
        output.push(charCode >> 6 | 192);
        output.push(charCode & 63 | 128);
      } else if (charCode < 65536) {
        output.push(charCode >> 12 | 224);
        output.push(charCode >> 6 & 63 | 128);
        output.push(charCode & 63 | 128);
      } else if (charCode < 131072) {
        output.push(charCode >> 18 | 240);
        output.push(charCode >> 12 & 63 | 128);
        output.push(charCode >> 6 & 63 | 128);
        output.push(charCode & 63 | 128);
      } else {
        Debug.assert(false, "Unexpected code point");
      }
    }
    return output;
  }
  function convertToBase64(input) {
    let result = "";
    const charCodes = getExpandedCharCodes(input);
    let i = 0;
    const length2 = charCodes.length;
    let byte1, byte2, byte3, byte4;
    while (i < length2) {
      byte1 = charCodes[i] >> 2;
      byte2 = (charCodes[i] & 3) << 4 | charCodes[i + 1] >> 4;
      byte3 = (charCodes[i + 1] & 15) << 2 | charCodes[i + 2] >> 6;
      byte4 = charCodes[i + 2] & 63;
      if (i + 1 >= length2) {
        byte3 = byte4 = 64;
      } else if (i + 2 >= length2) {
        byte4 = 64;
      }
      result += base64Digits.charAt(byte1) + base64Digits.charAt(byte2) + base64Digits.charAt(byte3) + base64Digits.charAt(byte4);
      i += 3;
    }
    return result;
  }
  function getStringFromExpandedCharCodes(codes) {
    let output = "";
    let i = 0;
    const length2 = codes.length;
    while (i < length2) {
      const charCode = codes[i];
      if (charCode < 128) {
        output += String.fromCharCode(charCode);
        i++;
      } else if ((charCode & 192) === 192) {
        let value = charCode & 63;
        i++;
        let nextCode = codes[i];
        while ((nextCode & 192) === 128) {
          value = value << 6 | nextCode & 63;
          i++;
          nextCode = codes[i];
        }
        output += String.fromCharCode(value);
      } else {
        output += String.fromCharCode(charCode);
        i++;
      }
    }
    return output;
  }
  function base64encode(host, input) {
    if (host && host.base64encode) {
      return host.base64encode(input);
    }
    return convertToBase64(input);
  }
  function base64decode(host, input) {
    if (host && host.base64decode) {
      return host.base64decode(input);
    }
    const length2 = input.length;
    const expandedCharCodes = [];
    let i = 0;
    while (i < length2) {
      if (input.charCodeAt(i) === base64Digits.charCodeAt(64)) {
        break;
      }
      const ch1 = base64Digits.indexOf(input[i]);
      const ch2 = base64Digits.indexOf(input[i + 1]);
      const ch3 = base64Digits.indexOf(input[i + 2]);
      const ch4 = base64Digits.indexOf(input[i + 3]);
      const code1 = (ch1 & 63) << 2 | ch2 >> 4 & 3;
      const code2 = (ch2 & 15) << 4 | ch3 >> 2 & 15;
      const code3 = (ch3 & 3) << 6 | ch4 & 63;
      if (code2 === 0 && ch3 !== 0) {
        expandedCharCodes.push(code1);
      } else if (code3 === 0 && ch4 !== 0) {
        expandedCharCodes.push(code1, code2);
      } else {
        expandedCharCodes.push(code1, code2, code3);
      }
      i += 4;
    }
    return getStringFromExpandedCharCodes(expandedCharCodes);
  }
  function readJsonOrUndefined(path, hostOrText) {
    const jsonText = isString(hostOrText) ? hostOrText : hostOrText.readFile(path);
    if (!jsonText)
      return void 0;
    const result = parseConfigFileTextToJson(path, jsonText);
    return !result.error ? result.config : void 0;
  }
  function readJson(path, host) {
    return readJsonOrUndefined(path, host) || {};
  }
  function directoryProbablyExists(directoryName, host) {
    return !host.directoryExists || host.directoryExists(directoryName);
  }
  function getNewLineCharacter(options) {
    switch (options.newLine) {
      case 0 /* CarriageReturnLineFeed */:
        return carriageReturnLineFeed;
      case 1 /* LineFeed */:
      case void 0:
        return lineFeed;
    }
  }
  function createRange(pos, end = pos) {
    Debug.assert(end >= pos || end === -1);
    return { pos, end };
  }
  function moveRangeEnd(range, end) {
    return createRange(range.pos, end);
  }
  function moveRangePos(range, pos) {
    return createRange(pos, range.end);
  }
  function moveRangePastDecorators(node) {
    const lastDecorator = canHaveModifiers(node) ? findLast(node.modifiers, isDecorator) : void 0;
    return lastDecorator && !positionIsSynthesized(lastDecorator.end) ? moveRangePos(node, lastDecorator.end) : node;
  }
  function moveRangePastModifiers(node) {
    if (isPropertyDeclaration(node) || isMethodDeclaration(node)) {
      return moveRangePos(node, node.name.pos);
    }
    const lastModifier = canHaveModifiers(node) ? lastOrUndefined(node.modifiers) : void 0;
    return lastModifier && !positionIsSynthesized(lastModifier.end) ? moveRangePos(node, lastModifier.end) : moveRangePastDecorators(node);
  }
  function isCollapsedRange(range) {
    return range.pos === range.end;
  }
  function createTokenRange(pos, token) {
    return createRange(pos, pos + tokenToString(token).length);
  }
  function rangeIsOnSingleLine(range, sourceFile) {
    return rangeStartIsOnSameLineAsRangeEnd(range, range, sourceFile);
  }
  function rangeStartPositionsAreOnSameLine(range1, range2, sourceFile) {
    return positionsAreOnSameLine(
      getStartPositionOfRange(
        range1,
        sourceFile,
        /*includeComments*/
        false
      ),
      getStartPositionOfRange(
        range2,
        sourceFile,
        /*includeComments*/
        false
      ),
      sourceFile
    );
  }
  function rangeEndPositionsAreOnSameLine(range1, range2, sourceFile) {
    return positionsAreOnSameLine(range1.end, range2.end, sourceFile);
  }
  function rangeStartIsOnSameLineAsRangeEnd(range1, range2, sourceFile) {
    return positionsAreOnSameLine(getStartPositionOfRange(
      range1,
      sourceFile,
      /*includeComments*/
      false
    ), range2.end, sourceFile);
  }
  function rangeEndIsOnSameLineAsRangeStart(range1, range2, sourceFile) {
    return positionsAreOnSameLine(range1.end, getStartPositionOfRange(
      range2,
      sourceFile,
      /*includeComments*/
      false
    ), sourceFile);
  }
  function getLinesBetweenRangeEndAndRangeStart(range1, range2, sourceFile, includeSecondRangeComments) {
    const range2Start = getStartPositionOfRange(range2, sourceFile, includeSecondRangeComments);
    return getLinesBetweenPositions(sourceFile, range1.end, range2Start);
  }
  function getLinesBetweenRangeEndPositions(range1, range2, sourceFile) {
    return getLinesBetweenPositions(sourceFile, range1.end, range2.end);
  }
  function isNodeArrayMultiLine(list, sourceFile) {
    return !positionsAreOnSameLine(list.pos, list.end, sourceFile);
  }
  function positionsAreOnSameLine(pos1, pos2, sourceFile) {
    return getLinesBetweenPositions(sourceFile, pos1, pos2) === 0;
  }
  function getStartPositionOfRange(range, sourceFile, includeComments) {
    return positionIsSynthesized(range.pos) ? -1 : skipTrivia(
      sourceFile.text,
      range.pos,
      /*stopAfterLineBreak*/
      false,
      includeComments
    );
  }
  function getLinesBetweenPositionAndPrecedingNonWhitespaceCharacter(pos, stopPos, sourceFile, includeComments) {
    const startPos = skipTrivia(
      sourceFile.text,
      pos,
      /*stopAfterLineBreak*/
      false,
      includeComments
    );
    const prevPos = getPreviousNonWhitespacePosition(startPos, stopPos, sourceFile);
    return getLinesBetweenPositions(sourceFile, prevPos != null ? prevPos : stopPos, startPos);
  }
  function getLinesBetweenPositionAndNextNonWhitespaceCharacter(pos, stopPos, sourceFile, includeComments) {
    const nextPos = skipTrivia(
      sourceFile.text,
      pos,
      /*stopAfterLineBreak*/
      false,
      includeComments
    );
    return getLinesBetweenPositions(sourceFile, pos, Math.min(stopPos, nextPos));
  }
  function getPreviousNonWhitespacePosition(pos, stopPos = 0, sourceFile) {
    while (pos-- > stopPos) {
      if (!isWhiteSpaceLike(sourceFile.text.charCodeAt(pos))) {
        return pos;
      }
    }
  }
  function isDeclarationNameOfEnumOrNamespace(node) {
    const parseNode = getParseTreeNode(node);
    if (parseNode) {
      switch (parseNode.parent.kind) {
        case 263 /* EnumDeclaration */:
        case 264 /* ModuleDeclaration */:
          return parseNode === parseNode.parent.name;
      }
    }
    return false;
  }
  function getInitializedVariables(node) {
    return filter(node.declarations, isInitializedVariable);
  }
  function isInitializedVariable(node) {
    return isVariableDeclaration(node) && node.initializer !== void 0;
  }
  function isWatchSet(options) {
    return options.watch && hasProperty(options, "watch");
  }
  function closeFileWatcher(watcher) {
    watcher.close();
  }
  function getCheckFlags(symbol) {
    return symbol.flags & 33554432 /* Transient */ ? symbol.links.checkFlags : 0;
  }
  function getDeclarationModifierFlagsFromSymbol(s, isWrite = false) {
    if (s.valueDeclaration) {
      const declaration = isWrite && s.declarations && find(s.declarations, isSetAccessorDeclaration) || s.flags & 32768 /* GetAccessor */ && find(s.declarations, isGetAccessorDeclaration) || s.valueDeclaration;
      const flags = getCombinedModifierFlags(declaration);
      return s.parent && s.parent.flags & 32 /* Class */ ? flags : flags & ~28 /* AccessibilityModifier */;
    }
    if (getCheckFlags(s) & 6 /* Synthetic */) {
      const checkFlags = s.links.checkFlags;
      const accessModifier = checkFlags & 1024 /* ContainsPrivate */ ? 8 /* Private */ : checkFlags & 256 /* ContainsPublic */ ? 4 /* Public */ : 16 /* Protected */;
      const staticModifier = checkFlags & 2048 /* ContainsStatic */ ? 32 /* Static */ : 0;
      return accessModifier | staticModifier;
    }
    if (s.flags & 4194304 /* Prototype */) {
      return 4 /* Public */ | 32 /* Static */;
    }
    return 0;
  }
  function skipAlias(symbol, checker) {
    return symbol.flags & 2097152 /* Alias */ ? checker.getAliasedSymbol(symbol) : symbol;
  }
  function getCombinedLocalAndExportSymbolFlags(symbol) {
    return symbol.exportSymbol ? symbol.exportSymbol.flags | symbol.flags : symbol.flags;
  }
  function isWriteOnlyAccess(node) {
    return accessKind(node) === 1 /* Write */;
  }
  function isWriteAccess(node) {
    return accessKind(node) !== 0 /* Read */;
  }
  function accessKind(node) {
    const { parent: parent2 } = node;
    if (!parent2)
      return 0 /* Read */;
    switch (parent2.kind) {
      case 214 /* ParenthesizedExpression */:
        return accessKind(parent2);
      case 222 /* PostfixUnaryExpression */:
      case 221 /* PrefixUnaryExpression */:
        const { operator } = parent2;
        return operator === 45 /* PlusPlusToken */ || operator === 46 /* MinusMinusToken */ ? writeOrReadWrite() : 0 /* Read */;
      case 223 /* BinaryExpression */:
        const { left, operatorToken } = parent2;
        return left === node && isAssignmentOperator(operatorToken.kind) ? operatorToken.kind === 63 /* EqualsToken */ ? 1 /* Write */ : writeOrReadWrite() : 0 /* Read */;
      case 208 /* PropertyAccessExpression */:
        return parent2.name !== node ? 0 /* Read */ : accessKind(parent2);
      case 299 /* PropertyAssignment */: {
        const parentAccess = accessKind(parent2.parent);
        return node === parent2.name ? reverseAccessKind(parentAccess) : parentAccess;
      }
      case 300 /* ShorthandPropertyAssignment */:
        return node === parent2.objectAssignmentInitializer ? 0 /* Read */ : accessKind(parent2.parent);
      case 206 /* ArrayLiteralExpression */:
        return accessKind(parent2);
      default:
        return 0 /* Read */;
    }
    function writeOrReadWrite() {
      return parent2.parent && walkUpParenthesizedExpressions(parent2.parent).kind === 241 /* ExpressionStatement */ ? 1 /* Write */ : 2 /* ReadWrite */;
    }
  }
  function reverseAccessKind(a) {
    switch (a) {
      case 0 /* Read */:
        return 1 /* Write */;
      case 1 /* Write */:
        return 0 /* Read */;
      case 2 /* ReadWrite */:
        return 2 /* ReadWrite */;
      default:
        return Debug.assertNever(a);
    }
  }
  function compareDataObjects(dst, src) {
    if (!dst || !src || Object.keys(dst).length !== Object.keys(src).length) {
      return false;
    }
    for (const e in dst) {
      if (typeof dst[e] === "object") {
        if (!compareDataObjects(dst[e], src[e])) {
          return false;
        }
      } else if (typeof dst[e] !== "function") {
        if (dst[e] !== src[e]) {
          return false;
        }
      }
    }
    return true;
  }
  function clearMap(map2, onDeleteValue) {
    map2.forEach(onDeleteValue);
    map2.clear();
  }
  function mutateMapSkippingNewValues(map2, newMap, options) {
    const { onDeleteValue, onExistingValue } = options;
    map2.forEach((existingValue, key) => {
      const valueInNewMap = newMap.get(key);
      if (valueInNewMap === void 0) {
        map2.delete(key);
        onDeleteValue(existingValue, key);
      } else if (onExistingValue) {
        onExistingValue(existingValue, valueInNewMap, key);
      }
    });
  }
  function mutateMap(map2, newMap, options) {
    mutateMapSkippingNewValues(map2, newMap, options);
    const { createNewValue } = options;
    newMap.forEach((valueInNewMap, key) => {
      if (!map2.has(key)) {
        map2.set(key, createNewValue(key, valueInNewMap));
      }
    });
  }
  function isAbstractConstructorSymbol(symbol) {
    if (symbol.flags & 32 /* Class */) {
      const declaration = getClassLikeDeclarationOfSymbol(symbol);
      return !!declaration && hasSyntacticModifier(declaration, 256 /* Abstract */);
    }
    return false;
  }
  function getClassLikeDeclarationOfSymbol(symbol) {
    var _a2;
    return (_a2 = symbol.declarations) == null ? void 0 : _a2.find(isClassLike);
  }
  function getObjectFlags(type) {
    return type.flags & 3899393 /* ObjectFlagsType */ ? type.objectFlags : 0;
  }
  function forSomeAncestorDirectory(directory, callback) {
    return !!forEachAncestorDirectory(directory, (d) => callback(d) ? true : void 0);
  }
  function isUMDExportSymbol(symbol) {
    return !!symbol && !!symbol.declarations && !!symbol.declarations[0] && isNamespaceExportDeclaration(symbol.declarations[0]);
  }
  function showModuleSpecifier({ moduleSpecifier }) {
    return isStringLiteral(moduleSpecifier) ? moduleSpecifier.text : getTextOfNode(moduleSpecifier);
  }
  function getLastChild(node) {
    let lastChild;
    forEachChild(
      node,
      (child) => {
        if (nodeIsPresent(child))
          lastChild = child;
      },
      (children) => {
        for (let i = children.length - 1; i >= 0; i--) {
          if (nodeIsPresent(children[i])) {
            lastChild = children[i];
            break;
          }
        }
      }
    );
    return lastChild;
  }
  function addToSeen(seen, key, value = true) {
    if (seen.has(key)) {
      return false;
    }
    seen.set(key, value);
    return true;
  }
  function isObjectTypeDeclaration(node) {
    return isClassLike(node) || isInterfaceDeclaration(node) || isTypeLiteralNode(node);
  }
  function isTypeNodeKind(kind) {
    return kind >= 179 /* FirstTypeNode */ && kind <= 202 /* LastTypeNode */ || kind === 131 /* AnyKeyword */ || kind === 157 /* UnknownKeyword */ || kind === 148 /* NumberKeyword */ || kind === 160 /* BigIntKeyword */ || kind === 149 /* ObjectKeyword */ || kind === 134 /* BooleanKeyword */ || kind === 152 /* StringKeyword */ || kind === 153 /* SymbolKeyword */ || kind === 114 /* VoidKeyword */ || kind === 155 /* UndefinedKeyword */ || kind === 144 /* NeverKeyword */ || kind === 139 /* IntrinsicKeyword */ || kind === 230 /* ExpressionWithTypeArguments */ || kind === 315 /* JSDocAllType */ || kind === 316 /* JSDocUnknownType */ || kind === 317 /* JSDocNullableType */ || kind === 318 /* JSDocNonNullableType */ || kind === 319 /* JSDocOptionalType */ || kind === 320 /* JSDocFunctionType */ || kind === 321 /* JSDocVariadicType */;
  }
  function isAccessExpression(node) {
    return node.kind === 208 /* PropertyAccessExpression */ || node.kind === 209 /* ElementAccessExpression */;
  }
  function getNameOfAccessExpression(node) {
    if (node.kind === 208 /* PropertyAccessExpression */) {
      return node.name;
    }
    Debug.assert(node.kind === 209 /* ElementAccessExpression */);
    return node.argumentExpression;
  }
  function isBundleFileTextLike(section) {
    switch (section.kind) {
      case "text" /* Text */:
      case "internal" /* Internal */:
        return true;
      default:
        return false;
    }
  }
  function isNamedImportsOrExports(node) {
    return node.kind === 272 /* NamedImports */ || node.kind === 276 /* NamedExports */;
  }
  function getLeftmostAccessExpression(expr) {
    while (isAccessExpression(expr)) {
      expr = expr.expression;
    }
    return expr;
  }
  function forEachNameInAccessChainWalkingLeft(name, action) {
    if (isAccessExpression(name.parent) && isRightSideOfAccessExpression(name)) {
      return walkAccessExpression(name.parent);
    }
    function walkAccessExpression(access) {
      if (access.kind === 208 /* PropertyAccessExpression */) {
        const res = action(access.name);
        if (res !== void 0) {
          return res;
        }
      } else if (access.kind === 209 /* ElementAccessExpression */) {
        if (isIdentifier(access.argumentExpression) || isStringLiteralLike(access.argumentExpression)) {
          const res = action(access.argumentExpression);
          if (res !== void 0) {
            return res;
          }
        } else {
          return void 0;
        }
      }
      if (isAccessExpression(access.expression)) {
        return walkAccessExpression(access.expression);
      }
      if (isIdentifier(access.expression)) {
        return action(access.expression);
      }
      return void 0;
    }
  }
  function getLeftmostExpression(node, stopAtCallExpressions) {
    while (true) {
      switch (node.kind) {
        case 222 /* PostfixUnaryExpression */:
          node = node.operand;
          continue;
        case 223 /* BinaryExpression */:
          node = node.left;
          continue;
        case 224 /* ConditionalExpression */:
          node = node.condition;
          continue;
        case 212 /* TaggedTemplateExpression */:
          node = node.tag;
          continue;
        case 210 /* CallExpression */:
          if (stopAtCallExpressions) {
            return node;
          }
        case 231 /* AsExpression */:
        case 209 /* ElementAccessExpression */:
        case 208 /* PropertyAccessExpression */:
        case 232 /* NonNullExpression */:
        case 356 /* PartiallyEmittedExpression */:
        case 235 /* SatisfiesExpression */:
          node = node.expression;
          continue;
      }
      return node;
    }
  }
  function Symbol4(flags, name) {
    this.flags = flags;
    this.escapedName = name;
    this.declarations = void 0;
    this.valueDeclaration = void 0;
    this.id = 0;
    this.mergeId = 0;
    this.parent = void 0;
    this.members = void 0;
    this.exports = void 0;
    this.exportSymbol = void 0;
    this.constEnumOnlyModule = void 0;
    this.isReferenced = void 0;
    this.isAssigned = void 0;
    this.links = void 0;
  }
  function Type3(checker, flags) {
    this.flags = flags;
    if (Debug.isDebugging || tracing) {
      this.checker = checker;
    }
  }
  function Signature2(checker, flags) {
    this.flags = flags;
    if (Debug.isDebugging) {
      this.checker = checker;
    }
  }
  function Node4(kind, pos, end) {
    this.pos = pos;
    this.end = end;
    this.kind = kind;
    this.id = 0;
    this.flags = 0 /* None */;
    this.modifierFlagsCache = 0 /* None */;
    this.transformFlags = 0 /* None */;
    this.parent = void 0;
    this.original = void 0;
    this.emitNode = void 0;
  }
  function Token(kind, pos, end) {
    this.pos = pos;
    this.end = end;
    this.kind = kind;
    this.id = 0;
    this.flags = 0 /* None */;
    this.transformFlags = 0 /* None */;
    this.parent = void 0;
    this.emitNode = void 0;
  }
  function Identifier2(kind, pos, end) {
    this.pos = pos;
    this.end = end;
    this.kind = kind;
    this.id = 0;
    this.flags = 0 /* None */;
    this.transformFlags = 0 /* None */;
    this.parent = void 0;
    this.original = void 0;
    this.emitNode = void 0;
  }
  function SourceMapSource(fileName, text, skipTrivia2) {
    this.fileName = fileName;
    this.text = text;
    this.skipTrivia = skipTrivia2 || ((pos) => pos);
  }
  function addObjectAllocatorPatcher(fn) {
    objectAllocatorPatchers.push(fn);
    fn(objectAllocator);
  }
  function setObjectAllocator(alloc) {
    Object.assign(objectAllocator, alloc);
    forEach(objectAllocatorPatchers, (fn) => fn(objectAllocator));
  }
  function formatStringFromArgs(text, args, baseIndex = 0) {
    return text.replace(/{(\d+)}/g, (_match, index) => "" + Debug.checkDefined(args[+index + baseIndex]));
  }
  function setLocalizedDiagnosticMessages(messages) {
    localizedDiagnosticMessages = messages;
  }
  function maybeSetLocalizedDiagnosticMessages(getMessages) {
    if (!localizedDiagnosticMessages && getMessages) {
      localizedDiagnosticMessages = getMessages();
    }
  }
  function getLocaleSpecificMessage(message) {
    return localizedDiagnosticMessages && localizedDiagnosticMessages[message.key] || message.message;
  }
  function createDetachedDiagnostic(fileName, start, length2, message) {
    assertDiagnosticLocation(
      /*file*/
      void 0,
      start,
      length2
    );
    let text = getLocaleSpecificMessage(message);
    if (arguments.length > 4) {
      text = formatStringFromArgs(text, arguments, 4);
    }
    return {
      file: void 0,
      start,
      length: length2,
      messageText: text,
      category: message.category,
      code: message.code,
      reportsUnnecessary: message.reportsUnnecessary,
      fileName
    };
  }
  function isDiagnosticWithDetachedLocation(diagnostic) {
    return diagnostic.file === void 0 && diagnostic.start !== void 0 && diagnostic.length !== void 0 && typeof diagnostic.fileName === "string";
  }
  function attachFileToDiagnostic(diagnostic, file) {
    const fileName = file.fileName || "";
    const length2 = file.text.length;
    Debug.assertEqual(diagnostic.fileName, fileName);
    Debug.assertLessThanOrEqual(diagnostic.start, length2);
    Debug.assertLessThanOrEqual(diagnostic.start + diagnostic.length, length2);
    const diagnosticWithLocation = {
      file,
      start: diagnostic.start,
      length: diagnostic.length,
      messageText: diagnostic.messageText,
      category: diagnostic.category,
      code: diagnostic.code,
      reportsUnnecessary: diagnostic.reportsUnnecessary
    };
    if (diagnostic.relatedInformation) {
      diagnosticWithLocation.relatedInformation = [];
      for (const related of diagnostic.relatedInformation) {
        if (isDiagnosticWithDetachedLocation(related) && related.fileName === fileName) {
          Debug.assertLessThanOrEqual(related.start, length2);
          Debug.assertLessThanOrEqual(related.start + related.length, length2);
          diagnosticWithLocation.relatedInformation.push(attachFileToDiagnostic(related, file));
        } else {
          diagnosticWithLocation.relatedInformation.push(related);
        }
      }
    }
    return diagnosticWithLocation;
  }
  function attachFileToDiagnostics(diagnostics, file) {
    const diagnosticsWithLocation = [];
    for (const diagnostic of diagnostics) {
      diagnosticsWithLocation.push(attachFileToDiagnostic(diagnostic, file));
    }
    return diagnosticsWithLocation;
  }
  function createFileDiagnostic(file, start, length2, message) {
    assertDiagnosticLocation(file, start, length2);
    let text = getLocaleSpecificMessage(message);
    if (arguments.length > 4) {
      text = formatStringFromArgs(text, arguments, 4);
    }
    return {
      file,
      start,
      length: length2,
      messageText: text,
      category: message.category,
      code: message.code,
      reportsUnnecessary: message.reportsUnnecessary,
      reportsDeprecated: message.reportsDeprecated
    };
  }
  function formatMessage(_dummy, message) {
    let text = getLocaleSpecificMessage(message);
    if (arguments.length > 2) {
      text = formatStringFromArgs(text, arguments, 2);
    }
    return text;
  }
  function createCompilerDiagnostic(message) {
    let text = getLocaleSpecificMessage(message);
    if (arguments.length > 1) {
      text = formatStringFromArgs(text, arguments, 1);
    }
    return {
      file: void 0,
      start: void 0,
      length: void 0,
      messageText: text,
      category: message.category,
      code: message.code,
      reportsUnnecessary: message.reportsUnnecessary,
      reportsDeprecated: message.reportsDeprecated
    };
  }
  function createCompilerDiagnosticFromMessageChain(chain, relatedInformation) {
    return {
      file: void 0,
      start: void 0,
      length: void 0,
      code: chain.code,
      category: chain.category,
      messageText: chain.next ? chain : chain.messageText,
      relatedInformation
    };
  }
  function chainDiagnosticMessages(details, message) {
    let text = getLocaleSpecificMessage(message);
    if (arguments.length > 2) {
      text = formatStringFromArgs(text, arguments, 2);
    }
    return {
      messageText: text,
      category: message.category,
      code: message.code,
      next: details === void 0 || Array.isArray(details) ? details : [details]
    };
  }
  function concatenateDiagnosticMessageChains(headChain, tailChain) {
    let lastChain = headChain;
    while (lastChain.next) {
      lastChain = lastChain.next[0];
    }
    lastChain.next = [tailChain];
  }
  function getDiagnosticFilePath(diagnostic) {
    return diagnostic.file ? diagnostic.file.path : void 0;
  }
  function compareDiagnostics(d1, d2) {
    return compareDiagnosticsSkipRelatedInformation(d1, d2) || compareRelatedInformation(d1, d2) || 0 /* EqualTo */;
  }
  function compareDiagnosticsSkipRelatedInformation(d1, d2) {
    return compareStringsCaseSensitive(getDiagnosticFilePath(d1), getDiagnosticFilePath(d2)) || compareValues(d1.start, d2.start) || compareValues(d1.length, d2.length) || compareValues(d1.code, d2.code) || compareMessageText(d1.messageText, d2.messageText) || 0 /* EqualTo */;
  }
  function compareRelatedInformation(d1, d2) {
    if (!d1.relatedInformation && !d2.relatedInformation) {
      return 0 /* EqualTo */;
    }
    if (d1.relatedInformation && d2.relatedInformation) {
      return compareValues(d1.relatedInformation.length, d2.relatedInformation.length) || forEach(d1.relatedInformation, (d1i, index) => {
        const d2i = d2.relatedInformation[index];
        return compareDiagnostics(d1i, d2i);
      }) || 0 /* EqualTo */;
    }
    return d1.relatedInformation ? -1 /* LessThan */ : 1 /* GreaterThan */;
  }
  function compareMessageText(t1, t2) {
    if (typeof t1 === "string" && typeof t2 === "string") {
      return compareStringsCaseSensitive(t1, t2);
    } else if (typeof t1 === "string") {
      return -1 /* LessThan */;
    } else if (typeof t2 === "string") {
      return 1 /* GreaterThan */;
    }
    let res = compareStringsCaseSensitive(t1.messageText, t2.messageText);
    if (res) {
      return res;
    }
    if (!t1.next && !t2.next) {
      return 0 /* EqualTo */;
    }
    if (!t1.next) {
      return -1 /* LessThan */;
    }
    if (!t2.next) {
      return 1 /* GreaterThan */;
    }
    const len = Math.min(t1.next.length, t2.next.length);
    for (let i = 0; i < len; i++) {
      res = compareMessageText(t1.next[i], t2.next[i]);
      if (res) {
        return res;
      }
    }
    if (t1.next.length < t2.next.length) {
      return -1 /* LessThan */;
    } else if (t1.next.length > t2.next.length) {
      return 1 /* GreaterThan */;
    }
    return 0 /* EqualTo */;
  }
  function getLanguageVariant(scriptKind) {
    return scriptKind === 4 /* TSX */ || scriptKind === 2 /* JSX */ || scriptKind === 1 /* JS */ || scriptKind === 6 /* JSON */ ? 1 /* JSX */ : 0 /* Standard */;
  }
  function walkTreeForJSXTags(node) {
    if (!(node.transformFlags & 2 /* ContainsJsx */))
      return void 0;
    return isJsxOpeningLikeElement(node) || isJsxFragment(node) ? node : forEachChild(node, walkTreeForJSXTags);
  }
  function isFileModuleFromUsingJSXTag(file) {
    return !file.isDeclarationFile ? walkTreeForJSXTags(file) : void 0;
  }
  function isFileForcedToBeModuleByFormat(file) {
    return (file.impliedNodeFormat === 99 /* ESNext */ || fileExtensionIsOneOf(file.fileName, [".cjs" /* Cjs */, ".cts" /* Cts */, ".mjs" /* Mjs */, ".mts" /* Mts */])) && !file.isDeclarationFile ? true : void 0;
  }
  function getSetExternalModuleIndicator(options) {
    switch (getEmitModuleDetectionKind(options)) {
      case 3 /* Force */:
        return (file) => {
          file.externalModuleIndicator = isFileProbablyExternalModule(file) || !file.isDeclarationFile || void 0;
        };
      case 1 /* Legacy */:
        return (file) => {
          file.externalModuleIndicator = isFileProbablyExternalModule(file);
        };
      case 2 /* Auto */:
        const checks = [isFileProbablyExternalModule];
        if (options.jsx === 4 /* ReactJSX */ || options.jsx === 5 /* ReactJSXDev */) {
          checks.push(isFileModuleFromUsingJSXTag);
        }
        checks.push(isFileForcedToBeModuleByFormat);
        const combined = or(...checks);
        const callback = (file) => void (file.externalModuleIndicator = combined(file));
        return callback;
    }
  }
  function getEmitScriptTarget(compilerOptions) {
    var _a2;
    return (_a2 = compilerOptions.target) != null ? _a2 : compilerOptions.module === 100 /* Node16 */ && 9 /* ES2022 */ || compilerOptions.module === 199 /* NodeNext */ && 99 /* ESNext */ || 1 /* ES5 */;
  }
  function getEmitModuleKind(compilerOptions) {
    return typeof compilerOptions.module === "number" ? compilerOptions.module : getEmitScriptTarget(compilerOptions) >= 2 /* ES2015 */ ? 5 /* ES2015 */ : 1 /* CommonJS */;
  }
  function emitModuleKindIsNonNodeESM(moduleKind) {
    return moduleKind >= 5 /* ES2015 */ && moduleKind <= 99 /* ESNext */;
  }
  function getEmitModuleResolutionKind(compilerOptions) {
    let moduleResolution = compilerOptions.moduleResolution;
    if (moduleResolution === void 0) {
      switch (getEmitModuleKind(compilerOptions)) {
        case 1 /* CommonJS */:
          moduleResolution = 2 /* Node10 */;
          break;
        case 100 /* Node16 */:
          moduleResolution = 3 /* Node16 */;
          break;
        case 199 /* NodeNext */:
          moduleResolution = 99 /* NodeNext */;
          break;
        default:
          moduleResolution = 1 /* Classic */;
          break;
      }
    }
    return moduleResolution;
  }
  function getEmitModuleDetectionKind(options) {
    return options.moduleDetection || (getEmitModuleKind(options) === 100 /* Node16 */ || getEmitModuleKind(options) === 199 /* NodeNext */ ? 3 /* Force */ : 2 /* Auto */);
  }
  function hasJsonModuleEmitEnabled(options) {
    switch (getEmitModuleKind(options)) {
      case 1 /* CommonJS */:
      case 2 /* AMD */:
      case 5 /* ES2015 */:
      case 6 /* ES2020 */:
      case 7 /* ES2022 */:
      case 99 /* ESNext */:
      case 100 /* Node16 */:
      case 199 /* NodeNext */:
        return true;
      default:
        return false;
    }
  }
  function getIsolatedModules(options) {
    return !!(options.isolatedModules || options.verbatimModuleSyntax);
  }
  function importNameElisionDisabled(options) {
    return options.verbatimModuleSyntax || options.isolatedModules && options.preserveValueImports;
  }
  function unreachableCodeIsError(options) {
    return options.allowUnreachableCode === false;
  }
  function unusedLabelIsError(options) {
    return options.allowUnusedLabels === false;
  }
  function getAreDeclarationMapsEnabled(options) {
    return !!(getEmitDeclarations(options) && options.declarationMap);
  }
  function getESModuleInterop(compilerOptions) {
    if (compilerOptions.esModuleInterop !== void 0) {
      return compilerOptions.esModuleInterop;
    }
    switch (getEmitModuleKind(compilerOptions)) {
      case 100 /* Node16 */:
      case 199 /* NodeNext */:
        return true;
    }
    return void 0;
  }
  function getAllowSyntheticDefaultImports(compilerOptions) {
    if (compilerOptions.allowSyntheticDefaultImports !== void 0) {
      return compilerOptions.allowSyntheticDefaultImports;
    }
    return getESModuleInterop(compilerOptions) || getEmitModuleKind(compilerOptions) === 4 /* System */ || getEmitModuleResolutionKind(compilerOptions) === 100 /* Bundler */;
  }
  function moduleResolutionSupportsPackageJsonExportsAndImports(moduleResolution) {
    return moduleResolution >= 3 /* Node16 */ && moduleResolution <= 99 /* NodeNext */ || moduleResolution === 100 /* Bundler */;
  }
  function shouldResolveJsRequire(compilerOptions) {
    return !!compilerOptions.noDtsResolution || getEmitModuleResolutionKind(compilerOptions) !== 100 /* Bundler */;
  }
  function getResolvePackageJsonExports(compilerOptions) {
    const moduleResolution = getEmitModuleResolutionKind(compilerOptions);
    if (!moduleResolutionSupportsPackageJsonExportsAndImports(moduleResolution)) {
      return false;
    }
    if (compilerOptions.resolvePackageJsonExports !== void 0) {
      return compilerOptions.resolvePackageJsonExports;
    }
    switch (moduleResolution) {
      case 3 /* Node16 */:
      case 99 /* NodeNext */:
      case 100 /* Bundler */:
        return true;
    }
    return false;
  }
  function getResolvePackageJsonImports(compilerOptions) {
    const moduleResolution = getEmitModuleResolutionKind(compilerOptions);
    if (!moduleResolutionSupportsPackageJsonExportsAndImports(moduleResolution)) {
      return false;
    }
    if (compilerOptions.resolvePackageJsonExports !== void 0) {
      return compilerOptions.resolvePackageJsonExports;
    }
    switch (moduleResolution) {
      case 3 /* Node16 */:
      case 99 /* NodeNext */:
      case 100 /* Bundler */:
        return true;
    }
    return false;
  }
  function getResolveJsonModule(compilerOptions) {
    if (compilerOptions.resolveJsonModule !== void 0) {
      return compilerOptions.resolveJsonModule;
    }
    return getEmitModuleResolutionKind(compilerOptions) === 100 /* Bundler */;
  }
  function getEmitDeclarations(compilerOptions) {
    return !!(compilerOptions.declaration || compilerOptions.composite);
  }
  function shouldPreserveConstEnums(compilerOptions) {
    return !!(compilerOptions.preserveConstEnums || getIsolatedModules(compilerOptions));
  }
  function isIncrementalCompilation(options) {
    return !!(options.incremental || options.composite);
  }
  function getStrictOptionValue(compilerOptions, flag) {
    return compilerOptions[flag] === void 0 ? !!compilerOptions.strict : !!compilerOptions[flag];
  }
  function getAllowJSCompilerOption(compilerOptions) {
    return compilerOptions.allowJs === void 0 ? !!compilerOptions.checkJs : compilerOptions.allowJs;
  }
  function getUseDefineForClassFields(compilerOptions) {
    return compilerOptions.useDefineForClassFields === void 0 ? getEmitScriptTarget(compilerOptions) >= 9 /* ES2022 */ : compilerOptions.useDefineForClassFields;
  }
  function compilerOptionsAffectSemanticDiagnostics(newOptions, oldOptions) {
    return optionsHaveChanges(oldOptions, newOptions, semanticDiagnosticsOptionDeclarations);
  }
  function compilerOptionsAffectEmit(newOptions, oldOptions) {
    return optionsHaveChanges(oldOptions, newOptions, affectsEmitOptionDeclarations);
  }
  function compilerOptionsAffectDeclarationPath(newOptions, oldOptions) {
    return optionsHaveChanges(oldOptions, newOptions, affectsDeclarationPathOptionDeclarations);
  }
  function getCompilerOptionValue(options, option) {
    return option.strictFlag ? getStrictOptionValue(options, option.name) : options[option.name];
  }
  function getJSXTransformEnabled(options) {
    const jsx = options.jsx;
    return jsx === 2 /* React */ || jsx === 4 /* ReactJSX */ || jsx === 5 /* ReactJSXDev */;
  }
  function getJSXImplicitImportBase(compilerOptions, file) {
    const jsxImportSourcePragmas = file == null ? void 0 : file.pragmas.get("jsximportsource");
    const jsxImportSourcePragma = isArray(jsxImportSourcePragmas) ? jsxImportSourcePragmas[jsxImportSourcePragmas.length - 1] : jsxImportSourcePragmas;
    return compilerOptions.jsx === 4 /* ReactJSX */ || compilerOptions.jsx === 5 /* ReactJSXDev */ || compilerOptions.jsxImportSource || jsxImportSourcePragma ? (jsxImportSourcePragma == null ? void 0 : jsxImportSourcePragma.arguments.factory) || compilerOptions.jsxImportSource || "react" : void 0;
  }
  function getJSXRuntimeImport(base, options) {
    return base ? `${base}/${options.jsx === 5 /* ReactJSXDev */ ? "jsx-dev-runtime" : "jsx-runtime"}` : void 0;
  }
  function hasZeroOrOneAsteriskCharacter(str) {
    let seenAsterisk = false;
    for (let i = 0; i < str.length; i++) {
      if (str.charCodeAt(i) === 42 /* asterisk */) {
        if (!seenAsterisk) {
          seenAsterisk = true;
        } else {
          return false;
        }
      }
    }
    return true;
  }
  function createSymlinkCache(cwd, getCanonicalFileName) {
    let symlinkedDirectories;
    let symlinkedDirectoriesByRealpath;
    let symlinkedFiles;
    let hasProcessedResolutions = false;
    return {
      getSymlinkedFiles: () => symlinkedFiles,
      getSymlinkedDirectories: () => symlinkedDirectories,
      getSymlinkedDirectoriesByRealpath: () => symlinkedDirectoriesByRealpath,
      setSymlinkedFile: (path, real) => (symlinkedFiles || (symlinkedFiles = /* @__PURE__ */ new Map())).set(path, real),
      setSymlinkedDirectory: (symlink, real) => {
        let symlinkPath = toPath(symlink, cwd, getCanonicalFileName);
        if (!containsIgnoredPath(symlinkPath)) {
          symlinkPath = ensureTrailingDirectorySeparator(symlinkPath);
          if (real !== false && !(symlinkedDirectories == null ? void 0 : symlinkedDirectories.has(symlinkPath))) {
            (symlinkedDirectoriesByRealpath || (symlinkedDirectoriesByRealpath = createMultiMap())).add(ensureTrailingDirectorySeparator(real.realPath), symlink);
          }
          (symlinkedDirectories || (symlinkedDirectories = /* @__PURE__ */ new Map())).set(symlinkPath, real);
        }
      },
      setSymlinksFromResolutions(files, typeReferenceDirectives) {
        var _a2, _b;
        Debug.assert(!hasProcessedResolutions);
        hasProcessedResolutions = true;
        for (const file of files) {
          (_a2 = file.resolvedModules) == null ? void 0 : _a2.forEach((resolution) => processResolution(this, resolution.resolvedModule));
          (_b = file.resolvedTypeReferenceDirectiveNames) == null ? void 0 : _b.forEach((resolution) => processResolution(this, resolution.resolvedTypeReferenceDirective));
        }
        typeReferenceDirectives.forEach((resolution) => processResolution(this, resolution.resolvedTypeReferenceDirective));
      },
      hasProcessedResolutions: () => hasProcessedResolutions
    };
    function processResolution(cache, resolution) {
      if (!resolution || !resolution.originalPath || !resolution.resolvedFileName)
        return;
      const { resolvedFileName, originalPath } = resolution;
      cache.setSymlinkedFile(toPath(originalPath, cwd, getCanonicalFileName), resolvedFileName);
      const [commonResolved, commonOriginal] = guessDirectorySymlink(resolvedFileName, originalPath, cwd, getCanonicalFileName) || emptyArray;
      if (commonResolved && commonOriginal) {
        cache.setSymlinkedDirectory(
          commonOriginal,
          { real: commonResolved, realPath: toPath(commonResolved, cwd, getCanonicalFileName) }
        );
      }
    }
  }
  function guessDirectorySymlink(a, b, cwd, getCanonicalFileName) {
    const aParts = getPathComponents(getNormalizedAbsolutePath(a, cwd));
    const bParts = getPathComponents(getNormalizedAbsolutePath(b, cwd));
    let isDirectory = false;
    while (aParts.length >= 2 && bParts.length >= 2 && !isNodeModulesOrScopedPackageDirectory(aParts[aParts.length - 2], getCanonicalFileName) && !isNodeModulesOrScopedPackageDirectory(bParts[bParts.length - 2], getCanonicalFileName) && getCanonicalFileName(aParts[aParts.length - 1]) === getCanonicalFileName(bParts[bParts.length - 1])) {
      aParts.pop();
      bParts.pop();
      isDirectory = true;
    }
    return isDirectory ? [getPathFromPathComponents(aParts), getPathFromPathComponents(bParts)] : void 0;
  }
  function isNodeModulesOrScopedPackageDirectory(s, getCanonicalFileName) {
    return s !== void 0 && (getCanonicalFileName(s) === "node_modules" || startsWith(s, "@"));
  }
  function stripLeadingDirectorySeparator(s) {
    return isAnyDirectorySeparator(s.charCodeAt(0)) ? s.slice(1) : void 0;
  }
  function tryRemoveDirectoryPrefix(path, dirPath, getCanonicalFileName) {
    const withoutPrefix = tryRemovePrefix(path, dirPath, getCanonicalFileName);
    return withoutPrefix === void 0 ? void 0 : stripLeadingDirectorySeparator(withoutPrefix);
  }
  function regExpEscape(text) {
    return text.replace(reservedCharacterPattern, escapeRegExpCharacter);
  }
  function escapeRegExpCharacter(match) {
    return "\\" + match;
  }
  function getRegularExpressionForWildcard(specs, basePath, usage) {
    const patterns = getRegularExpressionsForWildcards(specs, basePath, usage);
    if (!patterns || !patterns.length) {
      return void 0;
    }
    const pattern = patterns.map((pattern2) => `(${pattern2})`).join("|");
    const terminator = usage === "exclude" ? "($|/)" : "$";
    return `^(${pattern})${terminator}`;
  }
  function getRegularExpressionsForWildcards(specs, basePath, usage) {
    if (specs === void 0 || specs.length === 0) {
      return void 0;
    }
    return flatMap(specs, (spec) => spec && getSubPatternFromSpec(spec, basePath, usage, wildcardMatchers[usage]));
  }
  function isImplicitGlob(lastPathComponent) {
    return !/[.*?]/.test(lastPathComponent);
  }
  function getPatternFromSpec(spec, basePath, usage) {
    const pattern = spec && getSubPatternFromSpec(spec, basePath, usage, wildcardMatchers[usage]);
    return pattern && `^(${pattern})${usage === "exclude" ? "($|/)" : "$"}`;
  }
  function getSubPatternFromSpec(spec, basePath, usage, { singleAsteriskRegexFragment, doubleAsteriskRegexFragment, replaceWildcardCharacter: replaceWildcardCharacter2 }) {
    let subpattern = "";
    let hasWrittenComponent = false;
    const components = getNormalizedPathComponents(spec, basePath);
    const lastComponent = last(components);
    if (usage !== "exclude" && lastComponent === "**") {
      return void 0;
    }
    components[0] = removeTrailingDirectorySeparator(components[0]);
    if (isImplicitGlob(lastComponent)) {
      components.push("**", "*");
    }
    let optionalCount = 0;
    for (let component of components) {
      if (component === "**") {
        subpattern += doubleAsteriskRegexFragment;
      } else {
        if (usage === "directories") {
          subpattern += "(";
          optionalCount++;
        }
        if (hasWrittenComponent) {
          subpattern += directorySeparator;
        }
        if (usage !== "exclude") {
          let componentPattern = "";
          if (component.charCodeAt(0) === 42 /* asterisk */) {
            componentPattern += "([^./]" + singleAsteriskRegexFragment + ")?";
            component = component.substr(1);
          } else if (component.charCodeAt(0) === 63 /* question */) {
            componentPattern += "[^./]";
            component = component.substr(1);
          }
          componentPattern += component.replace(reservedCharacterPattern, replaceWildcardCharacter2);
          if (componentPattern !== component) {
            subpattern += implicitExcludePathRegexPattern;
          }
          subpattern += componentPattern;
        } else {
          subpattern += component.replace(reservedCharacterPattern, replaceWildcardCharacter2);
        }
      }
      hasWrittenComponent = true;
    }
    while (optionalCount > 0) {
      subpattern += ")?";
      optionalCount--;
    }
    return subpattern;
  }
  function replaceWildcardCharacter(match, singleAsteriskRegexFragment) {
    return match === "*" ? singleAsteriskRegexFragment : match === "?" ? "[^/]" : "\\" + match;
  }
  function getFileMatcherPatterns(path, excludes, includes, useCaseSensitiveFileNames, currentDirectory) {
    path = normalizePath(path);
    currentDirectory = normalizePath(currentDirectory);
    const absolutePath = combinePaths(currentDirectory, path);
    return {
      includeFilePatterns: map(getRegularExpressionsForWildcards(includes, absolutePath, "files"), (pattern) => `^${pattern}$`),
      includeFilePattern: getRegularExpressionForWildcard(includes, absolutePath, "files"),
      includeDirectoryPattern: getRegularExpressionForWildcard(includes, absolutePath, "directories"),
      excludePattern: getRegularExpressionForWildcard(excludes, absolutePath, "exclude"),
      basePaths: getBasePaths(path, includes, useCaseSensitiveFileNames)
    };
  }
  function getRegexFromPattern(pattern, useCaseSensitiveFileNames) {
    return new RegExp(pattern, useCaseSensitiveFileNames ? "" : "i");
  }
  function matchFiles(path, extensions, excludes, includes, useCaseSensitiveFileNames, currentDirectory, depth, getFileSystemEntries, realpath) {
    path = normalizePath(path);
    currentDirectory = normalizePath(currentDirectory);
    const patterns = getFileMatcherPatterns(path, excludes, includes, useCaseSensitiveFileNames, currentDirectory);
    const includeFileRegexes = patterns.includeFilePatterns && patterns.includeFilePatterns.map((pattern) => getRegexFromPattern(pattern, useCaseSensitiveFileNames));
    const includeDirectoryRegex = patterns.includeDirectoryPattern && getRegexFromPattern(patterns.includeDirectoryPattern, useCaseSensitiveFileNames);
    const excludeRegex = patterns.excludePattern && getRegexFromPattern(patterns.excludePattern, useCaseSensitiveFileNames);
    const results = includeFileRegexes ? includeFileRegexes.map(() => []) : [[]];
    const visited = /* @__PURE__ */ new Map();
    const toCanonical = createGetCanonicalFileName(useCaseSensitiveFileNames);
    for (const basePath of patterns.basePaths) {
      visitDirectory(basePath, combinePaths(currentDirectory, basePath), depth);
    }
    return flatten(results);
    function visitDirectory(path2, absolutePath, depth2) {
      const canonicalPath = toCanonical(realpath(absolutePath));
      if (visited.has(canonicalPath))
        return;
      visited.set(canonicalPath, true);
      const { files, directories } = getFileSystemEntries(path2);
      for (const current of sort(files, compareStringsCaseSensitive)) {
        const name = combinePaths(path2, current);
        const absoluteName = combinePaths(absolutePath, current);
        if (extensions && !fileExtensionIsOneOf(name, extensions))
          continue;
        if (excludeRegex && excludeRegex.test(absoluteName))
          continue;
        if (!includeFileRegexes) {
          results[0].push(name);
        } else {
          const includeIndex = findIndex(includeFileRegexes, (re) => re.test(absoluteName));
          if (includeIndex !== -1) {
            results[includeIndex].push(name);
          }
        }
      }
      if (depth2 !== void 0) {
        depth2--;
        if (depth2 === 0) {
          return;
        }
      }
      for (const current of sort(directories, compareStringsCaseSensitive)) {
        const name = combinePaths(path2, current);
        const absoluteName = combinePaths(absolutePath, current);
        if ((!includeDirectoryRegex || includeDirectoryRegex.test(absoluteName)) && (!excludeRegex || !excludeRegex.test(absoluteName))) {
          visitDirectory(name, absoluteName, depth2);
        }
      }
    }
  }
  function getBasePaths(path, includes, useCaseSensitiveFileNames) {
    const basePaths = [path];
    if (includes) {
      const includeBasePaths = [];
      for (const include of includes) {
        const absolute = isRootedDiskPath(include) ? include : normalizePath(combinePaths(path, include));
        includeBasePaths.push(getIncludeBasePath(absolute));
      }
      includeBasePaths.sort(getStringComparer(!useCaseSensitiveFileNames));
      for (const includeBasePath of includeBasePaths) {
        if (every(basePaths, (basePath) => !containsPath(basePath, includeBasePath, path, !useCaseSensitiveFileNames))) {
          basePaths.push(includeBasePath);
        }
      }
    }
    return basePaths;
  }
  function getIncludeBasePath(absolute) {
    const wildcardOffset = indexOfAnyCharCode(absolute, wildcardCharCodes);
    if (wildcardOffset < 0) {
      return !hasExtension(absolute) ? absolute : removeTrailingDirectorySeparator(getDirectoryPath(absolute));
    }
    return absolute.substring(0, absolute.lastIndexOf(directorySeparator, wildcardOffset));
  }
  function ensureScriptKind(fileName, scriptKind) {
    return scriptKind || getScriptKindFromFileName(fileName) || 3 /* TS */;
  }
  function getScriptKindFromFileName(fileName) {
    const ext = fileName.substr(fileName.lastIndexOf("."));
    switch (ext.toLowerCase()) {
      case ".js" /* Js */:
      case ".cjs" /* Cjs */:
      case ".mjs" /* Mjs */:
        return 1 /* JS */;
      case ".jsx" /* Jsx */:
        return 2 /* JSX */;
      case ".ts" /* Ts */:
      case ".cts" /* Cts */:
      case ".mts" /* Mts */:
        return 3 /* TS */;
      case ".tsx" /* Tsx */:
        return 4 /* TSX */;
      case ".json" /* Json */:
        return 6 /* JSON */;
      default:
        return 0 /* Unknown */;
    }
  }
  function getSupportedExtensions(options, extraFileExtensions) {
    const needJsExtensions = options && getAllowJSCompilerOption(options);
    if (!extraFileExtensions || extraFileExtensions.length === 0) {
      return needJsExtensions ? allSupportedExtensions : supportedTSExtensions;
    }
    const builtins = needJsExtensions ? allSupportedExtensions : supportedTSExtensions;
    const flatBuiltins = flatten(builtins);
    const extensions = [
      ...builtins,
      ...mapDefined(extraFileExtensions, (x) => x.scriptKind === 7 /* Deferred */ || needJsExtensions && isJSLike(x.scriptKind) && flatBuiltins.indexOf(x.extension) === -1 ? [x.extension] : void 0)
    ];
    return extensions;
  }
  function getSupportedExtensionsWithJsonIfResolveJsonModule(options, supportedExtensions) {
    if (!options || !getResolveJsonModule(options))
      return supportedExtensions;
    if (supportedExtensions === allSupportedExtensions)
      return allSupportedExtensionsWithJson;
    if (supportedExtensions === supportedTSExtensions)
      return supportedTSExtensionsWithJson;
    return [...supportedExtensions, [".json" /* Json */]];
  }
  function isJSLike(scriptKind) {
    return scriptKind === 1 /* JS */ || scriptKind === 2 /* JSX */;
  }
  function hasJSFileExtension(fileName) {
    return some(supportedJSExtensionsFlat, (extension) => fileExtensionIs(fileName, extension));
  }
  function hasTSFileExtension(fileName) {
    return some(supportedTSExtensionsFlat, (extension) => fileExtensionIs(fileName, extension));
  }
  function usesExtensionsOnImports({ imports }, hasExtension2 = or(hasJSFileExtension, hasTSFileExtension)) {
    return firstDefined(imports, ({ text }) => pathIsRelative(text) ? hasExtension2(text) : void 0) || false;
  }
  function getModuleSpecifierEndingPreference(preference, resolutionMode, compilerOptions, sourceFile) {
    if (preference === "js" || resolutionMode === 99 /* ESNext */) {
      if (!shouldAllowImportingTsExtension(compilerOptions)) {
        return 2 /* JsExtension */;
      }
      return inferPreference() !== 2 /* JsExtension */ ? 3 /* TsExtension */ : 2 /* JsExtension */;
    }
    if (preference === "minimal") {
      return 0 /* Minimal */;
    }
    if (preference === "index") {
      return 1 /* Index */;
    }
    if (!shouldAllowImportingTsExtension(compilerOptions)) {
      return usesExtensionsOnImports(sourceFile) ? 2 /* JsExtension */ : 0 /* Minimal */;
    }
    return inferPreference();
    function inferPreference() {
      let usesJsExtensions = false;
      const specifiers = sourceFile.imports.length ? sourceFile.imports.map((i) => i.text) : isSourceFileJS(sourceFile) ? getRequiresAtTopOfFile(sourceFile).map((r) => r.arguments[0].text) : emptyArray;
      for (const specifier of specifiers) {
        if (pathIsRelative(specifier)) {
          if (hasTSFileExtension(specifier)) {
            return 3 /* TsExtension */;
          }
          if (hasJSFileExtension(specifier)) {
            usesJsExtensions = true;
          }
        }
      }
      return usesJsExtensions ? 2 /* JsExtension */ : 0 /* Minimal */;
    }
  }
  function getRequiresAtTopOfFile(sourceFile) {
    let nonRequireStatementCount = 0;
    let requires;
    for (const statement of sourceFile.statements) {
      if (nonRequireStatementCount > 3) {
        break;
      }
      if (isRequireVariableStatement(statement)) {
        requires = concatenate(requires, statement.declarationList.declarations.map((d) => d.initializer));
      } else if (isExpressionStatement(statement) && isRequireCall(
        statement.expression,
        /*requireStringLiteralLikeArgument*/
        true
      )) {
        requires = append(requires, statement.expression);
      } else {
        nonRequireStatementCount++;
      }
    }
    return requires || emptyArray;
  }
  function isSupportedSourceFileName(fileName, compilerOptions, extraFileExtensions) {
    if (!fileName)
      return false;
    const supportedExtensions = getSupportedExtensions(compilerOptions, extraFileExtensions);
    for (const extension of flatten(getSupportedExtensionsWithJsonIfResolveJsonModule(compilerOptions, supportedExtensions))) {
      if (fileExtensionIs(fileName, extension)) {
        return true;
      }
    }
    return false;
  }
  function numberOfDirectorySeparators(str) {
    const match = str.match(/\//g);
    return match ? match.length : 0;
  }
  function compareNumberOfDirectorySeparators(path1, path2) {
    return compareValues(
      numberOfDirectorySeparators(path1),
      numberOfDirectorySeparators(path2)
    );
  }
  function removeFileExtension(path) {
    for (const ext of extensionsToRemove) {
      const extensionless = tryRemoveExtension(path, ext);
      if (extensionless !== void 0) {
        return extensionless;
      }
    }
    return path;
  }
  function tryRemoveExtension(path, extension) {
    return fileExtensionIs(path, extension) ? removeExtension(path, extension) : void 0;
  }
  function removeExtension(path, extension) {
    return path.substring(0, path.length - extension.length);
  }
  function changeExtension(path, newExtension) {
    return changeAnyExtension(
      path,
      newExtension,
      extensionsToRemove,
      /*ignoreCase*/
      false
    );
  }
  function tryParsePattern(pattern) {
    const indexOfStar = pattern.indexOf("*");
    if (indexOfStar === -1) {
      return pattern;
    }
    return pattern.indexOf("*", indexOfStar + 1) !== -1 ? void 0 : {
      prefix: pattern.substr(0, indexOfStar),
      suffix: pattern.substr(indexOfStar + 1)
    };
  }
  function tryParsePatterns(paths) {
    return mapDefined(getOwnKeys(paths), (path) => tryParsePattern(path));
  }
  function positionIsSynthesized(pos) {
    return !(pos >= 0);
  }
  function extensionIsTS(ext) {
    return ext === ".ts" /* Ts */ || ext === ".tsx" /* Tsx */ || ext === ".d.ts" /* Dts */ || ext === ".cts" /* Cts */ || ext === ".mts" /* Mts */ || ext === ".d.mts" /* Dmts */ || ext === ".d.cts" /* Dcts */ || startsWith(ext, ".d.") && endsWith(ext, ".ts");
  }
  function resolutionExtensionIsTSOrJson(ext) {
    return extensionIsTS(ext) || ext === ".json" /* Json */;
  }
  function extensionFromPath(path) {
    const ext = tryGetExtensionFromPath2(path);
    return ext !== void 0 ? ext : Debug.fail(`File ${path} has unknown extension.`);
  }
  function isAnySupportedFileExtension(path) {
    return tryGetExtensionFromPath2(path) !== void 0;
  }
  function tryGetExtensionFromPath2(path) {
    return find(extensionsToRemove, (e) => fileExtensionIs(path, e));
  }
  function isCheckJsEnabledForFile(sourceFile, compilerOptions) {
    return sourceFile.checkJsDirective ? sourceFile.checkJsDirective.enabled : compilerOptions.checkJs;
  }
  function matchPatternOrExact(patternOrStrings, candidate) {
    const patterns = [];
    for (const patternOrString of patternOrStrings) {
      if (patternOrString === candidate) {
        return candidate;
      }
      if (!isString(patternOrString)) {
        patterns.push(patternOrString);
      }
    }
    return findBestPatternMatch(patterns, (_) => _, candidate);
  }
  function sliceAfter(arr, value) {
    const index = arr.indexOf(value);
    Debug.assert(index !== -1);
    return arr.slice(index);
  }
  function addRelatedInfo(diagnostic, ...relatedInformation) {
    if (!relatedInformation.length) {
      return diagnostic;
    }
    if (!diagnostic.relatedInformation) {
      diagnostic.relatedInformation = [];
    }
    Debug.assert(diagnostic.relatedInformation !== emptyArray, "Diagnostic had empty array singleton for related info, but is still being constructed!");
    diagnostic.relatedInformation.push(...relatedInformation);
    return diagnostic;
  }
  function minAndMax(arr, getValue) {
    Debug.assert(arr.length !== 0);
    let min2 = getValue(arr[0]);
    let max = min2;
    for (let i = 1; i < arr.length; i++) {
      const value = getValue(arr[i]);
      if (value < min2) {
        min2 = value;
      } else if (value > max) {
        max = value;
      }
    }
    return { min: min2, max };
  }
  function rangeOfNode(node) {
    return { pos: getTokenPosOfNode(node), end: node.end };
  }
  function rangeOfTypeParameters(sourceFile, typeParameters) {
    const pos = typeParameters.pos - 1;
    const end = Math.min(sourceFile.text.length, skipTrivia(sourceFile.text, typeParameters.end) + 1);
    return { pos, end };
  }
  function skipTypeChecking(sourceFile, options, host) {
    return options.skipLibCheck && sourceFile.isDeclarationFile || options.skipDefaultLibCheck && sourceFile.hasNoDefaultLib || host.isSourceOfProjectReferenceRedirect(sourceFile.fileName);
  }
  function isJsonEqual(a, b) {
    return a === b || typeof a === "object" && a !== null && typeof b === "object" && b !== null && equalOwnProperties(a, b, isJsonEqual);
  }
  function parsePseudoBigInt(stringValue) {
    let log2Base;
    switch (stringValue.charCodeAt(1)) {
      case 98 /* b */:
      case 66 /* B */:
        log2Base = 1;
        break;
      case 111 /* o */:
      case 79 /* O */:
        log2Base = 3;
        break;
      case 120 /* x */:
      case 88 /* X */:
        log2Base = 4;
        break;
      default:
        const nIndex = stringValue.length - 1;
        let nonZeroStart = 0;
        while (stringValue.charCodeAt(nonZeroStart) === 48 /* _0 */) {
          nonZeroStart++;
        }
        return stringValue.slice(nonZeroStart, nIndex) || "0";
    }
    const startIndex = 2, endIndex = stringValue.length - 1;
    const bitsNeeded = (endIndex - startIndex) * log2Base;
    const segments = new Uint16Array((bitsNeeded >>> 4) + (bitsNeeded & 15 ? 1 : 0));
    for (let i = endIndex - 1, bitOffset = 0; i >= startIndex; i--, bitOffset += log2Base) {
      const segment = bitOffset >>> 4;
      const digitChar = stringValue.charCodeAt(i);
      const digit = digitChar <= 57 /* _9 */ ? digitChar - 48 /* _0 */ : 10 + digitChar - (digitChar <= 70 /* F */ ? 65 /* A */ : 97 /* a */);
      const shiftedDigit = digit << (bitOffset & 15);
      segments[segment] |= shiftedDigit;
      const residual = shiftedDigit >>> 16;
      if (residual)
        segments[segment + 1] |= residual;
    }
    let base10Value = "";
    let firstNonzeroSegment = segments.length - 1;
    let segmentsRemaining = true;
    while (segmentsRemaining) {
      let mod10 = 0;
      segmentsRemaining = false;
      for (let segment = firstNonzeroSegment; segment >= 0; segment--) {
        const newSegment = mod10 << 16 | segments[segment];
        const segmentValue = newSegment / 10 | 0;
        segments[segment] = segmentValue;
        mod10 = newSegment - segmentValue * 10;
        if (segmentValue && !segmentsRemaining) {
          firstNonzeroSegment = segment;
          segmentsRemaining = true;
        }
      }
      base10Value = mod10 + base10Value;
    }
    return base10Value;
  }
  function pseudoBigIntToString({ negative, base10Value }) {
    return (negative && base10Value !== "0" ? "-" : "") + base10Value;
  }
  function parseBigInt(text) {
    if (!isValidBigIntString(
      text,
      /*roundTripOnly*/
      false
    )) {
      return void 0;
    }
    return parseValidBigInt(text);
  }
  function parseValidBigInt(text) {
    const negative = text.startsWith("-");
    const base10Value = parsePseudoBigInt(`${negative ? text.slice(1) : text}n`);
    return { negative, base10Value };
  }
  function isValidBigIntString(s, roundTripOnly) {
    if (s === "")
      return false;
    const scanner2 = createScanner(
      99 /* ESNext */,
      /*skipTrivia*/
      false
    );
    let success = true;
    scanner2.setOnError(() => success = false);
    scanner2.setText(s + "n");
    let result = scanner2.scan();
    const negative = result === 40 /* MinusToken */;
    if (negative) {
      result = scanner2.scan();
    }
    const flags = scanner2.getTokenFlags();
    return success && result === 9 /* BigIntLiteral */ && scanner2.getTextPos() === s.length + 1 && !(flags & 512 /* ContainsSeparator */) && (!roundTripOnly || s === pseudoBigIntToString({ negative, base10Value: parsePseudoBigInt(scanner2.getTokenValue()) }));
  }
  function isValidTypeOnlyAliasUseSite(useSite) {
    return !!(useSite.flags & 16777216 /* Ambient */) || isPartOfTypeQuery(useSite) || isIdentifierInNonEmittingHeritageClause(useSite) || isPartOfPossiblyValidTypeOrAbstractComputedPropertyName(useSite) || !(isExpressionNode(useSite) || isShorthandPropertyNameUseSite(useSite));
  }
  function isShorthandPropertyNameUseSite(useSite) {
    return isIdentifier(useSite) && isShorthandPropertyAssignment(useSite.parent) && useSite.parent.name === useSite;
  }
  function isPartOfPossiblyValidTypeOrAbstractComputedPropertyName(node) {
    while (node.kind === 79 /* Identifier */ || node.kind === 208 /* PropertyAccessExpression */) {
      node = node.parent;
    }
    if (node.kind !== 164 /* ComputedPropertyName */) {
      return false;
    }
    if (hasSyntacticModifier(node.parent, 256 /* Abstract */)) {
      return true;
    }
    const containerKind = node.parent.parent.kind;
    return containerKind === 261 /* InterfaceDeclaration */ || containerKind === 184 /* TypeLiteral */;
  }
  function isIdentifierInNonEmittingHeritageClause(node) {
    if (node.kind !== 79 /* Identifier */)
      return false;
    const heritageClause = findAncestor(node.parent, (parent2) => {
      switch (parent2.kind) {
        case 294 /* HeritageClause */:
          return true;
        case 208 /* PropertyAccessExpression */:
        case 230 /* ExpressionWithTypeArguments */:
          return false;
        default:
          return "quit";
      }
    });
    return (heritageClause == null ? void 0 : heritageClause.token) === 117 /* ImplementsKeyword */ || (heritageClause == null ? void 0 : heritageClause.parent.kind) === 261 /* InterfaceDeclaration */;
  }
  function isIdentifierTypeReference(node) {
    return isTypeReferenceNode(node) && isIdentifier(node.typeName);
  }
  function arrayIsHomogeneous(array, comparer = equateValues) {
    if (array.length < 2)
      return true;
    const first2 = array[0];
    for (let i = 1, length2 = array.length; i < length2; i++) {
      const target = array[i];
      if (!comparer(first2, target))
        return false;
    }
    return true;
  }
  function setTextRangePos(range, pos) {
    range.pos = pos;
    return range;
  }
  function setTextRangeEnd(range, end) {
    range.end = end;
    return range;
  }
  function setTextRangePosEnd(range, pos, end) {
    return setTextRangeEnd(setTextRangePos(range, pos), end);
  }
  function setTextRangePosWidth(range, pos, width) {
    return setTextRangePosEnd(range, pos, pos + width);
  }
  function setNodeFlags(node, newFlags) {
    if (node) {
      node.flags = newFlags;
    }
    return node;
  }
  function setParent(child, parent2) {
    if (child && parent2) {
      child.parent = parent2;
    }
    return child;
  }
  function setEachParent(children, parent2) {
    if (children) {
      for (const child of children) {
        setParent(child, parent2);
      }
    }
    return children;
  }
  function setParentRecursive(rootNode, incremental) {
    if (!rootNode)
      return rootNode;
    forEachChildRecursively(rootNode, isJSDocNode(rootNode) ? bindParentToChildIgnoringJSDoc : bindParentToChild);
    return rootNode;
    function bindParentToChildIgnoringJSDoc(child, parent2) {
      if (incremental && child.parent === parent2) {
        return "skip";
      }
      setParent(child, parent2);
    }
    function bindJSDoc(child) {
      if (hasJSDocNodes(child)) {
        for (const doc of child.jsDoc) {
          bindParentToChildIgnoringJSDoc(doc, child);
          forEachChildRecursively(doc, bindParentToChildIgnoringJSDoc);
        }
      }
    }
    function bindParentToChild(child, parent2) {
      return bindParentToChildIgnoringJSDoc(child, parent2) || bindJSDoc(child);
    }
  }
  function isPackedElement(node) {
    return !isOmittedExpression(node);
  }
  function isPackedArrayLiteral(node) {
    return isArrayLiteralExpression(node) && every(node.elements, isPackedElement);
  }
  function expressionResultIsUnused(node) {
    Debug.assertIsDefined(node.parent);
    while (true) {
      const parent2 = node.parent;
      if (isParenthesizedExpression(parent2)) {
        node = parent2;
        continue;
      }
      if (isExpressionStatement(parent2) || isVoidExpression(parent2) || isForStatement(parent2) && (parent2.initializer === node || parent2.incrementor === node)) {
        return true;
      }
      if (isCommaListExpression(parent2)) {
        if (node !== last(parent2.elements))
          return true;
        node = parent2;
        continue;
      }
      if (isBinaryExpression(parent2) && parent2.operatorToken.kind === 27 /* CommaToken */) {
        if (node === parent2.left)
          return true;
        node = parent2;
        continue;
      }
      return false;
    }
  }
  function containsIgnoredPath(path) {
    return some(ignoredPaths, (p) => stringContains(path, p));
  }
  function getContainingNodeArray(node) {
    if (!node.parent)
      return void 0;
    switch (node.kind) {
      case 165 /* TypeParameter */:
        const { parent: parent3 } = node;
        return parent3.kind === 192 /* InferType */ ? void 0 : parent3.typeParameters;
      case 166 /* Parameter */:
        return node.parent.parameters;
      case 201 /* TemplateLiteralTypeSpan */:
        return node.parent.templateSpans;
      case 236 /* TemplateSpan */:
        return node.parent.templateSpans;
      case 167 /* Decorator */: {
        const { parent: parent4 } = node;
        return canHaveDecorators(parent4) ? parent4.modifiers : void 0;
      }
      case 294 /* HeritageClause */:
        return node.parent.heritageClauses;
    }
    const { parent: parent2 } = node;
    if (isJSDocTag(node)) {
      return isJSDocTypeLiteral(node.parent) ? void 0 : node.parent.tags;
    }
    switch (parent2.kind) {
      case 184 /* TypeLiteral */:
      case 261 /* InterfaceDeclaration */:
        return isTypeElement(node) ? parent2.members : void 0;
      case 189 /* UnionType */:
      case 190 /* IntersectionType */:
        return parent2.types;
      case 186 /* TupleType */:
      case 206 /* ArrayLiteralExpression */:
      case 357 /* CommaListExpression */:
      case 272 /* NamedImports */:
      case 276 /* NamedExports */:
        return parent2.elements;
      case 207 /* ObjectLiteralExpression */:
      case 289 /* JsxAttributes */:
        return parent2.properties;
      case 210 /* CallExpression */:
      case 211 /* NewExpression */:
        return isTypeNode(node) ? parent2.typeArguments : parent2.expression === node ? void 0 : parent2.arguments;
      case 281 /* JsxElement */:
      case 285 /* JsxFragment */:
        return isJsxChild(node) ? parent2.children : void 0;
      case 283 /* JsxOpeningElement */:
      case 282 /* JsxSelfClosingElement */:
        return isTypeNode(node) ? parent2.typeArguments : void 0;
      case 238 /* Block */:
      case 292 /* CaseClause */:
      case 293 /* DefaultClause */:
      case 265 /* ModuleBlock */:
        return parent2.statements;
      case 266 /* CaseBlock */:
        return parent2.clauses;
      case 260 /* ClassDeclaration */:
      case 228 /* ClassExpression */:
        return isClassElement(node) ? parent2.members : void 0;
      case 263 /* EnumDeclaration */:
        return isEnumMember(node) ? parent2.members : void 0;
      case 308 /* SourceFile */:
        return parent2.statements;
    }
  }
  function hasContextSensitiveParameters(node) {
    if (!node.typeParameters) {
      if (some(node.parameters, (p) => !getEffectiveTypeAnnotationNode(p))) {
        return true;
      }
      if (node.kind !== 216 /* ArrowFunction */) {
        const parameter = firstOrUndefined(node.parameters);
        if (!(parameter && parameterIsThisKeyword(parameter))) {
          return true;
        }
      }
    }
    return false;
  }
  function isInfinityOrNaNString(name) {
    return name === "Infinity" || name === "-Infinity" || name === "NaN";
  }
  function isCatchClauseVariableDeclaration(node) {
    return node.kind === 257 /* VariableDeclaration */ && node.parent.kind === 295 /* CatchClause */;
  }
  function isParameterOrCatchClauseVariable(symbol) {
    const declaration = symbol.valueDeclaration && getRootDeclaration(symbol.valueDeclaration);
    return !!declaration && (isParameter(declaration) || isCatchClauseVariableDeclaration(declaration));
  }
  function isFunctionExpressionOrArrowFunction(node) {
    return node.kind === 215 /* FunctionExpression */ || node.kind === 216 /* ArrowFunction */;
  }
  function escapeSnippetText(text) {
    return text.replace(/\$/gm, () => "\\$");
  }
  function isNumericLiteralName(name) {
    return (+name).toString() === name;
  }
  function createPropertyNameNodeForIdentifierOrLiteral(name, target, singleQuote, stringNamed) {
    return isIdentifierText(name, target) ? factory.createIdentifier(name) : !stringNamed && isNumericLiteralName(name) && +name >= 0 ? factory.createNumericLiteral(+name) : factory.createStringLiteral(name, !!singleQuote);
  }
  function isThisTypeParameter(type) {
    return !!(type.flags & 262144 /* TypeParameter */ && type.isThisType);
  }
  function getNodeModulePathParts(fullPath) {
    let topLevelNodeModulesIndex = 0;
    let topLevelPackageNameIndex = 0;
    let packageRootIndex = 0;
    let fileNameIndex = 0;
    let States;
    ((States2) => {
      States2[States2["BeforeNodeModules"] = 0] = "BeforeNodeModules";
      States2[States2["NodeModules"] = 1] = "NodeModules";
      States2[States2["Scope"] = 2] = "Scope";
      States2[States2["PackageContent"] = 3] = "PackageContent";
    })(States || (States = {}));
    let partStart = 0;
    let partEnd = 0;
    let state = 0 /* BeforeNodeModules */;
    while (partEnd >= 0) {
      partStart = partEnd;
      partEnd = fullPath.indexOf("/", partStart + 1);
      switch (state) {
        case 0 /* BeforeNodeModules */:
          if (fullPath.indexOf(nodeModulesPathPart, partStart) === partStart) {
            topLevelNodeModulesIndex = partStart;
            topLevelPackageNameIndex = partEnd;
            state = 1 /* NodeModules */;
          }
          break;
        case 1 /* NodeModules */:
        case 2 /* Scope */:
          if (state === 1 /* NodeModules */ && fullPath.charAt(partStart + 1) === "@") {
            state = 2 /* Scope */;
          } else {
            packageRootIndex = partEnd;
            state = 3 /* PackageContent */;
          }
          break;
        case 3 /* PackageContent */:
          if (fullPath.indexOf(nodeModulesPathPart, partStart) === partStart) {
            state = 1 /* NodeModules */;
          } else {
            state = 3 /* PackageContent */;
          }
          break;
      }
    }
    fileNameIndex = partStart;
    return state > 1 /* NodeModules */ ? { topLevelNodeModulesIndex, topLevelPackageNameIndex, packageRootIndex, fileNameIndex } : void 0;
  }
  function getParameterTypeNode(parameter) {
    var _a2;
    return parameter.kind === 344 /* JSDocParameterTag */ ? (_a2 = parameter.typeExpression) == null ? void 0 : _a2.type : parameter.type;
  }
  function isTypeDeclaration(node) {
    switch (node.kind) {
      case 165 /* TypeParameter */:
      case 260 /* ClassDeclaration */:
      case 261 /* InterfaceDeclaration */:
      case 262 /* TypeAliasDeclaration */:
      case 263 /* EnumDeclaration */:
      case 349 /* JSDocTypedefTag */:
      case 341 /* JSDocCallbackTag */:
      case 343 /* JSDocEnumTag */:
        return true;
      case 270 /* ImportClause */:
        return node.isTypeOnly;
      case 273 /* ImportSpecifier */:
      case 278 /* ExportSpecifier */:
        return node.parent.parent.isTypeOnly;
      default:
        return false;
    }
  }
  function canHaveExportModifier(node) {
    return isEnumDeclaration(node) || isVariableStatement(node) || isFunctionDeclaration(node) || isClassDeclaration(node) || isInterfaceDeclaration(node) || isTypeDeclaration(node) || isModuleDeclaration(node) && !isExternalModuleAugmentation(node) && !isGlobalScopeAugmentation(node);
  }
  function isOptionalJSDocPropertyLikeTag(node) {
    if (!isJSDocPropertyLikeTag(node)) {
      return false;
    }
    const { isBracketed, typeExpression } = node;
    return isBracketed || !!typeExpression && typeExpression.type.kind === 319 /* JSDocOptionalType */;
  }
  function canUsePropertyAccess(name, languageVersion) {
    if (name.length === 0) {
      return false;
    }
    const firstChar = name.charCodeAt(0);
    return firstChar === 35 /* hash */ ? name.length > 1 && isIdentifierStart(name.charCodeAt(1), languageVersion) : isIdentifierStart(firstChar, languageVersion);
  }
  function hasTabstop(node) {
    var _a2;
    return ((_a2 = getSnippetElement(node)) == null ? void 0 : _a2.kind) === 0 /* TabStop */;
  }
  function isJSDocOptionalParameter(node) {
    return isInJSFile(node) && // node.type should only be a JSDocOptionalType when node is a parameter of a JSDocFunctionType
    (node.type && node.type.kind === 319 /* JSDocOptionalType */ || getJSDocParameterTags(node).some(({ isBracketed, typeExpression }) => isBracketed || !!typeExpression && typeExpression.type.kind === 319 /* JSDocOptionalType */));
  }
  function isOptionalDeclaration(declaration) {
    switch (declaration.kind) {
      case 169 /* PropertyDeclaration */:
      case 168 /* PropertySignature */:
        return !!declaration.questionToken;
      case 166 /* Parameter */:
        return !!declaration.questionToken || isJSDocOptionalParameter(declaration);
      case 351 /* JSDocPropertyTag */:
      case 344 /* JSDocParameterTag */:
        return isOptionalJSDocPropertyLikeTag(declaration);
      default:
        return false;
    }
  }
  function isNonNullAccess(node) {
    const kind = node.kind;
    return (kind === 208 /* PropertyAccessExpression */ || kind === 209 /* ElementAccessExpression */) && isNonNullExpression(node.expression);
  }
  function isJSDocSatisfiesExpression(node) {
    return isInJSFile(node) && isParenthesizedExpression(node) && hasJSDocNodes(node) && !!getJSDocSatisfiesTag(node);
  }
  function getJSDocSatisfiesExpressionType(node) {
    return Debug.checkDefined(tryGetJSDocSatisfiesTypeNode(node));
  }
  function tryGetJSDocSatisfiesTypeNode(node) {
    const tag = getJSDocSatisfiesTag(node);
    return tag && tag.typeExpression && tag.typeExpression.type;
  }
  var resolvingEmptyArray, externalHelpersModuleNameText, defaultMaximumTruncationLength, noTruncationMaximumTruncationLength, stringWriter, GetLiteralTextFlags, fullTripleSlashReferencePathRegEx, fullTripleSlashReferenceTypeReferenceDirectiveRegEx, fullTripleSlashAMDReferencePathRegEx, defaultLibReferenceRegEx, AssignmentKind, FunctionFlags, Associativity, OperatorPrecedence, templateSubstitutionRegExp, doubleQuoteEscapedCharsRegExp, singleQuoteEscapedCharsRegExp, backtickQuoteEscapedCharsRegExp, escapedCharsMap, nonAsciiCharacters, jsxDoubleQuoteEscapedCharsRegExp, jsxSingleQuoteEscapedCharsRegExp, jsxEscapedCharsMap, indentStrings, base64Digits, carriageReturnLineFeed, lineFeed, objectAllocator, objectAllocatorPatchers, localizedDiagnosticMessages, reservedCharacterPattern, wildcardCharCodes, commonPackageFolders, implicitExcludePathRegexPattern, filesMatcher, directoriesMatcher, excludeMatcher, wildcardMatchers, supportedTSExtensions, supportedTSExtensionsFlat, supportedTSExtensionsWithJson, supportedTSExtensionsForExtractExtension, supportedJSExtensions, supportedJSExtensionsFlat, allSupportedExtensions, allSupportedExtensionsWithJson, supportedDeclarationExtensions, supportedTSImplementationExtensions, ModuleSpecifierEnding, extensionsToRemove, emptyFileSystemEntries;
  var init_utilities = __esm({
    "src/compiler/utilities.ts"() {
      "use strict";
      init_ts2();
      resolvingEmptyArray = [];
      externalHelpersModuleNameText = "tslib";
      defaultMaximumTruncationLength = 160;
      noTruncationMaximumTruncationLength = 1e6;
      stringWriter = createSingleLineStringWriter();
      GetLiteralTextFlags = /* @__PURE__ */ ((GetLiteralTextFlags2) => {
        GetLiteralTextFlags2[GetLiteralTextFlags2["None"] = 0] = "None";
        GetLiteralTextFlags2[GetLiteralTextFlags2["NeverAsciiEscape"] = 1] = "NeverAsciiEscape";
        GetLiteralTextFlags2[GetLiteralTextFlags2["JsxAttributeEscape"] = 2] = "JsxAttributeEscape";
        GetLiteralTextFlags2[GetLiteralTextFlags2["TerminateUnterminatedLiterals"] = 4] = "TerminateUnterminatedLiterals";
        GetLiteralTextFlags2[GetLiteralTextFlags2["AllowNumericSeparator"] = 8] = "AllowNumericSeparator";
        return GetLiteralTextFlags2;
      })(GetLiteralTextFlags || {});
      fullTripleSlashReferencePathRegEx = /^(\/\/\/\s*<reference\s+path\s*=\s*)(('[^']*')|("[^"]*")).*?\/>/;
      fullTripleSlashReferenceTypeReferenceDirectiveRegEx = /^(\/\/\/\s*<reference\s+types\s*=\s*)(('[^']*')|("[^"]*")).*?\/>/;
      fullTripleSlashAMDReferencePathRegEx = /^(\/\/\/\s*<amd-dependency\s+path\s*=\s*)(('[^']*')|("[^"]*")).*?\/>/;
      defaultLibReferenceRegEx = /^(\/\/\/\s*<reference\s+no-default-lib\s*=\s*)(('[^']*')|("[^"]*"))\s*\/>/;
      AssignmentKind = /* @__PURE__ */ ((AssignmentKind2) => {
        AssignmentKind2[AssignmentKind2["None"] = 0] = "None";
        AssignmentKind2[AssignmentKind2["Definite"] = 1] = "Definite";
        AssignmentKind2[AssignmentKind2["Compound"] = 2] = "Compound";
        return AssignmentKind2;
      })(AssignmentKind || {});
      FunctionFlags = /* @__PURE__ */ ((FunctionFlags2) => {
        FunctionFlags2[FunctionFlags2["Normal"] = 0] = "Normal";
        FunctionFlags2[FunctionFlags2["Generator"] = 1] = "Generator";
        FunctionFlags2[FunctionFlags2["Async"] = 2] = "Async";
        FunctionFlags2[FunctionFlags2["Invalid"] = 4] = "Invalid";
        FunctionFlags2[FunctionFlags2["AsyncGenerator"] = 3] = "AsyncGenerator";
        return FunctionFlags2;
      })(FunctionFlags || {});
      Associativity = /* @__PURE__ */ ((Associativity2) => {
        Associativity2[Associativity2["Left"] = 0] = "Left";
        Associativity2[Associativity2["Right"] = 1] = "Right";
        return Associativity2;
      })(Associativity || {});
      OperatorPrecedence = /* @__PURE__ */ ((OperatorPrecedence2) => {
        OperatorPrecedence2[OperatorPrecedence2["Comma"] = 0] = "Comma";
        OperatorPrecedence2[OperatorPrecedence2["Spread"] = 1] = "Spread";
        OperatorPrecedence2[OperatorPrecedence2["Yield"] = 2] = "Yield";
        OperatorPrecedence2[OperatorPrecedence2["Assignment"] = 3] = "Assignment";
        OperatorPrecedence2[OperatorPrecedence2["Conditional"] = 4] = "Conditional";
        OperatorPrecedence2[OperatorPrecedence2["Coalesce"] = 4 /* Conditional */] = "Coalesce";
        OperatorPrecedence2[OperatorPrecedence2["LogicalOR"] = 5] = "LogicalOR";
        OperatorPrecedence2[OperatorPrecedence2["LogicalAND"] = 6] = "LogicalAND";
        OperatorPrecedence2[OperatorPrecedence2["BitwiseOR"] = 7] = "BitwiseOR";
        OperatorPrecedence2[OperatorPrecedence2["BitwiseXOR"] = 8] = "BitwiseXOR";
        OperatorPrecedence2[OperatorPrecedence2["BitwiseAND"] = 9] = "BitwiseAND";
        OperatorPrecedence2[OperatorPrecedence2["Equality"] = 10] = "Equality";
        OperatorPrecedence2[OperatorPrecedence2["Relational"] = 11] = "Relational";
        OperatorPrecedence2[OperatorPrecedence2["Shift"] = 12] = "Shift";
        OperatorPrecedence2[OperatorPrecedence2["Additive"] = 13] = "Additive";
        OperatorPrecedence2[OperatorPrecedence2["Multiplicative"] = 14] = "Multiplicative";
        OperatorPrecedence2[OperatorPrecedence2["Exponentiation"] = 15] = "Exponentiation";
        OperatorPrecedence2[OperatorPrecedence2["Unary"] = 16] = "Unary";
        OperatorPrecedence2[OperatorPrecedence2["Update"] = 17] = "Update";
        OperatorPrecedence2[OperatorPrecedence2["LeftHandSide"] = 18] = "LeftHandSide";
        OperatorPrecedence2[OperatorPrecedence2["Member"] = 19] = "Member";
        OperatorPrecedence2[OperatorPrecedence2["Primary"] = 20] = "Primary";
        OperatorPrecedence2[OperatorPrecedence2["Highest"] = 20 /* Primary */] = "Highest";
        OperatorPrecedence2[OperatorPrecedence2["Lowest"] = 0 /* Comma */] = "Lowest";
        OperatorPrecedence2[OperatorPrecedence2["Invalid"] = -1] = "Invalid";
        return OperatorPrecedence2;
      })(OperatorPrecedence || {});
      templateSubstitutionRegExp = /\$\{/g;
      doubleQuoteEscapedCharsRegExp = /[\\\"\u0000-\u001f\t\v\f\b\r\n\u2028\u2029\u0085]/g;
      singleQuoteEscapedCharsRegExp = /[\\\'\u0000-\u001f\t\v\f\b\r\n\u2028\u2029\u0085]/g;
      backtickQuoteEscapedCharsRegExp = /\r\n|[\\\`\u0000-\u001f\t\v\f\b\r\u2028\u2029\u0085]/g;
      escapedCharsMap = new Map(Object.entries({
        "	": "\\t",
        "\v": "\\v",
        "\f": "\\f",
        "\b": "\\b",
        "\r": "\\r",
        "\n": "\\n",
        "\\": "\\\\",
        '"': '\\"',
        "'": "\\'",
        "`": "\\`",
        "\u2028": "\\u2028",
        // lineSeparator
        "\u2029": "\\u2029",
        // paragraphSeparator
        "\x85": "\\u0085",
        // nextLine
        "\r\n": "\\r\\n"
        // special case for CRLFs in backticks
      }));
      nonAsciiCharacters = /[^\u0000-\u007F]/g;
      jsxDoubleQuoteEscapedCharsRegExp = /[\"\u0000-\u001f\u2028\u2029\u0085]/g;
      jsxSingleQuoteEscapedCharsRegExp = /[\'\u0000-\u001f\u2028\u2029\u0085]/g;
      jsxEscapedCharsMap = new Map(Object.entries({
        '"': "&quot;",
        "'": "&apos;"
      }));
      indentStrings = ["", "    "];
      base64Digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      carriageReturnLineFeed = "\r\n";
      lineFeed = "\n";
      objectAllocator = {
        getNodeConstructor: () => Node4,
        getTokenConstructor: () => Token,
        getIdentifierConstructor: () => Identifier2,
        getPrivateIdentifierConstructor: () => Node4,
        getSourceFileConstructor: () => Node4,
        getSymbolConstructor: () => Symbol4,
        getTypeConstructor: () => Type3,
        getSignatureConstructor: () => Signature2,
        getSourceMapSourceConstructor: () => SourceMapSource
      };
      objectAllocatorPatchers = [];
      reservedCharacterPattern = /[^\w\s\/]/g;
      wildcardCharCodes = [42 /* asterisk */, 63 /* question */];
      commonPackageFolders = ["node_modules", "bower_components", "jspm_packages"];
      implicitExcludePathRegexPattern = `(?!(${commonPackageFolders.join("|")})(/|$))`;
      filesMatcher = {
        /**
         * Matches any single directory segment unless it is the last segment and a .min.js file
         * Breakdown:
         *  [^./]                   # matches everything up to the first . character (excluding directory separators)
         *  (\\.(?!min\\.js$))?     # matches . characters but not if they are part of the .min.js file extension
         */
        singleAsteriskRegexFragment: "([^./]|(\\.(?!min\\.js$))?)*",
        /**
         * Regex for the ** wildcard. Matches any number of subdirectories. When used for including
         * files or directories, does not match subdirectories that start with a . character
         */
        doubleAsteriskRegexFragment: `(/${implicitExcludePathRegexPattern}[^/.][^/]*)*?`,
        replaceWildcardCharacter: (match) => replaceWildcardCharacter(match, filesMatcher.singleAsteriskRegexFragment)
      };
      directoriesMatcher = {
        singleAsteriskRegexFragment: "[^/]*",
        /**
         * Regex for the ** wildcard. Matches any number of subdirectories. When used for including
         * files or directories, does not match subdirectories that start with a . character
         */
        doubleAsteriskRegexFragment: `(/${implicitExcludePathRegexPattern}[^/.][^/]*)*?`,
        replaceWildcardCharacter: (match) => replaceWildcardCharacter(match, directoriesMatcher.singleAsteriskRegexFragment)
      };
      excludeMatcher = {
        singleAsteriskRegexFragment: "[^/]*",
        doubleAsteriskRegexFragment: "(/.+?)?",
        replaceWildcardCharacter: (match) => replaceWildcardCharacter(match, excludeMatcher.singleAsteriskRegexFragment)
      };
      wildcardMatchers = {
        files: filesMatcher,
        directories: directoriesMatcher,
        exclude: excludeMatcher
      };
      supportedTSExtensions = [[".ts" /* Ts */, ".tsx" /* Tsx */, ".d.ts" /* Dts */], [".cts" /* Cts */, ".d.cts" /* Dcts */], [".mts" /* Mts */, ".d.mts" /* Dmts */]];
      supportedTSExtensionsFlat = flatten(supportedTSExtensions);
      supportedTSExtensionsWithJson = [...supportedTSExtensions, [".json" /* Json */]];
      supportedTSExtensionsForExtractExtension = [".d.ts" /* Dts */, ".d.cts" /* Dcts */, ".d.mts" /* Dmts */, ".cts" /* Cts */, ".mts" /* Mts */, ".ts" /* Ts */, ".tsx" /* Tsx */, ".cts" /* Cts */, ".mts" /* Mts */];
      supportedJSExtensions = [[".js" /* Js */, ".jsx" /* Jsx */], [".mjs" /* Mjs */], [".cjs" /* Cjs */]];
      supportedJSExtensionsFlat = flatten(supportedJSExtensions);
      allSupportedExtensions = [[".ts" /* Ts */, ".tsx" /* Tsx */, ".d.ts" /* Dts */, ".js" /* Js */, ".jsx" /* Jsx */], [".cts" /* Cts */, ".d.cts" /* Dcts */, ".cjs" /* Cjs */], [".mts" /* Mts */, ".d.mts" /* Dmts */, ".mjs" /* Mjs */]];
      allSupportedExtensionsWithJson = [...allSupportedExtensions, [".json" /* Json */]];
      supportedDeclarationExtensions = [".d.ts" /* Dts */, ".d.cts" /* Dcts */, ".d.mts" /* Dmts */];
      supportedTSImplementationExtensions = [".ts" /* Ts */, ".cts" /* Cts */, ".mts" /* Mts */, ".tsx" /* Tsx */];
      ModuleSpecifierEnding = /* @__PURE__ */ ((ModuleSpecifierEnding2) => {
        ModuleSpecifierEnding2[ModuleSpecifierEnding2["Minimal"] = 0] = "Minimal";
        ModuleSpecifierEnding2[ModuleSpecifierEnding2["Index"] = 1] = "Index";
        ModuleSpecifierEnding2[ModuleSpecifierEnding2["JsExtension"] = 2] = "JsExtension";
        ModuleSpecifierEnding2[ModuleSpecifierEnding2["TsExtension"] = 3] = "TsExtension";
        return ModuleSpecifierEnding2;
      })(ModuleSpecifierEnding || {});
      extensionsToRemove = [".d.ts" /* Dts */, ".d.mts" /* Dmts */, ".d.cts" /* Dcts */, ".mjs" /* Mjs */, ".mts" /* Mts */, ".cjs" /* Cjs */, ".cts" /* Cts */, ".ts" /* Ts */, ".js" /* Js */, ".tsx" /* Tsx */, ".jsx" /* Jsx */, ".json" /* Json */];
      emptyFileSystemEntries = {
        files: emptyArray,
        directories: emptyArray
      };
    }
  });

  // src/compiler/factory/baseNodeFactory.ts
  function createBaseNodeFactory() {
    let NodeConstructor2;
    let TokenConstructor2;
    let IdentifierConstructor2;
    let PrivateIdentifierConstructor2;
    let SourceFileConstructor2;
    return {
      createBaseSourceFileNode,
      createBaseIdentifierNode,
      createBasePrivateIdentifierNode,
      createBaseTokenNode,
      createBaseNode
    };
    function createBaseSourceFileNode(kind) {
      return new (SourceFileConstructor2 || (SourceFileConstructor2 = objectAllocator.getSourceFileConstructor()))(
        kind,
        /*pos*/
        -1,
        /*end*/
        -1
      );
    }
    function createBaseIdentifierNode(kind) {
      return new (IdentifierConstructor2 || (IdentifierConstructor2 = objectAllocator.getIdentifierConstructor()))(
        kind,
        /*pos*/
        -1,
        /*end*/
        -1
      );
    }
    function createBasePrivateIdentifierNode(kind) {
      return new (PrivateIdentifierConstructor2 || (PrivateIdentifierConstructor2 = objectAllocator.getPrivateIdentifierConstructor()))(
        kind,
        /*pos*/
        -1,
        /*end*/
        -1
      );
    }
    function createBaseTokenNode(kind) {
      return new (TokenConstructor2 || (TokenConstructor2 = objectAllocator.getTokenConstructor()))(
        kind,
        /*pos*/
        -1,
        /*end*/
        -1
      );
    }
    function createBaseNode(kind) {
      return new (NodeConstructor2 || (NodeConstructor2 = objectAllocator.getNodeConstructor()))(
        kind,
        /*pos*/
        -1,
        /*end*/
        -1
      );
    }
  }
  var init_baseNodeFactory = __esm({
    "src/compiler/factory/baseNodeFactory.ts"() {
      "use strict";
      init_ts2();
    }
  });

  // src/compiler/factory/parenthesizerRules.ts
  function createParenthesizerRules(factory2) {
    let binaryLeftOperandParenthesizerCache;
    let binaryRightOperandParenthesizerCache;
    return {
      getParenthesizeLeftSideOfBinaryForOperator,
      getParenthesizeRightSideOfBinaryForOperator,
      parenthesizeLeftSideOfBinary,
      parenthesizeRightSideOfBinary,
      parenthesizeExpressionOfComputedPropertyName,
      parenthesizeConditionOfConditionalExpression,
      parenthesizeBranchOfConditionalExpression,
      parenthesizeExpressionOfExportDefault,
      parenthesizeExpressionOfNew,
      parenthesizeLeftSideOfAccess,
      parenthesizeOperandOfPostfixUnary,
      parenthesizeOperandOfPrefixUnary,
      parenthesizeExpressionsOfCommaDelimitedList,
      parenthesizeExpressionForDisallowedComma,
      parenthesizeExpressionOfExpressionStatement,
      parenthesizeConciseBodyOfArrowFunction,
      parenthesizeCheckTypeOfConditionalType,
      parenthesizeExtendsTypeOfConditionalType,
      parenthesizeConstituentTypesOfUnionType,
      parenthesizeConstituentTypeOfUnionType,
      parenthesizeConstituentTypesOfIntersectionType,
      parenthesizeConstituentTypeOfIntersectionType,
      parenthesizeOperandOfTypeOperator,
      parenthesizeOperandOfReadonlyTypeOperator,
      parenthesizeNonArrayTypeOfPostfixType,
      parenthesizeElementTypesOfTupleType,
      parenthesizeElementTypeOfTupleType,
      parenthesizeTypeOfOptionalType,
      parenthesizeTypeArguments,
      parenthesizeLeadingTypeArgument
    };
    function getParenthesizeLeftSideOfBinaryForOperator(operatorKind) {
      binaryLeftOperandParenthesizerCache || (binaryLeftOperandParenthesizerCache = /* @__PURE__ */ new Map());
      let parenthesizerRule = binaryLeftOperandParenthesizerCache.get(operatorKind);
      if (!parenthesizerRule) {
        parenthesizerRule = (node) => parenthesizeLeftSideOfBinary(operatorKind, node);
        binaryLeftOperandParenthesizerCache.set(operatorKind, parenthesizerRule);
      }
      return parenthesizerRule;
    }
    function getParenthesizeRightSideOfBinaryForOperator(operatorKind) {
      binaryRightOperandParenthesizerCache || (binaryRightOperandParenthesizerCache = /* @__PURE__ */ new Map());
      let parenthesizerRule = binaryRightOperandParenthesizerCache.get(operatorKind);
      if (!parenthesizerRule) {
        parenthesizerRule = (node) => parenthesizeRightSideOfBinary(
          operatorKind,
          /*leftSide*/
          void 0,
          node
        );
        binaryRightOperandParenthesizerCache.set(operatorKind, parenthesizerRule);
      }
      return parenthesizerRule;
    }
    function binaryOperandNeedsParentheses(binaryOperator, operand, isLeftSideOfBinary, leftOperand) {
      const binaryOperatorPrecedence = getOperatorPrecedence(223 /* BinaryExpression */, binaryOperator);
      const binaryOperatorAssociativity = getOperatorAssociativity(223 /* BinaryExpression */, binaryOperator);
      const emittedOperand = skipPartiallyEmittedExpressions(operand);
      if (!isLeftSideOfBinary && operand.kind === 216 /* ArrowFunction */ && binaryOperatorPrecedence > 3 /* Assignment */) {
        return true;
      }
      const operandPrecedence = getExpressionPrecedence(emittedOperand);
      switch (compareValues(operandPrecedence, binaryOperatorPrecedence)) {
        case -1 /* LessThan */:
          if (!isLeftSideOfBinary && binaryOperatorAssociativity === 1 /* Right */ && operand.kind === 226 /* YieldExpression */) {
            return false;
          }
          return true;
        case 1 /* GreaterThan */:
          return false;
        case 0 /* EqualTo */:
          if (isLeftSideOfBinary) {
            return binaryOperatorAssociativity === 1 /* Right */;
          } else {
            if (isBinaryExpression(emittedOperand) && emittedOperand.operatorToken.kind === binaryOperator) {
              if (operatorHasAssociativeProperty(binaryOperator)) {
                return false;
              }
              if (binaryOperator === 39 /* PlusToken */) {
                const leftKind = leftOperand ? getLiteralKindOfBinaryPlusOperand(leftOperand) : 0 /* Unknown */;
                if (isLiteralKind(leftKind) && leftKind === getLiteralKindOfBinaryPlusOperand(emittedOperand)) {
                  return false;
                }
              }
            }
            const operandAssociativity = getExpressionAssociativity(emittedOperand);
            return operandAssociativity === 0 /* Left */;
          }
      }
    }
    function operatorHasAssociativeProperty(binaryOperator) {
      return binaryOperator === 41 /* AsteriskToken */ || binaryOperator === 51 /* BarToken */ || binaryOperator === 50 /* AmpersandToken */ || binaryOperator === 52 /* CaretToken */ || binaryOperator === 27 /* CommaToken */;
    }
    function getLiteralKindOfBinaryPlusOperand(node) {
      node = skipPartiallyEmittedExpressions(node);
      if (isLiteralKind(node.kind)) {
        return node.kind;
      }
      if (node.kind === 223 /* BinaryExpression */ && node.operatorToken.kind === 39 /* PlusToken */) {
        if (node.cachedLiteralKind !== void 0) {
          return node.cachedLiteralKind;
        }
        const leftKind = getLiteralKindOfBinaryPlusOperand(node.left);
        const literalKind = isLiteralKind(leftKind) && leftKind === getLiteralKindOfBinaryPlusOperand(node.right) ? leftKind : 0 /* Unknown */;
        node.cachedLiteralKind = literalKind;
        return literalKind;
      }
      return 0 /* Unknown */;
    }
    function parenthesizeBinaryOperand(binaryOperator, operand, isLeftSideOfBinary, leftOperand) {
      const skipped = skipPartiallyEmittedExpressions(operand);
      if (skipped.kind === 214 /* ParenthesizedExpression */) {
        return operand;
      }
      return binaryOperandNeedsParentheses(binaryOperator, operand, isLeftSideOfBinary, leftOperand) ? factory2.createParenthesizedExpression(operand) : operand;
    }
    function parenthesizeLeftSideOfBinary(binaryOperator, leftSide) {
      return parenthesizeBinaryOperand(
        binaryOperator,
        leftSide,
        /*isLeftSideOfBinary*/
        true
      );
    }
    function parenthesizeRightSideOfBinary(binaryOperator, leftSide, rightSide) {
      return parenthesizeBinaryOperand(
        binaryOperator,
        rightSide,
        /*isLeftSideOfBinary*/
        false,
        leftSide
      );
    }
    function parenthesizeExpressionOfComputedPropertyName(expression) {
      return isCommaSequence(expression) ? factory2.createParenthesizedExpression(expression) : expression;
    }
    function parenthesizeConditionOfConditionalExpression(condition) {
      const conditionalPrecedence = getOperatorPrecedence(224 /* ConditionalExpression */, 57 /* QuestionToken */);
      const emittedCondition = skipPartiallyEmittedExpressions(condition);
      const conditionPrecedence = getExpressionPrecedence(emittedCondition);
      if (compareValues(conditionPrecedence, conditionalPrecedence) !== 1 /* GreaterThan */) {
        return factory2.createParenthesizedExpression(condition);
      }
      return condition;
    }
    function parenthesizeBranchOfConditionalExpression(branch) {
      const emittedExpression = skipPartiallyEmittedExpressions(branch);
      return isCommaSequence(emittedExpression) ? factory2.createParenthesizedExpression(branch) : branch;
    }
    function parenthesizeExpressionOfExportDefault(expression) {
      const check = skipPartiallyEmittedExpressions(expression);
      let needsParens = isCommaSequence(check);
      if (!needsParens) {
        switch (getLeftmostExpression(
          check,
          /*stopAtCallExpression*/
          false
        ).kind) {
          case 228 /* ClassExpression */:
          case 215 /* FunctionExpression */:
            needsParens = true;
        }
      }
      return needsParens ? factory2.createParenthesizedExpression(expression) : expression;
    }
    function parenthesizeExpressionOfNew(expression) {
      const leftmostExpr = getLeftmostExpression(
        expression,
        /*stopAtCallExpressions*/
        true
      );
      switch (leftmostExpr.kind) {
        case 210 /* CallExpression */:
          return factory2.createParenthesizedExpression(expression);
        case 211 /* NewExpression */:
          return !leftmostExpr.arguments ? factory2.createParenthesizedExpression(expression) : expression;
      }
      return parenthesizeLeftSideOfAccess(expression);
    }
    function parenthesizeLeftSideOfAccess(expression, optionalChain) {
      const emittedExpression = skipPartiallyEmittedExpressions(expression);
      if (isLeftHandSideExpression(emittedExpression) && (emittedExpression.kind !== 211 /* NewExpression */ || emittedExpression.arguments) && (optionalChain || !isOptionalChain(emittedExpression))) {
        return expression;
      }
      return setTextRange(factory2.createParenthesizedExpression(expression), expression);
    }
    function parenthesizeOperandOfPostfixUnary(operand) {
      return isLeftHandSideExpression(operand) ? operand : setTextRange(factory2.createParenthesizedExpression(operand), operand);
    }
    function parenthesizeOperandOfPrefixUnary(operand) {
      return isUnaryExpression(operand) ? operand : setTextRange(factory2.createParenthesizedExpression(operand), operand);
    }
    function parenthesizeExpressionsOfCommaDelimitedList(elements) {
      const result = sameMap(elements, parenthesizeExpressionForDisallowedComma);
      return setTextRange(factory2.createNodeArray(result, elements.hasTrailingComma), elements);
    }
    function parenthesizeExpressionForDisallowedComma(expression) {
      const emittedExpression = skipPartiallyEmittedExpressions(expression);
      const expressionPrecedence = getExpressionPrecedence(emittedExpression);
      const commaPrecedence = getOperatorPrecedence(223 /* BinaryExpression */, 27 /* CommaToken */);
      return expressionPrecedence > commaPrecedence ? expression : setTextRange(factory2.createParenthesizedExpression(expression), expression);
    }
    function parenthesizeExpressionOfExpressionStatement(expression) {
      const emittedExpression = skipPartiallyEmittedExpressions(expression);
      if (isCallExpression(emittedExpression)) {
        const callee = emittedExpression.expression;
        const kind = skipPartiallyEmittedExpressions(callee).kind;
        if (kind === 215 /* FunctionExpression */ || kind === 216 /* ArrowFunction */) {
          const updated = factory2.updateCallExpression(
            emittedExpression,
            setTextRange(factory2.createParenthesizedExpression(callee), callee),
            emittedExpression.typeArguments,
            emittedExpression.arguments
          );
          return factory2.restoreOuterExpressions(expression, updated, 8 /* PartiallyEmittedExpressions */);
        }
      }
      const leftmostExpressionKind = getLeftmostExpression(
        emittedExpression,
        /*stopAtCallExpressions*/
        false
      ).kind;
      if (leftmostExpressionKind === 207 /* ObjectLiteralExpression */ || leftmostExpressionKind === 215 /* FunctionExpression */) {
        return setTextRange(factory2.createParenthesizedExpression(expression), expression);
      }
      return expression;
    }
    function parenthesizeConciseBodyOfArrowFunction(body) {
      if (!isBlock(body) && (isCommaSequence(body) || getLeftmostExpression(
        body,
        /*stopAtCallExpressions*/
        false
      ).kind === 207 /* ObjectLiteralExpression */)) {
        return setTextRange(factory2.createParenthesizedExpression(body), body);
      }
      return body;
    }
    function parenthesizeCheckTypeOfConditionalType(checkType) {
      switch (checkType.kind) {
        case 181 /* FunctionType */:
        case 182 /* ConstructorType */:
        case 191 /* ConditionalType */:
          return factory2.createParenthesizedType(checkType);
      }
      return checkType;
    }
    function parenthesizeExtendsTypeOfConditionalType(extendsType) {
      switch (extendsType.kind) {
        case 191 /* ConditionalType */:
          return factory2.createParenthesizedType(extendsType);
      }
      return extendsType;
    }
    function parenthesizeConstituentTypeOfUnionType(type) {
      switch (type.kind) {
        case 189 /* UnionType */:
        case 190 /* IntersectionType */:
          return factory2.createParenthesizedType(type);
      }
      return parenthesizeCheckTypeOfConditionalType(type);
    }
    function parenthesizeConstituentTypesOfUnionType(members) {
      return factory2.createNodeArray(sameMap(members, parenthesizeConstituentTypeOfUnionType));
    }
    function parenthesizeConstituentTypeOfIntersectionType(type) {
      switch (type.kind) {
        case 189 /* UnionType */:
        case 190 /* IntersectionType */:
          return factory2.createParenthesizedType(type);
      }
      return parenthesizeConstituentTypeOfUnionType(type);
    }
    function parenthesizeConstituentTypesOfIntersectionType(members) {
      return factory2.createNodeArray(sameMap(members, parenthesizeConstituentTypeOfIntersectionType));
    }
    function parenthesizeOperandOfTypeOperator(type) {
      switch (type.kind) {
        case 190 /* IntersectionType */:
          return factory2.createParenthesizedType(type);
      }
      return parenthesizeConstituentTypeOfIntersectionType(type);
    }
    function parenthesizeOperandOfReadonlyTypeOperator(type) {
      switch (type.kind) {
        case 195 /* TypeOperator */:
          return factory2.createParenthesizedType(type);
      }
      return parenthesizeOperandOfTypeOperator(type);
    }
    function parenthesizeNonArrayTypeOfPostfixType(type) {
      switch (type.kind) {
        case 192 /* InferType */:
        case 195 /* TypeOperator */:
        case 183 /* TypeQuery */:
          return factory2.createParenthesizedType(type);
      }
      return parenthesizeOperandOfTypeOperator(type);
    }
    function parenthesizeElementTypesOfTupleType(types) {
      return factory2.createNodeArray(sameMap(types, parenthesizeElementTypeOfTupleType));
    }
    function parenthesizeElementTypeOfTupleType(type) {
      if (hasJSDocPostfixQuestion(type))
        return factory2.createParenthesizedType(type);
      return type;
    }
    function hasJSDocPostfixQuestion(type) {
      if (isJSDocNullableType(type))
        return type.postfix;
      if (isNamedTupleMember(type))
        return hasJSDocPostfixQuestion(type.type);
      if (isFunctionTypeNode(type) || isConstructorTypeNode(type) || isTypeOperatorNode(type))
        return hasJSDocPostfixQuestion(type.type);
      if (isConditionalTypeNode(type))
        return hasJSDocPostfixQuestion(type.falseType);
      if (isUnionTypeNode(type))
        return hasJSDocPostfixQuestion(last(type.types));
      if (isIntersectionTypeNode(type))
        return hasJSDocPostfixQuestion(last(type.types));
      if (isInferTypeNode(type))
        return !!type.typeParameter.constraint && hasJSDocPostfixQuestion(type.typeParameter.constraint);
      return false;
    }
    function parenthesizeTypeOfOptionalType(type) {
      if (hasJSDocPostfixQuestion(type))
        return factory2.createParenthesizedType(type);
      return parenthesizeNonArrayTypeOfPostfixType(type);
    }
    function parenthesizeLeadingTypeArgument(node) {
      return isFunctionOrConstructorTypeNode(node) && node.typeParameters ? factory2.createParenthesizedType(node) : node;
    }
    function parenthesizeOrdinalTypeArgument(node, i) {
      return i === 0 ? parenthesizeLeadingTypeArgument(node) : node;
    }
    function parenthesizeTypeArguments(typeArguments) {
      if (some(typeArguments)) {
        return factory2.createNodeArray(sameMap(typeArguments, parenthesizeOrdinalTypeArgument));
      }
    }
  }
  var nullParenthesizerRules;
  var init_parenthesizerRules = __esm({
    "src/compiler/factory/parenthesizerRules.ts"() {
      "use strict";
      init_ts2();
      nullParenthesizerRules = {
        getParenthesizeLeftSideOfBinaryForOperator: (_) => identity,
        getParenthesizeRightSideOfBinaryForOperator: (_) => identity,
        parenthesizeLeftSideOfBinary: (_binaryOperator, leftSide) => leftSide,
        parenthesizeRightSideOfBinary: (_binaryOperator, _leftSide, rightSide) => rightSide,
        parenthesizeExpressionOfComputedPropertyName: identity,
        parenthesizeConditionOfConditionalExpression: identity,
        parenthesizeBranchOfConditionalExpression: identity,
        parenthesizeExpressionOfExportDefault: identity,
        parenthesizeExpressionOfNew: (expression) => cast(expression, isLeftHandSideExpression),
        parenthesizeLeftSideOfAccess: (expression) => cast(expression, isLeftHandSideExpression),
        parenthesizeOperandOfPostfixUnary: (operand) => cast(operand, isLeftHandSideExpression),
        parenthesizeOperandOfPrefixUnary: (operand) => cast(operand, isUnaryExpression),
        parenthesizeExpressionsOfCommaDelimitedList: (nodes) => cast(nodes, isNodeArray),
        parenthesizeExpressionForDisallowedComma: identity,
        parenthesizeExpressionOfExpressionStatement: identity,
        parenthesizeConciseBodyOfArrowFunction: identity,
        parenthesizeCheckTypeOfConditionalType: identity,
        parenthesizeExtendsTypeOfConditionalType: identity,
        parenthesizeConstituentTypesOfUnionType: (nodes) => cast(nodes, isNodeArray),
        parenthesizeConstituentTypeOfUnionType: identity,
        parenthesizeConstituentTypesOfIntersectionType: (nodes) => cast(nodes, isNodeArray),
        parenthesizeConstituentTypeOfIntersectionType: identity,
        parenthesizeOperandOfTypeOperator: identity,
        parenthesizeOperandOfReadonlyTypeOperator: identity,
        parenthesizeNonArrayTypeOfPostfixType: identity,
        parenthesizeElementTypesOfTupleType: (nodes) => cast(nodes, isNodeArray),
        parenthesizeElementTypeOfTupleType: identity,
        parenthesizeTypeOfOptionalType: identity,
        parenthesizeTypeArguments: (nodes) => nodes && cast(nodes, isNodeArray),
        parenthesizeLeadingTypeArgument: identity
      };
    }
  });

  // src/compiler/factory/nodeConverters.ts
  function createNodeConverters(factory2) {
    return {
      convertToFunctionBlock,
      convertToFunctionExpression,
      convertToArrayAssignmentElement,
      convertToObjectAssignmentElement,
      convertToAssignmentPattern,
      convertToObjectAssignmentPattern,
      convertToArrayAssignmentPattern,
      convertToAssignmentElementTarget
    };
    function convertToFunctionBlock(node, multiLine) {
      if (isBlock(node))
        return node;
      const returnStatement = factory2.createReturnStatement(node);
      setTextRange(returnStatement, node);
      const body = factory2.createBlock([returnStatement], multiLine);
      setTextRange(body, node);
      return body;
    }
    function convertToFunctionExpression(node) {
      if (!node.body)
        return Debug.fail(`Cannot convert a FunctionDeclaration without a body`);
      const updated = factory2.createFunctionExpression(
        getModifiers(node),
        node.asteriskToken,
        node.name,
        node.typeParameters,
        node.parameters,
        node.type,
        node.body
      );
      setOriginalNode(updated, node);
      setTextRange(updated, node);
      if (getStartsOnNewLine(node)) {
        setStartsOnNewLine(
          updated,
          /*newLine*/
          true
        );
      }
      return updated;
    }
    function convertToArrayAssignmentElement(element) {
      if (isBindingElement(element)) {
        if (element.dotDotDotToken) {
          Debug.assertNode(element.name, isIdentifier);
          return setOriginalNode(setTextRange(factory2.createSpreadElement(element.name), element), element);
        }
        const expression = convertToAssignmentElementTarget(element.name);
        return element.initializer ? setOriginalNode(
          setTextRange(
            factory2.createAssignment(expression, element.initializer),
            element
          ),
          element
        ) : expression;
      }
      return cast(element, isExpression);
    }
    function convertToObjectAssignmentElement(element) {
      if (isBindingElement(element)) {
        if (element.dotDotDotToken) {
          Debug.assertNode(element.name, isIdentifier);
          return setOriginalNode(setTextRange(factory2.createSpreadAssignment(element.name), element), element);
        }
        if (element.propertyName) {
          const expression = convertToAssignmentElementTarget(element.name);
          return setOriginalNode(setTextRange(factory2.createPropertyAssignment(element.propertyName, element.initializer ? factory2.createAssignment(expression, element.initializer) : expression), element), element);
        }
        Debug.assertNode(element.name, isIdentifier);
        return setOriginalNode(setTextRange(factory2.createShorthandPropertyAssignment(element.name, element.initializer), element), element);
      }
      return cast(element, isObjectLiteralElementLike);
    }
    function convertToAssignmentPattern(node) {
      switch (node.kind) {
        case 204 /* ArrayBindingPattern */:
        case 206 /* ArrayLiteralExpression */:
          return convertToArrayAssignmentPattern(node);
        case 203 /* ObjectBindingPattern */:
        case 207 /* ObjectLiteralExpression */:
          return convertToObjectAssignmentPattern(node);
      }
    }
    function convertToObjectAssignmentPattern(node) {
      if (isObjectBindingPattern(node)) {
        return setOriginalNode(
          setTextRange(
            factory2.createObjectLiteralExpression(map(node.elements, convertToObjectAssignmentElement)),
            node
          ),
          node
        );
      }
      return cast(node, isObjectLiteralExpression);
    }
    function convertToArrayAssignmentPattern(node) {
      if (isArrayBindingPattern(node)) {
        return setOriginalNode(
          setTextRange(
            factory2.createArrayLiteralExpression(map(node.elements, convertToArrayAssignmentElement)),
            node
          ),
          node
        );
      }
      return cast(node, isArrayLiteralExpression);
    }
    function convertToAssignmentElementTarget(node) {
      if (isBindingPattern(node)) {
        return convertToAssignmentPattern(node);
      }
      return cast(node, isExpression);
    }
  }
  var nullNodeConverters;
  var init_nodeConverters = __esm({
    "src/compiler/factory/nodeConverters.ts"() {
      "use strict";
      init_ts2();
      nullNodeConverters = {
        convertToFunctionBlock: notImplemented,
        convertToFunctionExpression: notImplemented,
        convertToArrayAssignmentElement: notImplemented,
        convertToObjectAssignmentElement: notImplemented,
        convertToAssignmentPattern: notImplemented,
        convertToObjectAssignmentPattern: notImplemented,
        convertToArrayAssignmentPattern: notImplemented,
        convertToAssignmentElementTarget: notImplemented
      };
    }
  });

  // src/compiler/factory/nodeFactory.ts
  function addNodeFactoryPatcher(fn) {
    nodeFactoryPatchers.push(fn);
  }
  function createNodeFactory(flags, baseFactory2) {
    const update = flags & 8 /* NoOriginalNode */ ? updateWithoutOriginal : updateWithOriginal;
    const parenthesizerRules = memoize(() => flags & 1 /* NoParenthesizerRules */ ? nullParenthesizerRules : createParenthesizerRules(factory2));
    const converters = memoize(() => flags & 2 /* NoNodeConverters */ ? nullNodeConverters : createNodeConverters(factory2));
    const getBinaryCreateFunction = memoizeOne((operator) => (left, right) => createBinaryExpression(left, operator, right));
    const getPrefixUnaryCreateFunction = memoizeOne((operator) => (operand) => createPrefixUnaryExpression(operator, operand));
    const getPostfixUnaryCreateFunction = memoizeOne((operator) => (operand) => createPostfixUnaryExpression(operand, operator));
    const getJSDocPrimaryTypeCreateFunction = memoizeOne((kind) => () => createJSDocPrimaryTypeWorker(kind));
    const getJSDocUnaryTypeCreateFunction = memoizeOne((kind) => (type) => createJSDocUnaryTypeWorker(kind, type));
    const getJSDocUnaryTypeUpdateFunction = memoizeOne((kind) => (node, type) => updateJSDocUnaryTypeWorker(kind, node, type));
    const getJSDocPrePostfixUnaryTypeCreateFunction = memoizeOne((kind) => (type, postfix) => createJSDocPrePostfixUnaryTypeWorker(kind, type, postfix));
    const getJSDocPrePostfixUnaryTypeUpdateFunction = memoizeOne((kind) => (node, type) => updateJSDocPrePostfixUnaryTypeWorker(kind, node, type));
    const getJSDocSimpleTagCreateFunction = memoizeOne((kind) => (tagName, comment) => createJSDocSimpleTagWorker(kind, tagName, comment));
    const getJSDocSimpleTagUpdateFunction = memoizeOne((kind) => (node, tagName, comment) => updateJSDocSimpleTagWorker(kind, node, tagName, comment));
    const getJSDocTypeLikeTagCreateFunction = memoizeOne((kind) => (tagName, typeExpression, comment) => createJSDocTypeLikeTagWorker(kind, tagName, typeExpression, comment));
    const getJSDocTypeLikeTagUpdateFunction = memoizeOne((kind) => (node, tagName, typeExpression, comment) => updateJSDocTypeLikeTagWorker(kind, node, tagName, typeExpression, comment));
    const factory2 = {
      get parenthesizer() {
        return parenthesizerRules();
      },
      get converters() {
        return converters();
      },
      baseFactory: baseFactory2,
      flags,
      createNodeArray,
      createNumericLiteral,
      createBigIntLiteral,
      createStringLiteral,
      createStringLiteralFromNode,
      createRegularExpressionLiteral,
      createLiteralLikeNode,
      createIdentifier,
      createTempVariable,
      createLoopVariable,
      createUniqueName,
      getGeneratedNameForNode,
      createPrivateIdentifier,
      createUniquePrivateName,
      getGeneratedPrivateNameForNode,
      createToken,
      createSuper,
      createThis,
      createNull,
      createTrue,
      createFalse,
      createModifier,
      createModifiersFromModifierFlags,
      createQualifiedName,
      updateQualifiedName,
      createComputedPropertyName,
      updateComputedPropertyName,
      createTypeParameterDeclaration,
      updateTypeParameterDeclaration,
      createParameterDeclaration,
      updateParameterDeclaration,
      createDecorator,
      updateDecorator,
      createPropertySignature,
      updatePropertySignature,
      createPropertyDeclaration,
      updatePropertyDeclaration: updatePropertyDeclaration2,
      createMethodSignature,
      updateMethodSignature,
      createMethodDeclaration,
      updateMethodDeclaration,
      createConstructorDeclaration,
      updateConstructorDeclaration,
      createGetAccessorDeclaration,
      updateGetAccessorDeclaration,
      createSetAccessorDeclaration,
      updateSetAccessorDeclaration,
      createCallSignature,
      updateCallSignature,
      createConstructSignature,
      updateConstructSignature,
      createIndexSignature,
      updateIndexSignature,
      createClassStaticBlockDeclaration,
      updateClassStaticBlockDeclaration,
      createTemplateLiteralTypeSpan,
      updateTemplateLiteralTypeSpan,
      createKeywordTypeNode,
      createTypePredicateNode,
      updateTypePredicateNode,
      createTypeReferenceNode,
      updateTypeReferenceNode,
      createFunctionTypeNode,
      updateFunctionTypeNode,
      createConstructorTypeNode,
      updateConstructorTypeNode,
      createTypeQueryNode,
      updateTypeQueryNode,
      createTypeLiteralNode,
      updateTypeLiteralNode,
      createArrayTypeNode,
      updateArrayTypeNode,
      createTupleTypeNode,
      updateTupleTypeNode,
      createNamedTupleMember,
      updateNamedTupleMember,
      createOptionalTypeNode,
      updateOptionalTypeNode,
      createRestTypeNode,
      updateRestTypeNode,
      createUnionTypeNode,
      updateUnionTypeNode,
      createIntersectionTypeNode,
      updateIntersectionTypeNode,
      createConditionalTypeNode,
      updateConditionalTypeNode,
      createInferTypeNode,
      updateInferTypeNode,
      createImportTypeNode,
      updateImportTypeNode,
      createParenthesizedType,
      updateParenthesizedType,
      createThisTypeNode,
      createTypeOperatorNode,
      updateTypeOperatorNode,
      createIndexedAccessTypeNode,
      updateIndexedAccessTypeNode,
      createMappedTypeNode,
      updateMappedTypeNode,
      createLiteralTypeNode,
      updateLiteralTypeNode,
      createTemplateLiteralType,
      updateTemplateLiteralType,
      createObjectBindingPattern,
      updateObjectBindingPattern,
      createArrayBindingPattern,
      updateArrayBindingPattern,
      createBindingElement,
      updateBindingElement,
      createArrayLiteralExpression,
      updateArrayLiteralExpression,
      createObjectLiteralExpression,
      updateObjectLiteralExpression,
      createPropertyAccessExpression: flags & 4 /* NoIndentationOnFreshPropertyAccess */ ? (expression, name) => setEmitFlags(createPropertyAccessExpression(expression, name), 262144 /* NoIndentation */) : createPropertyAccessExpression,
      updatePropertyAccessExpression,
      createPropertyAccessChain: flags & 4 /* NoIndentationOnFreshPropertyAccess */ ? (expression, questionDotToken, name) => setEmitFlags(createPropertyAccessChain(expression, questionDotToken, name), 262144 /* NoIndentation */) : createPropertyAccessChain,
      updatePropertyAccessChain,
      createElementAccessExpression,
      updateElementAccessExpression,
      createElementAccessChain,
      updateElementAccessChain,
      createCallExpression,
      updateCallExpression,
      createCallChain,
      updateCallChain,
      createNewExpression,
      updateNewExpression,
      createTaggedTemplateExpression,
      updateTaggedTemplateExpression,
      createTypeAssertion,
      updateTypeAssertion,
      createParenthesizedExpression,
      updateParenthesizedExpression,
      createFunctionExpression,
      updateFunctionExpression,
      createArrowFunction,
      updateArrowFunction,
      createDeleteExpression,
      updateDeleteExpression,
      createTypeOfExpression,
      updateTypeOfExpression,
      createVoidExpression,
      updateVoidExpression,
      createAwaitExpression,
      updateAwaitExpression,
      createPrefixUnaryExpression,
      updatePrefixUnaryExpression,
      createPostfixUnaryExpression,
      updatePostfixUnaryExpression,
      createBinaryExpression,
      updateBinaryExpression,
      createConditionalExpression,
      updateConditionalExpression,
      createTemplateExpression,
      updateTemplateExpression,
      createTemplateHead,
      createTemplateMiddle,
      createTemplateTail,
      createNoSubstitutionTemplateLiteral,
      createTemplateLiteralLikeNode,
      createYieldExpression,
      updateYieldExpression,
      createSpreadElement,
      updateSpreadElement,
      createClassExpression,
      updateClassExpression,
      createOmittedExpression,
      createExpressionWithTypeArguments,
      updateExpressionWithTypeArguments,
      createAsExpression,
      updateAsExpression,
      createNonNullExpression,
      updateNonNullExpression,
      createSatisfiesExpression,
      updateSatisfiesExpression,
      createNonNullChain,
      updateNonNullChain,
      createMetaProperty,
      updateMetaProperty,
      createTemplateSpan,
      updateTemplateSpan,
      createSemicolonClassElement,
      createBlock,
      updateBlock,
      createVariableStatement,
      updateVariableStatement,
      createEmptyStatement,
      createExpressionStatement,
      updateExpressionStatement,
      createIfStatement,
      updateIfStatement,
      createDoStatement,
      updateDoStatement,
      createWhileStatement,
      updateWhileStatement,
      createForStatement,
      updateForStatement,
      createForInStatement,
      updateForInStatement,
      createForOfStatement,
      updateForOfStatement,
      createContinueStatement,
      updateContinueStatement,
      createBreakStatement,
      updateBreakStatement,
      createReturnStatement,
      updateReturnStatement,
      createWithStatement,
      updateWithStatement,
      createSwitchStatement,
      updateSwitchStatement,
      createLabeledStatement,
      updateLabeledStatement,
      createThrowStatement,
      updateThrowStatement,
      createTryStatement,
      updateTryStatement,
      createDebuggerStatement,
      createVariableDeclaration,
      updateVariableDeclaration,
      createVariableDeclarationList,
      updateVariableDeclarationList,
      createFunctionDeclaration,
      updateFunctionDeclaration,
      createClassDeclaration,
      updateClassDeclaration,
      createInterfaceDeclaration,
      updateInterfaceDeclaration,
      createTypeAliasDeclaration,
      updateTypeAliasDeclaration,
      createEnumDeclaration,
      updateEnumDeclaration,
      createModuleDeclaration,
      updateModuleDeclaration,
      createModuleBlock,
      updateModuleBlock,
      createCaseBlock,
      updateCaseBlock,
      createNamespaceExportDeclaration,
      updateNamespaceExportDeclaration,
      createImportEqualsDeclaration,
      updateImportEqualsDeclaration,
      createImportDeclaration,
      updateImportDeclaration,
      createImportClause,
      updateImportClause,
      createAssertClause,
      updateAssertClause,
      createAssertEntry,
      updateAssertEntry,
      createImportTypeAssertionContainer,
      updateImportTypeAssertionContainer,
      createNamespaceImport,
      updateNamespaceImport,
      createNamespaceExport,
      updateNamespaceExport,
      createNamedImports,
      updateNamedImports,
      createImportSpecifier,
      updateImportSpecifier,
      createExportAssignment: createExportAssignment2,
      updateExportAssignment,
      createExportDeclaration,
      updateExportDeclaration,
      createNamedExports,
      updateNamedExports,
      createExportSpecifier,
      updateExportSpecifier,
      createMissingDeclaration,
      createExternalModuleReference,
      updateExternalModuleReference,
      // lazily load factory members for JSDoc types with similar structure
      get createJSDocAllType() {
        return getJSDocPrimaryTypeCreateFunction(315 /* JSDocAllType */);
      },
      get createJSDocUnknownType() {
        return getJSDocPrimaryTypeCreateFunction(316 /* JSDocUnknownType */);
      },
      get createJSDocNonNullableType() {
        return getJSDocPrePostfixUnaryTypeCreateFunction(318 /* JSDocNonNullableType */);
      },
      get updateJSDocNonNullableType() {
        return getJSDocPrePostfixUnaryTypeUpdateFunction(318 /* JSDocNonNullableType */);
      },
      get createJSDocNullableType() {
        return getJSDocPrePostfixUnaryTypeCreateFunction(317 /* JSDocNullableType */);
      },
      get updateJSDocNullableType() {
        return getJSDocPrePostfixUnaryTypeUpdateFunction(317 /* JSDocNullableType */);
      },
      get createJSDocOptionalType() {
        return getJSDocUnaryTypeCreateFunction(319 /* JSDocOptionalType */);
      },
      get updateJSDocOptionalType() {
        return getJSDocUnaryTypeUpdateFunction(319 /* JSDocOptionalType */);
      },
      get createJSDocVariadicType() {
        return getJSDocUnaryTypeCreateFunction(321 /* JSDocVariadicType */);
      },
      get updateJSDocVariadicType() {
        return getJSDocUnaryTypeUpdateFunction(321 /* JSDocVariadicType */);
      },
      get createJSDocNamepathType() {
        return getJSDocUnaryTypeCreateFunction(322 /* JSDocNamepathType */);
      },
      get updateJSDocNamepathType() {
        return getJSDocUnaryTypeUpdateFunction(322 /* JSDocNamepathType */);
      },
      createJSDocFunctionType,
      updateJSDocFunctionType,
      createJSDocTypeLiteral,
      updateJSDocTypeLiteral,
      createJSDocTypeExpression,
      updateJSDocTypeExpression,
      createJSDocSignature,
      updateJSDocSignature,
      createJSDocTemplateTag,
      updateJSDocTemplateTag,
      createJSDocTypedefTag,
      updateJSDocTypedefTag,
      createJSDocParameterTag,
      updateJSDocParameterTag,
      createJSDocPropertyTag,
      updateJSDocPropertyTag,
      createJSDocCallbackTag,
      updateJSDocCallbackTag,
      createJSDocOverloadTag,
      updateJSDocOverloadTag,
      createJSDocAugmentsTag,
      updateJSDocAugmentsTag,
      createJSDocImplementsTag,
      updateJSDocImplementsTag,
      createJSDocSeeTag,
      updateJSDocSeeTag,
      createJSDocNameReference,
      updateJSDocNameReference,
      createJSDocMemberName,
      updateJSDocMemberName,
      createJSDocLink,
      updateJSDocLink,
      createJSDocLinkCode,
      updateJSDocLinkCode,
      createJSDocLinkPlain,
      updateJSDocLinkPlain,
      // lazily load factory members for JSDoc tags with similar structure
      get createJSDocTypeTag() {
        return getJSDocTypeLikeTagCreateFunction(347 /* JSDocTypeTag */);
      },
      get updateJSDocTypeTag() {
        return getJSDocTypeLikeTagUpdateFunction(347 /* JSDocTypeTag */);
      },
      get createJSDocReturnTag() {
        return getJSDocTypeLikeTagCreateFunction(345 /* JSDocReturnTag */);
      },
      get updateJSDocReturnTag() {
        return getJSDocTypeLikeTagUpdateFunction(345 /* JSDocReturnTag */);
      },
      get createJSDocThisTag() {
        return getJSDocTypeLikeTagCreateFunction(346 /* JSDocThisTag */);
      },
      get updateJSDocThisTag() {
        return getJSDocTypeLikeTagUpdateFunction(346 /* JSDocThisTag */);
      },
      get createJSDocAuthorTag() {
        return getJSDocSimpleTagCreateFunction(333 /* JSDocAuthorTag */);
      },
      get updateJSDocAuthorTag() {
        return getJSDocSimpleTagUpdateFunction(333 /* JSDocAuthorTag */);
      },
      get createJSDocClassTag() {
        return getJSDocSimpleTagCreateFunction(335 /* JSDocClassTag */);
      },
      get updateJSDocClassTag() {
        return getJSDocSimpleTagUpdateFunction(335 /* JSDocClassTag */);
      },
      get createJSDocPublicTag() {
        return getJSDocSimpleTagCreateFunction(336 /* JSDocPublicTag */);
      },
      get updateJSDocPublicTag() {
        return getJSDocSimpleTagUpdateFunction(336 /* JSDocPublicTag */);
      },
      get createJSDocPrivateTag() {
        return getJSDocSimpleTagCreateFunction(337 /* JSDocPrivateTag */);
      },
      get updateJSDocPrivateTag() {
        return getJSDocSimpleTagUpdateFunction(337 /* JSDocPrivateTag */);
      },
      get createJSDocProtectedTag() {
        return getJSDocSimpleTagCreateFunction(338 /* JSDocProtectedTag */);
      },
      get updateJSDocProtectedTag() {
        return getJSDocSimpleTagUpdateFunction(338 /* JSDocProtectedTag */);
      },
      get createJSDocReadonlyTag() {
        return getJSDocSimpleTagCreateFunction(339 /* JSDocReadonlyTag */);
      },
      get updateJSDocReadonlyTag() {
        return getJSDocSimpleTagUpdateFunction(339 /* JSDocReadonlyTag */);
      },
      get createJSDocOverrideTag() {
        return getJSDocSimpleTagCreateFunction(340 /* JSDocOverrideTag */);
      },
      get updateJSDocOverrideTag() {
        return getJSDocSimpleTagUpdateFunction(340 /* JSDocOverrideTag */);
      },
      get createJSDocDeprecatedTag() {
        return getJSDocSimpleTagCreateFunction(334 /* JSDocDeprecatedTag */);
      },
      get updateJSDocDeprecatedTag() {
        return getJSDocSimpleTagUpdateFunction(334 /* JSDocDeprecatedTag */);
      },
      get createJSDocThrowsTag() {
        return getJSDocTypeLikeTagCreateFunction(352 /* JSDocThrowsTag */);
      },
      get updateJSDocThrowsTag() {
        return getJSDocTypeLikeTagUpdateFunction(352 /* JSDocThrowsTag */);
      },
      get createJSDocSatisfiesTag() {
        return getJSDocTypeLikeTagCreateFunction(353 /* JSDocSatisfiesTag */);
      },
      get updateJSDocSatisfiesTag() {
        return getJSDocTypeLikeTagUpdateFunction(353 /* JSDocSatisfiesTag */);
      },
      createJSDocEnumTag,
      updateJSDocEnumTag,
      createJSDocUnknownTag,
      updateJSDocUnknownTag,
      createJSDocText,
      updateJSDocText,
      createJSDocComment,
      updateJSDocComment,
      createJsxElement,
      updateJsxElement,
      createJsxSelfClosingElement,
      updateJsxSelfClosingElement,
      createJsxOpeningElement,
      updateJsxOpeningElement,
      createJsxClosingElement,
      updateJsxClosingElement,
      createJsxFragment,
      createJsxText,
      updateJsxText,
      createJsxOpeningFragment,
      createJsxJsxClosingFragment,
      updateJsxFragment,
      createJsxAttribute,
      updateJsxAttribute,
      createJsxAttributes,
      updateJsxAttributes,
      createJsxSpreadAttribute,
      updateJsxSpreadAttribute,
      createJsxExpression,
      updateJsxExpression,
      createCaseClause,
      updateCaseClause,
      createDefaultClause,
      updateDefaultClause,
      createHeritageClause,
      updateHeritageClause,
      createCatchClause,
      updateCatchClause,
      createPropertyAssignment,
      updatePropertyAssignment,
      createShorthandPropertyAssignment,
      updateShorthandPropertyAssignment,
      createSpreadAssignment,
      updateSpreadAssignment,
      createEnumMember,
      updateEnumMember,
      createSourceFile: createSourceFile2,
      updateSourceFile: updateSourceFile2,
      createRedirectedSourceFile,
      createBundle,
      updateBundle,
      createUnparsedSource,
      createUnparsedPrologue,
      createUnparsedPrepend,
      createUnparsedTextLike,
      createUnparsedSyntheticReference,
      createInputFiles: createInputFiles2,
      createSyntheticExpression,
      createSyntaxList: createSyntaxList3,
      createNotEmittedStatement,
      createPartiallyEmittedExpression,
      updatePartiallyEmittedExpression,
      createCommaListExpression,
      updateCommaListExpression,
      createEndOfDeclarationMarker,
      createMergeDeclarationMarker,
      createSyntheticReferenceExpression,
      updateSyntheticReferenceExpression,
      cloneNode,
      // Lazily load factory methods for common operator factories and utilities
      get createComma() {
        return getBinaryCreateFunction(27 /* CommaToken */);
      },
      get createAssignment() {
        return getBinaryCreateFunction(63 /* EqualsToken */);
      },
      get createLogicalOr() {
        return getBinaryCreateFunction(56 /* BarBarToken */);
      },
      get createLogicalAnd() {
        return getBinaryCreateFunction(55 /* AmpersandAmpersandToken */);
      },
      get createBitwiseOr() {
        return getBinaryCreateFunction(51 /* BarToken */);
      },
      get createBitwiseXor() {
        return getBinaryCreateFunction(52 /* CaretToken */);
      },
      get createBitwiseAnd() {
        return getBinaryCreateFunction(50 /* AmpersandToken */);
      },
      get createStrictEquality() {
        return getBinaryCreateFunction(36 /* EqualsEqualsEqualsToken */);
      },
      get createStrictInequality() {
        return getBinaryCreateFunction(37 /* ExclamationEqualsEqualsToken */);
      },
      get createEquality() {
        return getBinaryCreateFunction(34 /* EqualsEqualsToken */);
      },
      get createInequality() {
        return getBinaryCreateFunction(35 /* ExclamationEqualsToken */);
      },
      get createLessThan() {
        return getBinaryCreateFunction(29 /* LessThanToken */);
      },
      get createLessThanEquals() {
        return getBinaryCreateFunction(32 /* LessThanEqualsToken */);
      },
      get createGreaterThan() {
        return getBinaryCreateFunction(31 /* GreaterThanToken */);
      },
      get createGreaterThanEquals() {
        return getBinaryCreateFunction(33 /* GreaterThanEqualsToken */);
      },
      get createLeftShift() {
        return getBinaryCreateFunction(47 /* LessThanLessThanToken */);
      },
      get createRightShift() {
        return getBinaryCreateFunction(48 /* GreaterThanGreaterThanToken */);
      },
      get createUnsignedRightShift() {
        return getBinaryCreateFunction(49 /* GreaterThanGreaterThanGreaterThanToken */);
      },
      get createAdd() {
        return getBinaryCreateFunction(39 /* PlusToken */);
      },
      get createSubtract() {
        return getBinaryCreateFunction(40 /* MinusToken */);
      },
      get createMultiply() {
        return getBinaryCreateFunction(41 /* AsteriskToken */);
      },
      get createDivide() {
        return getBinaryCreateFunction(43 /* SlashToken */);
      },
      get createModulo() {
        return getBinaryCreateFunction(44 /* PercentToken */);
      },
      get createExponent() {
        return getBinaryCreateFunction(42 /* AsteriskAsteriskToken */);
      },
      get createPrefixPlus() {
        return getPrefixUnaryCreateFunction(39 /* PlusToken */);
      },
      get createPrefixMinus() {
        return getPrefixUnaryCreateFunction(40 /* MinusToken */);
      },
      get createPrefixIncrement() {
        return getPrefixUnaryCreateFunction(45 /* PlusPlusToken */);
      },
      get createPrefixDecrement() {
        return getPrefixUnaryCreateFunction(46 /* MinusMinusToken */);
      },
      get createBitwiseNot() {
        return getPrefixUnaryCreateFunction(54 /* TildeToken */);
      },
      get createLogicalNot() {
        return getPrefixUnaryCreateFunction(53 /* ExclamationToken */);
      },
      get createPostfixIncrement() {
        return getPostfixUnaryCreateFunction(45 /* PlusPlusToken */);
      },
      get createPostfixDecrement() {
        return getPostfixUnaryCreateFunction(46 /* MinusMinusToken */);
      },
      // Compound nodes
      createImmediatelyInvokedFunctionExpression,
      createImmediatelyInvokedArrowFunction,
      createVoidZero,
      createExportDefault,
      createExternalModuleExport,
      createTypeCheck,
      createMethodCall,
      createGlobalMethodCall,
      createFunctionBindCall,
      createFunctionCallCall,
      createFunctionApplyCall,
      createArraySliceCall,
      createArrayConcatCall,
      createObjectDefinePropertyCall,
      createObjectGetOwnPropertyDescriptorCall,
      createReflectGetCall,
      createReflectSetCall,
      createPropertyDescriptor,
      createCallBinding,
      createAssignmentTargetWrapper,
      // Utilities
      inlineExpressions,
      getInternalName,
      getLocalName,
      getExportName,
      getDeclarationName,
      getNamespaceMemberName,
      getExternalModuleOrNamespaceExportName,
      restoreOuterExpressions,
      restoreEnclosingLabel,
      createUseStrictPrologue,
      copyPrologue,
      copyStandardPrologue,
      copyCustomPrologue,
      ensureUseStrict,
      liftToBlock,
      mergeLexicalEnvironment,
      updateModifiers
    };
    forEach(nodeFactoryPatchers, (fn) => fn(factory2));
    return factory2;
    function createNodeArray(elements, hasTrailingComma) {
      if (elements === void 0 || elements === emptyArray) {
        elements = [];
      } else if (isNodeArray(elements)) {
        if (hasTrailingComma === void 0 || elements.hasTrailingComma === hasTrailingComma) {
          if (elements.transformFlags === void 0) {
            aggregateChildrenFlags(elements);
          }
          Debug.attachNodeArrayDebugInfo(elements);
          return elements;
        }
        const array2 = elements.slice();
        array2.pos = elements.pos;
        array2.end = elements.end;
        array2.hasTrailingComma = hasTrailingComma;
        array2.transformFlags = elements.transformFlags;
        Debug.attachNodeArrayDebugInfo(array2);
        return array2;
      }
      const length2 = elements.length;
      const array = length2 >= 1 && length2 <= 4 ? elements.slice() : elements;
      array.pos = -1;
      array.end = -1;
      array.hasTrailingComma = !!hasTrailingComma;
      array.transformFlags = 0 /* None */;
      aggregateChildrenFlags(array);
      Debug.attachNodeArrayDebugInfo(array);
      return array;
    }
    function createBaseNode(kind) {
      return baseFactory2.createBaseNode(kind);
    }
    function createBaseDeclaration(kind) {
      const node = createBaseNode(kind);
      node.symbol = void 0;
      node.localSymbol = void 0;
      return node;
    }
    function finishUpdateBaseSignatureDeclaration(updated, original) {
      if (updated !== original) {
        updated.typeArguments = original.typeArguments;
      }
      return update(updated, original);
    }
    function createNumericLiteral(value, numericLiteralFlags = 0 /* None */) {
      const node = createBaseDeclaration(8 /* NumericLiteral */);
      node.text = typeof value === "number" ? value + "" : value;
      node.numericLiteralFlags = numericLiteralFlags;
      if (numericLiteralFlags & 384 /* BinaryOrOctalSpecifier */)
        node.transformFlags |= 1024 /* ContainsES2015 */;
      return node;
    }
    function createBigIntLiteral(value) {
      const node = createBaseToken(9 /* BigIntLiteral */);
      node.text = typeof value === "string" ? value : pseudoBigIntToString(value) + "n";
      node.transformFlags |= 4 /* ContainsESNext */;
      return node;
    }
    function createBaseStringLiteral(text, isSingleQuote) {
      const node = createBaseDeclaration(10 /* StringLiteral */);
      node.text = text;
      node.singleQuote = isSingleQuote;
      return node;
    }
    function createStringLiteral(text, isSingleQuote, hasExtendedUnicodeEscape) {
      const node = createBaseStringLiteral(text, isSingleQuote);
      node.hasExtendedUnicodeEscape = hasExtendedUnicodeEscape;
      if (hasExtendedUnicodeEscape)
        node.transformFlags |= 1024 /* ContainsES2015 */;
      return node;
    }
    function createStringLiteralFromNode(sourceNode) {
      const node = createBaseStringLiteral(
        getTextOfIdentifierOrLiteral(sourceNode),
        /*isSingleQuote*/
        void 0
      );
      node.textSourceNode = sourceNode;
      return node;
    }
    function createRegularExpressionLiteral(text) {
      const node = createBaseToken(13 /* RegularExpressionLiteral */);
      node.text = text;
      return node;
    }
    function createLiteralLikeNode(kind, text) {
      switch (kind) {
        case 8 /* NumericLiteral */:
          return createNumericLiteral(
            text,
            /*numericLiteralFlags*/
            0
          );
        case 9 /* BigIntLiteral */:
          return createBigIntLiteral(text);
        case 10 /* StringLiteral */:
          return createStringLiteral(
            text,
            /*isSingleQuote*/
            void 0
          );
        case 11 /* JsxText */:
          return createJsxText(
            text,
            /*containsOnlyTriviaWhiteSpaces*/
            false
          );
        case 12 /* JsxTextAllWhiteSpaces */:
          return createJsxText(
            text,
            /*containsOnlyTriviaWhiteSpaces*/
            true
          );
        case 13 /* RegularExpressionLiteral */:
          return createRegularExpressionLiteral(text);
        case 14 /* NoSubstitutionTemplateLiteral */:
          return createTemplateLiteralLikeNode(
            kind,
            text,
            /*rawText*/
            void 0,
            /*templateFlags*/
            0
          );
      }
    }
    function createBaseIdentifier(escapedText) {
      const node = baseFactory2.createBaseIdentifierNode(79 /* Identifier */);
      node.escapedText = escapedText;
      node.jsDoc = void 0;
      node.flowNode = void 0;
      node.symbol = void 0;
      return node;
    }
    function createBaseGeneratedIdentifier(text, autoGenerateFlags, prefix, suffix) {
      const node = createBaseIdentifier(escapeLeadingUnderscores(text));
      setIdentifierAutoGenerate(node, {
        flags: autoGenerateFlags,
        id: nextAutoGenerateId,
        prefix,
        suffix
      });
      nextAutoGenerateId++;
      return node;
    }
    function createIdentifier(text, originalKeywordKind, hasExtendedUnicodeEscape) {
      if (originalKeywordKind === void 0 && text) {
        originalKeywordKind = stringToToken(text);
      }
      if (originalKeywordKind === 79 /* Identifier */) {
        originalKeywordKind = void 0;
      }
      const node = createBaseIdentifier(escapeLeadingUnderscores(text));
      if (hasExtendedUnicodeEscape)
        node.flags |= 128 /* IdentifierHasExtendedUnicodeEscape */;
      if (node.escapedText === "await") {
        node.transformFlags |= 67108864 /* ContainsPossibleTopLevelAwait */;
      }
      if (node.flags & 128 /* IdentifierHasExtendedUnicodeEscape */) {
        node.transformFlags |= 1024 /* ContainsES2015 */;
      }
      return node;
    }
    function createTempVariable(recordTempVariable, reservedInNestedScopes, prefix, suffix) {
      let flags2 = 1 /* Auto */;
      if (reservedInNestedScopes)
        flags2 |= 8 /* ReservedInNestedScopes */;
      const name = createBaseGeneratedIdentifier("", flags2, prefix, suffix);
      if (recordTempVariable) {
        recordTempVariable(name);
      }
      return name;
    }
    function createLoopVariable(reservedInNestedScopes) {
      let flags2 = 2 /* Loop */;
      if (reservedInNestedScopes)
        flags2 |= 8 /* ReservedInNestedScopes */;
      return createBaseGeneratedIdentifier(
        "",
        flags2,
        /*prefix*/
        void 0,
        /*suffix*/
        void 0
      );
    }
    function createUniqueName(text, flags2 = 0 /* None */, prefix, suffix) {
      Debug.assert(!(flags2 & 7 /* KindMask */), "Argument out of range: flags");
      Debug.assert((flags2 & (16 /* Optimistic */ | 32 /* FileLevel */)) !== 32 /* FileLevel */, "GeneratedIdentifierFlags.FileLevel cannot be set without also setting GeneratedIdentifierFlags.Optimistic");
      return createBaseGeneratedIdentifier(text, 3 /* Unique */ | flags2, prefix, suffix);
    }
    function getGeneratedNameForNode(node, flags2 = 0, prefix, suffix) {
      Debug.assert(!(flags2 & 7 /* KindMask */), "Argument out of range: flags");
      const text = !node ? "" : isMemberName(node) ? formatGeneratedName(
        /*privateName*/
        false,
        prefix,
        node,
        suffix,
        idText
      ) : `generated@${getNodeId(node)}`;
      if (prefix || suffix)
        flags2 |= 16 /* Optimistic */;
      const name = createBaseGeneratedIdentifier(text, 4 /* Node */ | flags2, prefix, suffix);
      name.original = node;
      return name;
    }
    function createBasePrivateIdentifier(escapedText) {
      const node = baseFactory2.createBasePrivateIdentifierNode(80 /* PrivateIdentifier */);
      node.escapedText = escapedText;
      node.transformFlags |= 16777216 /* ContainsClassFields */;
      return node;
    }
    function createPrivateIdentifier(text) {
      if (!startsWith(text, "#"))
        Debug.fail("First character of private identifier must be #: " + text);
      return createBasePrivateIdentifier(escapeLeadingUnderscores(text));
    }
    function createBaseGeneratedPrivateIdentifier(text, autoGenerateFlags, prefix, suffix) {
      const node = createBasePrivateIdentifier(escapeLeadingUnderscores(text));
      setIdentifierAutoGenerate(node, {
        flags: autoGenerateFlags,
        id: nextAutoGenerateId,
        prefix,
        suffix
      });
      nextAutoGenerateId++;
      return node;
    }
    function createUniquePrivateName(text, prefix, suffix) {
      if (text && !startsWith(text, "#"))
        Debug.fail("First character of private identifier must be #: " + text);
      const autoGenerateFlags = 8 /* ReservedInNestedScopes */ | (text ? 3 /* Unique */ : 1 /* Auto */);
      return createBaseGeneratedPrivateIdentifier(text != null ? text : "", autoGenerateFlags, prefix, suffix);
    }
    function getGeneratedPrivateNameForNode(node, prefix, suffix) {
      const text = isMemberName(node) ? formatGeneratedName(
        /*privateName*/
        true,
        prefix,
        node,
        suffix,
        idText
      ) : `#generated@${getNodeId(node)}`;
      const flags2 = prefix || suffix ? 16 /* Optimistic */ : 0 /* None */;
      const name = createBaseGeneratedPrivateIdentifier(text, 4 /* Node */ | flags2, prefix, suffix);
      name.original = node;
      return name;
    }
    function createBaseToken(kind) {
      return baseFactory2.createBaseTokenNode(kind);
    }
    function createToken(token) {
      Debug.assert(token >= 0 /* FirstToken */ && token <= 162 /* LastToken */, "Invalid token");
      Debug.assert(token <= 14 /* FirstTemplateToken */ || token >= 17 /* LastTemplateToken */, "Invalid token. Use 'createTemplateLiteralLikeNode' to create template literals.");
      Debug.assert(token <= 8 /* FirstLiteralToken */ || token >= 14 /* LastLiteralToken */, "Invalid token. Use 'createLiteralLikeNode' to create literals.");
      Debug.assert(token !== 79 /* Identifier */, "Invalid token. Use 'createIdentifier' to create identifiers");
      const node = createBaseToken(token);
      let transformFlags = 0 /* None */;
      switch (token) {
        case 132 /* AsyncKeyword */:
          transformFlags = 256 /* ContainsES2017 */ | 128 /* ContainsES2018 */;
          break;
        case 123 /* PublicKeyword */:
        case 121 /* PrivateKeyword */:
        case 122 /* ProtectedKeyword */:
        case 146 /* ReadonlyKeyword */:
        case 126 /* AbstractKeyword */:
        case 136 /* DeclareKeyword */:
        case 85 /* ConstKeyword */:
        case 131 /* AnyKeyword */:
        case 148 /* NumberKeyword */:
        case 160 /* BigIntKeyword */:
        case 144 /* NeverKeyword */:
        case 149 /* ObjectKeyword */:
        case 101 /* InKeyword */:
        case 145 /* OutKeyword */:
        case 161 /* OverrideKeyword */:
        case 152 /* StringKeyword */:
        case 134 /* BooleanKeyword */:
        case 153 /* SymbolKeyword */:
        case 114 /* VoidKeyword */:
        case 157 /* UnknownKeyword */:
        case 155 /* UndefinedKeyword */:
          transformFlags = 1 /* ContainsTypeScript */;
          break;
        case 106 /* SuperKeyword */:
          transformFlags = 1024 /* ContainsES2015 */ | 134217728 /* ContainsLexicalSuper */;
          node.flowNode = void 0;
          break;
        case 124 /* StaticKeyword */:
          transformFlags = 1024 /* ContainsES2015 */;
          break;
        case 127 /* AccessorKeyword */:
          transformFlags = 16777216 /* ContainsClassFields */;
          break;
        case 108 /* ThisKeyword */:
          transformFlags = 16384 /* ContainsLexicalThis */;
          node.flowNode = void 0;
          break;
      }
      if (transformFlags) {
        node.transformFlags |= transformFlags;
      }
      return node;
    }
    function createSuper() {
      return createToken(106 /* SuperKeyword */);
    }
    function createThis() {
      return createToken(108 /* ThisKeyword */);
    }
    function createNull() {
      return createToken(104 /* NullKeyword */);
    }
    function createTrue() {
      return createToken(110 /* TrueKeyword */);
    }
    function createFalse() {
      return createToken(95 /* FalseKeyword */);
    }
    function createModifier(kind) {
      return createToken(kind);
    }
    function createModifiersFromModifierFlags(flags2) {
      const result = [];
      if (flags2 & 1 /* Export */)
        result.push(createModifier(93 /* ExportKeyword */));
      if (flags2 & 2 /* Ambient */)
        result.push(createModifier(136 /* DeclareKeyword */));
      if (flags2 & 1024 /* Default */)
        result.push(createModifier(88 /* DefaultKeyword */));
      if (flags2 & 2048 /* Const */)
        result.push(createModifier(85 /* ConstKeyword */));
      if (flags2 & 4 /* Public */)
        result.push(createModifier(123 /* PublicKeyword */));
      if (flags2 & 8 /* Private */)
        result.push(createModifier(121 /* PrivateKeyword */));
      if (flags2 & 16 /* Protected */)
        result.push(createModifier(122 /* ProtectedKeyword */));
      if (flags2 & 256 /* Abstract */)
        result.push(createModifier(126 /* AbstractKeyword */));
      if (flags2 & 32 /* Static */)
        result.push(createModifier(124 /* StaticKeyword */));
      if (flags2 & 16384 /* Override */)
        result.push(createModifier(161 /* OverrideKeyword */));
      if (flags2 & 64 /* Readonly */)
        result.push(createModifier(146 /* ReadonlyKeyword */));
      if (flags2 & 128 /* Accessor */)
        result.push(createModifier(127 /* AccessorKeyword */));
      if (flags2 & 512 /* Async */)
        result.push(createModifier(132 /* AsyncKeyword */));
      if (flags2 & 32768 /* In */)
        result.push(createModifier(101 /* InKeyword */));
      if (flags2 & 65536 /* Out */)
        result.push(createModifier(145 /* OutKeyword */));
      return result.length ? result : void 0;
    }
    function createQualifiedName(left, right) {
      const node = createBaseNode(163 /* QualifiedName */);
      node.left = left;
      node.right = asName(right);
      node.transformFlags |= propagateChildFlags(node.left) | propagateIdentifierNameFlags(node.right);
      node.flowNode = void 0;
      return node;
    }
    function updateQualifiedName(node, left, right) {
      return node.left !== left || node.right !== right ? update(createQualifiedName(left, right), node) : node;
    }
    function createComputedPropertyName(expression) {
      const node = createBaseNode(164 /* ComputedPropertyName */);
      node.expression = parenthesizerRules().parenthesizeExpressionOfComputedPropertyName(expression);
      node.transformFlags |= propagateChildFlags(node.expression) | 1024 /* ContainsES2015 */ | 131072 /* ContainsComputedPropertyName */;
      return node;
    }
    function updateComputedPropertyName(node, expression) {
      return node.expression !== expression ? update(createComputedPropertyName(expression), node) : node;
    }
    function createTypeParameterDeclaration(modifiers, name, constraint, defaultType) {
      const node = createBaseDeclaration(165 /* TypeParameter */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.constraint = constraint;
      node.default = defaultType;
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.expression = void 0;
      node.jsDoc = void 0;
      return node;
    }
    function updateTypeParameterDeclaration(node, modifiers, name, constraint, defaultType) {
      return node.modifiers !== modifiers || node.name !== name || node.constraint !== constraint || node.default !== defaultType ? update(createTypeParameterDeclaration(modifiers, name, constraint, defaultType), node) : node;
    }
    function createParameterDeclaration(modifiers, dotDotDotToken, name, questionToken, type, initializer) {
      var _a2, _b;
      const node = createBaseDeclaration(166 /* Parameter */);
      node.modifiers = asNodeArray(modifiers);
      node.dotDotDotToken = dotDotDotToken;
      node.name = asName(name);
      node.questionToken = questionToken;
      node.type = type;
      node.initializer = asInitializer(initializer);
      if (isThisIdentifier(node.name)) {
        node.transformFlags = 1 /* ContainsTypeScript */;
      } else {
        node.transformFlags = propagateChildrenFlags(node.modifiers) | propagateChildFlags(node.dotDotDotToken) | propagateNameFlags(node.name) | propagateChildFlags(node.questionToken) | propagateChildFlags(node.initializer) | (((_a2 = node.questionToken) != null ? _a2 : node.type) ? 1 /* ContainsTypeScript */ : 0 /* None */) | (((_b = node.dotDotDotToken) != null ? _b : node.initializer) ? 1024 /* ContainsES2015 */ : 0 /* None */) | (modifiersToFlags(node.modifiers) & 16476 /* ParameterPropertyModifier */ ? 8192 /* ContainsTypeScriptClassSyntax */ : 0 /* None */);
      }
      node.jsDoc = void 0;
      return node;
    }
    function updateParameterDeclaration(node, modifiers, dotDotDotToken, name, questionToken, type, initializer) {
      return node.modifiers !== modifiers || node.dotDotDotToken !== dotDotDotToken || node.name !== name || node.questionToken !== questionToken || node.type !== type || node.initializer !== initializer ? update(createParameterDeclaration(modifiers, dotDotDotToken, name, questionToken, type, initializer), node) : node;
    }
    function createDecorator(expression) {
      const node = createBaseNode(167 /* Decorator */);
      node.expression = parenthesizerRules().parenthesizeLeftSideOfAccess(
        expression,
        /*optionalChain*/
        false
      );
      node.transformFlags |= propagateChildFlags(node.expression) | 1 /* ContainsTypeScript */ | 8192 /* ContainsTypeScriptClassSyntax */ | 33554432 /* ContainsDecorators */;
      return node;
    }
    function updateDecorator(node, expression) {
      return node.expression !== expression ? update(createDecorator(expression), node) : node;
    }
    function createPropertySignature(modifiers, name, questionToken, type) {
      const node = createBaseDeclaration(168 /* PropertySignature */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.type = type;
      node.questionToken = questionToken;
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.initializer = void 0;
      node.jsDoc = void 0;
      return node;
    }
    function updatePropertySignature(node, modifiers, name, questionToken, type) {
      return node.modifiers !== modifiers || node.name !== name || node.questionToken !== questionToken || node.type !== type ? finishUpdatePropertySignature(createPropertySignature(modifiers, name, questionToken, type), node) : node;
    }
    function finishUpdatePropertySignature(updated, original) {
      if (updated !== original) {
        updated.initializer = original.initializer;
      }
      return update(updated, original);
    }
    function createPropertyDeclaration(modifiers, name, questionOrExclamationToken, type, initializer) {
      const node = createBaseDeclaration(169 /* PropertyDeclaration */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.questionToken = questionOrExclamationToken && isQuestionToken(questionOrExclamationToken) ? questionOrExclamationToken : void 0;
      node.exclamationToken = questionOrExclamationToken && isExclamationToken(questionOrExclamationToken) ? questionOrExclamationToken : void 0;
      node.type = type;
      node.initializer = asInitializer(initializer);
      const isAmbient = node.flags & 16777216 /* Ambient */ || modifiersToFlags(node.modifiers) & 2 /* Ambient */;
      node.transformFlags = propagateChildrenFlags(node.modifiers) | propagateNameFlags(node.name) | propagateChildFlags(node.initializer) | (isAmbient || node.questionToken || node.exclamationToken || node.type ? 1 /* ContainsTypeScript */ : 0 /* None */) | (isComputedPropertyName(node.name) || modifiersToFlags(node.modifiers) & 32 /* Static */ && node.initializer ? 8192 /* ContainsTypeScriptClassSyntax */ : 0 /* None */) | 16777216 /* ContainsClassFields */;
      node.jsDoc = void 0;
      return node;
    }
    function updatePropertyDeclaration2(node, modifiers, name, questionOrExclamationToken, type, initializer) {
      return node.modifiers !== modifiers || node.name !== name || node.questionToken !== (questionOrExclamationToken !== void 0 && isQuestionToken(questionOrExclamationToken) ? questionOrExclamationToken : void 0) || node.exclamationToken !== (questionOrExclamationToken !== void 0 && isExclamationToken(questionOrExclamationToken) ? questionOrExclamationToken : void 0) || node.type !== type || node.initializer !== initializer ? update(createPropertyDeclaration(modifiers, name, questionOrExclamationToken, type, initializer), node) : node;
    }
    function createMethodSignature(modifiers, name, questionToken, typeParameters, parameters, type) {
      const node = createBaseDeclaration(170 /* MethodSignature */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.questionToken = questionToken;
      node.typeParameters = asNodeArray(typeParameters);
      node.parameters = asNodeArray(parameters);
      node.type = type;
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.typeArguments = void 0;
      return node;
    }
    function updateMethodSignature(node, modifiers, name, questionToken, typeParameters, parameters, type) {
      return node.modifiers !== modifiers || node.name !== name || node.questionToken !== questionToken || node.typeParameters !== typeParameters || node.parameters !== parameters || node.type !== type ? finishUpdateBaseSignatureDeclaration(createMethodSignature(modifiers, name, questionToken, typeParameters, parameters, type), node) : node;
    }
    function createMethodDeclaration(modifiers, asteriskToken, name, questionToken, typeParameters, parameters, type, body) {
      const node = createBaseDeclaration(171 /* MethodDeclaration */);
      node.modifiers = asNodeArray(modifiers);
      node.asteriskToken = asteriskToken;
      node.name = asName(name);
      node.questionToken = questionToken;
      node.exclamationToken = void 0;
      node.typeParameters = asNodeArray(typeParameters);
      node.parameters = createNodeArray(parameters);
      node.type = type;
      node.body = body;
      if (!node.body) {
        node.transformFlags = 1 /* ContainsTypeScript */;
      } else {
        const isAsync = modifiersToFlags(node.modifiers) & 512 /* Async */;
        const isGenerator = !!node.asteriskToken;
        const isAsyncGenerator = isAsync && isGenerator;
        node.transformFlags = propagateChildrenFlags(node.modifiers) | propagateChildFlags(node.asteriskToken) | propagateNameFlags(node.name) | propagateChildFlags(node.questionToken) | propagateChildrenFlags(node.typeParameters) | propagateChildrenFlags(node.parameters) | propagateChildFlags(node.type) | propagateChildFlags(node.body) & ~67108864 /* ContainsPossibleTopLevelAwait */ | (isAsyncGenerator ? 128 /* ContainsES2018 */ : isAsync ? 256 /* ContainsES2017 */ : isGenerator ? 2048 /* ContainsGenerator */ : 0 /* None */) | (node.questionToken || node.typeParameters || node.type ? 1 /* ContainsTypeScript */ : 0 /* None */) | 1024 /* ContainsES2015 */;
      }
      node.typeArguments = void 0;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.flowNode = void 0;
      node.endFlowNode = void 0;
      node.returnFlowNode = void 0;
      return node;
    }
    function updateMethodDeclaration(node, modifiers, asteriskToken, name, questionToken, typeParameters, parameters, type, body) {
      return node.modifiers !== modifiers || node.asteriskToken !== asteriskToken || node.name !== name || node.questionToken !== questionToken || node.typeParameters !== typeParameters || node.parameters !== parameters || node.type !== type || node.body !== body ? finishUpdateMethodDeclaration(createMethodDeclaration(modifiers, asteriskToken, name, questionToken, typeParameters, parameters, type, body), node) : node;
    }
    function finishUpdateMethodDeclaration(updated, original) {
      if (updated !== original) {
        updated.exclamationToken = original.exclamationToken;
      }
      return update(updated, original);
    }
    function createClassStaticBlockDeclaration(body) {
      const node = createBaseDeclaration(172 /* ClassStaticBlockDeclaration */);
      node.body = body;
      node.transformFlags = propagateChildFlags(body) | 16777216 /* ContainsClassFields */;
      node.modifiers = void 0;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.endFlowNode = void 0;
      node.returnFlowNode = void 0;
      return node;
    }
    function updateClassStaticBlockDeclaration(node, body) {
      return node.body !== body ? finishUpdateClassStaticBlockDeclaration(createClassStaticBlockDeclaration(body), node) : node;
    }
    function finishUpdateClassStaticBlockDeclaration(updated, original) {
      if (updated !== original) {
        updated.modifiers = original.modifiers;
      }
      return update(updated, original);
    }
    function createConstructorDeclaration(modifiers, parameters, body) {
      const node = createBaseDeclaration(173 /* Constructor */);
      node.modifiers = asNodeArray(modifiers);
      node.parameters = createNodeArray(parameters);
      node.body = body;
      node.transformFlags = propagateChildrenFlags(node.modifiers) | propagateChildrenFlags(node.parameters) | propagateChildFlags(node.body) & ~67108864 /* ContainsPossibleTopLevelAwait */ | 1024 /* ContainsES2015 */;
      node.typeParameters = void 0;
      node.type = void 0;
      node.typeArguments = void 0;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.endFlowNode = void 0;
      node.returnFlowNode = void 0;
      return node;
    }
    function updateConstructorDeclaration(node, modifiers, parameters, body) {
      return node.modifiers !== modifiers || node.parameters !== parameters || node.body !== body ? finishUpdateConstructorDeclaration(createConstructorDeclaration(modifiers, parameters, body), node) : node;
    }
    function finishUpdateConstructorDeclaration(updated, original) {
      if (updated !== original) {
        updated.typeParameters = original.typeParameters;
        updated.type = original.type;
      }
      return finishUpdateBaseSignatureDeclaration(updated, original);
    }
    function createGetAccessorDeclaration(modifiers, name, parameters, type, body) {
      const node = createBaseDeclaration(174 /* GetAccessor */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.parameters = createNodeArray(parameters);
      node.type = type;
      node.body = body;
      if (!node.body) {
        node.transformFlags = 1 /* ContainsTypeScript */;
      } else {
        node.transformFlags = propagateChildrenFlags(node.modifiers) | propagateNameFlags(node.name) | propagateChildrenFlags(node.parameters) | propagateChildFlags(node.type) | propagateChildFlags(node.body) & ~67108864 /* ContainsPossibleTopLevelAwait */ | (node.type ? 1 /* ContainsTypeScript */ : 0 /* None */);
      }
      node.typeArguments = void 0;
      node.typeParameters = void 0;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.flowNode = void 0;
      node.endFlowNode = void 0;
      node.returnFlowNode = void 0;
      return node;
    }
    function updateGetAccessorDeclaration(node, modifiers, name, parameters, type, body) {
      return node.modifiers !== modifiers || node.name !== name || node.parameters !== parameters || node.type !== type || node.body !== body ? finishUpdateGetAccessorDeclaration(createGetAccessorDeclaration(modifiers, name, parameters, type, body), node) : node;
    }
    function finishUpdateGetAccessorDeclaration(updated, original) {
      if (updated !== original) {
        updated.typeParameters = original.typeParameters;
      }
      return finishUpdateBaseSignatureDeclaration(updated, original);
    }
    function createSetAccessorDeclaration(modifiers, name, parameters, body) {
      const node = createBaseDeclaration(175 /* SetAccessor */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.parameters = createNodeArray(parameters);
      node.body = body;
      if (!node.body) {
        node.transformFlags = 1 /* ContainsTypeScript */;
      } else {
        node.transformFlags = propagateChildrenFlags(node.modifiers) | propagateNameFlags(node.name) | propagateChildrenFlags(node.parameters) | propagateChildFlags(node.body) & ~67108864 /* ContainsPossibleTopLevelAwait */ | (node.type ? 1 /* ContainsTypeScript */ : 0 /* None */);
      }
      node.typeArguments = void 0;
      node.typeParameters = void 0;
      node.type = void 0;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.flowNode = void 0;
      node.endFlowNode = void 0;
      node.returnFlowNode = void 0;
      return node;
    }
    function updateSetAccessorDeclaration(node, modifiers, name, parameters, body) {
      return node.modifiers !== modifiers || node.name !== name || node.parameters !== parameters || node.body !== body ? finishUpdateSetAccessorDeclaration(createSetAccessorDeclaration(modifiers, name, parameters, body), node) : node;
    }
    function finishUpdateSetAccessorDeclaration(updated, original) {
      if (updated !== original) {
        updated.typeParameters = original.typeParameters;
        updated.type = original.type;
      }
      return finishUpdateBaseSignatureDeclaration(updated, original);
    }
    function createCallSignature(typeParameters, parameters, type) {
      const node = createBaseDeclaration(176 /* CallSignature */);
      node.typeParameters = asNodeArray(typeParameters);
      node.parameters = asNodeArray(parameters);
      node.type = type;
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.typeArguments = void 0;
      return node;
    }
    function updateCallSignature(node, typeParameters, parameters, type) {
      return node.typeParameters !== typeParameters || node.parameters !== parameters || node.type !== type ? finishUpdateBaseSignatureDeclaration(createCallSignature(typeParameters, parameters, type), node) : node;
    }
    function createConstructSignature(typeParameters, parameters, type) {
      const node = createBaseDeclaration(177 /* ConstructSignature */);
      node.typeParameters = asNodeArray(typeParameters);
      node.parameters = asNodeArray(parameters);
      node.type = type;
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.typeArguments = void 0;
      return node;
    }
    function updateConstructSignature(node, typeParameters, parameters, type) {
      return node.typeParameters !== typeParameters || node.parameters !== parameters || node.type !== type ? finishUpdateBaseSignatureDeclaration(createConstructSignature(typeParameters, parameters, type), node) : node;
    }
    function createIndexSignature(modifiers, parameters, type) {
      const node = createBaseDeclaration(178 /* IndexSignature */);
      node.modifiers = asNodeArray(modifiers);
      node.parameters = asNodeArray(parameters);
      node.type = type;
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.typeArguments = void 0;
      return node;
    }
    function updateIndexSignature(node, modifiers, parameters, type) {
      return node.parameters !== parameters || node.type !== type || node.modifiers !== modifiers ? finishUpdateBaseSignatureDeclaration(createIndexSignature(modifiers, parameters, type), node) : node;
    }
    function createTemplateLiteralTypeSpan(type, literal) {
      const node = createBaseNode(201 /* TemplateLiteralTypeSpan */);
      node.type = type;
      node.literal = literal;
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateTemplateLiteralTypeSpan(node, type, literal) {
      return node.type !== type || node.literal !== literal ? update(createTemplateLiteralTypeSpan(type, literal), node) : node;
    }
    function createKeywordTypeNode(kind) {
      return createToken(kind);
    }
    function createTypePredicateNode(assertsModifier, parameterName, type) {
      const node = createBaseNode(179 /* TypePredicate */);
      node.assertsModifier = assertsModifier;
      node.parameterName = asName(parameterName);
      node.type = type;
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateTypePredicateNode(node, assertsModifier, parameterName, type) {
      return node.assertsModifier !== assertsModifier || node.parameterName !== parameterName || node.type !== type ? update(createTypePredicateNode(assertsModifier, parameterName, type), node) : node;
    }
    function createTypeReferenceNode(typeName, typeArguments) {
      const node = createBaseNode(180 /* TypeReference */);
      node.typeName = asName(typeName);
      node.typeArguments = typeArguments && parenthesizerRules().parenthesizeTypeArguments(createNodeArray(typeArguments));
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateTypeReferenceNode(node, typeName, typeArguments) {
      return node.typeName !== typeName || node.typeArguments !== typeArguments ? update(createTypeReferenceNode(typeName, typeArguments), node) : node;
    }
    function createFunctionTypeNode(typeParameters, parameters, type) {
      const node = createBaseDeclaration(181 /* FunctionType */);
      node.typeParameters = asNodeArray(typeParameters);
      node.parameters = asNodeArray(parameters);
      node.type = type;
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.modifiers = void 0;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.typeArguments = void 0;
      return node;
    }
    function updateFunctionTypeNode(node, typeParameters, parameters, type) {
      return node.typeParameters !== typeParameters || node.parameters !== parameters || node.type !== type ? finishUpdateFunctionTypeNode(createFunctionTypeNode(typeParameters, parameters, type), node) : node;
    }
    function finishUpdateFunctionTypeNode(updated, original) {
      if (updated !== original) {
        updated.modifiers = original.modifiers;
      }
      return finishUpdateBaseSignatureDeclaration(updated, original);
    }
    function createConstructorTypeNode(...args) {
      return args.length === 4 ? createConstructorTypeNode1(...args) : args.length === 3 ? createConstructorTypeNode2(...args) : Debug.fail("Incorrect number of arguments specified.");
    }
    function createConstructorTypeNode1(modifiers, typeParameters, parameters, type) {
      const node = createBaseDeclaration(182 /* ConstructorType */);
      node.modifiers = asNodeArray(modifiers);
      node.typeParameters = asNodeArray(typeParameters);
      node.parameters = asNodeArray(parameters);
      node.type = type;
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.typeArguments = void 0;
      return node;
    }
    function createConstructorTypeNode2(typeParameters, parameters, type) {
      return createConstructorTypeNode1(
        /*modifiers*/
        void 0,
        typeParameters,
        parameters,
        type
      );
    }
    function updateConstructorTypeNode(...args) {
      return args.length === 5 ? updateConstructorTypeNode1(...args) : args.length === 4 ? updateConstructorTypeNode2(...args) : Debug.fail("Incorrect number of arguments specified.");
    }
    function updateConstructorTypeNode1(node, modifiers, typeParameters, parameters, type) {
      return node.modifiers !== modifiers || node.typeParameters !== typeParameters || node.parameters !== parameters || node.type !== type ? finishUpdateBaseSignatureDeclaration(createConstructorTypeNode(modifiers, typeParameters, parameters, type), node) : node;
    }
    function updateConstructorTypeNode2(node, typeParameters, parameters, type) {
      return updateConstructorTypeNode1(node, node.modifiers, typeParameters, parameters, type);
    }
    function createTypeQueryNode(exprName, typeArguments) {
      const node = createBaseNode(183 /* TypeQuery */);
      node.exprName = exprName;
      node.typeArguments = typeArguments && parenthesizerRules().parenthesizeTypeArguments(typeArguments);
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateTypeQueryNode(node, exprName, typeArguments) {
      return node.exprName !== exprName || node.typeArguments !== typeArguments ? update(createTypeQueryNode(exprName, typeArguments), node) : node;
    }
    function createTypeLiteralNode(members) {
      const node = createBaseDeclaration(184 /* TypeLiteral */);
      node.members = createNodeArray(members);
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateTypeLiteralNode(node, members) {
      return node.members !== members ? update(createTypeLiteralNode(members), node) : node;
    }
    function createArrayTypeNode(elementType) {
      const node = createBaseNode(185 /* ArrayType */);
      node.elementType = parenthesizerRules().parenthesizeNonArrayTypeOfPostfixType(elementType);
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateArrayTypeNode(node, elementType) {
      return node.elementType !== elementType ? update(createArrayTypeNode(elementType), node) : node;
    }
    function createTupleTypeNode(elements) {
      const node = createBaseNode(186 /* TupleType */);
      node.elements = createNodeArray(parenthesizerRules().parenthesizeElementTypesOfTupleType(elements));
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateTupleTypeNode(node, elements) {
      return node.elements !== elements ? update(createTupleTypeNode(elements), node) : node;
    }
    function createNamedTupleMember(dotDotDotToken, name, questionToken, type) {
      const node = createBaseDeclaration(199 /* NamedTupleMember */);
      node.dotDotDotToken = dotDotDotToken;
      node.name = name;
      node.questionToken = questionToken;
      node.type = type;
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.jsDoc = void 0;
      return node;
    }
    function updateNamedTupleMember(node, dotDotDotToken, name, questionToken, type) {
      return node.dotDotDotToken !== dotDotDotToken || node.name !== name || node.questionToken !== questionToken || node.type !== type ? update(createNamedTupleMember(dotDotDotToken, name, questionToken, type), node) : node;
    }
    function createOptionalTypeNode(type) {
      const node = createBaseNode(187 /* OptionalType */);
      node.type = parenthesizerRules().parenthesizeTypeOfOptionalType(type);
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateOptionalTypeNode(node, type) {
      return node.type !== type ? update(createOptionalTypeNode(type), node) : node;
    }
    function createRestTypeNode(type) {
      const node = createBaseNode(188 /* RestType */);
      node.type = type;
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateRestTypeNode(node, type) {
      return node.type !== type ? update(createRestTypeNode(type), node) : node;
    }
    function createUnionOrIntersectionTypeNode(kind, types, parenthesize) {
      const node = createBaseNode(kind);
      node.types = factory2.createNodeArray(parenthesize(types));
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateUnionOrIntersectionTypeNode(node, types, parenthesize) {
      return node.types !== types ? update(createUnionOrIntersectionTypeNode(node.kind, types, parenthesize), node) : node;
    }
    function createUnionTypeNode(types) {
      return createUnionOrIntersectionTypeNode(189 /* UnionType */, types, parenthesizerRules().parenthesizeConstituentTypesOfUnionType);
    }
    function updateUnionTypeNode(node, types) {
      return updateUnionOrIntersectionTypeNode(node, types, parenthesizerRules().parenthesizeConstituentTypesOfUnionType);
    }
    function createIntersectionTypeNode(types) {
      return createUnionOrIntersectionTypeNode(190 /* IntersectionType */, types, parenthesizerRules().parenthesizeConstituentTypesOfIntersectionType);
    }
    function updateIntersectionTypeNode(node, types) {
      return updateUnionOrIntersectionTypeNode(node, types, parenthesizerRules().parenthesizeConstituentTypesOfIntersectionType);
    }
    function createConditionalTypeNode(checkType, extendsType, trueType, falseType) {
      const node = createBaseNode(191 /* ConditionalType */);
      node.checkType = parenthesizerRules().parenthesizeCheckTypeOfConditionalType(checkType);
      node.extendsType = parenthesizerRules().parenthesizeExtendsTypeOfConditionalType(extendsType);
      node.trueType = trueType;
      node.falseType = falseType;
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.locals = void 0;
      node.nextContainer = void 0;
      return node;
    }
    function updateConditionalTypeNode(node, checkType, extendsType, trueType, falseType) {
      return node.checkType !== checkType || node.extendsType !== extendsType || node.trueType !== trueType || node.falseType !== falseType ? update(createConditionalTypeNode(checkType, extendsType, trueType, falseType), node) : node;
    }
    function createInferTypeNode(typeParameter) {
      const node = createBaseNode(192 /* InferType */);
      node.typeParameter = typeParameter;
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateInferTypeNode(node, typeParameter) {
      return node.typeParameter !== typeParameter ? update(createInferTypeNode(typeParameter), node) : node;
    }
    function createTemplateLiteralType(head, templateSpans) {
      const node = createBaseNode(200 /* TemplateLiteralType */);
      node.head = head;
      node.templateSpans = createNodeArray(templateSpans);
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateTemplateLiteralType(node, head, templateSpans) {
      return node.head !== head || node.templateSpans !== templateSpans ? update(createTemplateLiteralType(head, templateSpans), node) : node;
    }
    function createImportTypeNode(argument, assertions, qualifier, typeArguments, isTypeOf = false) {
      const node = createBaseNode(202 /* ImportType */);
      node.argument = argument;
      node.assertions = assertions;
      node.qualifier = qualifier;
      node.typeArguments = typeArguments && parenthesizerRules().parenthesizeTypeArguments(typeArguments);
      node.isTypeOf = isTypeOf;
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateImportTypeNode(node, argument, assertions, qualifier, typeArguments, isTypeOf = node.isTypeOf) {
      return node.argument !== argument || node.assertions !== assertions || node.qualifier !== qualifier || node.typeArguments !== typeArguments || node.isTypeOf !== isTypeOf ? update(createImportTypeNode(argument, assertions, qualifier, typeArguments, isTypeOf), node) : node;
    }
    function createParenthesizedType(type) {
      const node = createBaseNode(193 /* ParenthesizedType */);
      node.type = type;
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateParenthesizedType(node, type) {
      return node.type !== type ? update(createParenthesizedType(type), node) : node;
    }
    function createThisTypeNode() {
      const node = createBaseNode(194 /* ThisType */);
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function createTypeOperatorNode(operator, type) {
      const node = createBaseNode(195 /* TypeOperator */);
      node.operator = operator;
      node.type = operator === 146 /* ReadonlyKeyword */ ? parenthesizerRules().parenthesizeOperandOfReadonlyTypeOperator(type) : parenthesizerRules().parenthesizeOperandOfTypeOperator(type);
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateTypeOperatorNode(node, type) {
      return node.type !== type ? update(createTypeOperatorNode(node.operator, type), node) : node;
    }
    function createIndexedAccessTypeNode(objectType, indexType) {
      const node = createBaseNode(196 /* IndexedAccessType */);
      node.objectType = parenthesizerRules().parenthesizeNonArrayTypeOfPostfixType(objectType);
      node.indexType = indexType;
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateIndexedAccessTypeNode(node, objectType, indexType) {
      return node.objectType !== objectType || node.indexType !== indexType ? update(createIndexedAccessTypeNode(objectType, indexType), node) : node;
    }
    function createMappedTypeNode(readonlyToken, typeParameter, nameType, questionToken, type, members) {
      const node = createBaseDeclaration(197 /* MappedType */);
      node.readonlyToken = readonlyToken;
      node.typeParameter = typeParameter;
      node.nameType = nameType;
      node.questionToken = questionToken;
      node.type = type;
      node.members = members && createNodeArray(members);
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.locals = void 0;
      node.nextContainer = void 0;
      return node;
    }
    function updateMappedTypeNode(node, readonlyToken, typeParameter, nameType, questionToken, type, members) {
      return node.readonlyToken !== readonlyToken || node.typeParameter !== typeParameter || node.nameType !== nameType || node.questionToken !== questionToken || node.type !== type || node.members !== members ? update(createMappedTypeNode(readonlyToken, typeParameter, nameType, questionToken, type, members), node) : node;
    }
    function createLiteralTypeNode(literal) {
      const node = createBaseNode(198 /* LiteralType */);
      node.literal = literal;
      node.transformFlags = 1 /* ContainsTypeScript */;
      return node;
    }
    function updateLiteralTypeNode(node, literal) {
      return node.literal !== literal ? update(createLiteralTypeNode(literal), node) : node;
    }
    function createObjectBindingPattern(elements) {
      const node = createBaseNode(203 /* ObjectBindingPattern */);
      node.elements = createNodeArray(elements);
      node.transformFlags |= propagateChildrenFlags(node.elements) | 1024 /* ContainsES2015 */ | 524288 /* ContainsBindingPattern */;
      if (node.transformFlags & 32768 /* ContainsRestOrSpread */) {
        node.transformFlags |= 128 /* ContainsES2018 */ | 65536 /* ContainsObjectRestOrSpread */;
      }
      return node;
    }
    function updateObjectBindingPattern(node, elements) {
      return node.elements !== elements ? update(createObjectBindingPattern(elements), node) : node;
    }
    function createArrayBindingPattern(elements) {
      const node = createBaseNode(204 /* ArrayBindingPattern */);
      node.elements = createNodeArray(elements);
      node.transformFlags |= propagateChildrenFlags(node.elements) | 1024 /* ContainsES2015 */ | 524288 /* ContainsBindingPattern */;
      return node;
    }
    function updateArrayBindingPattern(node, elements) {
      return node.elements !== elements ? update(createArrayBindingPattern(elements), node) : node;
    }
    function createBindingElement(dotDotDotToken, propertyName, name, initializer) {
      const node = createBaseDeclaration(205 /* BindingElement */);
      node.dotDotDotToken = dotDotDotToken;
      node.propertyName = asName(propertyName);
      node.name = asName(name);
      node.initializer = asInitializer(initializer);
      node.transformFlags |= propagateChildFlags(node.dotDotDotToken) | propagateNameFlags(node.propertyName) | propagateNameFlags(node.name) | propagateChildFlags(node.initializer) | (node.dotDotDotToken ? 32768 /* ContainsRestOrSpread */ : 0 /* None */) | 1024 /* ContainsES2015 */;
      node.flowNode = void 0;
      return node;
    }
    function updateBindingElement(node, dotDotDotToken, propertyName, name, initializer) {
      return node.propertyName !== propertyName || node.dotDotDotToken !== dotDotDotToken || node.name !== name || node.initializer !== initializer ? update(createBindingElement(dotDotDotToken, propertyName, name, initializer), node) : node;
    }
    function createArrayLiteralExpression(elements, multiLine) {
      const node = createBaseNode(206 /* ArrayLiteralExpression */);
      const lastElement = elements && lastOrUndefined(elements);
      const elementsArray = createNodeArray(elements, lastElement && isOmittedExpression(lastElement) ? true : void 0);
      node.elements = parenthesizerRules().parenthesizeExpressionsOfCommaDelimitedList(elementsArray);
      node.multiLine = multiLine;
      node.transformFlags |= propagateChildrenFlags(node.elements);
      return node;
    }
    function updateArrayLiteralExpression(node, elements) {
      return node.elements !== elements ? update(createArrayLiteralExpression(elements, node.multiLine), node) : node;
    }
    function createObjectLiteralExpression(properties, multiLine) {
      const node = createBaseDeclaration(207 /* ObjectLiteralExpression */);
      node.properties = createNodeArray(properties);
      node.multiLine = multiLine;
      node.transformFlags |= propagateChildrenFlags(node.properties);
      node.jsDoc = void 0;
      return node;
    }
    function updateObjectLiteralExpression(node, properties) {
      return node.properties !== properties ? update(createObjectLiteralExpression(properties, node.multiLine), node) : node;
    }
    function createBasePropertyAccessExpression(expression, questionDotToken, name) {
      const node = createBaseDeclaration(208 /* PropertyAccessExpression */);
      node.expression = expression;
      node.questionDotToken = questionDotToken;
      node.name = name;
      node.transformFlags = propagateChildFlags(node.expression) | propagateChildFlags(node.questionDotToken) | (isIdentifier(node.name) ? propagateIdentifierNameFlags(node.name) : propagateChildFlags(node.name) | 536870912 /* ContainsPrivateIdentifierInExpression */);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function createPropertyAccessExpression(expression, name) {
      const node = createBasePropertyAccessExpression(
        parenthesizerRules().parenthesizeLeftSideOfAccess(
          expression,
          /*optionalChain*/
          false
        ),
        /*questionDotToken*/
        void 0,
        asName(name)
      );
      if (isSuperKeyword(expression)) {
        node.transformFlags |= 256 /* ContainsES2017 */ | 128 /* ContainsES2018 */;
      }
      return node;
    }
    function updatePropertyAccessExpression(node, expression, name) {
      if (isPropertyAccessChain(node)) {
        return updatePropertyAccessChain(node, expression, node.questionDotToken, cast(name, isIdentifier));
      }
      return node.expression !== expression || node.name !== name ? update(createPropertyAccessExpression(expression, name), node) : node;
    }
    function createPropertyAccessChain(expression, questionDotToken, name) {
      const node = createBasePropertyAccessExpression(
        parenthesizerRules().parenthesizeLeftSideOfAccess(
          expression,
          /*optionalChain*/
          true
        ),
        questionDotToken,
        asName(name)
      );
      node.flags |= 32 /* OptionalChain */;
      node.transformFlags |= 32 /* ContainsES2020 */;
      return node;
    }
    function updatePropertyAccessChain(node, expression, questionDotToken, name) {
      Debug.assert(!!(node.flags & 32 /* OptionalChain */), "Cannot update a PropertyAccessExpression using updatePropertyAccessChain. Use updatePropertyAccess instead.");
      return node.expression !== expression || node.questionDotToken !== questionDotToken || node.name !== name ? update(createPropertyAccessChain(expression, questionDotToken, name), node) : node;
    }
    function createBaseElementAccessExpression(expression, questionDotToken, argumentExpression) {
      const node = createBaseDeclaration(209 /* ElementAccessExpression */);
      node.expression = expression;
      node.questionDotToken = questionDotToken;
      node.argumentExpression = argumentExpression;
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.questionDotToken) | propagateChildFlags(node.argumentExpression);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function createElementAccessExpression(expression, index) {
      const node = createBaseElementAccessExpression(
        parenthesizerRules().parenthesizeLeftSideOfAccess(
          expression,
          /*optionalChain*/
          false
        ),
        /*questionDotToken*/
        void 0,
        asExpression(index)
      );
      if (isSuperKeyword(expression)) {
        node.transformFlags |= 256 /* ContainsES2017 */ | 128 /* ContainsES2018 */;
      }
      return node;
    }
    function updateElementAccessExpression(node, expression, argumentExpression) {
      if (isElementAccessChain(node)) {
        return updateElementAccessChain(node, expression, node.questionDotToken, argumentExpression);
      }
      return node.expression !== expression || node.argumentExpression !== argumentExpression ? update(createElementAccessExpression(expression, argumentExpression), node) : node;
    }
    function createElementAccessChain(expression, questionDotToken, index) {
      const node = createBaseElementAccessExpression(
        parenthesizerRules().parenthesizeLeftSideOfAccess(
          expression,
          /*optionalChain*/
          true
        ),
        questionDotToken,
        asExpression(index)
      );
      node.flags |= 32 /* OptionalChain */;
      node.transformFlags |= 32 /* ContainsES2020 */;
      return node;
    }
    function updateElementAccessChain(node, expression, questionDotToken, argumentExpression) {
      Debug.assert(!!(node.flags & 32 /* OptionalChain */), "Cannot update a ElementAccessExpression using updateElementAccessChain. Use updateElementAccess instead.");
      return node.expression !== expression || node.questionDotToken !== questionDotToken || node.argumentExpression !== argumentExpression ? update(createElementAccessChain(expression, questionDotToken, argumentExpression), node) : node;
    }
    function createBaseCallExpression(expression, questionDotToken, typeArguments, argumentsArray) {
      const node = createBaseDeclaration(210 /* CallExpression */);
      node.expression = expression;
      node.questionDotToken = questionDotToken;
      node.typeArguments = typeArguments;
      node.arguments = argumentsArray;
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.questionDotToken) | propagateChildrenFlags(node.typeArguments) | propagateChildrenFlags(node.arguments);
      if (node.typeArguments) {
        node.transformFlags |= 1 /* ContainsTypeScript */;
      }
      if (isSuperProperty(node.expression)) {
        node.transformFlags |= 16384 /* ContainsLexicalThis */;
      }
      return node;
    }
    function createCallExpression(expression, typeArguments, argumentsArray) {
      const node = createBaseCallExpression(
        parenthesizerRules().parenthesizeLeftSideOfAccess(
          expression,
          /*optionalChain*/
          false
        ),
        /*questionDotToken*/
        void 0,
        asNodeArray(typeArguments),
        parenthesizerRules().parenthesizeExpressionsOfCommaDelimitedList(createNodeArray(argumentsArray))
      );
      if (isImportKeyword(node.expression)) {
        node.transformFlags |= 8388608 /* ContainsDynamicImport */;
      }
      return node;
    }
    function updateCallExpression(node, expression, typeArguments, argumentsArray) {
      if (isCallChain(node)) {
        return updateCallChain(node, expression, node.questionDotToken, typeArguments, argumentsArray);
      }
      return node.expression !== expression || node.typeArguments !== typeArguments || node.arguments !== argumentsArray ? update(createCallExpression(expression, typeArguments, argumentsArray), node) : node;
    }
    function createCallChain(expression, questionDotToken, typeArguments, argumentsArray) {
      const node = createBaseCallExpression(
        parenthesizerRules().parenthesizeLeftSideOfAccess(
          expression,
          /*optionalChain*/
          true
        ),
        questionDotToken,
        asNodeArray(typeArguments),
        parenthesizerRules().parenthesizeExpressionsOfCommaDelimitedList(createNodeArray(argumentsArray))
      );
      node.flags |= 32 /* OptionalChain */;
      node.transformFlags |= 32 /* ContainsES2020 */;
      return node;
    }
    function updateCallChain(node, expression, questionDotToken, typeArguments, argumentsArray) {
      Debug.assert(!!(node.flags & 32 /* OptionalChain */), "Cannot update a CallExpression using updateCallChain. Use updateCall instead.");
      return node.expression !== expression || node.questionDotToken !== questionDotToken || node.typeArguments !== typeArguments || node.arguments !== argumentsArray ? update(createCallChain(expression, questionDotToken, typeArguments, argumentsArray), node) : node;
    }
    function createNewExpression(expression, typeArguments, argumentsArray) {
      const node = createBaseDeclaration(211 /* NewExpression */);
      node.expression = parenthesizerRules().parenthesizeExpressionOfNew(expression);
      node.typeArguments = asNodeArray(typeArguments);
      node.arguments = argumentsArray ? parenthesizerRules().parenthesizeExpressionsOfCommaDelimitedList(argumentsArray) : void 0;
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildrenFlags(node.typeArguments) | propagateChildrenFlags(node.arguments) | 32 /* ContainsES2020 */;
      if (node.typeArguments) {
        node.transformFlags |= 1 /* ContainsTypeScript */;
      }
      return node;
    }
    function updateNewExpression(node, expression, typeArguments, argumentsArray) {
      return node.expression !== expression || node.typeArguments !== typeArguments || node.arguments !== argumentsArray ? update(createNewExpression(expression, typeArguments, argumentsArray), node) : node;
    }
    function createTaggedTemplateExpression(tag, typeArguments, template) {
      const node = createBaseNode(212 /* TaggedTemplateExpression */);
      node.tag = parenthesizerRules().parenthesizeLeftSideOfAccess(
        tag,
        /*optionalChain*/
        false
      );
      node.typeArguments = asNodeArray(typeArguments);
      node.template = template;
      node.transformFlags |= propagateChildFlags(node.tag) | propagateChildrenFlags(node.typeArguments) | propagateChildFlags(node.template) | 1024 /* ContainsES2015 */;
      if (node.typeArguments) {
        node.transformFlags |= 1 /* ContainsTypeScript */;
      }
      if (hasInvalidEscape(node.template)) {
        node.transformFlags |= 128 /* ContainsES2018 */;
      }
      return node;
    }
    function updateTaggedTemplateExpression(node, tag, typeArguments, template) {
      return node.tag !== tag || node.typeArguments !== typeArguments || node.template !== template ? update(createTaggedTemplateExpression(tag, typeArguments, template), node) : node;
    }
    function createTypeAssertion(type, expression) {
      const node = createBaseNode(213 /* TypeAssertionExpression */);
      node.expression = parenthesizerRules().parenthesizeOperandOfPrefixUnary(expression);
      node.type = type;
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.type) | 1 /* ContainsTypeScript */;
      return node;
    }
    function updateTypeAssertion(node, type, expression) {
      return node.type !== type || node.expression !== expression ? update(createTypeAssertion(type, expression), node) : node;
    }
    function createParenthesizedExpression(expression) {
      const node = createBaseNode(214 /* ParenthesizedExpression */);
      node.expression = expression;
      node.transformFlags = propagateChildFlags(node.expression);
      node.jsDoc = void 0;
      return node;
    }
    function updateParenthesizedExpression(node, expression) {
      return node.expression !== expression ? update(createParenthesizedExpression(expression), node) : node;
    }
    function createFunctionExpression(modifiers, asteriskToken, name, typeParameters, parameters, type, body) {
      const node = createBaseDeclaration(215 /* FunctionExpression */);
      node.modifiers = asNodeArray(modifiers);
      node.asteriskToken = asteriskToken;
      node.name = asName(name);
      node.typeParameters = asNodeArray(typeParameters);
      node.parameters = createNodeArray(parameters);
      node.type = type;
      node.body = body;
      const isAsync = modifiersToFlags(node.modifiers) & 512 /* Async */;
      const isGenerator = !!node.asteriskToken;
      const isAsyncGenerator = isAsync && isGenerator;
      node.transformFlags = propagateChildrenFlags(node.modifiers) | propagateChildFlags(node.asteriskToken) | propagateNameFlags(node.name) | propagateChildrenFlags(node.typeParameters) | propagateChildrenFlags(node.parameters) | propagateChildFlags(node.type) | propagateChildFlags(node.body) & ~67108864 /* ContainsPossibleTopLevelAwait */ | (isAsyncGenerator ? 128 /* ContainsES2018 */ : isAsync ? 256 /* ContainsES2017 */ : isGenerator ? 2048 /* ContainsGenerator */ : 0 /* None */) | (node.typeParameters || node.type ? 1 /* ContainsTypeScript */ : 0 /* None */) | 4194304 /* ContainsHoistedDeclarationOrCompletion */;
      node.typeArguments = void 0;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.flowNode = void 0;
      node.endFlowNode = void 0;
      node.returnFlowNode = void 0;
      return node;
    }
    function updateFunctionExpression(node, modifiers, asteriskToken, name, typeParameters, parameters, type, body) {
      return node.name !== name || node.modifiers !== modifiers || node.asteriskToken !== asteriskToken || node.typeParameters !== typeParameters || node.parameters !== parameters || node.type !== type || node.body !== body ? finishUpdateBaseSignatureDeclaration(createFunctionExpression(modifiers, asteriskToken, name, typeParameters, parameters, type, body), node) : node;
    }
    function createArrowFunction(modifiers, typeParameters, parameters, type, equalsGreaterThanToken, body) {
      const node = createBaseDeclaration(216 /* ArrowFunction */);
      node.modifiers = asNodeArray(modifiers);
      node.typeParameters = asNodeArray(typeParameters);
      node.parameters = createNodeArray(parameters);
      node.type = type;
      node.equalsGreaterThanToken = equalsGreaterThanToken != null ? equalsGreaterThanToken : createToken(38 /* EqualsGreaterThanToken */);
      node.body = parenthesizerRules().parenthesizeConciseBodyOfArrowFunction(body);
      const isAsync = modifiersToFlags(node.modifiers) & 512 /* Async */;
      node.transformFlags = propagateChildrenFlags(node.modifiers) | propagateChildrenFlags(node.typeParameters) | propagateChildrenFlags(node.parameters) | propagateChildFlags(node.type) | propagateChildFlags(node.equalsGreaterThanToken) | propagateChildFlags(node.body) & ~67108864 /* ContainsPossibleTopLevelAwait */ | (node.typeParameters || node.type ? 1 /* ContainsTypeScript */ : 0 /* None */) | (isAsync ? 256 /* ContainsES2017 */ | 16384 /* ContainsLexicalThis */ : 0 /* None */) | 1024 /* ContainsES2015 */;
      node.typeArguments = void 0;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.flowNode = void 0;
      node.endFlowNode = void 0;
      node.returnFlowNode = void 0;
      return node;
    }
    function updateArrowFunction(node, modifiers, typeParameters, parameters, type, equalsGreaterThanToken, body) {
      return node.modifiers !== modifiers || node.typeParameters !== typeParameters || node.parameters !== parameters || node.type !== type || node.equalsGreaterThanToken !== equalsGreaterThanToken || node.body !== body ? finishUpdateBaseSignatureDeclaration(createArrowFunction(modifiers, typeParameters, parameters, type, equalsGreaterThanToken, body), node) : node;
    }
    function createDeleteExpression(expression) {
      const node = createBaseNode(217 /* DeleteExpression */);
      node.expression = parenthesizerRules().parenthesizeOperandOfPrefixUnary(expression);
      node.transformFlags |= propagateChildFlags(node.expression);
      return node;
    }
    function updateDeleteExpression(node, expression) {
      return node.expression !== expression ? update(createDeleteExpression(expression), node) : node;
    }
    function createTypeOfExpression(expression) {
      const node = createBaseNode(218 /* TypeOfExpression */);
      node.expression = parenthesizerRules().parenthesizeOperandOfPrefixUnary(expression);
      node.transformFlags |= propagateChildFlags(node.expression);
      return node;
    }
    function updateTypeOfExpression(node, expression) {
      return node.expression !== expression ? update(createTypeOfExpression(expression), node) : node;
    }
    function createVoidExpression(expression) {
      const node = createBaseNode(219 /* VoidExpression */);
      node.expression = parenthesizerRules().parenthesizeOperandOfPrefixUnary(expression);
      node.transformFlags |= propagateChildFlags(node.expression);
      return node;
    }
    function updateVoidExpression(node, expression) {
      return node.expression !== expression ? update(createVoidExpression(expression), node) : node;
    }
    function createAwaitExpression(expression) {
      const node = createBaseNode(220 /* AwaitExpression */);
      node.expression = parenthesizerRules().parenthesizeOperandOfPrefixUnary(expression);
      node.transformFlags |= propagateChildFlags(node.expression) | 256 /* ContainsES2017 */ | 128 /* ContainsES2018 */ | 2097152 /* ContainsAwait */;
      return node;
    }
    function updateAwaitExpression(node, expression) {
      return node.expression !== expression ? update(createAwaitExpression(expression), node) : node;
    }
    function createPrefixUnaryExpression(operator, operand) {
      const node = createBaseNode(221 /* PrefixUnaryExpression */);
      node.operator = operator;
      node.operand = parenthesizerRules().parenthesizeOperandOfPrefixUnary(operand);
      node.transformFlags |= propagateChildFlags(node.operand);
      if ((operator === 45 /* PlusPlusToken */ || operator === 46 /* MinusMinusToken */) && isIdentifier(node.operand) && !isGeneratedIdentifier(node.operand) && !isLocalName(node.operand)) {
        node.transformFlags |= 268435456 /* ContainsUpdateExpressionForIdentifier */;
      }
      return node;
    }
    function updatePrefixUnaryExpression(node, operand) {
      return node.operand !== operand ? update(createPrefixUnaryExpression(node.operator, operand), node) : node;
    }
    function createPostfixUnaryExpression(operand, operator) {
      const node = createBaseNode(222 /* PostfixUnaryExpression */);
      node.operator = operator;
      node.operand = parenthesizerRules().parenthesizeOperandOfPostfixUnary(operand);
      node.transformFlags |= propagateChildFlags(node.operand);
      if (isIdentifier(node.operand) && !isGeneratedIdentifier(node.operand) && !isLocalName(node.operand)) {
        node.transformFlags |= 268435456 /* ContainsUpdateExpressionForIdentifier */;
      }
      return node;
    }
    function updatePostfixUnaryExpression(node, operand) {
      return node.operand !== operand ? update(createPostfixUnaryExpression(operand, node.operator), node) : node;
    }
    function createBinaryExpression(left, operator, right) {
      const node = createBaseDeclaration(223 /* BinaryExpression */);
      const operatorToken = asToken(operator);
      const operatorKind = operatorToken.kind;
      node.left = parenthesizerRules().parenthesizeLeftSideOfBinary(operatorKind, left);
      node.operatorToken = operatorToken;
      node.right = parenthesizerRules().parenthesizeRightSideOfBinary(operatorKind, node.left, right);
      node.transformFlags |= propagateChildFlags(node.left) | propagateChildFlags(node.operatorToken) | propagateChildFlags(node.right);
      if (operatorKind === 60 /* QuestionQuestionToken */) {
        node.transformFlags |= 32 /* ContainsES2020 */;
      } else if (operatorKind === 63 /* EqualsToken */) {
        if (isObjectLiteralExpression(node.left)) {
          node.transformFlags |= 1024 /* ContainsES2015 */ | 128 /* ContainsES2018 */ | 4096 /* ContainsDestructuringAssignment */ | propagateAssignmentPatternFlags(node.left);
        } else if (isArrayLiteralExpression(node.left)) {
          node.transformFlags |= 1024 /* ContainsES2015 */ | 4096 /* ContainsDestructuringAssignment */ | propagateAssignmentPatternFlags(node.left);
        }
      } else if (operatorKind === 42 /* AsteriskAsteriskToken */ || operatorKind === 67 /* AsteriskAsteriskEqualsToken */) {
        node.transformFlags |= 512 /* ContainsES2016 */;
      } else if (isLogicalOrCoalescingAssignmentOperator(operatorKind)) {
        node.transformFlags |= 16 /* ContainsES2021 */;
      }
      if (operatorKind === 101 /* InKeyword */ && isPrivateIdentifier(node.left)) {
        node.transformFlags |= 536870912 /* ContainsPrivateIdentifierInExpression */;
      }
      node.jsDoc = void 0;
      return node;
    }
    function propagateAssignmentPatternFlags(node) {
      return containsObjectRestOrSpread(node) ? 65536 /* ContainsObjectRestOrSpread */ : 0 /* None */;
    }
    function updateBinaryExpression(node, left, operator, right) {
      return node.left !== left || node.operatorToken !== operator || node.right !== right ? update(createBinaryExpression(left, operator, right), node) : node;
    }
    function createConditionalExpression(condition, questionToken, whenTrue, colonToken, whenFalse) {
      const node = createBaseNode(224 /* ConditionalExpression */);
      node.condition = parenthesizerRules().parenthesizeConditionOfConditionalExpression(condition);
      node.questionToken = questionToken != null ? questionToken : createToken(57 /* QuestionToken */);
      node.whenTrue = parenthesizerRules().parenthesizeBranchOfConditionalExpression(whenTrue);
      node.colonToken = colonToken != null ? colonToken : createToken(58 /* ColonToken */);
      node.whenFalse = parenthesizerRules().parenthesizeBranchOfConditionalExpression(whenFalse);
      node.transformFlags |= propagateChildFlags(node.condition) | propagateChildFlags(node.questionToken) | propagateChildFlags(node.whenTrue) | propagateChildFlags(node.colonToken) | propagateChildFlags(node.whenFalse);
      return node;
    }
    function updateConditionalExpression(node, condition, questionToken, whenTrue, colonToken, whenFalse) {
      return node.condition !== condition || node.questionToken !== questionToken || node.whenTrue !== whenTrue || node.colonToken !== colonToken || node.whenFalse !== whenFalse ? update(createConditionalExpression(condition, questionToken, whenTrue, colonToken, whenFalse), node) : node;
    }
    function createTemplateExpression(head, templateSpans) {
      const node = createBaseNode(225 /* TemplateExpression */);
      node.head = head;
      node.templateSpans = createNodeArray(templateSpans);
      node.transformFlags |= propagateChildFlags(node.head) | propagateChildrenFlags(node.templateSpans) | 1024 /* ContainsES2015 */;
      return node;
    }
    function updateTemplateExpression(node, head, templateSpans) {
      return node.head !== head || node.templateSpans !== templateSpans ? update(createTemplateExpression(head, templateSpans), node) : node;
    }
    function checkTemplateLiteralLikeNode(kind, text, rawText, templateFlags = 0 /* None */) {
      Debug.assert(!(templateFlags & ~2048 /* TemplateLiteralLikeFlags */), "Unsupported template flags.");
      let cooked = void 0;
      if (rawText !== void 0 && rawText !== text) {
        cooked = getCookedText(kind, rawText);
        if (typeof cooked === "object") {
          return Debug.fail("Invalid raw text");
        }
      }
      if (text === void 0) {
        if (cooked === void 0) {
          return Debug.fail("Arguments 'text' and 'rawText' may not both be undefined.");
        }
        text = cooked;
      } else if (cooked !== void 0) {
        Debug.assert(text === cooked, "Expected argument 'text' to be the normalized (i.e. 'cooked') version of argument 'rawText'.");
      }
      return text;
    }
    function getTransformFlagsOfTemplateLiteralLike(templateFlags) {
      let transformFlags = 1024 /* ContainsES2015 */;
      if (templateFlags) {
        transformFlags |= 128 /* ContainsES2018 */;
      }
      return transformFlags;
    }
    function createTemplateLiteralLikeToken(kind, text, rawText, templateFlags) {
      const node = createBaseToken(kind);
      node.text = text;
      node.rawText = rawText;
      node.templateFlags = templateFlags & 2048 /* TemplateLiteralLikeFlags */;
      node.transformFlags = getTransformFlagsOfTemplateLiteralLike(node.templateFlags);
      return node;
    }
    function createTemplateLiteralLikeDeclaration(kind, text, rawText, templateFlags) {
      const node = createBaseDeclaration(kind);
      node.text = text;
      node.rawText = rawText;
      node.templateFlags = templateFlags & 2048 /* TemplateLiteralLikeFlags */;
      node.transformFlags = getTransformFlagsOfTemplateLiteralLike(node.templateFlags);
      return node;
    }
    function createTemplateLiteralLikeNode(kind, text, rawText, templateFlags) {
      if (kind === 14 /* NoSubstitutionTemplateLiteral */) {
        return createTemplateLiteralLikeDeclaration(kind, text, rawText, templateFlags);
      }
      return createTemplateLiteralLikeToken(kind, text, rawText, templateFlags);
    }
    function createTemplateHead(text, rawText, templateFlags) {
      text = checkTemplateLiteralLikeNode(15 /* TemplateHead */, text, rawText, templateFlags);
      return createTemplateLiteralLikeNode(15 /* TemplateHead */, text, rawText, templateFlags);
    }
    function createTemplateMiddle(text, rawText, templateFlags) {
      text = checkTemplateLiteralLikeNode(15 /* TemplateHead */, text, rawText, templateFlags);
      return createTemplateLiteralLikeNode(16 /* TemplateMiddle */, text, rawText, templateFlags);
    }
    function createTemplateTail(text, rawText, templateFlags) {
      text = checkTemplateLiteralLikeNode(15 /* TemplateHead */, text, rawText, templateFlags);
      return createTemplateLiteralLikeNode(17 /* TemplateTail */, text, rawText, templateFlags);
    }
    function createNoSubstitutionTemplateLiteral(text, rawText, templateFlags) {
      text = checkTemplateLiteralLikeNode(15 /* TemplateHead */, text, rawText, templateFlags);
      return createTemplateLiteralLikeDeclaration(14 /* NoSubstitutionTemplateLiteral */, text, rawText, templateFlags);
    }
    function createYieldExpression(asteriskToken, expression) {
      Debug.assert(!asteriskToken || !!expression, "A `YieldExpression` with an asteriskToken must have an expression.");
      const node = createBaseNode(226 /* YieldExpression */);
      node.expression = expression && parenthesizerRules().parenthesizeExpressionForDisallowedComma(expression);
      node.asteriskToken = asteriskToken;
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.asteriskToken) | 1024 /* ContainsES2015 */ | 128 /* ContainsES2018 */ | 1048576 /* ContainsYield */;
      return node;
    }
    function updateYieldExpression(node, asteriskToken, expression) {
      return node.expression !== expression || node.asteriskToken !== asteriskToken ? update(createYieldExpression(asteriskToken, expression), node) : node;
    }
    function createSpreadElement(expression) {
      const node = createBaseNode(227 /* SpreadElement */);
      node.expression = parenthesizerRules().parenthesizeExpressionForDisallowedComma(expression);
      node.transformFlags |= propagateChildFlags(node.expression) | 1024 /* ContainsES2015 */ | 32768 /* ContainsRestOrSpread */;
      return node;
    }
    function updateSpreadElement(node, expression) {
      return node.expression !== expression ? update(createSpreadElement(expression), node) : node;
    }
    function createClassExpression(modifiers, name, typeParameters, heritageClauses, members) {
      const node = createBaseDeclaration(228 /* ClassExpression */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.typeParameters = asNodeArray(typeParameters);
      node.heritageClauses = asNodeArray(heritageClauses);
      node.members = createNodeArray(members);
      node.transformFlags |= propagateChildrenFlags(node.modifiers) | propagateNameFlags(node.name) | propagateChildrenFlags(node.typeParameters) | propagateChildrenFlags(node.heritageClauses) | propagateChildrenFlags(node.members) | (node.typeParameters ? 1 /* ContainsTypeScript */ : 0 /* None */) | 1024 /* ContainsES2015 */;
      node.jsDoc = void 0;
      return node;
    }
    function updateClassExpression(node, modifiers, name, typeParameters, heritageClauses, members) {
      return node.modifiers !== modifiers || node.name !== name || node.typeParameters !== typeParameters || node.heritageClauses !== heritageClauses || node.members !== members ? update(createClassExpression(modifiers, name, typeParameters, heritageClauses, members), node) : node;
    }
    function createOmittedExpression() {
      return createBaseNode(229 /* OmittedExpression */);
    }
    function createExpressionWithTypeArguments(expression, typeArguments) {
      const node = createBaseNode(230 /* ExpressionWithTypeArguments */);
      node.expression = parenthesizerRules().parenthesizeLeftSideOfAccess(
        expression,
        /*optionalChain*/
        false
      );
      node.typeArguments = typeArguments && parenthesizerRules().parenthesizeTypeArguments(typeArguments);
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildrenFlags(node.typeArguments) | 1024 /* ContainsES2015 */;
      return node;
    }
    function updateExpressionWithTypeArguments(node, expression, typeArguments) {
      return node.expression !== expression || node.typeArguments !== typeArguments ? update(createExpressionWithTypeArguments(expression, typeArguments), node) : node;
    }
    function createAsExpression(expression, type) {
      const node = createBaseNode(231 /* AsExpression */);
      node.expression = expression;
      node.type = type;
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.type) | 1 /* ContainsTypeScript */;
      return node;
    }
    function updateAsExpression(node, expression, type) {
      return node.expression !== expression || node.type !== type ? update(createAsExpression(expression, type), node) : node;
    }
    function createNonNullExpression(expression) {
      const node = createBaseNode(232 /* NonNullExpression */);
      node.expression = parenthesizerRules().parenthesizeLeftSideOfAccess(
        expression,
        /*optionalChain*/
        false
      );
      node.transformFlags |= propagateChildFlags(node.expression) | 1 /* ContainsTypeScript */;
      return node;
    }
    function updateNonNullExpression(node, expression) {
      if (isNonNullChain(node)) {
        return updateNonNullChain(node, expression);
      }
      return node.expression !== expression ? update(createNonNullExpression(expression), node) : node;
    }
    function createSatisfiesExpression(expression, type) {
      const node = createBaseNode(235 /* SatisfiesExpression */);
      node.expression = expression;
      node.type = type;
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.type) | 1 /* ContainsTypeScript */;
      return node;
    }
    function updateSatisfiesExpression(node, expression, type) {
      return node.expression !== expression || node.type !== type ? update(createSatisfiesExpression(expression, type), node) : node;
    }
    function createNonNullChain(expression) {
      const node = createBaseNode(232 /* NonNullExpression */);
      node.flags |= 32 /* OptionalChain */;
      node.expression = parenthesizerRules().parenthesizeLeftSideOfAccess(
        expression,
        /*optionalChain*/
        true
      );
      node.transformFlags |= propagateChildFlags(node.expression) | 1 /* ContainsTypeScript */;
      return node;
    }
    function updateNonNullChain(node, expression) {
      Debug.assert(!!(node.flags & 32 /* OptionalChain */), "Cannot update a NonNullExpression using updateNonNullChain. Use updateNonNullExpression instead.");
      return node.expression !== expression ? update(createNonNullChain(expression), node) : node;
    }
    function createMetaProperty(keywordToken, name) {
      const node = createBaseNode(233 /* MetaProperty */);
      node.keywordToken = keywordToken;
      node.name = name;
      node.transformFlags |= propagateChildFlags(node.name);
      switch (keywordToken) {
        case 103 /* NewKeyword */:
          node.transformFlags |= 1024 /* ContainsES2015 */;
          break;
        case 100 /* ImportKeyword */:
          node.transformFlags |= 4 /* ContainsESNext */;
          break;
        default:
          return Debug.assertNever(keywordToken);
      }
      node.flowNode = void 0;
      return node;
    }
    function updateMetaProperty(node, name) {
      return node.name !== name ? update(createMetaProperty(node.keywordToken, name), node) : node;
    }
    function createTemplateSpan(expression, literal) {
      const node = createBaseNode(236 /* TemplateSpan */);
      node.expression = expression;
      node.literal = literal;
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.literal) | 1024 /* ContainsES2015 */;
      return node;
    }
    function updateTemplateSpan(node, expression, literal) {
      return node.expression !== expression || node.literal !== literal ? update(createTemplateSpan(expression, literal), node) : node;
    }
    function createSemicolonClassElement() {
      const node = createBaseNode(237 /* SemicolonClassElement */);
      node.transformFlags |= 1024 /* ContainsES2015 */;
      return node;
    }
    function createBlock(statements, multiLine) {
      const node = createBaseNode(238 /* Block */);
      node.statements = createNodeArray(statements);
      node.multiLine = multiLine;
      node.transformFlags |= propagateChildrenFlags(node.statements);
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      return node;
    }
    function updateBlock(node, statements) {
      return node.statements !== statements ? update(createBlock(statements, node.multiLine), node) : node;
    }
    function createVariableStatement(modifiers, declarationList) {
      const node = createBaseNode(240 /* VariableStatement */);
      node.modifiers = asNodeArray(modifiers);
      node.declarationList = isArray(declarationList) ? createVariableDeclarationList(declarationList) : declarationList;
      node.transformFlags |= propagateChildrenFlags(node.modifiers) | propagateChildFlags(node.declarationList);
      if (modifiersToFlags(node.modifiers) & 2 /* Ambient */) {
        node.transformFlags = 1 /* ContainsTypeScript */;
      }
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateVariableStatement(node, modifiers, declarationList) {
      return node.modifiers !== modifiers || node.declarationList !== declarationList ? update(createVariableStatement(modifiers, declarationList), node) : node;
    }
    function createEmptyStatement() {
      const node = createBaseNode(239 /* EmptyStatement */);
      node.jsDoc = void 0;
      return node;
    }
    function createExpressionStatement(expression) {
      const node = createBaseNode(241 /* ExpressionStatement */);
      node.expression = parenthesizerRules().parenthesizeExpressionOfExpressionStatement(expression);
      node.transformFlags |= propagateChildFlags(node.expression);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateExpressionStatement(node, expression) {
      return node.expression !== expression ? update(createExpressionStatement(expression), node) : node;
    }
    function createIfStatement(expression, thenStatement, elseStatement) {
      const node = createBaseNode(242 /* IfStatement */);
      node.expression = expression;
      node.thenStatement = asEmbeddedStatement(thenStatement);
      node.elseStatement = asEmbeddedStatement(elseStatement);
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.thenStatement) | propagateChildFlags(node.elseStatement);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateIfStatement(node, expression, thenStatement, elseStatement) {
      return node.expression !== expression || node.thenStatement !== thenStatement || node.elseStatement !== elseStatement ? update(createIfStatement(expression, thenStatement, elseStatement), node) : node;
    }
    function createDoStatement(statement, expression) {
      const node = createBaseNode(243 /* DoStatement */);
      node.statement = asEmbeddedStatement(statement);
      node.expression = expression;
      node.transformFlags |= propagateChildFlags(node.statement) | propagateChildFlags(node.expression);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateDoStatement(node, statement, expression) {
      return node.statement !== statement || node.expression !== expression ? update(createDoStatement(statement, expression), node) : node;
    }
    function createWhileStatement(expression, statement) {
      const node = createBaseNode(244 /* WhileStatement */);
      node.expression = expression;
      node.statement = asEmbeddedStatement(statement);
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.statement);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateWhileStatement(node, expression, statement) {
      return node.expression !== expression || node.statement !== statement ? update(createWhileStatement(expression, statement), node) : node;
    }
    function createForStatement(initializer, condition, incrementor, statement) {
      const node = createBaseNode(245 /* ForStatement */);
      node.initializer = initializer;
      node.condition = condition;
      node.incrementor = incrementor;
      node.statement = asEmbeddedStatement(statement);
      node.transformFlags |= propagateChildFlags(node.initializer) | propagateChildFlags(node.condition) | propagateChildFlags(node.incrementor) | propagateChildFlags(node.statement);
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateForStatement(node, initializer, condition, incrementor, statement) {
      return node.initializer !== initializer || node.condition !== condition || node.incrementor !== incrementor || node.statement !== statement ? update(createForStatement(initializer, condition, incrementor, statement), node) : node;
    }
    function createForInStatement(initializer, expression, statement) {
      const node = createBaseNode(246 /* ForInStatement */);
      node.initializer = initializer;
      node.expression = expression;
      node.statement = asEmbeddedStatement(statement);
      node.transformFlags |= propagateChildFlags(node.initializer) | propagateChildFlags(node.expression) | propagateChildFlags(node.statement);
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateForInStatement(node, initializer, expression, statement) {
      return node.initializer !== initializer || node.expression !== expression || node.statement !== statement ? update(createForInStatement(initializer, expression, statement), node) : node;
    }
    function createForOfStatement(awaitModifier, initializer, expression, statement) {
      const node = createBaseNode(247 /* ForOfStatement */);
      node.awaitModifier = awaitModifier;
      node.initializer = initializer;
      node.expression = parenthesizerRules().parenthesizeExpressionForDisallowedComma(expression);
      node.statement = asEmbeddedStatement(statement);
      node.transformFlags |= propagateChildFlags(node.awaitModifier) | propagateChildFlags(node.initializer) | propagateChildFlags(node.expression) | propagateChildFlags(node.statement) | 1024 /* ContainsES2015 */;
      if (awaitModifier)
        node.transformFlags |= 128 /* ContainsES2018 */;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateForOfStatement(node, awaitModifier, initializer, expression, statement) {
      return node.awaitModifier !== awaitModifier || node.initializer !== initializer || node.expression !== expression || node.statement !== statement ? update(createForOfStatement(awaitModifier, initializer, expression, statement), node) : node;
    }
    function createContinueStatement(label) {
      const node = createBaseNode(248 /* ContinueStatement */);
      node.label = asName(label);
      node.transformFlags |= propagateChildFlags(node.label) | 4194304 /* ContainsHoistedDeclarationOrCompletion */;
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateContinueStatement(node, label) {
      return node.label !== label ? update(createContinueStatement(label), node) : node;
    }
    function createBreakStatement(label) {
      const node = createBaseNode(249 /* BreakStatement */);
      node.label = asName(label);
      node.transformFlags |= propagateChildFlags(node.label) | 4194304 /* ContainsHoistedDeclarationOrCompletion */;
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateBreakStatement(node, label) {
      return node.label !== label ? update(createBreakStatement(label), node) : node;
    }
    function createReturnStatement(expression) {
      const node = createBaseNode(250 /* ReturnStatement */);
      node.expression = expression;
      node.transformFlags |= propagateChildFlags(node.expression) | 128 /* ContainsES2018 */ | 4194304 /* ContainsHoistedDeclarationOrCompletion */;
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateReturnStatement(node, expression) {
      return node.expression !== expression ? update(createReturnStatement(expression), node) : node;
    }
    function createWithStatement(expression, statement) {
      const node = createBaseNode(251 /* WithStatement */);
      node.expression = expression;
      node.statement = asEmbeddedStatement(statement);
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.statement);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateWithStatement(node, expression, statement) {
      return node.expression !== expression || node.statement !== statement ? update(createWithStatement(expression, statement), node) : node;
    }
    function createSwitchStatement(expression, caseBlock) {
      const node = createBaseNode(252 /* SwitchStatement */);
      node.expression = parenthesizerRules().parenthesizeExpressionForDisallowedComma(expression);
      node.caseBlock = caseBlock;
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.caseBlock);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      node.possiblyExhaustive = false;
      return node;
    }
    function updateSwitchStatement(node, expression, caseBlock) {
      return node.expression !== expression || node.caseBlock !== caseBlock ? update(createSwitchStatement(expression, caseBlock), node) : node;
    }
    function createLabeledStatement(label, statement) {
      const node = createBaseNode(253 /* LabeledStatement */);
      node.label = asName(label);
      node.statement = asEmbeddedStatement(statement);
      node.transformFlags |= propagateChildFlags(node.label) | propagateChildFlags(node.statement);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateLabeledStatement(node, label, statement) {
      return node.label !== label || node.statement !== statement ? update(createLabeledStatement(label, statement), node) : node;
    }
    function createThrowStatement(expression) {
      const node = createBaseNode(254 /* ThrowStatement */);
      node.expression = expression;
      node.transformFlags |= propagateChildFlags(node.expression);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateThrowStatement(node, expression) {
      return node.expression !== expression ? update(createThrowStatement(expression), node) : node;
    }
    function createTryStatement(tryBlock, catchClause, finallyBlock) {
      const node = createBaseNode(255 /* TryStatement */);
      node.tryBlock = tryBlock;
      node.catchClause = catchClause;
      node.finallyBlock = finallyBlock;
      node.transformFlags |= propagateChildFlags(node.tryBlock) | propagateChildFlags(node.catchClause) | propagateChildFlags(node.finallyBlock);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function updateTryStatement(node, tryBlock, catchClause, finallyBlock) {
      return node.tryBlock !== tryBlock || node.catchClause !== catchClause || node.finallyBlock !== finallyBlock ? update(createTryStatement(tryBlock, catchClause, finallyBlock), node) : node;
    }
    function createDebuggerStatement() {
      const node = createBaseNode(256 /* DebuggerStatement */);
      node.jsDoc = void 0;
      node.flowNode = void 0;
      return node;
    }
    function createVariableDeclaration(name, exclamationToken, type, initializer) {
      var _a2;
      const node = createBaseDeclaration(257 /* VariableDeclaration */);
      node.name = asName(name);
      node.exclamationToken = exclamationToken;
      node.type = type;
      node.initializer = asInitializer(initializer);
      node.transformFlags |= propagateNameFlags(node.name) | propagateChildFlags(node.initializer) | (((_a2 = node.exclamationToken) != null ? _a2 : node.type) ? 1 /* ContainsTypeScript */ : 0 /* None */);
      node.jsDoc = void 0;
      return node;
    }
    function updateVariableDeclaration(node, name, exclamationToken, type, initializer) {
      return node.name !== name || node.type !== type || node.exclamationToken !== exclamationToken || node.initializer !== initializer ? update(createVariableDeclaration(name, exclamationToken, type, initializer), node) : node;
    }
    function createVariableDeclarationList(declarations, flags2 = 0 /* None */) {
      const node = createBaseNode(258 /* VariableDeclarationList */);
      node.flags |= flags2 & 3 /* BlockScoped */;
      node.declarations = createNodeArray(declarations);
      node.transformFlags |= propagateChildrenFlags(node.declarations) | 4194304 /* ContainsHoistedDeclarationOrCompletion */;
      if (flags2 & 3 /* BlockScoped */) {
        node.transformFlags |= 1024 /* ContainsES2015 */ | 262144 /* ContainsBlockScopedBinding */;
      }
      return node;
    }
    function updateVariableDeclarationList(node, declarations) {
      return node.declarations !== declarations ? update(createVariableDeclarationList(declarations, node.flags), node) : node;
    }
    function createFunctionDeclaration(modifiers, asteriskToken, name, typeParameters, parameters, type, body) {
      const node = createBaseDeclaration(259 /* FunctionDeclaration */);
      node.modifiers = asNodeArray(modifiers);
      node.asteriskToken = asteriskToken;
      node.name = asName(name);
      node.typeParameters = asNodeArray(typeParameters);
      node.parameters = createNodeArray(parameters);
      node.type = type;
      node.body = body;
      if (!node.body || modifiersToFlags(node.modifiers) & 2 /* Ambient */) {
        node.transformFlags = 1 /* ContainsTypeScript */;
      } else {
        const isAsync = modifiersToFlags(node.modifiers) & 512 /* Async */;
        const isGenerator = !!node.asteriskToken;
        const isAsyncGenerator = isAsync && isGenerator;
        node.transformFlags = propagateChildrenFlags(node.modifiers) | propagateChildFlags(node.asteriskToken) | propagateNameFlags(node.name) | propagateChildrenFlags(node.typeParameters) | propagateChildrenFlags(node.parameters) | propagateChildFlags(node.type) | propagateChildFlags(node.body) & ~67108864 /* ContainsPossibleTopLevelAwait */ | (isAsyncGenerator ? 128 /* ContainsES2018 */ : isAsync ? 256 /* ContainsES2017 */ : isGenerator ? 2048 /* ContainsGenerator */ : 0 /* None */) | (node.typeParameters || node.type ? 1 /* ContainsTypeScript */ : 0 /* None */) | 4194304 /* ContainsHoistedDeclarationOrCompletion */;
      }
      node.typeArguments = void 0;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.endFlowNode = void 0;
      node.returnFlowNode = void 0;
      return node;
    }
    function updateFunctionDeclaration(node, modifiers, asteriskToken, name, typeParameters, parameters, type, body) {
      return node.modifiers !== modifiers || node.asteriskToken !== asteriskToken || node.name !== name || node.typeParameters !== typeParameters || node.parameters !== parameters || node.type !== type || node.body !== body ? finishUpdateFunctionDeclaration(createFunctionDeclaration(modifiers, asteriskToken, name, typeParameters, parameters, type, body), node) : node;
    }
    function finishUpdateFunctionDeclaration(updated, original) {
      if (updated !== original) {
        if (updated.modifiers === original.modifiers) {
          updated.modifiers = original.modifiers;
        }
      }
      return finishUpdateBaseSignatureDeclaration(updated, original);
    }
    function createClassDeclaration(modifiers, name, typeParameters, heritageClauses, members) {
      const node = createBaseDeclaration(260 /* ClassDeclaration */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.typeParameters = asNodeArray(typeParameters);
      node.heritageClauses = asNodeArray(heritageClauses);
      node.members = createNodeArray(members);
      if (modifiersToFlags(node.modifiers) & 2 /* Ambient */) {
        node.transformFlags = 1 /* ContainsTypeScript */;
      } else {
        node.transformFlags |= propagateChildrenFlags(node.modifiers) | propagateNameFlags(node.name) | propagateChildrenFlags(node.typeParameters) | propagateChildrenFlags(node.heritageClauses) | propagateChildrenFlags(node.members) | (node.typeParameters ? 1 /* ContainsTypeScript */ : 0 /* None */) | 1024 /* ContainsES2015 */;
        if (node.transformFlags & 8192 /* ContainsTypeScriptClassSyntax */) {
          node.transformFlags |= 1 /* ContainsTypeScript */;
        }
      }
      node.jsDoc = void 0;
      return node;
    }
    function updateClassDeclaration(node, modifiers, name, typeParameters, heritageClauses, members) {
      return node.modifiers !== modifiers || node.name !== name || node.typeParameters !== typeParameters || node.heritageClauses !== heritageClauses || node.members !== members ? update(createClassDeclaration(modifiers, name, typeParameters, heritageClauses, members), node) : node;
    }
    function createInterfaceDeclaration(modifiers, name, typeParameters, heritageClauses, members) {
      const node = createBaseDeclaration(261 /* InterfaceDeclaration */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.typeParameters = asNodeArray(typeParameters);
      node.heritageClauses = asNodeArray(heritageClauses);
      node.members = createNodeArray(members);
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.jsDoc = void 0;
      return node;
    }
    function updateInterfaceDeclaration(node, modifiers, name, typeParameters, heritageClauses, members) {
      return node.modifiers !== modifiers || node.name !== name || node.typeParameters !== typeParameters || node.heritageClauses !== heritageClauses || node.members !== members ? update(createInterfaceDeclaration(modifiers, name, typeParameters, heritageClauses, members), node) : node;
    }
    function createTypeAliasDeclaration(modifiers, name, typeParameters, type) {
      const node = createBaseDeclaration(262 /* TypeAliasDeclaration */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.typeParameters = asNodeArray(typeParameters);
      node.type = type;
      node.transformFlags = 1 /* ContainsTypeScript */;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      return node;
    }
    function updateTypeAliasDeclaration(node, modifiers, name, typeParameters, type) {
      return node.modifiers !== modifiers || node.name !== name || node.typeParameters !== typeParameters || node.type !== type ? update(createTypeAliasDeclaration(modifiers, name, typeParameters, type), node) : node;
    }
    function createEnumDeclaration(modifiers, name, members) {
      const node = createBaseDeclaration(263 /* EnumDeclaration */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.members = createNodeArray(members);
      node.transformFlags |= propagateChildrenFlags(node.modifiers) | propagateChildFlags(node.name) | propagateChildrenFlags(node.members) | 1 /* ContainsTypeScript */;
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      node.jsDoc = void 0;
      return node;
    }
    function updateEnumDeclaration(node, modifiers, name, members) {
      return node.modifiers !== modifiers || node.name !== name || node.members !== members ? update(createEnumDeclaration(modifiers, name, members), node) : node;
    }
    function createModuleDeclaration(modifiers, name, body, flags2 = 0 /* None */) {
      const node = createBaseDeclaration(264 /* ModuleDeclaration */);
      node.modifiers = asNodeArray(modifiers);
      node.flags |= flags2 & (16 /* Namespace */ | 4 /* NestedNamespace */ | 1024 /* GlobalAugmentation */);
      node.name = name;
      node.body = body;
      if (modifiersToFlags(node.modifiers) & 2 /* Ambient */) {
        node.transformFlags = 1 /* ContainsTypeScript */;
      } else {
        node.transformFlags |= propagateChildrenFlags(node.modifiers) | propagateChildFlags(node.name) | propagateChildFlags(node.body) | 1 /* ContainsTypeScript */;
      }
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      return node;
    }
    function updateModuleDeclaration(node, modifiers, name, body) {
      return node.modifiers !== modifiers || node.name !== name || node.body !== body ? update(createModuleDeclaration(modifiers, name, body, node.flags), node) : node;
    }
    function createModuleBlock(statements) {
      const node = createBaseNode(265 /* ModuleBlock */);
      node.statements = createNodeArray(statements);
      node.transformFlags |= propagateChildrenFlags(node.statements);
      node.jsDoc = void 0;
      return node;
    }
    function updateModuleBlock(node, statements) {
      return node.statements !== statements ? update(createModuleBlock(statements), node) : node;
    }
    function createCaseBlock(clauses) {
      const node = createBaseNode(266 /* CaseBlock */);
      node.clauses = createNodeArray(clauses);
      node.transformFlags |= propagateChildrenFlags(node.clauses);
      node.locals = void 0;
      node.nextContainer = void 0;
      return node;
    }
    function updateCaseBlock(node, clauses) {
      return node.clauses !== clauses ? update(createCaseBlock(clauses), node) : node;
    }
    function createNamespaceExportDeclaration(name) {
      const node = createBaseDeclaration(267 /* NamespaceExportDeclaration */);
      node.name = asName(name);
      node.transformFlags |= propagateIdentifierNameFlags(node.name) | 1 /* ContainsTypeScript */;
      node.modifiers = void 0;
      node.jsDoc = void 0;
      return node;
    }
    function updateNamespaceExportDeclaration(node, name) {
      return node.name !== name ? finishUpdateNamespaceExportDeclaration(createNamespaceExportDeclaration(name), node) : node;
    }
    function finishUpdateNamespaceExportDeclaration(updated, original) {
      if (updated !== original) {
        updated.modifiers = original.modifiers;
      }
      return update(updated, original);
    }
    function createImportEqualsDeclaration(modifiers, isTypeOnly, name, moduleReference) {
      const node = createBaseDeclaration(268 /* ImportEqualsDeclaration */);
      node.modifiers = asNodeArray(modifiers);
      node.name = asName(name);
      node.isTypeOnly = isTypeOnly;
      node.moduleReference = moduleReference;
      node.transformFlags |= propagateChildrenFlags(node.modifiers) | propagateIdentifierNameFlags(node.name) | propagateChildFlags(node.moduleReference);
      if (!isExternalModuleReference(node.moduleReference)) {
        node.transformFlags |= 1 /* ContainsTypeScript */;
      }
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      node.jsDoc = void 0;
      return node;
    }
    function updateImportEqualsDeclaration(node, modifiers, isTypeOnly, name, moduleReference) {
      return node.modifiers !== modifiers || node.isTypeOnly !== isTypeOnly || node.name !== name || node.moduleReference !== moduleReference ? update(createImportEqualsDeclaration(modifiers, isTypeOnly, name, moduleReference), node) : node;
    }
    function createImportDeclaration(modifiers, importClause, moduleSpecifier, assertClause) {
      const node = createBaseNode(269 /* ImportDeclaration */);
      node.modifiers = asNodeArray(modifiers);
      node.importClause = importClause;
      node.moduleSpecifier = moduleSpecifier;
      node.assertClause = assertClause;
      node.transformFlags |= propagateChildFlags(node.importClause) | propagateChildFlags(node.moduleSpecifier);
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      node.jsDoc = void 0;
      return node;
    }
    function updateImportDeclaration(node, modifiers, importClause, moduleSpecifier, assertClause) {
      return node.modifiers !== modifiers || node.importClause !== importClause || node.moduleSpecifier !== moduleSpecifier || node.assertClause !== assertClause ? update(createImportDeclaration(modifiers, importClause, moduleSpecifier, assertClause), node) : node;
    }
    function createImportClause(isTypeOnly, name, namedBindings) {
      const node = createBaseDeclaration(270 /* ImportClause */);
      node.isTypeOnly = isTypeOnly;
      node.name = name;
      node.namedBindings = namedBindings;
      node.transformFlags |= propagateChildFlags(node.name) | propagateChildFlags(node.namedBindings);
      if (isTypeOnly) {
        node.transformFlags |= 1 /* ContainsTypeScript */;
      }
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      return node;
    }
    function updateImportClause(node, isTypeOnly, name, namedBindings) {
      return node.isTypeOnly !== isTypeOnly || node.name !== name || node.namedBindings !== namedBindings ? update(createImportClause(isTypeOnly, name, namedBindings), node) : node;
    }
    function createAssertClause(elements, multiLine) {
      const node = createBaseNode(296 /* AssertClause */);
      node.elements = createNodeArray(elements);
      node.multiLine = multiLine;
      node.transformFlags |= 4 /* ContainsESNext */;
      return node;
    }
    function updateAssertClause(node, elements, multiLine) {
      return node.elements !== elements || node.multiLine !== multiLine ? update(createAssertClause(elements, multiLine), node) : node;
    }
    function createAssertEntry(name, value) {
      const node = createBaseNode(297 /* AssertEntry */);
      node.name = name;
      node.value = value;
      node.transformFlags |= 4 /* ContainsESNext */;
      return node;
    }
    function updateAssertEntry(node, name, value) {
      return node.name !== name || node.value !== value ? update(createAssertEntry(name, value), node) : node;
    }
    function createImportTypeAssertionContainer(clause, multiLine) {
      const node = createBaseNode(298 /* ImportTypeAssertionContainer */);
      node.assertClause = clause;
      node.multiLine = multiLine;
      return node;
    }
    function updateImportTypeAssertionContainer(node, clause, multiLine) {
      return node.assertClause !== clause || node.multiLine !== multiLine ? update(createImportTypeAssertionContainer(clause, multiLine), node) : node;
    }
    function createNamespaceImport(name) {
      const node = createBaseDeclaration(271 /* NamespaceImport */);
      node.name = name;
      node.transformFlags |= propagateChildFlags(node.name);
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      return node;
    }
    function updateNamespaceImport(node, name) {
      return node.name !== name ? update(createNamespaceImport(name), node) : node;
    }
    function createNamespaceExport(name) {
      const node = createBaseDeclaration(277 /* NamespaceExport */);
      node.name = name;
      node.transformFlags |= propagateChildFlags(node.name) | 4 /* ContainsESNext */;
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      return node;
    }
    function updateNamespaceExport(node, name) {
      return node.name !== name ? update(createNamespaceExport(name), node) : node;
    }
    function createNamedImports(elements) {
      const node = createBaseNode(272 /* NamedImports */);
      node.elements = createNodeArray(elements);
      node.transformFlags |= propagateChildrenFlags(node.elements);
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      return node;
    }
    function updateNamedImports(node, elements) {
      return node.elements !== elements ? update(createNamedImports(elements), node) : node;
    }
    function createImportSpecifier(isTypeOnly, propertyName, name) {
      const node = createBaseDeclaration(273 /* ImportSpecifier */);
      node.isTypeOnly = isTypeOnly;
      node.propertyName = propertyName;
      node.name = name;
      node.transformFlags |= propagateChildFlags(node.propertyName) | propagateChildFlags(node.name);
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      return node;
    }
    function updateImportSpecifier(node, isTypeOnly, propertyName, name) {
      return node.isTypeOnly !== isTypeOnly || node.propertyName !== propertyName || node.name !== name ? update(createImportSpecifier(isTypeOnly, propertyName, name), node) : node;
    }
    function createExportAssignment2(modifiers, isExportEquals, expression) {
      const node = createBaseDeclaration(274 /* ExportAssignment */);
      node.modifiers = asNodeArray(modifiers);
      node.isExportEquals = isExportEquals;
      node.expression = isExportEquals ? parenthesizerRules().parenthesizeRightSideOfBinary(
        63 /* EqualsToken */,
        /*leftSide*/
        void 0,
        expression
      ) : parenthesizerRules().parenthesizeExpressionOfExportDefault(expression);
      node.transformFlags |= propagateChildrenFlags(node.modifiers) | propagateChildFlags(node.expression);
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      node.jsDoc = void 0;
      return node;
    }
    function updateExportAssignment(node, modifiers, expression) {
      return node.modifiers !== modifiers || node.expression !== expression ? update(createExportAssignment2(modifiers, node.isExportEquals, expression), node) : node;
    }
    function createExportDeclaration(modifiers, isTypeOnly, exportClause, moduleSpecifier, assertClause) {
      const node = createBaseDeclaration(275 /* ExportDeclaration */);
      node.modifiers = asNodeArray(modifiers);
      node.isTypeOnly = isTypeOnly;
      node.exportClause = exportClause;
      node.moduleSpecifier = moduleSpecifier;
      node.assertClause = assertClause;
      node.transformFlags |= propagateChildrenFlags(node.modifiers) | propagateChildFlags(node.exportClause) | propagateChildFlags(node.moduleSpecifier);
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      node.jsDoc = void 0;
      return node;
    }
    function updateExportDeclaration(node, modifiers, isTypeOnly, exportClause, moduleSpecifier, assertClause) {
      return node.modifiers !== modifiers || node.isTypeOnly !== isTypeOnly || node.exportClause !== exportClause || node.moduleSpecifier !== moduleSpecifier || node.assertClause !== assertClause ? finishUpdateExportDeclaration(createExportDeclaration(modifiers, isTypeOnly, exportClause, moduleSpecifier, assertClause), node) : node;
    }
    function finishUpdateExportDeclaration(updated, original) {
      if (updated !== original) {
        if (updated.modifiers === original.modifiers) {
          updated.modifiers = original.modifiers;
        }
      }
      return update(updated, original);
    }
    function createNamedExports(elements) {
      const node = createBaseNode(276 /* NamedExports */);
      node.elements = createNodeArray(elements);
      node.transformFlags |= propagateChildrenFlags(node.elements);
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      return node;
    }
    function updateNamedExports(node, elements) {
      return node.elements !== elements ? update(createNamedExports(elements), node) : node;
    }
    function createExportSpecifier(isTypeOnly, propertyName, name) {
      const node = createBaseNode(278 /* ExportSpecifier */);
      node.isTypeOnly = isTypeOnly;
      node.propertyName = asName(propertyName);
      node.name = asName(name);
      node.transformFlags |= propagateChildFlags(node.propertyName) | propagateChildFlags(node.name);
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      node.jsDoc = void 0;
      return node;
    }
    function updateExportSpecifier(node, isTypeOnly, propertyName, name) {
      return node.isTypeOnly !== isTypeOnly || node.propertyName !== propertyName || node.name !== name ? update(createExportSpecifier(isTypeOnly, propertyName, name), node) : node;
    }
    function createMissingDeclaration() {
      const node = createBaseDeclaration(279 /* MissingDeclaration */);
      node.jsDoc = void 0;
      return node;
    }
    function createExternalModuleReference(expression) {
      const node = createBaseNode(280 /* ExternalModuleReference */);
      node.expression = expression;
      node.transformFlags |= propagateChildFlags(node.expression);
      node.transformFlags &= ~67108864 /* ContainsPossibleTopLevelAwait */;
      return node;
    }
    function updateExternalModuleReference(node, expression) {
      return node.expression !== expression ? update(createExternalModuleReference(expression), node) : node;
    }
    function createJSDocPrimaryTypeWorker(kind) {
      return createBaseNode(kind);
    }
    function createJSDocPrePostfixUnaryTypeWorker(kind, type, postfix = false) {
      const node = createJSDocUnaryTypeWorker(
        kind,
        postfix ? type && parenthesizerRules().parenthesizeNonArrayTypeOfPostfixType(type) : type
      );
      node.postfix = postfix;
      return node;
    }
    function createJSDocUnaryTypeWorker(kind, type) {
      const node = createBaseNode(kind);
      node.type = type;
      return node;
    }
    function updateJSDocPrePostfixUnaryTypeWorker(kind, node, type) {
      return node.type !== type ? update(createJSDocPrePostfixUnaryTypeWorker(kind, type, node.postfix), node) : node;
    }
    function updateJSDocUnaryTypeWorker(kind, node, type) {
      return node.type !== type ? update(createJSDocUnaryTypeWorker(kind, type), node) : node;
    }
    function createJSDocFunctionType(parameters, type) {
      const node = createBaseDeclaration(320 /* JSDocFunctionType */);
      node.parameters = asNodeArray(parameters);
      node.type = type;
      node.transformFlags = propagateChildrenFlags(node.parameters) | (node.type ? 1 /* ContainsTypeScript */ : 0 /* None */);
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      node.typeArguments = void 0;
      return node;
    }
    function updateJSDocFunctionType(node, parameters, type) {
      return node.parameters !== parameters || node.type !== type ? update(createJSDocFunctionType(parameters, type), node) : node;
    }
    function createJSDocTypeLiteral(propertyTags, isArrayType = false) {
      const node = createBaseDeclaration(325 /* JSDocTypeLiteral */);
      node.jsDocPropertyTags = asNodeArray(propertyTags);
      node.isArrayType = isArrayType;
      return node;
    }
    function updateJSDocTypeLiteral(node, propertyTags, isArrayType) {
      return node.jsDocPropertyTags !== propertyTags || node.isArrayType !== isArrayType ? update(createJSDocTypeLiteral(propertyTags, isArrayType), node) : node;
    }
    function createJSDocTypeExpression(type) {
      const node = createBaseNode(312 /* JSDocTypeExpression */);
      node.type = type;
      return node;
    }
    function updateJSDocTypeExpression(node, type) {
      return node.type !== type ? update(createJSDocTypeExpression(type), node) : node;
    }
    function createJSDocSignature(typeParameters, parameters, type) {
      const node = createBaseDeclaration(326 /* JSDocSignature */);
      node.typeParameters = asNodeArray(typeParameters);
      node.parameters = createNodeArray(parameters);
      node.type = type;
      node.jsDoc = void 0;
      node.locals = void 0;
      node.nextContainer = void 0;
      return node;
    }
    function updateJSDocSignature(node, typeParameters, parameters, type) {
      return node.typeParameters !== typeParameters || node.parameters !== parameters || node.type !== type ? update(createJSDocSignature(typeParameters, parameters, type), node) : node;
    }
    function getDefaultTagName(node) {
      const defaultTagName = getDefaultTagNameForKind(node.kind);
      return node.tagName.escapedText === escapeLeadingUnderscores(defaultTagName) ? node.tagName : createIdentifier(defaultTagName);
    }
    function createBaseJSDocTag(kind, tagName, comment) {
      const node = createBaseNode(kind);
      node.tagName = tagName;
      node.comment = comment;
      return node;
    }
    function createBaseJSDocTagDeclaration(kind, tagName, comment) {
      const node = createBaseDeclaration(kind);
      node.tagName = tagName;
      node.comment = comment;
      return node;
    }
    function createJSDocTemplateTag(tagName, constraint, typeParameters, comment) {
      const node = createBaseJSDocTag(348 /* JSDocTemplateTag */, tagName != null ? tagName : createIdentifier("template"), comment);
      node.constraint = constraint;
      node.typeParameters = createNodeArray(typeParameters);
      return node;
    }
    function updateJSDocTemplateTag(node, tagName = getDefaultTagName(node), constraint, typeParameters, comment) {
      return node.tagName !== tagName || node.constraint !== constraint || node.typeParameters !== typeParameters || node.comment !== comment ? update(createJSDocTemplateTag(tagName, constraint, typeParameters, comment), node) : node;
    }
    function createJSDocTypedefTag(tagName, typeExpression, fullName, comment) {
      const node = createBaseJSDocTagDeclaration(349 /* JSDocTypedefTag */, tagName != null ? tagName : createIdentifier("typedef"), comment);
      node.typeExpression = typeExpression;
      node.fullName = fullName;
      node.name = getJSDocTypeAliasName(fullName);
      node.locals = void 0;
      node.nextContainer = void 0;
      return node;
    }
    function updateJSDocTypedefTag(node, tagName = getDefaultTagName(node), typeExpression, fullName, comment) {
      return node.tagName !== tagName || node.typeExpression !== typeExpression || node.fullName !== fullName || node.comment !== comment ? update(createJSDocTypedefTag(tagName, typeExpression, fullName, comment), node) : node;
    }
    function createJSDocParameterTag(tagName, name, isBracketed, typeExpression, isNameFirst, comment) {
      const node = createBaseJSDocTagDeclaration(344 /* JSDocParameterTag */, tagName != null ? tagName : createIdentifier("param"), comment);
      node.typeExpression = typeExpression;
      node.name = name;
      node.isNameFirst = !!isNameFirst;
      node.isBracketed = isBracketed;
      return node;
    }
    function updateJSDocParameterTag(node, tagName = getDefaultTagName(node), name, isBracketed, typeExpression, isNameFirst, comment) {
      return node.tagName !== tagName || node.name !== name || node.isBracketed !== isBracketed || node.typeExpression !== typeExpression || node.isNameFirst !== isNameFirst || node.comment !== comment ? update(createJSDocParameterTag(tagName, name, isBracketed, typeExpression, isNameFirst, comment), node) : node;
    }
    function createJSDocPropertyTag(tagName, name, isBracketed, typeExpression, isNameFirst, comment) {
      const node = createBaseJSDocTagDeclaration(351 /* JSDocPropertyTag */, tagName != null ? tagName : createIdentifier("prop"), comment);
      node.typeExpression = typeExpression;
      node.name = name;
      node.isNameFirst = !!isNameFirst;
      node.isBracketed = isBracketed;
      return node;
    }
    function updateJSDocPropertyTag(node, tagName = getDefaultTagName(node), name, isBracketed, typeExpression, isNameFirst, comment) {
      return node.tagName !== tagName || node.name !== name || node.isBracketed !== isBracketed || node.typeExpression !== typeExpression || node.isNameFirst !== isNameFirst || node.comment !== comment ? update(createJSDocPropertyTag(tagName, name, isBracketed, typeExpression, isNameFirst, comment), node) : node;
    }
    function createJSDocCallbackTag(tagName, typeExpression, fullName, comment) {
      const node = createBaseJSDocTagDeclaration(341 /* JSDocCallbackTag */, tagName != null ? tagName : createIdentifier("callback"), comment);
      node.typeExpression = typeExpression;
      node.fullName = fullName;
      node.name = getJSDocTypeAliasName(fullName);
      node.locals = void 0;
      node.nextContainer = void 0;
      return node;
    }
    function updateJSDocCallbackTag(node, tagName = getDefaultTagName(node), typeExpression, fullName, comment) {
      return node.tagName !== tagName || node.typeExpression !== typeExpression || node.fullName !== fullName || node.comment !== comment ? update(createJSDocCallbackTag(tagName, typeExpression, fullName, comment), node) : node;
    }
    function createJSDocOverloadTag(tagName, typeExpression, comment) {
      const node = createBaseJSDocTag(342 /* JSDocOverloadTag */, tagName != null ? tagName : createIdentifier("overload"), comment);
      node.typeExpression = typeExpression;
      return node;
    }
    function updateJSDocOverloadTag(node, tagName = getDefaultTagName(node), typeExpression, comment) {
      return node.tagName !== tagName || node.typeExpression !== typeExpression || node.comment !== comment ? update(createJSDocOverloadTag(tagName, typeExpression, comment), node) : node;
    }
    function createJSDocAugmentsTag(tagName, className, comment) {
      const node = createBaseJSDocTag(331 /* JSDocAugmentsTag */, tagName != null ? tagName : createIdentifier("augments"), comment);
      node.class = className;
      return node;
    }
    function updateJSDocAugmentsTag(node, tagName = getDefaultTagName(node), className, comment) {
      return node.tagName !== tagName || node.class !== className || node.comment !== comment ? update(createJSDocAugmentsTag(tagName, className, comment), node) : node;
    }
    function createJSDocImplementsTag(tagName, className, comment) {
      const node = createBaseJSDocTag(332 /* JSDocImplementsTag */, tagName != null ? tagName : createIdentifier("implements"), comment);
      node.class = className;
      return node;
    }
    function createJSDocSeeTag(tagName, name, comment) {
      const node = createBaseJSDocTag(350 /* JSDocSeeTag */, tagName != null ? tagName : createIdentifier("see"), comment);
      node.name = name;
      return node;
    }
    function updateJSDocSeeTag(node, tagName, name, comment) {
      return node.tagName !== tagName || node.name !== name || node.comment !== comment ? update(createJSDocSeeTag(tagName, name, comment), node) : node;
    }
    function createJSDocNameReference(name) {
      const node = createBaseNode(313 /* JSDocNameReference */);
      node.name = name;
      return node;
    }
    function updateJSDocNameReference(node, name) {
      return node.name !== name ? update(createJSDocNameReference(name), node) : node;
    }
    function createJSDocMemberName(left, right) {
      const node = createBaseNode(314 /* JSDocMemberName */);
      node.left = left;
      node.right = right;
      node.transformFlags |= propagateChildFlags(node.left) | propagateChildFlags(node.right);
      return node;
    }
    function updateJSDocMemberName(node, left, right) {
      return node.left !== left || node.right !== right ? update(createJSDocMemberName(left, right), node) : node;
    }
    function createJSDocLink(name, text) {
      const node = createBaseNode(327 /* JSDocLink */);
      node.name = name;
      node.text = text;
      return node;
    }
    function updateJSDocLink(node, name, text) {
      return node.name !== name ? update(createJSDocLink(name, text), node) : node;
    }
    function createJSDocLinkCode(name, text) {
      const node = createBaseNode(328 /* JSDocLinkCode */);
      node.name = name;
      node.text = text;
      return node;
    }
    function updateJSDocLinkCode(node, name, text) {
      return node.name !== name ? update(createJSDocLinkCode(name, text), node) : node;
    }
    function createJSDocLinkPlain(name, text) {
      const node = createBaseNode(329 /* JSDocLinkPlain */);
      node.name = name;
      node.text = text;
      return node;
    }
    function updateJSDocLinkPlain(node, name, text) {
      return node.name !== name ? update(createJSDocLinkPlain(name, text), node) : node;
    }
    function updateJSDocImplementsTag(node, tagName = getDefaultTagName(node), className, comment) {
      return node.tagName !== tagName || node.class !== className || node.comment !== comment ? update(createJSDocImplementsTag(tagName, className, comment), node) : node;
    }
    function createJSDocSimpleTagWorker(kind, tagName, comment) {
      const node = createBaseJSDocTag(kind, tagName != null ? tagName : createIdentifier(getDefaultTagNameForKind(kind)), comment);
      return node;
    }
    function updateJSDocSimpleTagWorker(kind, node, tagName = getDefaultTagName(node), comment) {
      return node.tagName !== tagName || node.comment !== comment ? update(createJSDocSimpleTagWorker(kind, tagName, comment), node) : node;
    }
    function createJSDocTypeLikeTagWorker(kind, tagName, typeExpression, comment) {
      const node = createBaseJSDocTag(kind, tagName != null ? tagName : createIdentifier(getDefaultTagNameForKind(kind)), comment);
      node.typeExpression = typeExpression;
      return node;
    }
    function updateJSDocTypeLikeTagWorker(kind, node, tagName = getDefaultTagName(node), typeExpression, comment) {
      return node.tagName !== tagName || node.typeExpression !== typeExpression || node.comment !== comment ? update(createJSDocTypeLikeTagWorker(kind, tagName, typeExpression, comment), node) : node;
    }
    function createJSDocUnknownTag(tagName, comment) {
      const node = createBaseJSDocTag(330 /* JSDocTag */, tagName, comment);
      return node;
    }
    function updateJSDocUnknownTag(node, tagName, comment) {
      return node.tagName !== tagName || node.comment !== comment ? update(createJSDocUnknownTag(tagName, comment), node) : node;
    }
    function createJSDocEnumTag(tagName, typeExpression, comment) {
      const node = createBaseJSDocTagDeclaration(343 /* JSDocEnumTag */, tagName != null ? tagName : createIdentifier(getDefaultTagNameForKind(343 /* JSDocEnumTag */)), comment);
      node.typeExpression = typeExpression;
      node.locals = void 0;
      node.nextContainer = void 0;
      return node;
    }
    function updateJSDocEnumTag(node, tagName = getDefaultTagName(node), typeExpression, comment) {
      return node.tagName !== tagName || node.typeExpression !== typeExpression || node.comment !== comment ? update(createJSDocEnumTag(tagName, typeExpression, comment), node) : node;
    }
    function createJSDocText(text) {
      const node = createBaseNode(324 /* JSDocText */);
      node.text = text;
      return node;
    }
    function updateJSDocText(node, text) {
      return node.text !== text ? update(createJSDocText(text), node) : node;
    }
    function createJSDocComment(comment, tags) {
      const node = createBaseNode(323 /* JSDoc */);
      node.comment = comment;
      node.tags = asNodeArray(tags);
      return node;
    }
    function updateJSDocComment(node, comment, tags) {
      return node.comment !== comment || node.tags !== tags ? update(createJSDocComment(comment, tags), node) : node;
    }
    function createJsxElement(openingElement, children, closingElement) {
      const node = createBaseNode(281 /* JsxElement */);
      node.openingElement = openingElement;
      node.children = createNodeArray(children);
      node.closingElement = closingElement;
      node.transformFlags |= propagateChildFlags(node.openingElement) | propagateChildrenFlags(node.children) | propagateChildFlags(node.closingElement) | 2 /* ContainsJsx */;
      return node;
    }
    function updateJsxElement(node, openingElement, children, closingElement) {
      return node.openingElement !== openingElement || node.children !== children || node.closingElement !== closingElement ? update(createJsxElement(openingElement, children, closingElement), node) : node;
    }
    function createJsxSelfClosingElement(tagName, typeArguments, attributes) {
      const node = createBaseNode(282 /* JsxSelfClosingElement */);
      node.tagName = tagName;
      node.typeArguments = asNodeArray(typeArguments);
      node.attributes = attributes;
      node.transformFlags |= propagateChildFlags(node.tagName) | propagateChildrenFlags(node.typeArguments) | propagateChildFlags(node.attributes) | 2 /* ContainsJsx */;
      if (node.typeArguments) {
        node.transformFlags |= 1 /* ContainsTypeScript */;
      }
      return node;
    }
    function updateJsxSelfClosingElement(node, tagName, typeArguments, attributes) {
      return node.tagName !== tagName || node.typeArguments !== typeArguments || node.attributes !== attributes ? update(createJsxSelfClosingElement(tagName, typeArguments, attributes), node) : node;
    }
    function createJsxOpeningElement(tagName, typeArguments, attributes) {
      const node = createBaseNode(283 /* JsxOpeningElement */);
      node.tagName = tagName;
      node.typeArguments = asNodeArray(typeArguments);
      node.attributes = attributes;
      node.transformFlags |= propagateChildFlags(node.tagName) | propagateChildrenFlags(node.typeArguments) | propagateChildFlags(node.attributes) | 2 /* ContainsJsx */;
      if (typeArguments) {
        node.transformFlags |= 1 /* ContainsTypeScript */;
      }
      return node;
    }
    function updateJsxOpeningElement(node, tagName, typeArguments, attributes) {
      return node.tagName !== tagName || node.typeArguments !== typeArguments || node.attributes !== attributes ? update(createJsxOpeningElement(tagName, typeArguments, attributes), node) : node;
    }
    function createJsxClosingElement(tagName) {
      const node = createBaseNode(284 /* JsxClosingElement */);
      node.tagName = tagName;
      node.transformFlags |= propagateChildFlags(node.tagName) | 2 /* ContainsJsx */;
      return node;
    }
    function updateJsxClosingElement(node, tagName) {
      return node.tagName !== tagName ? update(createJsxClosingElement(tagName), node) : node;
    }
    function createJsxFragment(openingFragment, children, closingFragment) {
      const node = createBaseNode(285 /* JsxFragment */);
      node.openingFragment = openingFragment;
      node.children = createNodeArray(children);
      node.closingFragment = closingFragment;
      node.transformFlags |= propagateChildFlags(node.openingFragment) | propagateChildrenFlags(node.children) | propagateChildFlags(node.closingFragment) | 2 /* ContainsJsx */;
      return node;
    }
    function updateJsxFragment(node, openingFragment, children, closingFragment) {
      return node.openingFragment !== openingFragment || node.children !== children || node.closingFragment !== closingFragment ? update(createJsxFragment(openingFragment, children, closingFragment), node) : node;
    }
    function createJsxText(text, containsOnlyTriviaWhiteSpaces) {
      const node = createBaseNode(11 /* JsxText */);
      node.text = text;
      node.containsOnlyTriviaWhiteSpaces = !!containsOnlyTriviaWhiteSpaces;
      node.transformFlags |= 2 /* ContainsJsx */;
      return node;
    }
    function updateJsxText(node, text, containsOnlyTriviaWhiteSpaces) {
      return node.text !== text || node.containsOnlyTriviaWhiteSpaces !== containsOnlyTriviaWhiteSpaces ? update(createJsxText(text, containsOnlyTriviaWhiteSpaces), node) : node;
    }
    function createJsxOpeningFragment() {
      const node = createBaseNode(286 /* JsxOpeningFragment */);
      node.transformFlags |= 2 /* ContainsJsx */;
      return node;
    }
    function createJsxJsxClosingFragment() {
      const node = createBaseNode(287 /* JsxClosingFragment */);
      node.transformFlags |= 2 /* ContainsJsx */;
      return node;
    }
    function createJsxAttribute(name, initializer) {
      const node = createBaseDeclaration(288 /* JsxAttribute */);
      node.name = name;
      node.initializer = initializer;
      node.transformFlags |= propagateChildFlags(node.name) | propagateChildFlags(node.initializer) | 2 /* ContainsJsx */;
      return node;
    }
    function updateJsxAttribute(node, name, initializer) {
      return node.name !== name || node.initializer !== initializer ? update(createJsxAttribute(name, initializer), node) : node;
    }
    function createJsxAttributes(properties) {
      const node = createBaseDeclaration(289 /* JsxAttributes */);
      node.properties = createNodeArray(properties);
      node.transformFlags |= propagateChildrenFlags(node.properties) | 2 /* ContainsJsx */;
      return node;
    }
    function updateJsxAttributes(node, properties) {
      return node.properties !== properties ? update(createJsxAttributes(properties), node) : node;
    }
    function createJsxSpreadAttribute(expression) {
      const node = createBaseNode(290 /* JsxSpreadAttribute */);
      node.expression = expression;
      node.transformFlags |= propagateChildFlags(node.expression) | 2 /* ContainsJsx */;
      return node;
    }
    function updateJsxSpreadAttribute(node, expression) {
      return node.expression !== expression ? update(createJsxSpreadAttribute(expression), node) : node;
    }
    function createJsxExpression(dotDotDotToken, expression) {
      const node = createBaseNode(291 /* JsxExpression */);
      node.dotDotDotToken = dotDotDotToken;
      node.expression = expression;
      node.transformFlags |= propagateChildFlags(node.dotDotDotToken) | propagateChildFlags(node.expression) | 2 /* ContainsJsx */;
      return node;
    }
    function updateJsxExpression(node, expression) {
      return node.expression !== expression ? update(createJsxExpression(node.dotDotDotToken, expression), node) : node;
    }
    function createCaseClause(expression, statements) {
      const node = createBaseNode(292 /* CaseClause */);
      node.expression = parenthesizerRules().parenthesizeExpressionForDisallowedComma(expression);
      node.statements = createNodeArray(statements);
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildrenFlags(node.statements);
      node.jsDoc = void 0;
      return node;
    }
    function updateCaseClause(node, expression, statements) {
      return node.expression !== expression || node.statements !== statements ? update(createCaseClause(expression, statements), node) : node;
    }
    function createDefaultClause(statements) {
      const node = createBaseNode(293 /* DefaultClause */);
      node.statements = createNodeArray(statements);
      node.transformFlags = propagateChildrenFlags(node.statements);
      return node;
    }
    function updateDefaultClause(node, statements) {
      return node.statements !== statements ? update(createDefaultClause(statements), node) : node;
    }
    function createHeritageClause(token, types) {
      const node = createBaseNode(294 /* HeritageClause */);
      node.token = token;
      node.types = createNodeArray(types);
      node.transformFlags |= propagateChildrenFlags(node.types);
      switch (token) {
        case 94 /* ExtendsKeyword */:
          node.transformFlags |= 1024 /* ContainsES2015 */;
          break;
        case 117 /* ImplementsKeyword */:
          node.transformFlags |= 1 /* ContainsTypeScript */;
          break;
        default:
          return Debug.assertNever(token);
      }
      return node;
    }
    function updateHeritageClause(node, types) {
      return node.types !== types ? update(createHeritageClause(node.token, types), node) : node;
    }
    function createCatchClause(variableDeclaration, block) {
      const node = createBaseNode(295 /* CatchClause */);
      node.variableDeclaration = asVariableDeclaration(variableDeclaration);
      node.block = block;
      node.transformFlags |= propagateChildFlags(node.variableDeclaration) | propagateChildFlags(node.block) | (!variableDeclaration ? 64 /* ContainsES2019 */ : 0 /* None */);
      node.locals = void 0;
      node.nextContainer = void 0;
      return node;
    }
    function updateCatchClause(node, variableDeclaration, block) {
      return node.variableDeclaration !== variableDeclaration || node.block !== block ? update(createCatchClause(variableDeclaration, block), node) : node;
    }
    function createPropertyAssignment(name, initializer) {
      const node = createBaseDeclaration(299 /* PropertyAssignment */);
      node.name = asName(name);
      node.initializer = parenthesizerRules().parenthesizeExpressionForDisallowedComma(initializer);
      node.transformFlags |= propagateNameFlags(node.name) | propagateChildFlags(node.initializer);
      node.modifiers = void 0;
      node.questionToken = void 0;
      node.exclamationToken = void 0;
      node.jsDoc = void 0;
      return node;
    }
    function updatePropertyAssignment(node, name, initializer) {
      return node.name !== name || node.initializer !== initializer ? finishUpdatePropertyAssignment(createPropertyAssignment(name, initializer), node) : node;
    }
    function finishUpdatePropertyAssignment(updated, original) {
      if (updated !== original) {
        updated.modifiers = original.modifiers;
        updated.questionToken = original.questionToken;
        updated.exclamationToken = original.exclamationToken;
      }
      return update(updated, original);
    }
    function createShorthandPropertyAssignment(name, objectAssignmentInitializer) {
      const node = createBaseDeclaration(300 /* ShorthandPropertyAssignment */);
      node.name = asName(name);
      node.objectAssignmentInitializer = objectAssignmentInitializer && parenthesizerRules().parenthesizeExpressionForDisallowedComma(objectAssignmentInitializer);
      node.transformFlags |= propagateIdentifierNameFlags(node.name) | propagateChildFlags(node.objectAssignmentInitializer) | 1024 /* ContainsES2015 */;
      node.equalsToken = void 0;
      node.modifiers = void 0;
      node.questionToken = void 0;
      node.exclamationToken = void 0;
      node.jsDoc = void 0;
      return node;
    }
    function updateShorthandPropertyAssignment(node, name, objectAssignmentInitializer) {
      return node.name !== name || node.objectAssignmentInitializer !== objectAssignmentInitializer ? finishUpdateShorthandPropertyAssignment(createShorthandPropertyAssignment(name, objectAssignmentInitializer), node) : node;
    }
    function finishUpdateShorthandPropertyAssignment(updated, original) {
      if (updated !== original) {
        updated.modifiers = original.modifiers;
        updated.questionToken = original.questionToken;
        updated.exclamationToken = original.exclamationToken;
        updated.equalsToken = original.equalsToken;
      }
      return update(updated, original);
    }
    function createSpreadAssignment(expression) {
      const node = createBaseDeclaration(301 /* SpreadAssignment */);
      node.expression = parenthesizerRules().parenthesizeExpressionForDisallowedComma(expression);
      node.transformFlags |= propagateChildFlags(node.expression) | 128 /* ContainsES2018 */ | 65536 /* ContainsObjectRestOrSpread */;
      node.jsDoc = void 0;
      return node;
    }
    function updateSpreadAssignment(node, expression) {
      return node.expression !== expression ? update(createSpreadAssignment(expression), node) : node;
    }
    function createEnumMember(name, initializer) {
      const node = createBaseDeclaration(302 /* EnumMember */);
      node.name = asName(name);
      node.initializer = initializer && parenthesizerRules().parenthesizeExpressionForDisallowedComma(initializer);
      node.transformFlags |= propagateChildFlags(node.name) | propagateChildFlags(node.initializer) | 1 /* ContainsTypeScript */;
      node.jsDoc = void 0;
      return node;
    }
    function updateEnumMember(node, name, initializer) {
      return node.name !== name || node.initializer !== initializer ? update(createEnumMember(name, initializer), node) : node;
    }
    function createSourceFile2(statements, endOfFileToken, flags2) {
      const node = baseFactory2.createBaseSourceFileNode(308 /* SourceFile */);
      node.statements = createNodeArray(statements);
      node.endOfFileToken = endOfFileToken;
      node.flags |= flags2;
      node.text = "";
      node.fileName = "";
      node.path = "";
      node.resolvedPath = "";
      node.originalFileName = "";
      node.languageVersion = 0;
      node.languageVariant = 0;
      node.scriptKind = 0;
      node.isDeclarationFile = false;
      node.hasNoDefaultLib = false;
      node.transformFlags |= propagateChildrenFlags(node.statements) | propagateChildFlags(node.endOfFileToken);
      node.locals = void 0;
      node.nextContainer = void 0;
      node.endFlowNode = void 0;
      node.nodeCount = 0;
      node.identifierCount = 0;
      node.symbolCount = 0;
      node.parseDiagnostics = void 0;
      node.bindDiagnostics = void 0;
      node.bindSuggestionDiagnostics = void 0;
      node.lineMap = void 0;
      node.externalModuleIndicator = void 0;
      node.setExternalModuleIndicator = void 0;
      node.pragmas = void 0;
      node.checkJsDirective = void 0;
      node.referencedFiles = void 0;
      node.typeReferenceDirectives = void 0;
      node.libReferenceDirectives = void 0;
      node.amdDependencies = void 0;
      node.commentDirectives = void 0;
      node.identifiers = void 0;
      node.packageJsonLocations = void 0;
      node.packageJsonScope = void 0;
      node.imports = void 0;
      node.moduleAugmentations = void 0;
      node.ambientModuleNames = void 0;
      node.resolvedModules = void 0;
      node.classifiableNames = void 0;
      node.impliedNodeFormat = void 0;
      return node;
    }
    function createRedirectedSourceFile(redirectInfo) {
      const node = Object.create(redirectInfo.redirectTarget);
      Object.defineProperties(node, {
        id: {
          get() {
            return this.redirectInfo.redirectTarget.id;
          },
          set(value) {
            this.redirectInfo.redirectTarget.id = value;
          }
        },
        symbol: {
          get() {
            return this.redirectInfo.redirectTarget.symbol;
          },
          set(value) {
            this.redirectInfo.redirectTarget.symbol = value;
          }
        }
      });
      node.redirectInfo = redirectInfo;
      return node;
    }
    function cloneRedirectedSourceFile(source) {
      const node = createRedirectedSourceFile(source.redirectInfo);
      node.flags |= source.flags & ~8 /* Synthesized */;
      node.fileName = source.fileName;
      node.path = source.path;
      node.resolvedPath = source.resolvedPath;
      node.originalFileName = source.originalFileName;
      node.packageJsonLocations = source.packageJsonLocations;
      node.packageJsonScope = source.packageJsonScope;
      node.emitNode = void 0;
      return node;
    }
    function cloneSourceFileWorker(source) {
      const node = baseFactory2.createBaseSourceFileNode(308 /* SourceFile */);
      node.flags |= source.flags & ~8 /* Synthesized */;
      for (const p in source) {
        if (hasProperty(node, p) || !hasProperty(source, p)) {
          continue;
        }
        if (p === "emitNode") {
          node.emitNode = void 0;
          continue;
        }
        node[p] = source[p];
      }
      return node;
    }
    function cloneSourceFile(source) {
      const node = source.redirectInfo ? cloneRedirectedSourceFile(source) : cloneSourceFileWorker(source);
      setOriginalNode(node, source);
      return node;
    }
    function cloneSourceFileWithChanges(source, statements, isDeclarationFile, referencedFiles, typeReferences, hasNoDefaultLib, libReferences) {
      const node = cloneSourceFile(source);
      node.statements = createNodeArray(statements);
      node.isDeclarationFile = isDeclarationFile;
      node.referencedFiles = referencedFiles;
      node.typeReferenceDirectives = typeReferences;
      node.hasNoDefaultLib = hasNoDefaultLib;
      node.libReferenceDirectives = libReferences;
      node.transformFlags = propagateChildrenFlags(node.statements) | propagateChildFlags(node.endOfFileToken);
      return node;
    }
    function updateSourceFile2(node, statements, isDeclarationFile = node.isDeclarationFile, referencedFiles = node.referencedFiles, typeReferenceDirectives = node.typeReferenceDirectives, hasNoDefaultLib = node.hasNoDefaultLib, libReferenceDirectives = node.libReferenceDirectives) {
      return node.statements !== statements || node.isDeclarationFile !== isDeclarationFile || node.referencedFiles !== referencedFiles || node.typeReferenceDirectives !== typeReferenceDirectives || node.hasNoDefaultLib !== hasNoDefaultLib || node.libReferenceDirectives !== libReferenceDirectives ? update(cloneSourceFileWithChanges(node, statements, isDeclarationFile, referencedFiles, typeReferenceDirectives, hasNoDefaultLib, libReferenceDirectives), node) : node;
    }
    function createBundle(sourceFiles, prepends = emptyArray) {
      const node = createBaseNode(309 /* Bundle */);
      node.prepends = prepends;
      node.sourceFiles = sourceFiles;
      node.syntheticFileReferences = void 0;
      node.syntheticTypeReferences = void 0;
      node.syntheticLibReferences = void 0;
      node.hasNoDefaultLib = void 0;
      return node;
    }
    function updateBundle(node, sourceFiles, prepends = emptyArray) {
      return node.sourceFiles !== sourceFiles || node.prepends !== prepends ? update(createBundle(sourceFiles, prepends), node) : node;
    }
    function createUnparsedSource(prologues, syntheticReferences, texts) {
      const node = createBaseNode(310 /* UnparsedSource */);
      node.prologues = prologues;
      node.syntheticReferences = syntheticReferences;
      node.texts = texts;
      node.fileName = "";
      node.text = "";
      node.referencedFiles = emptyArray;
      node.libReferenceDirectives = emptyArray;
      node.getLineAndCharacterOfPosition = (pos) => getLineAndCharacterOfPosition(node, pos);
      return node;
    }
    function createBaseUnparsedNode(kind, data) {
      const node = createBaseNode(kind);
      node.data = data;
      return node;
    }
    function createUnparsedPrologue(data) {
      return createBaseUnparsedNode(303 /* UnparsedPrologue */, data);
    }
    function createUnparsedPrepend(data, texts) {
      const node = createBaseUnparsedNode(304 /* UnparsedPrepend */, data);
      node.texts = texts;
      return node;
    }
    function createUnparsedTextLike(data, internal) {
      return createBaseUnparsedNode(internal ? 306 /* UnparsedInternalText */ : 305 /* UnparsedText */, data);
    }
    function createUnparsedSyntheticReference(section) {
      const node = createBaseNode(307 /* UnparsedSyntheticReference */);
      node.data = section.data;
      node.section = section;
      return node;
    }
    function createInputFiles2() {
      const node = createBaseNode(311 /* InputFiles */);
      node.javascriptText = "";
      node.declarationText = "";
      return node;
    }
    function createSyntheticExpression(type, isSpread = false, tupleNameSource) {
      const node = createBaseNode(234 /* SyntheticExpression */);
      node.type = type;
      node.isSpread = isSpread;
      node.tupleNameSource = tupleNameSource;
      return node;
    }
    function createSyntaxList3(children) {
      const node = createBaseNode(354 /* SyntaxList */);
      node._children = children;
      return node;
    }
    function createNotEmittedStatement(original) {
      const node = createBaseNode(355 /* NotEmittedStatement */);
      node.original = original;
      setTextRange(node, original);
      return node;
    }
    function createPartiallyEmittedExpression(expression, original) {
      const node = createBaseNode(356 /* PartiallyEmittedExpression */);
      node.expression = expression;
      node.original = original;
      node.transformFlags |= propagateChildFlags(node.expression) | 1 /* ContainsTypeScript */;
      setTextRange(node, original);
      return node;
    }
    function updatePartiallyEmittedExpression(node, expression) {
      return node.expression !== expression ? update(createPartiallyEmittedExpression(expression, node.original), node) : node;
    }
    function flattenCommaElements(node) {
      if (nodeIsSynthesized(node) && !isParseTreeNode(node) && !node.original && !node.emitNode && !node.id) {
        if (isCommaListExpression(node)) {
          return node.elements;
        }
        if (isBinaryExpression(node) && isCommaToken(node.operatorToken)) {
          return [node.left, node.right];
        }
      }
      return node;
    }
    function createCommaListExpression(elements) {
      const node = createBaseNode(357 /* CommaListExpression */);
      node.elements = createNodeArray(sameFlatMap(elements, flattenCommaElements));
      node.transformFlags |= propagateChildrenFlags(node.elements);
      return node;
    }
    function updateCommaListExpression(node, elements) {
      return node.elements !== elements ? update(createCommaListExpression(elements), node) : node;
    }
    function createEndOfDeclarationMarker(original) {
      const node = createBaseNode(359 /* EndOfDeclarationMarker */);
      node.emitNode = {};
      node.original = original;
      return node;
    }
    function createMergeDeclarationMarker(original) {
      const node = createBaseNode(358 /* MergeDeclarationMarker */);
      node.emitNode = {};
      node.original = original;
      return node;
    }
    function createSyntheticReferenceExpression(expression, thisArg) {
      const node = createBaseNode(360 /* SyntheticReferenceExpression */);
      node.expression = expression;
      node.thisArg = thisArg;
      node.transformFlags |= propagateChildFlags(node.expression) | propagateChildFlags(node.thisArg);
      return node;
    }
    function updateSyntheticReferenceExpression(node, expression, thisArg) {
      return node.expression !== expression || node.thisArg !== thisArg ? update(createSyntheticReferenceExpression(expression, thisArg), node) : node;
    }
    function cloneGeneratedIdentifier(node) {
      const clone2 = createBaseIdentifier(node.escapedText);
      clone2.flags |= node.flags & ~8 /* Synthesized */;
      clone2.transformFlags = node.transformFlags;
      setOriginalNode(clone2, node);
      setIdentifierAutoGenerate(clone2, { ...node.emitNode.autoGenerate });
      return clone2;
    }
    function cloneIdentifier(node) {
      const clone2 = createBaseIdentifier(node.escapedText);
      clone2.flags |= node.flags & ~8 /* Synthesized */;
      clone2.jsDoc = node.jsDoc;
      clone2.flowNode = node.flowNode;
      clone2.symbol = node.symbol;
      clone2.transformFlags = node.transformFlags;
      setOriginalNode(clone2, node);
      const typeArguments = getIdentifierTypeArguments(node);
      if (typeArguments)
        setIdentifierTypeArguments(clone2, typeArguments);
      return clone2;
    }
    function cloneGeneratedPrivateIdentifier(node) {
      const clone2 = createBasePrivateIdentifier(node.escapedText);
      clone2.flags |= node.flags & ~8 /* Synthesized */;
      clone2.transformFlags = node.transformFlags;
      setOriginalNode(clone2, node);
      setIdentifierAutoGenerate(clone2, { ...node.emitNode.autoGenerate });
      return clone2;
    }
    function clonePrivateIdentifier(node) {
      const clone2 = createBasePrivateIdentifier(node.escapedText);
      clone2.flags |= node.flags & ~8 /* Synthesized */;
      clone2.transformFlags = node.transformFlags;
      setOriginalNode(clone2, node);
      return clone2;
    }
    function cloneNode(node) {
      if (node === void 0) {
        return node;
      }
      if (isSourceFile(node)) {
        return cloneSourceFile(node);
      }
      if (isGeneratedIdentifier(node)) {
        return cloneGeneratedIdentifier(node);
      }
      if (isIdentifier(node)) {
        return cloneIdentifier(node);
      }
      if (isGeneratedPrivateIdentifier(node)) {
        return cloneGeneratedPrivateIdentifier(node);
      }
      if (isPrivateIdentifier(node)) {
        return clonePrivateIdentifier(node);
      }
      const clone2 = !isNodeKind(node.kind) ? baseFactory2.createBaseTokenNode(node.kind) : baseFactory2.createBaseNode(node.kind);
      clone2.flags |= node.flags & ~8 /* Synthesized */;
      clone2.transformFlags = node.transformFlags;
      setOriginalNode(clone2, node);
      for (const key in node) {
        if (hasProperty(clone2, key) || !hasProperty(node, key)) {
          continue;
        }
        clone2[key] = node[key];
      }
      return clone2;
    }
    function createImmediatelyInvokedFunctionExpression(statements, param, paramValue) {
      return createCallExpression(
        createFunctionExpression(
          /*modifiers*/
          void 0,
          /*asteriskToken*/
          void 0,
          /*name*/
          void 0,
          /*typeParameters*/
          void 0,
          /*parameters*/
          param ? [param] : [],
          /*type*/
          void 0,
          createBlock(
            statements,
            /*multiLine*/
            true
          )
        ),
        /*typeArguments*/
        void 0,
        /*argumentsArray*/
        paramValue ? [paramValue] : []
      );
    }
    function createImmediatelyInvokedArrowFunction(statements, param, paramValue) {
      return createCallExpression(
        createArrowFunction(
          /*modifiers*/
          void 0,
          /*typeParameters*/
          void 0,
          /*parameters*/
          param ? [param] : [],
          /*type*/
          void 0,
          /*equalsGreaterThanToken*/
          void 0,
          createBlock(
            statements,
            /*multiLine*/
            true
          )
        ),
        /*typeArguments*/
        void 0,
        /*argumentsArray*/
        paramValue ? [paramValue] : []
      );
    }
    function createVoidZero() {
      return createVoidExpression(createNumericLiteral("0"));
    }
    function createExportDefault(expression) {
      return createExportAssignment2(
        /*modifiers*/
        void 0,
        /*isExportEquals*/
        false,
        expression
      );
    }
    function createExternalModuleExport(exportName) {
      return createExportDeclaration(
        /*modifiers*/
        void 0,
        /*isTypeOnly*/
        false,
        createNamedExports([
          createExportSpecifier(
            /*isTypeOnly*/
            false,
            /*propertyName*/
            void 0,
            exportName
          )
        ])
      );
    }
    function createTypeCheck(value, tag) {
      return tag === "undefined" ? factory2.createStrictEquality(value, createVoidZero()) : factory2.createStrictEquality(createTypeOfExpression(value), createStringLiteral(tag));
    }
    function createMethodCall(object, methodName, argumentsList) {
      if (isCallChain(object)) {
        return createCallChain(
          createPropertyAccessChain(
            object,
            /*questionDotToken*/
            void 0,
            methodName
          ),
          /*questionDotToken*/
          void 0,
          /*typeArguments*/
          void 0,
          argumentsList
        );
      }
      return createCallExpression(
        createPropertyAccessExpression(object, methodName),
        /*typeArguments*/
        void 0,
        argumentsList
      );
    }
    function createFunctionBindCall(target, thisArg, argumentsList) {
      return createMethodCall(target, "bind", [thisArg, ...argumentsList]);
    }
    function createFunctionCallCall(target, thisArg, argumentsList) {
      return createMethodCall(target, "call", [thisArg, ...argumentsList]);
    }
    function createFunctionApplyCall(target, thisArg, argumentsExpression) {
      return createMethodCall(target, "apply", [thisArg, argumentsExpression]);
    }
    function createGlobalMethodCall(globalObjectName, methodName, argumentsList) {
      return createMethodCall(createIdentifier(globalObjectName), methodName, argumentsList);
    }
    function createArraySliceCall(array, start) {
      return createMethodCall(array, "slice", start === void 0 ? [] : [asExpression(start)]);
    }
    function createArrayConcatCall(array, argumentsList) {
      return createMethodCall(array, "concat", argumentsList);
    }
    function createObjectDefinePropertyCall(target, propertyName, attributes) {
      return createGlobalMethodCall("Object", "defineProperty", [target, asExpression(propertyName), attributes]);
    }
    function createObjectGetOwnPropertyDescriptorCall(target, propertyName) {
      return createGlobalMethodCall("Object", "getOwnPropertyDescriptor", [target, asExpression(propertyName)]);
    }
    function createReflectGetCall(target, propertyKey, receiver) {
      return createGlobalMethodCall("Reflect", "get", receiver ? [target, propertyKey, receiver] : [target, propertyKey]);
    }
    function createReflectSetCall(target, propertyKey, value, receiver) {
      return createGlobalMethodCall("Reflect", "set", receiver ? [target, propertyKey, value, receiver] : [target, propertyKey, value]);
    }
    function tryAddPropertyAssignment(properties, propertyName, expression) {
      if (expression) {
        properties.push(createPropertyAssignment(propertyName, expression));
        return true;
      }
      return false;
    }
    function createPropertyDescriptor(attributes, singleLine) {
      const properties = [];
      tryAddPropertyAssignment(properties, "enumerable", asExpression(attributes.enumerable));
      tryAddPropertyAssignment(properties, "configurable", asExpression(attributes.configurable));
      let isData = tryAddPropertyAssignment(properties, "writable", asExpression(attributes.writable));
      isData = tryAddPropertyAssignment(properties, "value", attributes.value) || isData;
      let isAccessor2 = tryAddPropertyAssignment(properties, "get", attributes.get);
      isAccessor2 = tryAddPropertyAssignment(properties, "set", attributes.set) || isAccessor2;
      Debug.assert(!(isData && isAccessor2), "A PropertyDescriptor may not be both an accessor descriptor and a data descriptor.");
      return createObjectLiteralExpression(properties, !singleLine);
    }
    function updateOuterExpression(outerExpression, expression) {
      switch (outerExpression.kind) {
        case 214 /* ParenthesizedExpression */:
          return updateParenthesizedExpression(outerExpression, expression);
        case 213 /* TypeAssertionExpression */:
          return updateTypeAssertion(outerExpression, outerExpression.type, expression);
        case 231 /* AsExpression */:
          return updateAsExpression(outerExpression, expression, outerExpression.type);
        case 235 /* SatisfiesExpression */:
          return updateSatisfiesExpression(outerExpression, expression, outerExpression.type);
        case 232 /* NonNullExpression */:
          return updateNonNullExpression(outerExpression, expression);
        case 356 /* PartiallyEmittedExpression */:
          return updatePartiallyEmittedExpression(outerExpression, expression);
      }
    }
    function isIgnorableParen(node) {
      return isParenthesizedExpression(node) && nodeIsSynthesized(node) && nodeIsSynthesized(getSourceMapRange(node)) && nodeIsSynthesized(getCommentRange(node)) && !some(getSyntheticLeadingComments(node)) && !some(getSyntheticTrailingComments(node));
    }
    function restoreOuterExpressions(outerExpression, innerExpression, kinds = 15 /* All */) {
      if (outerExpression && isOuterExpression(outerExpression, kinds) && !isIgnorableParen(outerExpression)) {
        return updateOuterExpression(
          outerExpression,
          restoreOuterExpressions(outerExpression.expression, innerExpression)
        );
      }
      return innerExpression;
    }
    function restoreEnclosingLabel(node, outermostLabeledStatement, afterRestoreLabelCallback) {
      if (!outermostLabeledStatement) {
        return node;
      }
      const updated = updateLabeledStatement(
        outermostLabeledStatement,
        outermostLabeledStatement.label,
        isLabeledStatement(outermostLabeledStatement.statement) ? restoreEnclosingLabel(node, outermostLabeledStatement.statement) : node
      );
      if (afterRestoreLabelCallback) {
        afterRestoreLabelCallback(outermostLabeledStatement);
      }
      return updated;
    }
    function shouldBeCapturedInTempVariable(node, cacheIdentifiers) {
      const target = skipParentheses(node);
      switch (target.kind) {
        case 79 /* Identifier */:
          return cacheIdentifiers;
        case 108 /* ThisKeyword */:
        case 8 /* NumericLiteral */:
        case 9 /* BigIntLiteral */:
        case 10 /* StringLiteral */:
          return false;
        case 206 /* ArrayLiteralExpression */:
          const elements = target.elements;
          if (elements.length === 0) {
            return false;
          }
          return true;
        case 207 /* ObjectLiteralExpression */:
          return target.properties.length > 0;
        default:
          return true;
      }
    }
    function createCallBinding(expression, recordTempVariable, languageVersion, cacheIdentifiers = false) {
      const callee = skipOuterExpressions(expression, 15 /* All */);
      let thisArg;
      let target;
      if (isSuperProperty(callee)) {
        thisArg = createThis();
        target = callee;
      } else if (isSuperKeyword(callee)) {
        thisArg = createThis();
        target = languageVersion !== void 0 && languageVersion < 2 /* ES2015 */ ? setTextRange(createIdentifier("_super"), callee) : callee;
      } else if (getEmitFlags(callee) & 8192 /* HelperName */) {
        thisArg = createVoidZero();
        target = parenthesizerRules().parenthesizeLeftSideOfAccess(
          callee,
          /*optionalChain*/
          false
        );
      } else if (isPropertyAccessExpression(callee)) {
        if (shouldBeCapturedInTempVariable(callee.expression, cacheIdentifiers)) {
          thisArg = createTempVariable(recordTempVariable);
          target = createPropertyAccessExpression(
            setTextRange(
              factory2.createAssignment(
                thisArg,
                callee.expression
              ),
              callee.expression
            ),
            callee.name
          );
          setTextRange(target, callee);
        } else {
          thisArg = callee.expression;
          target = callee;
        }
      } else if (isElementAccessExpression(callee)) {
        if (shouldBeCapturedInTempVariable(callee.expression, cacheIdentifiers)) {
          thisArg = createTempVariable(recordTempVariable);
          target = createElementAccessExpression(
            setTextRange(
              factory2.createAssignment(
                thisArg,
                callee.expression
              ),
              callee.expression
            ),
            callee.argumentExpression
          );
          setTextRange(target, callee);
        } else {
          thisArg = callee.expression;
          target = callee;
        }
      } else {
        thisArg = createVoidZero();
        target = parenthesizerRules().parenthesizeLeftSideOfAccess(
          expression,
          /*optionalChain*/
          false
        );
      }
      return { target, thisArg };
    }
    function createAssignmentTargetWrapper(paramName, expression) {
      return createPropertyAccessExpression(
        // Explicit parens required because of v8 regression (https://bugs.chromium.org/p/v8/issues/detail?id=9560)
        createParenthesizedExpression(
          createObjectLiteralExpression([
            createSetAccessorDeclaration(
              /*modifiers*/
              void 0,
              "value",
              [createParameterDeclaration(
                /*modifiers*/
                void 0,
                /*dotDotDotToken*/
                void 0,
                paramName,
                /*questionToken*/
                void 0,
                /*type*/
                void 0,
                /*initializer*/
                void 0
              )],
              createBlock([
                createExpressionStatement(expression)
              ])
            )
          ])
        ),
        "value"
      );
    }
    function inlineExpressions(expressions) {
      return expressions.length > 10 ? createCommaListExpression(expressions) : reduceLeft(expressions, factory2.createComma);
    }
    function getName(node, allowComments, allowSourceMaps, emitFlags = 0) {
      const nodeName = getNameOfDeclaration(node);
      if (nodeName && isIdentifier(nodeName) && !isGeneratedIdentifier(nodeName)) {
        const name = setParent(setTextRange(cloneNode(nodeName), nodeName), nodeName.parent);
        emitFlags |= getEmitFlags(nodeName);
        if (!allowSourceMaps)
          emitFlags |= 96 /* NoSourceMap */;
        if (!allowComments)
          emitFlags |= 3072 /* NoComments */;
        if (emitFlags)
          setEmitFlags(name, emitFlags);
        return name;
      }
      return getGeneratedNameForNode(node);
    }
    function getInternalName(node, allowComments, allowSourceMaps) {
      return getName(node, allowComments, allowSourceMaps, 32768 /* LocalName */ | 65536 /* InternalName */);
    }
    function getLocalName(node, allowComments, allowSourceMaps) {
      return getName(node, allowComments, allowSourceMaps, 32768 /* LocalName */);
    }
    function getExportName(node, allowComments, allowSourceMaps) {
      return getName(node, allowComments, allowSourceMaps, 16384 /* ExportName */);
    }
    function getDeclarationName(node, allowComments, allowSourceMaps) {
      return getName(node, allowComments, allowSourceMaps);
    }
    function getNamespaceMemberName(ns, name, allowComments, allowSourceMaps) {
      const qualifiedName = createPropertyAccessExpression(ns, nodeIsSynthesized(name) ? name : cloneNode(name));
      setTextRange(qualifiedName, name);
      let emitFlags = 0;
      if (!allowSourceMaps)
        emitFlags |= 96 /* NoSourceMap */;
      if (!allowComments)
        emitFlags |= 3072 /* NoComments */;
      if (emitFlags)
        setEmitFlags(qualifiedName, emitFlags);
      return qualifiedName;
    }
    function getExternalModuleOrNamespaceExportName(ns, node, allowComments, allowSourceMaps) {
      if (ns && hasSyntacticModifier(node, 1 /* Export */)) {
        return getNamespaceMemberName(ns, getName(node), allowComments, allowSourceMaps);
      }
      return getExportName(node, allowComments, allowSourceMaps);
    }
    function copyPrologue(source, target, ensureUseStrict2, visitor) {
      const offset = copyStandardPrologue(source, target, 0, ensureUseStrict2);
      return copyCustomPrologue(source, target, offset, visitor);
    }
    function isUseStrictPrologue2(node) {
      return isStringLiteral(node.expression) && node.expression.text === "use strict";
    }
    function createUseStrictPrologue() {
      return startOnNewLine(createExpressionStatement(createStringLiteral("use strict")));
    }
    function copyStandardPrologue(source, target, statementOffset = 0, ensureUseStrict2) {
      Debug.assert(target.length === 0, "Prologue directives should be at the first statement in the target statements array");
      let foundUseStrict = false;
      const numStatements = source.length;
      while (statementOffset < numStatements) {
        const statement = source[statementOffset];
        if (isPrologueDirective(statement)) {
          if (isUseStrictPrologue2(statement)) {
            foundUseStrict = true;
          }
          target.push(statement);
        } else {
          break;
        }
        statementOffset++;
      }
      if (ensureUseStrict2 && !foundUseStrict) {
        target.push(createUseStrictPrologue());
      }
      return statementOffset;
    }
    function copyCustomPrologue(source, target, statementOffset, visitor, filter2 = returnTrue) {
      const numStatements = source.length;
      while (statementOffset !== void 0 && statementOffset < numStatements) {
        const statement = source[statementOffset];
        if (getEmitFlags(statement) & 2097152 /* CustomPrologue */ && filter2(statement)) {
          append(target, visitor ? visitNode(statement, visitor, isStatement) : statement);
        } else {
          break;
        }
        statementOffset++;
      }
      return statementOffset;
    }
    function ensureUseStrict(statements) {
      const foundUseStrict = findUseStrictPrologue(statements);
      if (!foundUseStrict) {
        return setTextRange(createNodeArray([createUseStrictPrologue(), ...statements]), statements);
      }
      return statements;
    }
    function liftToBlock(nodes) {
      Debug.assert(every(nodes, isStatementOrBlock), "Cannot lift nodes to a Block.");
      return singleOrUndefined(nodes) || createBlock(nodes);
    }
    function findSpanEnd(array, test, start) {
      let i = start;
      while (i < array.length && test(array[i])) {
        i++;
      }
      return i;
    }
    function mergeLexicalEnvironment(statements, declarations) {
      if (!some(declarations)) {
        return statements;
      }
      const leftStandardPrologueEnd = findSpanEnd(statements, isPrologueDirective, 0);
      const leftHoistedFunctionsEnd = findSpanEnd(statements, isHoistedFunction, leftStandardPrologueEnd);
      const leftHoistedVariablesEnd = findSpanEnd(statements, isHoistedVariableStatement, leftHoistedFunctionsEnd);
      const rightStandardPrologueEnd = findSpanEnd(declarations, isPrologueDirective, 0);
      const rightHoistedFunctionsEnd = findSpanEnd(declarations, isHoistedFunction, rightStandardPrologueEnd);
      const rightHoistedVariablesEnd = findSpanEnd(declarations, isHoistedVariableStatement, rightHoistedFunctionsEnd);
      const rightCustomPrologueEnd = findSpanEnd(declarations, isCustomPrologue, rightHoistedVariablesEnd);
      Debug.assert(rightCustomPrologueEnd === declarations.length, "Expected declarations to be valid standard or custom prologues");
      const left = isNodeArray(statements) ? statements.slice() : statements;
      if (rightCustomPrologueEnd > rightHoistedVariablesEnd) {
        left.splice(leftHoistedVariablesEnd, 0, ...declarations.slice(rightHoistedVariablesEnd, rightCustomPrologueEnd));
      }
      if (rightHoistedVariablesEnd > rightHoistedFunctionsEnd) {
        left.splice(leftHoistedFunctionsEnd, 0, ...declarations.slice(rightHoistedFunctionsEnd, rightHoistedVariablesEnd));
      }
      if (rightHoistedFunctionsEnd > rightStandardPrologueEnd) {
        left.splice(leftStandardPrologueEnd, 0, ...declarations.slice(rightStandardPrologueEnd, rightHoistedFunctionsEnd));
      }
      if (rightStandardPrologueEnd > 0) {
        if (leftStandardPrologueEnd === 0) {
          left.splice(0, 0, ...declarations.slice(0, rightStandardPrologueEnd));
        } else {
          const leftPrologues = /* @__PURE__ */ new Map();
          for (let i = 0; i < leftStandardPrologueEnd; i++) {
            const leftPrologue = statements[i];
            leftPrologues.set(leftPrologue.expression.text, true);
          }
          for (let i = rightStandardPrologueEnd - 1; i >= 0; i--) {
            const rightPrologue = declarations[i];
            if (!leftPrologues.has(rightPrologue.expression.text)) {
              left.unshift(rightPrologue);
            }
          }
        }
      }
      if (isNodeArray(statements)) {
        return setTextRange(createNodeArray(left, statements.hasTrailingComma), statements);
      }
      return statements;
    }
    function updateModifiers(node, modifiers) {
      var _a2;
      let modifierArray;
      if (typeof modifiers === "number") {
        modifierArray = createModifiersFromModifierFlags(modifiers);
      } else {
        modifierArray = modifiers;
      }
      return isTypeParameterDeclaration(node) ? updateTypeParameterDeclaration(node, modifierArray, node.name, node.constraint, node.default) : isParameter(node) ? updateParameterDeclaration(node, modifierArray, node.dotDotDotToken, node.name, node.questionToken, node.type, node.initializer) : isConstructorTypeNode(node) ? updateConstructorTypeNode1(node, modifierArray, node.typeParameters, node.parameters, node.type) : isPropertySignature(node) ? updatePropertySignature(node, modifierArray, node.name, node.questionToken, node.type) : isPropertyDeclaration(node) ? updatePropertyDeclaration2(node, modifierArray, node.name, (_a2 = node.questionToken) != null ? _a2 : node.exclamationToken, node.type, node.initializer) : isMethodSignature(node) ? updateMethodSignature(node, modifierArray, node.name, node.questionToken, node.typeParameters, node.parameters, node.type) : isMethodDeclaration(node) ? updateMethodDeclaration(node, modifierArray, node.asteriskToken, node.name, node.questionToken, node.typeParameters, node.parameters, node.type, node.body) : isConstructorDeclaration(node) ? updateConstructorDeclaration(node, modifierArray, node.parameters, node.body) : isGetAccessorDeclaration(node) ? updateGetAccessorDeclaration(node, modifierArray, node.name, node.parameters, node.type, node.body) : isSetAccessorDeclaration(node) ? updateSetAccessorDeclaration(node, modifierArray, node.name, node.parameters, node.body) : isIndexSignatureDeclaration(node) ? updateIndexSignature(node, modifierArray, node.parameters, node.type) : isFunctionExpression(node) ? updateFunctionExpression(node, modifierArray, node.asteriskToken, node.name, node.typeParameters, node.parameters, node.type, node.body) : isArrowFunction(node) ? updateArrowFunction(node, modifierArray, node.typeParameters, node.parameters, node.type, node.equalsGreaterThanToken, node.body) : isClassExpression(node) ? updateClassExpression(node, modifierArray, node.name, node.typeParameters, node.heritageClauses, node.members) : isVariableStatement(node) ? updateVariableStatement(node, modifierArray, node.declarationList) : isFunctionDeclaration(node) ? updateFunctionDeclaration(node, modifierArray, node.asteriskToken, node.name, node.typeParameters, node.parameters, node.type, node.body) : isClassDeclaration(node) ? updateClassDeclaration(node, modifierArray, node.name, node.typeParameters, node.heritageClauses, node.members) : isInterfaceDeclaration(node) ? updateInterfaceDeclaration(node, modifierArray, node.name, node.typeParameters, node.heritageClauses, node.members) : isTypeAliasDeclaration(node) ? updateTypeAliasDeclaration(node, modifierArray, node.name, node.typeParameters, node.type) : isEnumDeclaration(node) ? updateEnumDeclaration(node, modifierArray, node.name, node.members) : isModuleDeclaration(node) ? updateModuleDeclaration(node, modifierArray, node.name, node.body) : isImportEqualsDeclaration(node) ? updateImportEqualsDeclaration(node, modifierArray, node.isTypeOnly, node.name, node.moduleReference) : isImportDeclaration(node) ? updateImportDeclaration(node, modifierArray, node.importClause, node.moduleSpecifier, node.assertClause) : isExportAssignment(node) ? updateExportAssignment(node, modifierArray, node.expression) : isExportDeclaration(node) ? updateExportDeclaration(node, modifierArray, node.isTypeOnly, node.exportClause, node.moduleSpecifier, node.assertClause) : Debug.assertNever(node);
    }
    function asNodeArray(array) {
      return array ? createNodeArray(array) : void 0;
    }
    function asName(name) {
      return typeof name === "string" ? createIdentifier(name) : name;
    }
    function asExpression(value) {
      return typeof value === "string" ? createStringLiteral(value) : typeof value === "number" ? createNumericLiteral(value) : typeof value === "boolean" ? value ? createTrue() : createFalse() : value;
    }
    function asInitializer(node) {
      return node && parenthesizerRules().parenthesizeExpressionForDisallowedComma(node);
    }
    function asToken(value) {
      return typeof value === "number" ? createToken(value) : value;
    }
    function asEmbeddedStatement(statement) {
      return statement && isNotEmittedStatement(statement) ? setTextRange(setOriginalNode(createEmptyStatement(), statement), statement) : statement;
    }
    function asVariableDeclaration(variableDeclaration) {
      if (typeof variableDeclaration === "string" || variableDeclaration && !isVariableDeclaration(variableDeclaration)) {
        return createVariableDeclaration(
          variableDeclaration,
          /*exclamationToken*/
          void 0,
          /*type*/
          void 0,
          /*initializer*/
          void 0
        );
      }
      return variableDeclaration;
    }
  }
  function updateWithoutOriginal(updated, original) {
    if (updated !== original) {
      setTextRange(updated, original);
    }
    return updated;
  }
  function updateWithOriginal(updated, original) {
    if (updated !== original) {
      setOriginalNode(updated, original);
      setTextRange(updated, original);
    }
    return updated;
  }
  function getDefaultTagNameForKind(kind) {
    switch (kind) {
      case 347 /* JSDocTypeTag */:
        return "type";
      case 345 /* JSDocReturnTag */:
        return "returns";
      case 346 /* JSDocThisTag */:
        return "this";
      case 343 /* JSDocEnumTag */:
        return "enum";
      case 333 /* JSDocAuthorTag */:
        return "author";
      case 335 /* JSDocClassTag */:
        return "class";
      case 336 /* JSDocPublicTag */:
        return "public";
      case 337 /* JSDocPrivateTag */:
        return "private";
      case 338 /* JSDocProtectedTag */:
        return "protected";
      case 339 /* JSDocReadonlyTag */:
        return "readonly";
      case 340 /* JSDocOverrideTag */:
        return "override";
      case 348 /* JSDocTemplateTag */:
        return "template";
      case 349 /* JSDocTypedefTag */:
        return "typedef";
      case 344 /* JSDocParameterTag */:
        return "param";
      case 351 /* JSDocPropertyTag */:
        return "prop";
      case 341 /* JSDocCallbackTag */:
        return "callback";
      case 342 /* JSDocOverloadTag */:
        return "overload";
      case 331 /* JSDocAugmentsTag */:
        return "augments";
      case 332 /* JSDocImplementsTag */:
        return "implements";
      default:
        return Debug.fail(`Unsupported kind: ${Debug.formatSyntaxKind(kind)}`);
    }
  }
  function getCookedText(kind, rawText) {
    if (!rawTextScanner) {
      rawTextScanner = createScanner(
        99 /* Latest */,
        /*skipTrivia*/
        false,
        0 /* Standard */
      );
    }
    switch (kind) {
      case 14 /* NoSubstitutionTemplateLiteral */:
        rawTextScanner.setText("`" + rawText + "`");
        break;
      case 15 /* TemplateHead */:
        rawTextScanner.setText("`" + rawText + "${");
        break;
      case 16 /* TemplateMiddle */:
        rawTextScanner.setText("}" + rawText + "${");
        break;
      case 17 /* TemplateTail */:
        rawTextScanner.setText("}" + rawText + "`");
        break;
    }
    let token = rawTextScanner.scan();
    if (token === 19 /* CloseBraceToken */) {
      token = rawTextScanner.reScanTemplateToken(
        /*isTaggedTemplate*/
        false
      );
    }
    if (rawTextScanner.isUnterminated()) {
      rawTextScanner.setText(void 0);
      return invalidValueSentinel;
    }
    let tokenValue;
    switch (token) {
      case 14 /* NoSubstitutionTemplateLiteral */:
      case 15 /* TemplateHead */:
      case 16 /* TemplateMiddle */:
      case 17 /* TemplateTail */:
        tokenValue = rawTextScanner.getTokenValue();
        break;
    }
    if (tokenValue === void 0 || rawTextScanner.scan() !== 1 /* EndOfFileToken */) {
      rawTextScanner.setText(void 0);
      return invalidValueSentinel;
    }
    rawTextScanner.setText(void 0);
    return tokenValue;
  }
  function propagateNameFlags(node) {
    return node && isIdentifier(node) ? propagateIdentifierNameFlags(node) : propagateChildFlags(node);
  }
  function propagateIdentifierNameFlags(node) {
    return propagateChildFlags(node) & ~67108864 /* ContainsPossibleTopLevelAwait */;
  }
  function propagatePropertyNameFlagsOfChild(node, transformFlags) {
    return transformFlags | node.transformFlags & 134234112 /* PropertyNamePropagatingFlags */;
  }
  function propagateChildFlags(child) {
    if (!child)
      return 0 /* None */;
    const childFlags = child.transformFlags & ~getTransformFlagsSubtreeExclusions(child.kind);
    return isNamedDeclaration(child) && isPropertyName(child.name) ? propagatePropertyNameFlagsOfChild(child.name, childFlags) : childFlags;
  }
  function propagateChildrenFlags(children) {
    return children ? children.transformFlags : 0 /* None */;
  }
  function aggregateChildrenFlags(children) {
    let subtreeFlags = 0 /* None */;
    for (const child of children) {
      subtreeFlags |= propagateChildFlags(child);
    }
    children.transformFlags = subtreeFlags;
  }
  function getTransformFlagsSubtreeExclusions(kind) {
    if (kind >= 179 /* FirstTypeNode */ && kind <= 202 /* LastTypeNode */) {
      return -2 /* TypeExcludes */;
    }
    switch (kind) {
      case 210 /* CallExpression */:
      case 211 /* NewExpression */:
      case 206 /* ArrayLiteralExpression */:
        return -2147450880 /* ArrayLiteralOrCallOrNewExcludes */;
      case 264 /* ModuleDeclaration */:
        return -1941676032 /* ModuleExcludes */;
      case 166 /* Parameter */:
        return -2147483648 /* ParameterExcludes */;
      case 216 /* ArrowFunction */:
        return -2072174592 /* ArrowFunctionExcludes */;
      case 215 /* FunctionExpression */:
      case 259 /* FunctionDeclaration */:
        return -1937940480 /* FunctionExcludes */;
      case 258 /* VariableDeclarationList */:
        return -2146893824 /* VariableDeclarationListExcludes */;
      case 260 /* ClassDeclaration */:
      case 228 /* ClassExpression */:
        return -2147344384 /* ClassExcludes */;
      case 173 /* Constructor */:
        return -1937948672 /* ConstructorExcludes */;
      case 169 /* PropertyDeclaration */:
        return -2013249536 /* PropertyExcludes */;
      case 171 /* MethodDeclaration */:
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
        return -2005057536 /* MethodOrAccessorExcludes */;
      case 131 /* AnyKeyword */:
      case 148 /* NumberKeyword */:
      case 160 /* BigIntKeyword */:
      case 144 /* NeverKeyword */:
      case 152 /* StringKeyword */:
      case 149 /* ObjectKeyword */:
      case 134 /* BooleanKeyword */:
      case 153 /* SymbolKeyword */:
      case 114 /* VoidKeyword */:
      case 165 /* TypeParameter */:
      case 168 /* PropertySignature */:
      case 170 /* MethodSignature */:
      case 176 /* CallSignature */:
      case 177 /* ConstructSignature */:
      case 178 /* IndexSignature */:
      case 261 /* InterfaceDeclaration */:
      case 262 /* TypeAliasDeclaration */:
        return -2 /* TypeExcludes */;
      case 207 /* ObjectLiteralExpression */:
        return -2147278848 /* ObjectLiteralExcludes */;
      case 295 /* CatchClause */:
        return -2147418112 /* CatchClauseExcludes */;
      case 203 /* ObjectBindingPattern */:
      case 204 /* ArrayBindingPattern */:
        return -2147450880 /* BindingPatternExcludes */;
      case 213 /* TypeAssertionExpression */:
      case 235 /* SatisfiesExpression */:
      case 231 /* AsExpression */:
      case 356 /* PartiallyEmittedExpression */:
      case 214 /* ParenthesizedExpression */:
      case 106 /* SuperKeyword */:
        return -2147483648 /* OuterExpressionExcludes */;
      case 208 /* PropertyAccessExpression */:
      case 209 /* ElementAccessExpression */:
        return -2147483648 /* PropertyAccessExcludes */;
      default:
        return -2147483648 /* NodeExcludes */;
    }
  }
  function makeSynthetic(node) {
    node.flags |= 8 /* Synthesized */;
    return node;
  }
  function createUnparsedSourceFile(textOrInputFiles, mapPathOrType, mapTextOrStripInternal) {
    let stripInternal;
    let bundleFileInfo;
    let fileName;
    let text;
    let length2;
    let sourceMapPath;
    let sourceMapText;
    let getText;
    let getSourceMapText;
    let oldFileOfCurrentEmit;
    if (!isString(textOrInputFiles)) {
      Debug.assert(mapPathOrType === "js" || mapPathOrType === "dts");
      fileName = (mapPathOrType === "js" ? textOrInputFiles.javascriptPath : textOrInputFiles.declarationPath) || "";
      sourceMapPath = mapPathOrType === "js" ? textOrInputFiles.javascriptMapPath : textOrInputFiles.declarationMapPath;
      getText = () => mapPathOrType === "js" ? textOrInputFiles.javascriptText : textOrInputFiles.declarationText;
      getSourceMapText = () => mapPathOrType === "js" ? textOrInputFiles.javascriptMapText : textOrInputFiles.declarationMapText;
      length2 = () => getText().length;
      if (textOrInputFiles.buildInfo && textOrInputFiles.buildInfo.bundle) {
        Debug.assert(mapTextOrStripInternal === void 0 || typeof mapTextOrStripInternal === "boolean");
        stripInternal = mapTextOrStripInternal;
        bundleFileInfo = mapPathOrType === "js" ? textOrInputFiles.buildInfo.bundle.js : textOrInputFiles.buildInfo.bundle.dts;
        oldFileOfCurrentEmit = textOrInputFiles.oldFileOfCurrentEmit;
      }
    } else {
      fileName = "";
      text = textOrInputFiles;
      length2 = textOrInputFiles.length;
      sourceMapPath = mapPathOrType;
      sourceMapText = mapTextOrStripInternal;
    }
    const node = oldFileOfCurrentEmit ? parseOldFileOfCurrentEmit(Debug.checkDefined(bundleFileInfo)) : parseUnparsedSourceFile(bundleFileInfo, stripInternal, length2);
    node.fileName = fileName;
    node.sourceMapPath = sourceMapPath;
    node.oldFileOfCurrentEmit = oldFileOfCurrentEmit;
    if (getText && getSourceMapText) {
      Object.defineProperty(node, "text", { get: getText });
      Object.defineProperty(node, "sourceMapText", { get: getSourceMapText });
    } else {
      Debug.assert(!oldFileOfCurrentEmit);
      node.text = text != null ? text : "";
      node.sourceMapText = sourceMapText;
    }
    return node;
  }
  function parseUnparsedSourceFile(bundleFileInfo, stripInternal, length2) {
    let prologues;
    let helpers;
    let referencedFiles;
    let typeReferenceDirectives;
    let libReferenceDirectives;
    let prependChildren;
    let texts;
    let hasNoDefaultLib;
    for (const section of bundleFileInfo ? bundleFileInfo.sections : emptyArray) {
      switch (section.kind) {
        case "prologue" /* Prologue */:
          prologues = append(prologues, setTextRange(factory.createUnparsedPrologue(section.data), section));
          break;
        case "emitHelpers" /* EmitHelpers */:
          helpers = append(helpers, getAllUnscopedEmitHelpers().get(section.data));
          break;
        case "no-default-lib" /* NoDefaultLib */:
          hasNoDefaultLib = true;
          break;
        case "reference" /* Reference */:
          referencedFiles = append(referencedFiles, { pos: -1, end: -1, fileName: section.data });
          break;
        case "type" /* Type */:
          typeReferenceDirectives = append(typeReferenceDirectives, { pos: -1, end: -1, fileName: section.data });
          break;
        case "type-import" /* TypeResolutionModeImport */:
          typeReferenceDirectives = append(typeReferenceDirectives, { pos: -1, end: -1, fileName: section.data, resolutionMode: 99 /* ESNext */ });
          break;
        case "type-require" /* TypeResolutionModeRequire */:
          typeReferenceDirectives = append(typeReferenceDirectives, { pos: -1, end: -1, fileName: section.data, resolutionMode: 1 /* CommonJS */ });
          break;
        case "lib" /* Lib */:
          libReferenceDirectives = append(libReferenceDirectives, { pos: -1, end: -1, fileName: section.data });
          break;
        case "prepend" /* Prepend */:
          let prependTexts;
          for (const text of section.texts) {
            if (!stripInternal || text.kind !== "internal" /* Internal */) {
              prependTexts = append(prependTexts, setTextRange(factory.createUnparsedTextLike(text.data, text.kind === "internal" /* Internal */), text));
            }
          }
          prependChildren = addRange(prependChildren, prependTexts);
          texts = append(texts, factory.createUnparsedPrepend(section.data, prependTexts != null ? prependTexts : emptyArray));
          break;
        case "internal" /* Internal */:
          if (stripInternal) {
            if (!texts)
              texts = [];
            break;
          }
        case "text" /* Text */:
          texts = append(texts, setTextRange(factory.createUnparsedTextLike(section.data, section.kind === "internal" /* Internal */), section));
          break;
        default:
          Debug.assertNever(section);
      }
    }
    if (!texts) {
      const textNode = factory.createUnparsedTextLike(
        /*data*/
        void 0,
        /*internal*/
        false
      );
      setTextRangePosWidth(textNode, 0, typeof length2 === "function" ? length2() : length2);
      texts = [textNode];
    }
    const node = parseNodeFactory.createUnparsedSource(
      prologues != null ? prologues : emptyArray,
      /*syntheticReferences*/
      void 0,
      texts
    );
    setEachParent(prologues, node);
    setEachParent(texts, node);
    setEachParent(prependChildren, node);
    node.hasNoDefaultLib = hasNoDefaultLib;
    node.helpers = helpers;
    node.referencedFiles = referencedFiles || emptyArray;
    node.typeReferenceDirectives = typeReferenceDirectives;
    node.libReferenceDirectives = libReferenceDirectives || emptyArray;
    return node;
  }
  function parseOldFileOfCurrentEmit(bundleFileInfo) {
    let texts;
    let syntheticReferences;
    for (const section of bundleFileInfo.sections) {
      switch (section.kind) {
        case "internal" /* Internal */:
        case "text" /* Text */:
          texts = append(texts, setTextRange(factory.createUnparsedTextLike(section.data, section.kind === "internal" /* Internal */), section));
          break;
        case "no-default-lib" /* NoDefaultLib */:
        case "reference" /* Reference */:
        case "type" /* Type */:
        case "type-import" /* TypeResolutionModeImport */:
        case "type-require" /* TypeResolutionModeRequire */:
        case "lib" /* Lib */:
          syntheticReferences = append(syntheticReferences, setTextRange(factory.createUnparsedSyntheticReference(section), section));
          break;
        case "prologue" /* Prologue */:
        case "emitHelpers" /* EmitHelpers */:
        case "prepend" /* Prepend */:
          break;
        default:
          Debug.assertNever(section);
      }
    }
    const node = factory.createUnparsedSource(emptyArray, syntheticReferences, texts != null ? texts : emptyArray);
    setEachParent(syntheticReferences, node);
    setEachParent(texts, node);
    node.helpers = map(bundleFileInfo.sources && bundleFileInfo.sources.helpers, (name) => getAllUnscopedEmitHelpers().get(name));
    return node;
  }
  function createInputFiles(javascriptTextOrReadFileText, declarationTextOrJavascriptPath, javascriptMapPath, javascriptMapTextOrDeclarationPath, declarationMapPath, declarationMapTextOrBuildInfoPath) {
    return !isString(javascriptTextOrReadFileText) ? createInputFilesWithFilePaths(
      javascriptTextOrReadFileText,
      declarationTextOrJavascriptPath,
      javascriptMapPath,
      javascriptMapTextOrDeclarationPath,
      declarationMapPath,
      declarationMapTextOrBuildInfoPath
    ) : createInputFilesWithFileTexts(
      /*javascriptPath*/
      void 0,
      javascriptTextOrReadFileText,
      javascriptMapPath,
      javascriptMapTextOrDeclarationPath,
      /*declarationPath*/
      void 0,
      declarationTextOrJavascriptPath,
      declarationMapPath,
      declarationMapTextOrBuildInfoPath
    );
  }
  function createInputFilesWithFilePaths(readFileText, javascriptPath, javascriptMapPath, declarationPath, declarationMapPath, buildInfoPath, host, options) {
    const node = parseNodeFactory.createInputFiles();
    node.javascriptPath = javascriptPath;
    node.javascriptMapPath = javascriptMapPath;
    node.declarationPath = declarationPath;
    node.declarationMapPath = declarationMapPath;
    node.buildInfoPath = buildInfoPath;
    const cache = /* @__PURE__ */ new Map();
    const textGetter = (path) => {
      if (path === void 0)
        return void 0;
      let value = cache.get(path);
      if (value === void 0) {
        value = readFileText(path);
        cache.set(path, value !== void 0 ? value : false);
      }
      return value !== false ? value : void 0;
    };
    const definedTextGetter = (path) => {
      const result = textGetter(path);
      return result !== void 0 ? result : `/* Input file ${path} was missing */\r
`;
    };
    let buildInfo;
    const getAndCacheBuildInfo = () => {
      var _a2, _b;
      if (buildInfo === void 0 && buildInfoPath) {
        if (host == null ? void 0 : host.getBuildInfo) {
          buildInfo = (_a2 = host.getBuildInfo(buildInfoPath, options.configFilePath)) != null ? _a2 : false;
        } else {
          const result = textGetter(buildInfoPath);
          buildInfo = result !== void 0 ? (_b = getBuildInfo(buildInfoPath, result)) != null ? _b : false : false;
        }
      }
      return buildInfo || void 0;
    };
    Object.defineProperties(node, {
      javascriptText: { get: () => definedTextGetter(javascriptPath) },
      javascriptMapText: { get: () => textGetter(javascriptMapPath) },
      // TODO:: if there is inline sourceMap in jsFile, use that
      declarationText: { get: () => definedTextGetter(Debug.checkDefined(declarationPath)) },
      declarationMapText: { get: () => textGetter(declarationMapPath) },
      // TODO:: if there is inline sourceMap in dtsFile, use that
      buildInfo: { get: getAndCacheBuildInfo }
    });
    return node;
  }
  function createInputFilesWithFileTexts(javascriptPath, javascriptText, javascriptMapPath, javascriptMapText, declarationPath, declarationText, declarationMapPath, declarationMapText, buildInfoPath, buildInfo, oldFileOfCurrentEmit) {
    const node = parseNodeFactory.createInputFiles();
    node.javascriptPath = javascriptPath;
    node.javascriptText = javascriptText;
    node.javascriptMapPath = javascriptMapPath;
    node.javascriptMapText = javascriptMapText;
    node.declarationPath = declarationPath;
    node.declarationText = declarationText;
    node.declarationMapPath = declarationMapPath;
    node.declarationMapText = declarationMapText;
    node.buildInfoPath = buildInfoPath;
    node.buildInfo = buildInfo;
    node.oldFileOfCurrentEmit = oldFileOfCurrentEmit;
    return node;
  }
  function createSourceMapSource(fileName, text, skipTrivia2) {
    return new (SourceMapSource2 || (SourceMapSource2 = objectAllocator.getSourceMapSourceConstructor()))(fileName, text, skipTrivia2);
  }
  function setOriginalNode(node, original) {
    node.original = original;
    if (original) {
      const emitNode = original.emitNode;
      if (emitNode)
        node.emitNode = mergeEmitNode(emitNode, node.emitNode);
    }
    return node;
  }
  function mergeEmitNode(sourceEmitNode, destEmitNode) {
    const {
      flags,
      internalFlags,
      leadingComments,
      trailingComments,
      commentRange,
      sourceMapRange,
      tokenSourceMapRanges,
      constantValue,
      helpers,
      startsOnNewLine,
      snippetElement
    } = sourceEmitNode;
    if (!destEmitNode)
      destEmitNode = {};
    if (leadingComments)
      destEmitNode.leadingComments = addRange(leadingComments.slice(), destEmitNode.leadingComments);
    if (trailingComments)
      destEmitNode.trailingComments = addRange(trailingComments.slice(), destEmitNode.trailingComments);
    if (flags)
      destEmitNode.flags = flags;
    if (internalFlags)
      destEmitNode.internalFlags = internalFlags & ~8 /* Immutable */;
    if (commentRange)
      destEmitNode.commentRange = commentRange;
    if (sourceMapRange)
      destEmitNode.sourceMapRange = sourceMapRange;
    if (tokenSourceMapRanges)
      destEmitNode.tokenSourceMapRanges = mergeTokenSourceMapRanges(tokenSourceMapRanges, destEmitNode.tokenSourceMapRanges);
    if (constantValue !== void 0)
      destEmitNode.constantValue = constantValue;
    if (helpers) {
      for (const helper of helpers) {
        destEmitNode.helpers = appendIfUnique(destEmitNode.helpers, helper);
      }
    }
    if (startsOnNewLine !== void 0)
      destEmitNode.startsOnNewLine = startsOnNewLine;
    if (snippetElement !== void 0)
      destEmitNode.snippetElement = snippetElement;
    return destEmitNode;
  }
  function mergeTokenSourceMapRanges(sourceRanges, destRanges) {
    if (!destRanges)
      destRanges = [];
    for (const key in sourceRanges) {
      destRanges[key] = sourceRanges[key];
    }
    return destRanges;
  }
  var nextAutoGenerateId, NodeFactoryFlags, nodeFactoryPatchers, rawTextScanner, invalidValueSentinel, baseFactory, syntheticFactory, factory, SourceMapSource2;
  var init_nodeFactory = __esm({
    "src/compiler/factory/nodeFactory.ts"() {
      "use strict";
      init_ts2();
      nextAutoGenerateId = 0;
      NodeFactoryFlags = /* @__PURE__ */ ((NodeFactoryFlags2) => {
        NodeFactoryFlags2[NodeFactoryFlags2["None"] = 0] = "None";
        NodeFactoryFlags2[NodeFactoryFlags2["NoParenthesizerRules"] = 1] = "NoParenthesizerRules";
        NodeFactoryFlags2[NodeFactoryFlags2["NoNodeConverters"] = 2] = "NoNodeConverters";
        NodeFactoryFlags2[NodeFactoryFlags2["NoIndentationOnFreshPropertyAccess"] = 4] = "NoIndentationOnFreshPropertyAccess";
        NodeFactoryFlags2[NodeFactoryFlags2["NoOriginalNode"] = 8] = "NoOriginalNode";
        return NodeFactoryFlags2;
      })(NodeFactoryFlags || {});
      nodeFactoryPatchers = [];
      invalidValueSentinel = {};
      baseFactory = createBaseNodeFactory();
      syntheticFactory = {
        createBaseSourceFileNode: (kind) => makeSynthetic(baseFactory.createBaseSourceFileNode(kind)),
        createBaseIdentifierNode: (kind) => makeSynthetic(baseFactory.createBaseIdentifierNode(kind)),
        createBasePrivateIdentifierNode: (kind) => makeSynthetic(baseFactory.createBasePrivateIdentifierNode(kind)),
        createBaseTokenNode: (kind) => makeSynthetic(baseFactory.createBaseTokenNode(kind)),
        createBaseNode: (kind) => makeSynthetic(baseFactory.createBaseNode(kind))
      };
      factory = createNodeFactory(4 /* NoIndentationOnFreshPropertyAccess */, syntheticFactory);
    }
  });

  // src/compiler/factory/emitNode.ts
  function getOrCreateEmitNode(node) {
    var _a2;
    if (!node.emitNode) {
      if (isParseTreeNode(node)) {
        if (node.kind === 308 /* SourceFile */) {
          return node.emitNode = { annotatedNodes: [node] };
        }
        const sourceFile = (_a2 = getSourceFileOfNode(getParseTreeNode(getSourceFileOfNode(node)))) != null ? _a2 : Debug.fail("Could not determine parsed source file.");
        getOrCreateEmitNode(sourceFile).annotatedNodes.push(node);
      }
      node.emitNode = {};
    } else {
      Debug.assert(!(node.emitNode.internalFlags & 8 /* Immutable */), "Invalid attempt to mutate an immutable node.");
    }
    return node.emitNode;
  }
  function disposeEmitNodes(sourceFile) {
    var _a2, _b;
    const annotatedNodes = (_b = (_a2 = getSourceFileOfNode(getParseTreeNode(sourceFile))) == null ? void 0 : _a2.emitNode) == null ? void 0 : _b.annotatedNodes;
    if (annotatedNodes) {
      for (const node of annotatedNodes) {
        node.emitNode = void 0;
      }
    }
  }
  function removeAllComments(node) {
    const emitNode = getOrCreateEmitNode(node);
    emitNode.flags |= 3072 /* NoComments */;
    emitNode.leadingComments = void 0;
    emitNode.trailingComments = void 0;
    return node;
  }
  function setEmitFlags(node, emitFlags) {
    getOrCreateEmitNode(node).flags = emitFlags;
    return node;
  }
  function addEmitFlags(node, emitFlags) {
    const emitNode = getOrCreateEmitNode(node);
    emitNode.flags = emitNode.flags | emitFlags;
    return node;
  }
  function setInternalEmitFlags(node, emitFlags) {
    getOrCreateEmitNode(node).internalFlags = emitFlags;
    return node;
  }
  function addInternalEmitFlags(node, emitFlags) {
    const emitNode = getOrCreateEmitNode(node);
    emitNode.internalFlags = emitNode.internalFlags | emitFlags;
    return node;
  }
  function getSourceMapRange(node) {
    var _a2, _b;
    return (_b = (_a2 = node.emitNode) == null ? void 0 : _a2.sourceMapRange) != null ? _b : node;
  }
  function setSourceMapRange(node, range) {
    getOrCreateEmitNode(node).sourceMapRange = range;
    return node;
  }
  function getTokenSourceMapRange(node, token) {
    var _a2, _b;
    return (_b = (_a2 = node.emitNode) == null ? void 0 : _a2.tokenSourceMapRanges) == null ? void 0 : _b[token];
  }
  function setTokenSourceMapRange(node, token, range) {
    var _a2;
    const emitNode = getOrCreateEmitNode(node);
    const tokenSourceMapRanges = (_a2 = emitNode.tokenSourceMapRanges) != null ? _a2 : emitNode.tokenSourceMapRanges = [];
    tokenSourceMapRanges[token] = range;
    return node;
  }
  function getStartsOnNewLine(node) {
    var _a2;
    return (_a2 = node.emitNode) == null ? void 0 : _a2.startsOnNewLine;
  }
  function setStartsOnNewLine(node, newLine) {
    getOrCreateEmitNode(node).startsOnNewLine = newLine;
    return node;
  }
  function getCommentRange(node) {
    var _a2, _b;
    return (_b = (_a2 = node.emitNode) == null ? void 0 : _a2.commentRange) != null ? _b : node;
  }
  function setCommentRange(node, range) {
    getOrCreateEmitNode(node).commentRange = range;
    return node;
  }
  function getSyntheticLeadingComments(node) {
    var _a2;
    return (_a2 = node.emitNode) == null ? void 0 : _a2.leadingComments;
  }
  function setSyntheticLeadingComments(node, comments) {
    getOrCreateEmitNode(node).leadingComments = comments;
    return node;
  }
  function addSyntheticLeadingComment(node, kind, text, hasTrailingNewLine) {
    return setSyntheticLeadingComments(node, append(getSyntheticLeadingComments(node), { kind, pos: -1, end: -1, hasTrailingNewLine, text }));
  }
  function getSyntheticTrailingComments(node) {
    var _a2;
    return (_a2 = node.emitNode) == null ? void 0 : _a2.trailingComments;
  }
  function setSyntheticTrailingComments(node, comments) {
    getOrCreateEmitNode(node).trailingComments = comments;
    return node;
  }
  function addSyntheticTrailingComment(node, kind, text, hasTrailingNewLine) {
    return setSyntheticTrailingComments(node, append(getSyntheticTrailingComments(node), { kind, pos: -1, end: -1, hasTrailingNewLine, text }));
  }
  function moveSyntheticComments(node, original) {
    setSyntheticLeadingComments(node, getSyntheticLeadingComments(original));
    setSyntheticTrailingComments(node, getSyntheticTrailingComments(original));
    const emit = getOrCreateEmitNode(original);
    emit.leadingComments = void 0;
    emit.trailingComments = void 0;
    return node;
  }
  function getConstantValue(node) {
    var _a2;
    return (_a2 = node.emitNode) == null ? void 0 : _a2.constantValue;
  }
  function setConstantValue(node, value) {
    const emitNode = getOrCreateEmitNode(node);
    emitNode.constantValue = value;
    return node;
  }
  function addEmitHelper(node, helper) {
    const emitNode = getOrCreateEmitNode(node);
    emitNode.helpers = append(emitNode.helpers, helper);
    return node;
  }
  function addEmitHelpers(node, helpers) {
    if (some(helpers)) {
      const emitNode = getOrCreateEmitNode(node);
      for (const helper of helpers) {
        emitNode.helpers = appendIfUnique(emitNode.helpers, helper);
      }
    }
    return node;
  }
  function removeEmitHelper(node, helper) {
    var _a2;
    const helpers = (_a2 = node.emitNode) == null ? void 0 : _a2.helpers;
    if (helpers) {
      return orderedRemoveItem(helpers, helper);
    }
    return false;
  }
  function getEmitHelpers(node) {
    var _a2;
    return (_a2 = node.emitNode) == null ? void 0 : _a2.helpers;
  }
  function moveEmitHelpers(source, target, predicate) {
    const sourceEmitNode = source.emitNode;
    const sourceEmitHelpers = sourceEmitNode && sourceEmitNode.helpers;
    if (!some(sourceEmitHelpers))
      return;
    const targetEmitNode = getOrCreateEmitNode(target);
    let helpersRemoved = 0;
    for (let i = 0; i < sourceEmitHelpers.length; i++) {
      const helper = sourceEmitHelpers[i];
      if (predicate(helper)) {
        helpersRemoved++;
        targetEmitNode.helpers = appendIfUnique(targetEmitNode.helpers, helper);
      } else if (helpersRemoved > 0) {
        sourceEmitHelpers[i - helpersRemoved] = helper;
      }
    }
    if (helpersRemoved > 0) {
      sourceEmitHelpers.length -= helpersRemoved;
    }
  }
  function getSnippetElement(node) {
    var _a2;
    return (_a2 = node.emitNode) == null ? void 0 : _a2.snippetElement;
  }
  function setSnippetElement(node, snippet) {
    const emitNode = getOrCreateEmitNode(node);
    emitNode.snippetElement = snippet;
    return node;
  }
  function ignoreSourceNewlines(node) {
    getOrCreateEmitNode(node).internalFlags |= 4 /* IgnoreSourceNewlines */;
    return node;
  }
  function setTypeNode(node, type) {
    const emitNode = getOrCreateEmitNode(node);
    emitNode.typeNode = type;
    return node;
  }
  function getTypeNode(node) {
    var _a2;
    return (_a2 = node.emitNode) == null ? void 0 : _a2.typeNode;
  }
  function setIdentifierTypeArguments(node, typeArguments) {
    getOrCreateEmitNode(node).identifierTypeArguments = typeArguments;
    return node;
  }
  function getIdentifierTypeArguments(node) {
    var _a2;
    return (_a2 = node.emitNode) == null ? void 0 : _a2.identifierTypeArguments;
  }
  function setIdentifierAutoGenerate(node, autoGenerate) {
    getOrCreateEmitNode(node).autoGenerate = autoGenerate;
    return node;
  }
  function getIdentifierAutoGenerate(node) {
    var _a2;
    return (_a2 = node.emitNode) == null ? void 0 : _a2.autoGenerate;
  }
  function setIdentifierGeneratedImportReference(node, value) {
    getOrCreateEmitNode(node).generatedImportReference = value;
    return node;
  }
  function getIdentifierGeneratedImportReference(node) {
    var _a2;
    return (_a2 = node.emitNode) == null ? void 0 : _a2.generatedImportReference;
  }
  var init_emitNode = __esm({
    "src/compiler/factory/emitNode.ts"() {
      "use strict";
      init_ts2();
    }
  });

  // src/compiler/factory/emitHelpers.ts
  function createEmitHelperFactory(context) {
    const factory2 = context.factory;
    const immutableTrue = memoize(() => setInternalEmitFlags(factory2.createTrue(), 8 /* Immutable */));
    const immutableFalse = memoize(() => setInternalEmitFlags(factory2.createFalse(), 8 /* Immutable */));
    return {
      getUnscopedHelperName,
      // TypeScript Helpers
      createDecorateHelper,
      createMetadataHelper,
      createParamHelper,
      // ES Decorators Helpers
      createESDecorateHelper,
      createRunInitializersHelper,
      // ES2018 Helpers
      createAssignHelper,
      createAwaitHelper,
      createAsyncGeneratorHelper,
      createAsyncDelegatorHelper,
      createAsyncValuesHelper,
      // ES2018 Destructuring Helpers
      createRestHelper,
      // ES2017 Helpers
      createAwaiterHelper,
      // ES2015 Helpers
      createExtendsHelper,
      createTemplateObjectHelper,
      createSpreadArrayHelper,
      createPropKeyHelper,
      createSetFunctionNameHelper,
      // ES2015 Destructuring Helpers
      createValuesHelper,
      createReadHelper,
      // ES2015 Generator Helpers
      createGeneratorHelper,
      // ES Module Helpers
      createCreateBindingHelper,
      createImportStarHelper,
      createImportStarCallbackHelper,
      createImportDefaultHelper,
      createExportStarHelper,
      // Class Fields Helpers
      createClassPrivateFieldGetHelper,
      createClassPrivateFieldSetHelper,
      createClassPrivateFieldInHelper
    };
    function getUnscopedHelperName(name) {
      return setEmitFlags(factory2.createIdentifier(name), 8192 /* HelperName */ | 4 /* AdviseOnEmitNode */);
    }
    function createDecorateHelper(decoratorExpressions, target, memberName, descriptor) {
      context.requestEmitHelper(decorateHelper);
      const argumentsArray = [];
      argumentsArray.push(factory2.createArrayLiteralExpression(
        decoratorExpressions,
        /*multiLine*/
        true
      ));
      argumentsArray.push(target);
      if (memberName) {
        argumentsArray.push(memberName);
        if (descriptor) {
          argumentsArray.push(descriptor);
        }
      }
      return factory2.createCallExpression(
        getUnscopedHelperName("__decorate"),
        /*typeArguments*/
        void 0,
        argumentsArray
      );
    }
    function createMetadataHelper(metadataKey, metadataValue) {
      context.requestEmitHelper(metadataHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__metadata"),
        /*typeArguments*/
        void 0,
        [
          factory2.createStringLiteral(metadataKey),
          metadataValue
        ]
      );
    }
    function createParamHelper(expression, parameterOffset, location) {
      context.requestEmitHelper(paramHelper);
      return setTextRange(
        factory2.createCallExpression(
          getUnscopedHelperName("__param"),
          /*typeArguments*/
          void 0,
          [
            factory2.createNumericLiteral(parameterOffset + ""),
            expression
          ]
        ),
        location
      );
    }
    function createESDecorateClassContextObject(contextIn) {
      return factory2.createObjectLiteralExpression([
        factory2.createPropertyAssignment(factory2.createIdentifier("kind"), factory2.createStringLiteral("class")),
        factory2.createPropertyAssignment(factory2.createIdentifier("name"), contextIn.name)
      ]);
    }
    function createESDecorateClassElementAccessGetMethod(elementName) {
      const accessor = elementName.computed ? factory2.createElementAccessExpression(factory2.createIdentifier("obj"), elementName.name) : factory2.createPropertyAccessExpression(factory2.createIdentifier("obj"), elementName.name);
      return factory2.createPropertyAssignment(
        "get",
        factory2.createArrowFunction(
          /*modifiers*/
          void 0,
          /*typeParameters*/
          void 0,
          [factory2.createParameterDeclaration(
            /*modifiers*/
            void 0,
            /*dotDotDotToken*/
            void 0,
            factory2.createIdentifier("obj")
          )],
          /*type*/
          void 0,
          /*equalsGreaterThanToken*/
          void 0,
          accessor
        )
      );
    }
    function createESDecorateClassElementAccessSetMethod(elementName) {
      const accessor = elementName.computed ? factory2.createElementAccessExpression(factory2.createIdentifier("obj"), elementName.name) : factory2.createPropertyAccessExpression(factory2.createIdentifier("obj"), elementName.name);
      return factory2.createPropertyAssignment(
        "set",
        factory2.createArrowFunction(
          /*modifiers*/
          void 0,
          /*typeParameters*/
          void 0,
          [
            factory2.createParameterDeclaration(
              /*modifiers*/
              void 0,
              /*dotDotDotToken*/
              void 0,
              factory2.createIdentifier("obj")
            ),
            factory2.createParameterDeclaration(
              /*modifiers*/
              void 0,
              /*dotDotDotToken*/
              void 0,
              factory2.createIdentifier("value")
            )
          ],
          /*type*/
          void 0,
          /*equalsGreaterThanToken*/
          void 0,
          factory2.createBlock([
            factory2.createExpressionStatement(
              factory2.createAssignment(
                accessor,
                factory2.createIdentifier("value")
              )
            )
          ])
        )
      );
    }
    function createESDecorateClassElementAccessHasMethod(elementName) {
      const propertyName = elementName.computed ? elementName.name : isIdentifier(elementName.name) ? factory2.createStringLiteralFromNode(elementName.name) : elementName.name;
      return factory2.createPropertyAssignment(
        "has",
        factory2.createArrowFunction(
          /*modifiers*/
          void 0,
          /*typeParameters*/
          void 0,
          [factory2.createParameterDeclaration(
            /*modifiers*/
            void 0,
            /*dotDotDotToken*/
            void 0,
            factory2.createIdentifier("obj")
          )],
          /*type*/
          void 0,
          /*equalsGreaterThanToken*/
          void 0,
          factory2.createBinaryExpression(
            propertyName,
            101 /* InKeyword */,
            factory2.createIdentifier("obj")
          )
        )
      );
    }
    function createESDecorateClassElementAccessObject(name, access) {
      const properties = [];
      properties.push(createESDecorateClassElementAccessHasMethod(name));
      if (access.get)
        properties.push(createESDecorateClassElementAccessGetMethod(name));
      if (access.set)
        properties.push(createESDecorateClassElementAccessSetMethod(name));
      return factory2.createObjectLiteralExpression(properties);
    }
    function createESDecorateClassElementContextObject(contextIn) {
      return factory2.createObjectLiteralExpression([
        factory2.createPropertyAssignment(factory2.createIdentifier("kind"), factory2.createStringLiteral(contextIn.kind)),
        factory2.createPropertyAssignment(factory2.createIdentifier("name"), contextIn.name.computed ? contextIn.name.name : factory2.createStringLiteralFromNode(contextIn.name.name)),
        factory2.createPropertyAssignment(factory2.createIdentifier("static"), contextIn.static ? factory2.createTrue() : factory2.createFalse()),
        factory2.createPropertyAssignment(factory2.createIdentifier("private"), contextIn.private ? factory2.createTrue() : factory2.createFalse()),
        factory2.createPropertyAssignment(factory2.createIdentifier("access"), createESDecorateClassElementAccessObject(contextIn.name, contextIn.access))
      ]);
    }
    function createESDecorateContextObject(contextIn) {
      return contextIn.kind === "class" ? createESDecorateClassContextObject(contextIn) : createESDecorateClassElementContextObject(contextIn);
    }
    function createESDecorateHelper(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
      context.requestEmitHelper(esDecorateHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__esDecorate"),
        /*typeArguments*/
        void 0,
        [
          ctor != null ? ctor : factory2.createNull(),
          descriptorIn != null ? descriptorIn : factory2.createNull(),
          decorators,
          createESDecorateContextObject(contextIn),
          initializers,
          extraInitializers
        ]
      );
    }
    function createRunInitializersHelper(thisArg, initializers, value) {
      context.requestEmitHelper(runInitializersHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__runInitializers"),
        /*typeArguments*/
        void 0,
        value ? [thisArg, initializers, value] : [thisArg, initializers]
      );
    }
    function createAssignHelper(attributesSegments) {
      if (getEmitScriptTarget(context.getCompilerOptions()) >= 2 /* ES2015 */) {
        return factory2.createCallExpression(
          factory2.createPropertyAccessExpression(factory2.createIdentifier("Object"), "assign"),
          /*typeArguments*/
          void 0,
          attributesSegments
        );
      }
      context.requestEmitHelper(assignHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__assign"),
        /*typeArguments*/
        void 0,
        attributesSegments
      );
    }
    function createAwaitHelper(expression) {
      context.requestEmitHelper(awaitHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__await"),
        /*typeArguments*/
        void 0,
        [expression]
      );
    }
    function createAsyncGeneratorHelper(generatorFunc, hasLexicalThis) {
      context.requestEmitHelper(awaitHelper);
      context.requestEmitHelper(asyncGeneratorHelper);
      (generatorFunc.emitNode || (generatorFunc.emitNode = {})).flags |= 524288 /* AsyncFunctionBody */ | 1048576 /* ReuseTempVariableScope */;
      return factory2.createCallExpression(
        getUnscopedHelperName("__asyncGenerator"),
        /*typeArguments*/
        void 0,
        [
          hasLexicalThis ? factory2.createThis() : factory2.createVoidZero(),
          factory2.createIdentifier("arguments"),
          generatorFunc
        ]
      );
    }
    function createAsyncDelegatorHelper(expression) {
      context.requestEmitHelper(awaitHelper);
      context.requestEmitHelper(asyncDelegator);
      return factory2.createCallExpression(
        getUnscopedHelperName("__asyncDelegator"),
        /*typeArguments*/
        void 0,
        [expression]
      );
    }
    function createAsyncValuesHelper(expression) {
      context.requestEmitHelper(asyncValues);
      return factory2.createCallExpression(
        getUnscopedHelperName("__asyncValues"),
        /*typeArguments*/
        void 0,
        [expression]
      );
    }
    function createRestHelper(value, elements, computedTempVariables, location) {
      context.requestEmitHelper(restHelper);
      const propertyNames = [];
      let computedTempVariableOffset = 0;
      for (let i = 0; i < elements.length - 1; i++) {
        const propertyName = getPropertyNameOfBindingOrAssignmentElement(elements[i]);
        if (propertyName) {
          if (isComputedPropertyName(propertyName)) {
            Debug.assertIsDefined(computedTempVariables, "Encountered computed property name but 'computedTempVariables' argument was not provided.");
            const temp = computedTempVariables[computedTempVariableOffset];
            computedTempVariableOffset++;
            propertyNames.push(
              factory2.createConditionalExpression(
                factory2.createTypeCheck(temp, "symbol"),
                /*questionToken*/
                void 0,
                temp,
                /*colonToken*/
                void 0,
                factory2.createAdd(temp, factory2.createStringLiteral(""))
              )
            );
          } else {
            propertyNames.push(factory2.createStringLiteralFromNode(propertyName));
          }
        }
      }
      return factory2.createCallExpression(
        getUnscopedHelperName("__rest"),
        /*typeArguments*/
        void 0,
        [
          value,
          setTextRange(
            factory2.createArrayLiteralExpression(propertyNames),
            location
          )
        ]
      );
    }
    function createAwaiterHelper(hasLexicalThis, hasLexicalArguments, promiseConstructor, body) {
      context.requestEmitHelper(awaiterHelper);
      const generatorFunc = factory2.createFunctionExpression(
        /*modifiers*/
        void 0,
        factory2.createToken(41 /* AsteriskToken */),
        /*name*/
        void 0,
        /*typeParameters*/
        void 0,
        /*parameters*/
        [],
        /*type*/
        void 0,
        body
      );
      (generatorFunc.emitNode || (generatorFunc.emitNode = {})).flags |= 524288 /* AsyncFunctionBody */ | 1048576 /* ReuseTempVariableScope */;
      return factory2.createCallExpression(
        getUnscopedHelperName("__awaiter"),
        /*typeArguments*/
        void 0,
        [
          hasLexicalThis ? factory2.createThis() : factory2.createVoidZero(),
          hasLexicalArguments ? factory2.createIdentifier("arguments") : factory2.createVoidZero(),
          promiseConstructor ? createExpressionFromEntityName(factory2, promiseConstructor) : factory2.createVoidZero(),
          generatorFunc
        ]
      );
    }
    function createExtendsHelper(name) {
      context.requestEmitHelper(extendsHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__extends"),
        /*typeArguments*/
        void 0,
        [name, factory2.createUniqueName("_super", 16 /* Optimistic */ | 32 /* FileLevel */)]
      );
    }
    function createTemplateObjectHelper(cooked, raw) {
      context.requestEmitHelper(templateObjectHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__makeTemplateObject"),
        /*typeArguments*/
        void 0,
        [cooked, raw]
      );
    }
    function createSpreadArrayHelper(to, from, packFrom) {
      context.requestEmitHelper(spreadArrayHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__spreadArray"),
        /*typeArguments*/
        void 0,
        [to, from, packFrom ? immutableTrue() : immutableFalse()]
      );
    }
    function createPropKeyHelper(expr) {
      context.requestEmitHelper(propKeyHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__propKey"),
        /*typeArguments*/
        void 0,
        [expr]
      );
    }
    function createSetFunctionNameHelper(f, name, prefix) {
      context.requestEmitHelper(setFunctionNameHelper);
      return context.factory.createCallExpression(
        getUnscopedHelperName("__setFunctionName"),
        /*typeArguments*/
        void 0,
        prefix ? [f, name, context.factory.createStringLiteral(prefix)] : [f, name]
      );
    }
    function createValuesHelper(expression) {
      context.requestEmitHelper(valuesHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__values"),
        /*typeArguments*/
        void 0,
        [expression]
      );
    }
    function createReadHelper(iteratorRecord, count) {
      context.requestEmitHelper(readHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__read"),
        /*typeArguments*/
        void 0,
        count !== void 0 ? [iteratorRecord, factory2.createNumericLiteral(count + "")] : [iteratorRecord]
      );
    }
    function createGeneratorHelper(body) {
      context.requestEmitHelper(generatorHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__generator"),
        /*typeArguments*/
        void 0,
        [factory2.createThis(), body]
      );
    }
    function createCreateBindingHelper(module2, inputName, outputName) {
      context.requestEmitHelper(createBindingHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__createBinding"),
        /*typeArguments*/
        void 0,
        [factory2.createIdentifier("exports"), module2, inputName, ...outputName ? [outputName] : []]
      );
    }
    function createImportStarHelper(expression) {
      context.requestEmitHelper(importStarHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__importStar"),
        /*typeArguments*/
        void 0,
        [expression]
      );
    }
    function createImportStarCallbackHelper() {
      context.requestEmitHelper(importStarHelper);
      return getUnscopedHelperName("__importStar");
    }
    function createImportDefaultHelper(expression) {
      context.requestEmitHelper(importDefaultHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__importDefault"),
        /*typeArguments*/
        void 0,
        [expression]
      );
    }
    function createExportStarHelper(moduleExpression, exportsExpression = factory2.createIdentifier("exports")) {
      context.requestEmitHelper(exportStarHelper);
      context.requestEmitHelper(createBindingHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__exportStar"),
        /*typeArguments*/
        void 0,
        [moduleExpression, exportsExpression]
      );
    }
    function createClassPrivateFieldGetHelper(receiver, state, kind, f) {
      context.requestEmitHelper(classPrivateFieldGetHelper);
      let args;
      if (!f) {
        args = [receiver, state, factory2.createStringLiteral(kind)];
      } else {
        args = [receiver, state, factory2.createStringLiteral(kind), f];
      }
      return factory2.createCallExpression(
        getUnscopedHelperName("__classPrivateFieldGet"),
        /*typeArguments*/
        void 0,
        args
      );
    }
    function createClassPrivateFieldSetHelper(receiver, state, value, kind, f) {
      context.requestEmitHelper(classPrivateFieldSetHelper);
      let args;
      if (!f) {
        args = [receiver, state, value, factory2.createStringLiteral(kind)];
      } else {
        args = [receiver, state, value, factory2.createStringLiteral(kind), f];
      }
      return factory2.createCallExpression(
        getUnscopedHelperName("__classPrivateFieldSet"),
        /*typeArguments*/
        void 0,
        args
      );
    }
    function createClassPrivateFieldInHelper(state, receiver) {
      context.requestEmitHelper(classPrivateFieldInHelper);
      return factory2.createCallExpression(
        getUnscopedHelperName("__classPrivateFieldIn"),
        /* typeArguments*/
        void 0,
        [state, receiver]
      );
    }
  }
  function compareEmitHelpers(x, y) {
    if (x === y)
      return 0 /* EqualTo */;
    if (x.priority === y.priority)
      return 0 /* EqualTo */;
    if (x.priority === void 0)
      return 1 /* GreaterThan */;
    if (y.priority === void 0)
      return -1 /* LessThan */;
    return compareValues(x.priority, y.priority);
  }
  function helperString(input, ...args) {
    return (uniqueName) => {
      let result = "";
      for (let i = 0; i < args.length; i++) {
        result += input[i];
        result += uniqueName(args[i]);
      }
      result += input[input.length - 1];
      return result;
    };
  }
  function getAllUnscopedEmitHelpers() {
    return allUnscopedEmitHelpers || (allUnscopedEmitHelpers = arrayToMap([
      decorateHelper,
      metadataHelper,
      paramHelper,
      esDecorateHelper,
      runInitializersHelper,
      assignHelper,
      awaitHelper,
      asyncGeneratorHelper,
      asyncDelegator,
      asyncValues,
      restHelper,
      awaiterHelper,
      extendsHelper,
      templateObjectHelper,
      spreadArrayHelper,
      valuesHelper,
      readHelper,
      propKeyHelper,
      setFunctionNameHelper,
      generatorHelper,
      importStarHelper,
      importDefaultHelper,
      exportStarHelper,
      classPrivateFieldGetHelper,
      classPrivateFieldSetHelper,
      classPrivateFieldInHelper,
      createBindingHelper,
      setModuleDefaultHelper
    ], (helper) => helper.name));
  }
  function isCallToHelper(firstSegment, helperName) {
    return isCallExpression(firstSegment) && isIdentifier(firstSegment.expression) && (getEmitFlags(firstSegment.expression) & 8192 /* HelperName */) !== 0 && firstSegment.expression.escapedText === helperName;
  }
  var PrivateIdentifierKind, decorateHelper, metadataHelper, paramHelper, esDecorateHelper, runInitializersHelper, assignHelper, awaitHelper, asyncGeneratorHelper, asyncDelegator, asyncValues, restHelper, awaiterHelper, extendsHelper, templateObjectHelper, readHelper, spreadArrayHelper, propKeyHelper, setFunctionNameHelper, valuesHelper, generatorHelper, createBindingHelper, setModuleDefaultHelper, importStarHelper, importDefaultHelper, exportStarHelper, classPrivateFieldGetHelper, classPrivateFieldSetHelper, classPrivateFieldInHelper, allUnscopedEmitHelpers, asyncSuperHelper, advancedAsyncSuperHelper;
  var init_emitHelpers = __esm({
    "src/compiler/factory/emitHelpers.ts"() {
      "use strict";
      init_ts2();
      PrivateIdentifierKind = /* @__PURE__ */ ((PrivateIdentifierKind2) => {
        PrivateIdentifierKind2["Field"] = "f";
        PrivateIdentifierKind2["Method"] = "m";
        PrivateIdentifierKind2["Accessor"] = "a";
        return PrivateIdentifierKind2;
      })(PrivateIdentifierKind || {});
      decorateHelper = {
        name: "typescript:decorate",
        importName: "__decorate",
        scoped: false,
        priority: 2,
        text: `
            var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
                var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
                else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };`
      };
      metadataHelper = {
        name: "typescript:metadata",
        importName: "__metadata",
        scoped: false,
        priority: 3,
        text: `
            var __metadata = (this && this.__metadata) || function (k, v) {
                if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
            };`
      };
      paramHelper = {
        name: "typescript:param",
        importName: "__param",
        scoped: false,
        priority: 4,
        text: `
            var __param = (this && this.__param) || function (paramIndex, decorator) {
                return function (target, key) { decorator(target, key, paramIndex); }
            };`
      };
      esDecorateHelper = {
        name: "typescript:esDecorate",
        importName: "__esDecorate",
        scoped: false,
        priority: 2,
        text: `
        var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
            function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
            var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
            var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
            var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
            var _, done = false;
            for (var i = decorators.length - 1; i >= 0; i--) {
                var context = {};
                for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
                for (var p in contextIn.access) context.access[p] = contextIn.access[p];
                context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
                var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
                if (kind === "accessor") {
                    if (result === void 0) continue;
                    if (result === null || typeof result !== "object") throw new TypeError("Object expected");
                    if (_ = accept(result.get)) descriptor.get = _;
                    if (_ = accept(result.set)) descriptor.set = _;
                    if (_ = accept(result.init)) initializers.push(_);
                }
                else if (_ = accept(result)) {
                    if (kind === "field") initializers.push(_);
                    else descriptor[key] = _;
                }
            }
            if (target) Object.defineProperty(target, contextIn.name, descriptor);
            done = true;
        };`
      };
      runInitializersHelper = {
        name: "typescript:runInitializers",
        importName: "__runInitializers",
        scoped: false,
        priority: 2,
        text: `
        var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
            var useValue = arguments.length > 2;
            for (var i = 0; i < initializers.length; i++) {
                value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
            }
            return useValue ? value : void 0;
        };`
      };
      assignHelper = {
        name: "typescript:assign",
        importName: "__assign",
        scoped: false,
        priority: 1,
        text: `
            var __assign = (this && this.__assign) || function () {
                __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };`
      };
      awaitHelper = {
        name: "typescript:await",
        importName: "__await",
        scoped: false,
        text: `
            var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }`
      };
      asyncGeneratorHelper = {
        name: "typescript:asyncGenerator",
        importName: "__asyncGenerator",
        scoped: false,
        dependencies: [awaitHelper],
        text: `
            var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var g = generator.apply(thisArg, _arguments || []), i, q = [];
                return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
                function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
                function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
                function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
                function fulfill(value) { resume("next", value); }
                function reject(value) { resume("throw", value); }
                function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
            };`
      };
      asyncDelegator = {
        name: "typescript:asyncDelegator",
        importName: "__asyncDelegator",
        scoped: false,
        dependencies: [awaitHelper],
        text: `
            var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
                var i, p;
                return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
                function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
            };`
      };
      asyncValues = {
        name: "typescript:asyncValues",
        importName: "__asyncValues",
        scoped: false,
        text: `
            var __asyncValues = (this && this.__asyncValues) || function (o) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var m = o[Symbol.asyncIterator], i;
                return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
                function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
                function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
            };`
      };
      restHelper = {
        name: "typescript:rest",
        importName: "__rest",
        scoped: false,
        text: `
            var __rest = (this && this.__rest) || function (s, e) {
                var t = {};
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                    t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                            t[p[i]] = s[p[i]];
                    }
                return t;
            };`
      };
      awaiterHelper = {
        name: "typescript:awaiter",
        importName: "__awaiter",
        scoped: false,
        priority: 5,
        text: `
            var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };`
      };
      extendsHelper = {
        name: "typescript:extends",
        importName: "__extends",
        scoped: false,
        priority: 0,
        text: `
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = function (d, b) {
                    extendStatics = Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
                    return extendStatics(d, b);
                };

                return function (d, b) {
                    if (typeof b !== "function" && b !== null)
                        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    extendStatics(d, b);
                    function __() { this.constructor = d; }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();`
      };
      templateObjectHelper = {
        name: "typescript:makeTemplateObject",
        importName: "__makeTemplateObject",
        scoped: false,
        priority: 0,
        text: `
            var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
                if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
                return cooked;
            };`
      };
      readHelper = {
        name: "typescript:read",
        importName: "__read",
        scoped: false,
        text: `
            var __read = (this && this.__read) || function (o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            };`
      };
      spreadArrayHelper = {
        name: "typescript:spreadArray",
        importName: "__spreadArray",
        scoped: false,
        text: `
            var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
                if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                    if (ar || !(i in from)) {
                        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                        ar[i] = from[i];
                    }
                }
                return to.concat(ar || Array.prototype.slice.call(from));
            };`
      };
      propKeyHelper = {
        name: "typescript:propKey",
        importName: "__propKey",
        scoped: false,
        text: `
        var __propKey = (this && this.__propKey) || function (x) {
            return typeof x === "symbol" ? x : "".concat(x);
        };`
      };
      setFunctionNameHelper = {
        name: "typescript:setFunctionName",
        importName: "__setFunctionName",
        scoped: false,
        text: `
        var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
            if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
            return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
        };`
      };
      valuesHelper = {
        name: "typescript:values",
        importName: "__values",
        scoped: false,
        text: `
            var __values = (this && this.__values) || function(o) {
                var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                if (m) return m.call(o);
                if (o && typeof o.length === "number") return {
                    next: function () {
                        if (o && i >= o.length) o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
                throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
            };`
      };
      generatorHelper = {
        name: "typescript:generator",
        importName: "__generator",
        scoped: false,
        priority: 6,
        text: `
            var __generator = (this && this.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };`
      };
      createBindingHelper = {
        name: "typescript:commonjscreatebinding",
        importName: "__createBinding",
        scoped: false,
        priority: 1,
        text: `
            var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                var desc = Object.getOwnPropertyDescriptor(m, k);
                if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                  desc = { enumerable: true, get: function() { return m[k]; } };
                }
                Object.defineProperty(o, k2, desc);
            }) : (function(o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                o[k2] = m[k];
            }));`
      };
      setModuleDefaultHelper = {
        name: "typescript:commonjscreatevalue",
        importName: "__setModuleDefault",
        scoped: false,
        priority: 1,
        text: `
            var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
                Object.defineProperty(o, "default", { enumerable: true, value: v });
            }) : function(o, v) {
                o["default"] = v;
            });`
      };
      importStarHelper = {
        name: "typescript:commonjsimportstar",
        importName: "__importStar",
        scoped: false,
        dependencies: [createBindingHelper, setModuleDefaultHelper],
        priority: 2,
        text: `
            var __importStar = (this && this.__importStar) || function (mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                __setModuleDefault(result, mod);
                return result;
            };`
      };
      importDefaultHelper = {
        name: "typescript:commonjsimportdefault",
        importName: "__importDefault",
        scoped: false,
        text: `
            var __importDefault = (this && this.__importDefault) || function (mod) {
                return (mod && mod.__esModule) ? mod : { "default": mod };
            };`
      };
      exportStarHelper = {
        name: "typescript:export-star",
        importName: "__exportStar",
        scoped: false,
        dependencies: [createBindingHelper],
        priority: 2,
        text: `
            var __exportStar = (this && this.__exportStar) || function(m, exports) {
                for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
            };`
      };
      classPrivateFieldGetHelper = {
        name: "typescript:classPrivateFieldGet",
        importName: "__classPrivateFieldGet",
        scoped: false,
        text: `
            var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
                if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
                if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
            };`
      };
      classPrivateFieldSetHelper = {
        name: "typescript:classPrivateFieldSet",
        importName: "__classPrivateFieldSet",
        scoped: false,
        text: `
            var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
                if (kind === "m") throw new TypeError("Private method is not writable");
                if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
                if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
            };`
      };
      classPrivateFieldInHelper = {
        name: "typescript:classPrivateFieldIn",
        importName: "__classPrivateFieldIn",
        scoped: false,
        text: `
            var __classPrivateFieldIn = (this && this.__classPrivateFieldIn) || function(state, receiver) {
                if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
                return typeof state === "function" ? receiver === state : state.has(receiver);
            };`
      };
      asyncSuperHelper = {
        name: "typescript:async-super",
        scoped: true,
        text: helperString`
            const ${"_superIndex"} = name => super[name];`
      };
      advancedAsyncSuperHelper = {
        name: "typescript:advanced-async-super",
        scoped: true,
        text: helperString`
            const ${"_superIndex"} = (function (geti, seti) {
                const cache = Object.create(null);
                return name => cache[name] || (cache[name] = { get value() { return geti(name); }, set value(v) { seti(name, v); } });
            })(name => super[name], (name, value) => super[name] = value);`
      };
    }
  });

  // src/compiler/factory/nodeTests.ts
  function isNumericLiteral(node) {
    return node.kind === 8 /* NumericLiteral */;
  }
  function isBigIntLiteral(node) {
    return node.kind === 9 /* BigIntLiteral */;
  }
  function isStringLiteral(node) {
    return node.kind === 10 /* StringLiteral */;
  }
  function isJsxText(node) {
    return node.kind === 11 /* JsxText */;
  }
  function isRegularExpressionLiteral(node) {
    return node.kind === 13 /* RegularExpressionLiteral */;
  }
  function isNoSubstitutionTemplateLiteral(node) {
    return node.kind === 14 /* NoSubstitutionTemplateLiteral */;
  }
  function isTemplateHead(node) {
    return node.kind === 15 /* TemplateHead */;
  }
  function isTemplateMiddle(node) {
    return node.kind === 16 /* TemplateMiddle */;
  }
  function isTemplateTail(node) {
    return node.kind === 17 /* TemplateTail */;
  }
  function isDotDotDotToken(node) {
    return node.kind === 25 /* DotDotDotToken */;
  }
  function isCommaToken(node) {
    return node.kind === 27 /* CommaToken */;
  }
  function isPlusToken(node) {
    return node.kind === 39 /* PlusToken */;
  }
  function isMinusToken(node) {
    return node.kind === 40 /* MinusToken */;
  }
  function isAsteriskToken(node) {
    return node.kind === 41 /* AsteriskToken */;
  }
  function isExclamationToken(node) {
    return node.kind === 53 /* ExclamationToken */;
  }
  function isQuestionToken(node) {
    return node.kind === 57 /* QuestionToken */;
  }
  function isColonToken(node) {
    return node.kind === 58 /* ColonToken */;
  }
  function isQuestionDotToken(node) {
    return node.kind === 28 /* QuestionDotToken */;
  }
  function isEqualsGreaterThanToken(node) {
    return node.kind === 38 /* EqualsGreaterThanToken */;
  }
  function isIdentifier(node) {
    return node.kind === 79 /* Identifier */;
  }
  function isPrivateIdentifier(node) {
    return node.kind === 80 /* PrivateIdentifier */;
  }
  function isExportModifier(node) {
    return node.kind === 93 /* ExportKeyword */;
  }
  function isDefaultModifier(node) {
    return node.kind === 88 /* DefaultKeyword */;
  }
  function isAsyncModifier(node) {
    return node.kind === 132 /* AsyncKeyword */;
  }
  function isAssertsKeyword(node) {
    return node.kind === 129 /* AssertsKeyword */;
  }
  function isAwaitKeyword(node) {
    return node.kind === 133 /* AwaitKeyword */;
  }
  function isReadonlyKeyword(node) {
    return node.kind === 146 /* ReadonlyKeyword */;
  }
  function isStaticModifier(node) {
    return node.kind === 124 /* StaticKeyword */;
  }
  function isAbstractModifier(node) {
    return node.kind === 126 /* AbstractKeyword */;
  }
  function isOverrideModifier(node) {
    return node.kind === 161 /* OverrideKeyword */;
  }
  function isAccessorModifier(node) {
    return node.kind === 127 /* AccessorKeyword */;
  }
  function isSuperKeyword(node) {
    return node.kind === 106 /* SuperKeyword */;
  }
  function isImportKeyword(node) {
    return node.kind === 100 /* ImportKeyword */;
  }
  function isCaseKeyword(node) {
    return node.kind === 82 /* CaseKeyword */;
  }
  function isQualifiedName(node) {
    return node.kind === 163 /* QualifiedName */;
  }
  function isComputedPropertyName(node) {
    return node.kind === 164 /* ComputedPropertyName */;
  }
  function isTypeParameterDeclaration(node) {
    return node.kind === 165 /* TypeParameter */;
  }
  function isParameter(node) {
    return node.kind === 166 /* Parameter */;
  }
  function isDecorator(node) {
    return node.kind === 167 /* Decorator */;
  }
  function isPropertySignature(node) {
    return node.kind === 168 /* PropertySignature */;
  }
  function isPropertyDeclaration(node) {
    return node.kind === 169 /* PropertyDeclaration */;
  }
  function isMethodSignature(node) {
    return node.kind === 170 /* MethodSignature */;
  }
  function isMethodDeclaration(node) {
    return node.kind === 171 /* MethodDeclaration */;
  }
  function isClassStaticBlockDeclaration(node) {
    return node.kind === 172 /* ClassStaticBlockDeclaration */;
  }
  function isConstructorDeclaration(node) {
    return node.kind === 173 /* Constructor */;
  }
  function isGetAccessorDeclaration(node) {
    return node.kind === 174 /* GetAccessor */;
  }
  function isSetAccessorDeclaration(node) {
    return node.kind === 175 /* SetAccessor */;
  }
  function isCallSignatureDeclaration(node) {
    return node.kind === 176 /* CallSignature */;
  }
  function isConstructSignatureDeclaration(node) {
    return node.kind === 177 /* ConstructSignature */;
  }
  function isIndexSignatureDeclaration(node) {
    return node.kind === 178 /* IndexSignature */;
  }
  function isTypePredicateNode(node) {
    return node.kind === 179 /* TypePredicate */;
  }
  function isTypeReferenceNode(node) {
    return node.kind === 180 /* TypeReference */;
  }
  function isFunctionTypeNode(node) {
    return node.kind === 181 /* FunctionType */;
  }
  function isConstructorTypeNode(node) {
    return node.kind === 182 /* ConstructorType */;
  }
  function isTypeQueryNode(node) {
    return node.kind === 183 /* TypeQuery */;
  }
  function isTypeLiteralNode(node) {
    return node.kind === 184 /* TypeLiteral */;
  }
  function isArrayTypeNode(node) {
    return node.kind === 185 /* ArrayType */;
  }
  function isTupleTypeNode(node) {
    return node.kind === 186 /* TupleType */;
  }
  function isNamedTupleMember(node) {
    return node.kind === 199 /* NamedTupleMember */;
  }
  function isOptionalTypeNode(node) {
    return node.kind === 187 /* OptionalType */;
  }
  function isRestTypeNode(node) {
    return node.kind === 188 /* RestType */;
  }
  function isUnionTypeNode(node) {
    return node.kind === 189 /* UnionType */;
  }
  function isIntersectionTypeNode(node) {
    return node.kind === 190 /* IntersectionType */;
  }
  function isConditionalTypeNode(node) {
    return node.kind === 191 /* ConditionalType */;
  }
  function isInferTypeNode(node) {
    return node.kind === 192 /* InferType */;
  }
  function isParenthesizedTypeNode(node) {
    return node.kind === 193 /* ParenthesizedType */;
  }
  function isThisTypeNode(node) {
    return node.kind === 194 /* ThisType */;
  }
  function isTypeOperatorNode(node) {
    return node.kind === 195 /* TypeOperator */;
  }
  function isIndexedAccessTypeNode(node) {
    return node.kind === 196 /* IndexedAccessType */;
  }
  function isMappedTypeNode(node) {
    return node.kind === 197 /* MappedType */;
  }
  function isLiteralTypeNode(node) {
    return node.kind === 198 /* LiteralType */;
  }
  function isImportTypeNode(node) {
    return node.kind === 202 /* ImportType */;
  }
  function isTemplateLiteralTypeSpan(node) {
    return node.kind === 201 /* TemplateLiteralTypeSpan */;
  }
  function isTemplateLiteralTypeNode(node) {
    return node.kind === 200 /* TemplateLiteralType */;
  }
  function isObjectBindingPattern(node) {
    return node.kind === 203 /* ObjectBindingPattern */;
  }
  function isArrayBindingPattern(node) {
    return node.kind === 204 /* ArrayBindingPattern */;
  }
  function isBindingElement(node) {
    return node.kind === 205 /* BindingElement */;
  }
  function isArrayLiteralExpression(node) {
    return node.kind === 206 /* ArrayLiteralExpression */;
  }
  function isObjectLiteralExpression(node) {
    return node.kind === 207 /* ObjectLiteralExpression */;
  }
  function isPropertyAccessExpression(node) {
    return node.kind === 208 /* PropertyAccessExpression */;
  }
  function isElementAccessExpression(node) {
    return node.kind === 209 /* ElementAccessExpression */;
  }
  function isCallExpression(node) {
    return node.kind === 210 /* CallExpression */;
  }
  function isNewExpression(node) {
    return node.kind === 211 /* NewExpression */;
  }
  function isTaggedTemplateExpression(node) {
    return node.kind === 212 /* TaggedTemplateExpression */;
  }
  function isTypeAssertionExpression(node) {
    return node.kind === 213 /* TypeAssertionExpression */;
  }
  function isParenthesizedExpression(node) {
    return node.kind === 214 /* ParenthesizedExpression */;
  }
  function isFunctionExpression(node) {
    return node.kind === 215 /* FunctionExpression */;
  }
  function isArrowFunction(node) {
    return node.kind === 216 /* ArrowFunction */;
  }
  function isDeleteExpression(node) {
    return node.kind === 217 /* DeleteExpression */;
  }
  function isTypeOfExpression(node) {
    return node.kind === 218 /* TypeOfExpression */;
  }
  function isVoidExpression(node) {
    return node.kind === 219 /* VoidExpression */;
  }
  function isAwaitExpression(node) {
    return node.kind === 220 /* AwaitExpression */;
  }
  function isPrefixUnaryExpression(node) {
    return node.kind === 221 /* PrefixUnaryExpression */;
  }
  function isPostfixUnaryExpression(node) {
    return node.kind === 222 /* PostfixUnaryExpression */;
  }
  function isBinaryExpression(node) {
    return node.kind === 223 /* BinaryExpression */;
  }
  function isConditionalExpression(node) {
    return node.kind === 224 /* ConditionalExpression */;
  }
  function isTemplateExpression(node) {
    return node.kind === 225 /* TemplateExpression */;
  }
  function isYieldExpression(node) {
    return node.kind === 226 /* YieldExpression */;
  }
  function isSpreadElement(node) {
    return node.kind === 227 /* SpreadElement */;
  }
  function isClassExpression(node) {
    return node.kind === 228 /* ClassExpression */;
  }
  function isOmittedExpression(node) {
    return node.kind === 229 /* OmittedExpression */;
  }
  function isExpressionWithTypeArguments(node) {
    return node.kind === 230 /* ExpressionWithTypeArguments */;
  }
  function isAsExpression(node) {
    return node.kind === 231 /* AsExpression */;
  }
  function isSatisfiesExpression(node) {
    return node.kind === 235 /* SatisfiesExpression */;
  }
  function isNonNullExpression(node) {
    return node.kind === 232 /* NonNullExpression */;
  }
  function isMetaProperty(node) {
    return node.kind === 233 /* MetaProperty */;
  }
  function isSyntheticExpression(node) {
    return node.kind === 234 /* SyntheticExpression */;
  }
  function isPartiallyEmittedExpression(node) {
    return node.kind === 356 /* PartiallyEmittedExpression */;
  }
  function isCommaListExpression(node) {
    return node.kind === 357 /* CommaListExpression */;
  }
  function isTemplateSpan(node) {
    return node.kind === 236 /* TemplateSpan */;
  }
  function isSemicolonClassElement(node) {
    return node.kind === 237 /* SemicolonClassElement */;
  }
  function isBlock(node) {
    return node.kind === 238 /* Block */;
  }
  function isVariableStatement(node) {
    return node.kind === 240 /* VariableStatement */;
  }
  function isEmptyStatement(node) {
    return node.kind === 239 /* EmptyStatement */;
  }
  function isExpressionStatement(node) {
    return node.kind === 241 /* ExpressionStatement */;
  }
  function isIfStatement(node) {
    return node.kind === 242 /* IfStatement */;
  }
  function isDoStatement(node) {
    return node.kind === 243 /* DoStatement */;
  }
  function isWhileStatement(node) {
    return node.kind === 244 /* WhileStatement */;
  }
  function isForStatement(node) {
    return node.kind === 245 /* ForStatement */;
  }
  function isForInStatement(node) {
    return node.kind === 246 /* ForInStatement */;
  }
  function isForOfStatement(node) {
    return node.kind === 247 /* ForOfStatement */;
  }
  function isContinueStatement(node) {
    return node.kind === 248 /* ContinueStatement */;
  }
  function isBreakStatement(node) {
    return node.kind === 249 /* BreakStatement */;
  }
  function isReturnStatement(node) {
    return node.kind === 250 /* ReturnStatement */;
  }
  function isWithStatement(node) {
    return node.kind === 251 /* WithStatement */;
  }
  function isSwitchStatement(node) {
    return node.kind === 252 /* SwitchStatement */;
  }
  function isLabeledStatement(node) {
    return node.kind === 253 /* LabeledStatement */;
  }
  function isThrowStatement(node) {
    return node.kind === 254 /* ThrowStatement */;
  }
  function isTryStatement(node) {
    return node.kind === 255 /* TryStatement */;
  }
  function isDebuggerStatement(node) {
    return node.kind === 256 /* DebuggerStatement */;
  }
  function isVariableDeclaration(node) {
    return node.kind === 257 /* VariableDeclaration */;
  }
  function isVariableDeclarationList(node) {
    return node.kind === 258 /* VariableDeclarationList */;
  }
  function isFunctionDeclaration(node) {
    return node.kind === 259 /* FunctionDeclaration */;
  }
  function isClassDeclaration(node) {
    return node.kind === 260 /* ClassDeclaration */;
  }
  function isInterfaceDeclaration(node) {
    return node.kind === 261 /* InterfaceDeclaration */;
  }
  function isTypeAliasDeclaration(node) {
    return node.kind === 262 /* TypeAliasDeclaration */;
  }
  function isEnumDeclaration(node) {
    return node.kind === 263 /* EnumDeclaration */;
  }
  function isModuleDeclaration(node) {
    return node.kind === 264 /* ModuleDeclaration */;
  }
  function isModuleBlock(node) {
    return node.kind === 265 /* ModuleBlock */;
  }
  function isCaseBlock(node) {
    return node.kind === 266 /* CaseBlock */;
  }
  function isNamespaceExportDeclaration(node) {
    return node.kind === 267 /* NamespaceExportDeclaration */;
  }
  function isImportEqualsDeclaration(node) {
    return node.kind === 268 /* ImportEqualsDeclaration */;
  }
  function isImportDeclaration(node) {
    return node.kind === 269 /* ImportDeclaration */;
  }
  function isImportClause(node) {
    return node.kind === 270 /* ImportClause */;
  }
  function isImportTypeAssertionContainer(node) {
    return node.kind === 298 /* ImportTypeAssertionContainer */;
  }
  function isAssertClause(node) {
    return node.kind === 296 /* AssertClause */;
  }
  function isAssertEntry(node) {
    return node.kind === 297 /* AssertEntry */;
  }
  function isNamespaceImport(node) {
    return node.kind === 271 /* NamespaceImport */;
  }
  function isNamespaceExport(node) {
    return node.kind === 277 /* NamespaceExport */;
  }
  function isNamedImports(node) {
    return node.kind === 272 /* NamedImports */;
  }
  function isImportSpecifier(node) {
    return node.kind === 273 /* ImportSpecifier */;
  }
  function isExportAssignment(node) {
    return node.kind === 274 /* ExportAssignment */;
  }
  function isExportDeclaration(node) {
    return node.kind === 275 /* ExportDeclaration */;
  }
  function isNamedExports(node) {
    return node.kind === 276 /* NamedExports */;
  }
  function isExportSpecifier(node) {
    return node.kind === 278 /* ExportSpecifier */;
  }
  function isMissingDeclaration(node) {
    return node.kind === 279 /* MissingDeclaration */;
  }
  function isNotEmittedStatement(node) {
    return node.kind === 355 /* NotEmittedStatement */;
  }
  function isSyntheticReference(node) {
    return node.kind === 360 /* SyntheticReferenceExpression */;
  }
  function isMergeDeclarationMarker(node) {
    return node.kind === 358 /* MergeDeclarationMarker */;
  }
  function isEndOfDeclarationMarker(node) {
    return node.kind === 359 /* EndOfDeclarationMarker */;
  }
  function isExternalModuleReference(node) {
    return node.kind === 280 /* ExternalModuleReference */;
  }
  function isJsxElement(node) {
    return node.kind === 281 /* JsxElement */;
  }
  function isJsxSelfClosingElement(node) {
    return node.kind === 282 /* JsxSelfClosingElement */;
  }
  function isJsxOpeningElement(node) {
    return node.kind === 283 /* JsxOpeningElement */;
  }
  function isJsxClosingElement(node) {
    return node.kind === 284 /* JsxClosingElement */;
  }
  function isJsxFragment(node) {
    return node.kind === 285 /* JsxFragment */;
  }
  function isJsxOpeningFragment(node) {
    return node.kind === 286 /* JsxOpeningFragment */;
  }
  function isJsxClosingFragment(node) {
    return node.kind === 287 /* JsxClosingFragment */;
  }
  function isJsxAttribute(node) {
    return node.kind === 288 /* JsxAttribute */;
  }
  function isJsxAttributes(node) {
    return node.kind === 289 /* JsxAttributes */;
  }
  function isJsxSpreadAttribute(node) {
    return node.kind === 290 /* JsxSpreadAttribute */;
  }
  function isJsxExpression(node) {
    return node.kind === 291 /* JsxExpression */;
  }
  function isCaseClause(node) {
    return node.kind === 292 /* CaseClause */;
  }
  function isDefaultClause(node) {
    return node.kind === 293 /* DefaultClause */;
  }
  function isHeritageClause(node) {
    return node.kind === 294 /* HeritageClause */;
  }
  function isCatchClause(node) {
    return node.kind === 295 /* CatchClause */;
  }
  function isPropertyAssignment(node) {
    return node.kind === 299 /* PropertyAssignment */;
  }
  function isShorthandPropertyAssignment(node) {
    return node.kind === 300 /* ShorthandPropertyAssignment */;
  }
  function isSpreadAssignment(node) {
    return node.kind === 301 /* SpreadAssignment */;
  }
  function isEnumMember(node) {
    return node.kind === 302 /* EnumMember */;
  }
  function isUnparsedPrepend(node) {
    return node.kind === 304 /* UnparsedPrepend */;
  }
  function isSourceFile(node) {
    return node.kind === 308 /* SourceFile */;
  }
  function isBundle(node) {
    return node.kind === 309 /* Bundle */;
  }
  function isUnparsedSource(node) {
    return node.kind === 310 /* UnparsedSource */;
  }
  function isJSDocTypeExpression(node) {
    return node.kind === 312 /* JSDocTypeExpression */;
  }
  function isJSDocNameReference(node) {
    return node.kind === 313 /* JSDocNameReference */;
  }
  function isJSDocMemberName(node) {
    return node.kind === 314 /* JSDocMemberName */;
  }
  function isJSDocLink(node) {
    return node.kind === 327 /* JSDocLink */;
  }
  function isJSDocLinkCode(node) {
    return node.kind === 328 /* JSDocLinkCode */;
  }
  function isJSDocLinkPlain(node) {
    return node.kind === 329 /* JSDocLinkPlain */;
  }
  function isJSDocAllType(node) {
    return node.kind === 315 /* JSDocAllType */;
  }
  function isJSDocUnknownType(node) {
    return node.kind === 316 /* JSDocUnknownType */;
  }
  function isJSDocNullableType(node) {
    return node.kind === 317 /* JSDocNullableType */;
  }
  function isJSDocNonNullableType(node) {
    return node.kind === 318 /* JSDocNonNullableType */;
  }
  function isJSDocOptionalType(node) {
    return node.kind === 319 /* JSDocOptionalType */;
  }
  function isJSDocFunctionType(node) {
    return node.kind === 320 /* JSDocFunctionType */;
  }
  function isJSDocVariadicType(node) {
    return node.kind === 321 /* JSDocVariadicType */;
  }
  function isJSDocNamepathType(node) {
    return node.kind === 322 /* JSDocNamepathType */;
  }
  function isJSDoc(node) {
    return node.kind === 323 /* JSDoc */;
  }
  function isJSDocTypeLiteral(node) {
    return node.kind === 325 /* JSDocTypeLiteral */;
  }
  function isJSDocSignature(node) {
    return node.kind === 326 /* JSDocSignature */;
  }
  function isJSDocAugmentsTag(node) {
    return node.kind === 331 /* JSDocAugmentsTag */;
  }
  function isJSDocAuthorTag(node) {
    return node.kind === 333 /* JSDocAuthorTag */;
  }
  function isJSDocClassTag(node) {
    return node.kind === 335 /* JSDocClassTag */;
  }
  function isJSDocCallbackTag(node) {
    return node.kind === 341 /* JSDocCallbackTag */;
  }
  function isJSDocPublicTag(node) {
    return node.kind === 336 /* JSDocPublicTag */;
  }
  function isJSDocPrivateTag(node) {
    return node.kind === 337 /* JSDocPrivateTag */;
  }
  function isJSDocProtectedTag(node) {
    return node.kind === 338 /* JSDocProtectedTag */;
  }
  function isJSDocReadonlyTag(node) {
    return node.kind === 339 /* JSDocReadonlyTag */;
  }
  function isJSDocOverrideTag(node) {
    return node.kind === 340 /* JSDocOverrideTag */;
  }
  function isJSDocOverloadTag(node) {
    return node.kind === 342 /* JSDocOverloadTag */;
  }
  function isJSDocDeprecatedTag(node) {
    return node.kind === 334 /* JSDocDeprecatedTag */;
  }
  function isJSDocSeeTag(node) {
    return node.kind === 350 /* JSDocSeeTag */;
  }
  function isJSDocEnumTag(node) {
    return node.kind === 343 /* JSDocEnumTag */;
  }
  function isJSDocParameterTag(node) {
    return node.kind === 344 /* JSDocParameterTag */;
  }
  function isJSDocReturnTag(node) {
    return node.kind === 345 /* JSDocReturnTag */;
  }
  function isJSDocThisTag(node) {
    return node.kind === 346 /* JSDocThisTag */;
  }
  function isJSDocTypeTag(node) {
    return node.kind === 347 /* JSDocTypeTag */;
  }
  function isJSDocTemplateTag(node) {
    return node.kind === 348 /* JSDocTemplateTag */;
  }
  function isJSDocTypedefTag(node) {
    return node.kind === 349 /* JSDocTypedefTag */;
  }
  function isJSDocUnknownTag(node) {
    return node.kind === 330 /* JSDocTag */;
  }
  function isJSDocPropertyTag(node) {
    return node.kind === 351 /* JSDocPropertyTag */;
  }
  function isJSDocImplementsTag(node) {
    return node.kind === 332 /* JSDocImplementsTag */;
  }
  function isJSDocSatisfiesTag(node) {
    return node.kind === 353 /* JSDocSatisfiesTag */;
  }
  function isJSDocThrowsTag(node) {
    return node.kind === 352 /* JSDocThrowsTag */;
  }
  function isSyntaxList(n) {
    return n.kind === 354 /* SyntaxList */;
  }
  var init_nodeTests = __esm({
    "src/compiler/factory/nodeTests.ts"() {
      "use strict";
      init_ts2();
    }
  });

  // src/compiler/factory/utilities.ts
  function createEmptyExports(factory2) {
    return factory2.createExportDeclaration(
      /*modifiers*/
      void 0,
      /*isTypeOnly*/
      false,
      factory2.createNamedExports([]),
      /*moduleSpecifier*/
      void 0
    );
  }
  function createMemberAccessForPropertyName(factory2, target, memberName, location) {
    if (isComputedPropertyName(memberName)) {
      return setTextRange(factory2.createElementAccessExpression(target, memberName.expression), location);
    } else {
      const expression = setTextRange(
        isMemberName(memberName) ? factory2.createPropertyAccessExpression(target, memberName) : factory2.createElementAccessExpression(target, memberName),
        memberName
      );
      addEmitFlags(expression, 128 /* NoNestedSourceMaps */);
      return expression;
    }
  }
  function createReactNamespace(reactNamespace, parent2) {
    const react = parseNodeFactory.createIdentifier(reactNamespace || "React");
    setParent(react, getParseTreeNode(parent2));
    return react;
  }
  function createJsxFactoryExpressionFromEntityName(factory2, jsxFactory, parent2) {
    if (isQualifiedName(jsxFactory)) {
      const left = createJsxFactoryExpressionFromEntityName(factory2, jsxFactory.left, parent2);
      const right = factory2.createIdentifier(idText(jsxFactory.right));
      right.escapedText = jsxFactory.right.escapedText;
      return factory2.createPropertyAccessExpression(left, right);
    } else {
      return createReactNamespace(idText(jsxFactory), parent2);
    }
  }
  function createJsxFactoryExpression(factory2, jsxFactoryEntity, reactNamespace, parent2) {
    return jsxFactoryEntity ? createJsxFactoryExpressionFromEntityName(factory2, jsxFactoryEntity, parent2) : factory2.createPropertyAccessExpression(
      createReactNamespace(reactNamespace, parent2),
      "createElement"
    );
  }
  function createJsxFragmentFactoryExpression(factory2, jsxFragmentFactoryEntity, reactNamespace, parent2) {
    return jsxFragmentFactoryEntity ? createJsxFactoryExpressionFromEntityName(factory2, jsxFragmentFactoryEntity, parent2) : factory2.createPropertyAccessExpression(
      createReactNamespace(reactNamespace, parent2),
      "Fragment"
    );
  }
  function createExpressionForJsxElement(factory2, callee, tagName, props, children, location) {
    const argumentsList = [tagName];
    if (props) {
      argumentsList.push(props);
    }
    if (children && children.length > 0) {
      if (!props) {
        argumentsList.push(factory2.createNull());
      }
      if (children.length > 1) {
        for (const child of children) {
          startOnNewLine(child);
          argumentsList.push(child);
        }
      } else {
        argumentsList.push(children[0]);
      }
    }
    return setTextRange(
      factory2.createCallExpression(
        callee,
        /*typeArguments*/
        void 0,
        argumentsList
      ),
      location
    );
  }
  function createExpressionForJsxFragment(factory2, jsxFactoryEntity, jsxFragmentFactoryEntity, reactNamespace, children, parentElement, location) {
    const tagName = createJsxFragmentFactoryExpression(factory2, jsxFragmentFactoryEntity, reactNamespace, parentElement);
    const argumentsList = [tagName, factory2.createNull()];
    if (children && children.length > 0) {
      if (children.length > 1) {
        for (const child of children) {
          startOnNewLine(child);
          argumentsList.push(child);
        }
      } else {
        argumentsList.push(children[0]);
      }
    }
    return setTextRange(
      factory2.createCallExpression(
        createJsxFactoryExpression(factory2, jsxFactoryEntity, reactNamespace, parentElement),
        /*typeArguments*/
        void 0,
        argumentsList
      ),
      location
    );
  }
  function createForOfBindingStatement(factory2, node, boundValue) {
    if (isVariableDeclarationList(node)) {
      const firstDeclaration = first(node.declarations);
      const updatedDeclaration = factory2.updateVariableDeclaration(
        firstDeclaration,
        firstDeclaration.name,
        /*exclamationToken*/
        void 0,
        /*type*/
        void 0,
        boundValue
      );
      return setTextRange(
        factory2.createVariableStatement(
          /*modifiers*/
          void 0,
          factory2.updateVariableDeclarationList(node, [updatedDeclaration])
        ),
        /*location*/
        node
      );
    } else {
      const updatedExpression = setTextRange(
        factory2.createAssignment(node, boundValue),
        /*location*/
        node
      );
      return setTextRange(
        factory2.createExpressionStatement(updatedExpression),
        /*location*/
        node
      );
    }
  }
  function insertLeadingStatement(factory2, dest, source) {
    if (isBlock(dest)) {
      return factory2.updateBlock(dest, setTextRange(factory2.createNodeArray([source, ...dest.statements]), dest.statements));
    } else {
      return factory2.createBlock(
        factory2.createNodeArray([dest, source]),
        /*multiLine*/
        true
      );
    }
  }
  function createExpressionFromEntityName(factory2, node) {
    if (isQualifiedName(node)) {
      const left = createExpressionFromEntityName(factory2, node.left);
      const right = setParent(setTextRange(factory2.cloneNode(node.right), node.right), node.right.parent);
      return setTextRange(factory2.createPropertyAccessExpression(left, right), node);
    } else {
      return setParent(setTextRange(factory2.cloneNode(node), node), node.parent);
    }
  }
  function createExpressionForPropertyName(factory2, memberName) {
    if (isIdentifier(memberName)) {
      return factory2.createStringLiteralFromNode(memberName);
    } else if (isComputedPropertyName(memberName)) {
      return setParent(setTextRange(factory2.cloneNode(memberName.expression), memberName.expression), memberName.expression.parent);
    } else {
      return setParent(setTextRange(factory2.cloneNode(memberName), memberName), memberName.parent);
    }
  }
  function createExpressionForAccessorDeclaration(factory2, properties, property, receiver, multiLine) {
    const { firstAccessor, getAccessor, setAccessor } = getAllAccessorDeclarations(properties, property);
    if (property === firstAccessor) {
      return setTextRange(
        factory2.createObjectDefinePropertyCall(
          receiver,
          createExpressionForPropertyName(factory2, property.name),
          factory2.createPropertyDescriptor({
            enumerable: factory2.createFalse(),
            configurable: true,
            get: getAccessor && setTextRange(
              setOriginalNode(
                factory2.createFunctionExpression(
                  getModifiers(getAccessor),
                  /*asteriskToken*/
                  void 0,
                  /*name*/
                  void 0,
                  /*typeParameters*/
                  void 0,
                  getAccessor.parameters,
                  /*type*/
                  void 0,
                  getAccessor.body
                  // TODO: GH#18217
                ),
                getAccessor
              ),
              getAccessor
            ),
            set: setAccessor && setTextRange(
              setOriginalNode(
                factory2.createFunctionExpression(
                  getModifiers(setAccessor),
                  /*asteriskToken*/
                  void 0,
                  /*name*/
                  void 0,
                  /*typeParameters*/
                  void 0,
                  setAccessor.parameters,
                  /*type*/
                  void 0,
                  setAccessor.body
                  // TODO: GH#18217
                ),
                setAccessor
              ),
              setAccessor
            )
          }, !multiLine)
        ),
        firstAccessor
      );
    }
    return void 0;
  }
  function createExpressionForPropertyAssignment(factory2, property, receiver) {
    return setOriginalNode(
      setTextRange(
        factory2.createAssignment(
          createMemberAccessForPropertyName(
            factory2,
            receiver,
            property.name,
            /*location*/
            property.name
          ),
          property.initializer
        ),
        property
      ),
      property
    );
  }
  function createExpressionForShorthandPropertyAssignment(factory2, property, receiver) {
    return setOriginalNode(
      setTextRange(
        factory2.createAssignment(
          createMemberAccessForPropertyName(
            factory2,
            receiver,
            property.name,
            /*location*/
            property.name
          ),
          factory2.cloneNode(property.name)
        ),
        /*location*/
        property
      ),
      /*original*/
      property
    );
  }
  function createExpressionForMethodDeclaration(factory2, method, receiver) {
    return setOriginalNode(
      setTextRange(
        factory2.createAssignment(
          createMemberAccessForPropertyName(
            factory2,
            receiver,
            method.name,
            /*location*/
            method.name
          ),
          setOriginalNode(
            setTextRange(
              factory2.createFunctionExpression(
                getModifiers(method),
                method.asteriskToken,
                /*name*/
                void 0,
                /*typeParameters*/
                void 0,
                method.parameters,
                /*type*/
                void 0,
                method.body
                // TODO: GH#18217
              ),
              /*location*/
              method
            ),
            /*original*/
            method
          )
        ),
        /*location*/
        method
      ),
      /*original*/
      method
    );
  }
  function createExpressionForObjectLiteralElementLike(factory2, node, property, receiver) {
    if (property.name && isPrivateIdentifier(property.name)) {
      Debug.failBadSyntaxKind(property.name, "Private identifiers are not allowed in object literals.");
    }
    switch (property.kind) {
      case 174 /* GetAccessor */:
      case 175 /* SetAccessor */:
        return createExpressionForAccessorDeclaration(factory2, node.properties, property, receiver, !!node.multiLine);
      case 299 /* PropertyAssignment */:
        return createExpressionForPropertyAssignment(factory2, property, receiver);
      case 300 /* ShorthandPropertyAssignment */:
        return createExpressionForShorthandPropertyAssignment(factory2, property, receiver);
      case 171 /* MethodDeclaration */:
        return createExpressionForMethodDeclaration(factory2, property, receiver);
    }
  }
  function expandPreOrPostfixIncrementOrDecrementExpression(factory2, node, expression, recordTempVariable, resultVariable) {
    const operator = node.operator;
    Debug.assert(operator === 45 /* PlusPlusToken */ || operator === 46 /* MinusMinusToken */, "Expected 'node' to be a pre- or post-increment or pre- or post-decrement expression");
    const temp = factory2.createTempVariable(recordTempVariable);
    expression = factory2.createAssignment(temp, expression);
    setTextRange(expression, node.operand);
    let operation = isPrefixUnaryExpression(node) ? factory2.createPrefixUnaryExpression(operator, temp) : factory2.createPostfixUnaryExpression(temp, operator);
    setTextRange(operation, node);
    if (resultVariable) {
      operation = factory2.createAssignment(resultVariable, operation);
      setTextRange(operation, node);
    }
    expression = factory2.createComma(expression, operation);
    setTextRange(expression, node);
    if (isPostfixUnaryExpression(node)) {
      expression = factory2.createComma(expression, temp);
      setTextRange(expression, node);
    }
    return expression;
  }
  function isInternalName(node) {
    return (getEmitFlags(node) & 65536 /* InternalName */) !== 0;
  }
  function isLocalName(node) {
    return (getEmitFlags(node) & 32768 /* LocalName */) !== 0;
  }
  function isExportName(node) {
    return (getEmitFlags(node) & 16384 /* ExportName */) !== 0;
  }
  function isUseStrictPrologue(node) {
    return isStringLiteral(node.expression) && node.expression.text === "use strict";
  }
  function findUseStrictPrologue(statements) {
    for (const statement of statements) {
      if (isPrologueDirective(statement)) {
        if (isUseStrictPrologue(statement)) {
          return statement;
        }
      } else {
        break;
      }
    }
    return void 0;
  }
  function startsWithUseStrict(statements) {
    const firstStatement = firstOrUndefined(statements);
    return firstStatement !== void 0 && isPrologueDirective(firstStatement) && isUseStrictPrologue(firstStatement);
  }
  function isCommaExpression(node) {
    return node.kind === 223 /* BinaryExpression */ && node.operatorToken.kind === 27 /* CommaToken */;
  }
  function isCommaSequence(node) {
    return isCommaExpression(node) || isCommaListExpression(node);
  }
  function isJSDocTypeAssertion(node) {
    return isParenthesizedExpression(node) && isInJSFile(node) && !!getJSDocTypeTag(node);
  }
  function getJSDocTypeAssertionType(node) {
    const type = getJSDocType(node);
    Debug.assertIsDefined(type);
    return type;
  }
  function isOuterExpression(node, kinds = 15 /* All */) {
    switch (node.kind) {
      case 214 /* ParenthesizedExpression */:
        if (kinds & 16 /* ExcludeJSDocTypeAssertion */ && isJSDocTypeAssertion(node)) {
          return false;
        }
        return (kinds & 1 /* Parentheses */) !== 0;
      case 213 /* TypeAssertionExpression */:
      case 231 /* AsExpression */:
      case 230 /* ExpressionWithTypeArguments */:
      case 235 /* SatisfiesExpression */:
        return (kinds & 2 /* TypeAssertions */) !== 0;
      case 232 /* NonNullExpression */:
        return (kinds & 4 /* NonNullAssertions */) !== 0;
      case 356 /* PartiallyEmittedExpression */:
        return (kinds & 8 /* PartiallyEmittedExpressions */) !== 0;
    }
    return false;
  }
  function skipOuterExpressions(node, kinds = 15 /* All */) {
    while (isOuterExpression(node, kinds)) {
      node = node.expression;
    }
    return node;
  }
  function walkUpOuterExpressions(node, kinds = 15 /* All */) {
    let parent2 = node.parent;
    while (isOuterExpression(parent2, kinds)) {
      parent2 = parent2.parent;
      Debug.assert(parent2);
    }
    return parent2;
  }
  function skipAssertions(node) {
    return skipOuterExpressions(node, 6 /* Assertions */);
  }
  function startOnNewLine(node) {
    return setStartsOnNewLine(
      node,
      /*newLine*/
      true
    );
  }
  function getExternalHelpersModuleName(node) {
    const parseNode = getOriginalNode(node, isSourceFile);
    const emitNode = parseNode && parseNode.emitNode;
    return emitNode && emitNode.externalHelpersModuleName;
  }
  function hasRecordedExternalHelpers(sourceFile) {
    const parseNode = getOriginalNode(sourceFile, isSourceFile);
    const emitNode = parseNode && parseNode.emitNode;
    return !!emitNode && (!!emitNode.externalHelpersModuleName || !!emitNode.externalHelpers);
  }
  function createExternalHelpersImportDeclarationIfNeeded(nodeFactory, helperFactory, sourceFile, compilerOptions, hasExportStarsToExportValues, hasImportStar, hasImportDefault) {
    if (compilerOptions.importHelpers && isEffectiveExternalModule(sourceFile, compilerOptions)) {
      let namedBindings;
      const moduleKind = getEmitModuleKind(compilerOptions);
      if (moduleKind >= 5 /* ES2015 */ && moduleKind <= 99 /* ESNext */ || sourceFile.impliedNodeFormat === 99 /* ESNext */) {
        const helpers = getEmitHelpers(sourceFile);
        if (helpers) {
          const helperNames = [];
          for (const helper of helpers) {
            if (!helper.scoped) {
              const importName = helper.importName;
              if (importName) {
                pushIfUnique(helperNames, importName);
              }
            }
          }
          if (some(helperNames)) {
            helperNames.sort(compareStringsCaseSensitive);
            namedBindings = nodeFactory.createNamedImports(
              map(
                helperNames,
                (name) => isFileLevelUniqueName(sourceFile, name) ? nodeFactory.createImportSpecifier(
                  /*isTypeOnly*/
                  false,
                  /*propertyName*/
                  void 0,
                  nodeFactory.createIdentifier(name)
                ) : nodeFactory.createImportSpecifier(
                  /*isTypeOnly*/
                  false,
                  nodeFactory.createIdentifier(name),
                  helperFactory.getUnscopedHelperName(name)
                )
              )
            );
            const parseNode = getOriginalNode(sourceFile, isSourceFile);
            const emitNode = getOrCreateEmitNode(parseNode);
            emitNode.externalHelpers = true;
          }
        }
      } else {
        const externalHelpersModuleName = getOrCreateExternalHelpersModuleNameIfNeeded(nodeFactory, sourceFile, compilerOptions, hasExportStarsToExportValues, hasImportStar || hasImportDefault);
        if (externalHelpersModuleName) {
          namedBindings = nodeFactory.createNamespaceImport(externalHelpersModuleName);
        }
      }
      if (namedBindings) {
        const externalHelpersImportDeclaration = nodeFactory.createImportDeclaration(
          /*modifiers*/
          void 0,
          nodeFactory.createImportClause(
            /*isTypeOnly*/
            false,
            /*name*/
            void 0,
            namedBindings
          ),
          nodeFactory.createStringLiteral(externalHelpersModuleNameText),
          /*assertClause*/
          void 0
        );
        addInternalEmitFlags(externalHelpersImportDeclaration, 2 /* NeverApplyImportHelper */);
        return externalHelpersImportDeclaration;
      }
    }
  }
  function getOrCreateExternalHelpersModuleNameIfNeeded(factory2, node, compilerOptions, hasExportStarsToExportValues, hasImportStarOrImportDefault) {
    if (compilerOptions.importHelpers && isEffectiveExternalModule(node, compilerOptions)) {
      const externalHelpersModuleName = getExternalHelpersModuleName(node);
      if (externalHelpersModuleName) {
        return externalHelpersModuleName;
      }
      const moduleKind = getEmitModuleKind(compilerOptions);
      let create = (hasExportStarsToExportValues || getESModuleInterop(compilerOptions) && hasImportStarOrImportDefault) && moduleKind !== 4 /* System */ && (moduleKind < 5 /* ES2015 */ || node.impliedNodeFormat === 1 /* CommonJS */);
      if (!create) {
        const helpers = getEmitHelpers(node);
        if (helpers) {
          for (const helper of helpers) {
            if (!helper.scoped) {
              create = true;
              break;
            }
          }
        }
      }
      if (create) {
        const parseNode = getOriginalNode(node, isSourceFile);
        const emitNode = getOrCreateEmitNode(parseNode);
        return emitNode.externalHelpersModuleName || (emitNode.externalHelpersModuleName = factory2.createUniqueName(externalHelpersModuleNameText));
      }
    }
  }
  function getLocalNameForExternalImport(factory2, node, sourceFile) {
    const namespaceDeclaration = getNamespaceDeclarationNode(node);
    if (namespaceDeclaration && !isDefaultImport(node) && !isExportNamespaceAsDefaultDeclaration(node)) {
      const name = namespaceDeclaration.name;
      return isGeneratedIdentifier(name) ? name : factory2.createIdentifier(getSourceTextOfNodeFromSourceFile(sourceFile, name) || idText(name));
    }
    if (node.kind === 269 /* ImportDeclaration */ && node.importClause) {
      return factory2.getGeneratedNameForNode(node);
    }
    if (node.kind === 275 /* ExportDeclaration */ && node.moduleSpecifier) {
      return factory2.getGeneratedNameForNode(node);
    }
    return void 0;
  }
  function getExternalModuleNameLiteral(factory2, importNode, sourceFile, host, resolver, compilerOptions) {
    const moduleName = getExternalModuleName(importNode);
    if (moduleName && isStringLiteral(moduleName)) {
      return tryGetModuleNameFromDeclaration(importNode, host, factory2, resolver, compilerOptions) || tryRenameExternalModule(factory2, moduleName, sourceFile) || factory2.cloneNode(moduleName);
    }
    return void 0;
  }
  function tryRenameExternalModule(factory2, moduleName, sourceFile) {
    const rename = sourceFile.renamedDependencies && sourceFile.renamedDependencies.get(moduleName.text);
    return rename ? factory2.createStringLiteral(rename) : void 0;
  }
  function tryGetModuleNameFromFile(factory2, file, host, options) {
    if (!file) {
      return void 0;
    }
    if (file.moduleName) {
      return factory2.createStringLiteral(file.moduleName);
    }
    if (!file.isDeclarationFile && outFile(options)) {
      return factory2.createStringLiteral(getExternalModuleNameFromPath(host, file.fileName));
    }
    return void 0;
  }
  function tryGetModuleNameFromDeclaration(declaration, host, factory2, resolver, compilerOptions) {
    return tryGetModuleNameFromFile(factory2, resolver.getExternalModuleFileFromDeclaration(declaration), host, compilerOptions);
  }
  function getInitializerOfBindingOrAssignmentElement(bindingElement) {
    if (isDeclarationBindingElement(bindingElement)) {
      return bindingElement.initializer;
    }
    if (isPropertyAssignment(bindingElement)) {
      const initializer = bindingElement.initializer;
      return isAssignmentExpression(
        initializer,
        /*excludeCompoundAssignment*/
        true
      ) ? initializer.right : void 0;
    }
    if (isShorthandPropertyAssignment(bindingElement)) {
      return bindingElement.objectAssignmentInitializer;
    }
    if (isAssignmentExpression(
      bindingElement,
      /*excludeCompoundAssignment*/
      true
    )) {
      return bindingElement.right;
    }
    if (isSpreadElement(bindingElement)) {
      return getInitializerOfBindingOrAssignmentElement(bindingElement.expression);
    }
  }
  function getTargetOfBindingOrAssignmentElement(bindingElement) {
    if (isDeclarationBindingElement(bindingElement)) {
      return bindingElement.name;
    }
    if (isObjectLiteralElementLike(bindingElement)) {
      switch (bindingElement.kind) {
        case 299 /* PropertyAssignment */:
          return getTargetOfBindingOrAssignmentElement(bindingElement.initializer);
        case 300 /* ShorthandPropertyAssignment */:
          return bindingElement.name;
        case 301 /* SpreadAssignment */:
          return getTargetOfBindingOrAssignmentElement(bindingElement.expression);
      }
      return void 0;
    }
    if (isAssignmentExpression(
      bindingElement,
      /*excludeCompoundAssignment*/
      true
    )) {
      return getTargetOfBindingOrAssignmentElement(bindingElement.left);
    }
    if (isSpreadElement(bindingElement)) {
      return getTargetOfBindingOrAssignmentElement(bindingElement.expression);
    }
    return bindingElement;
  }
  function getRestIndicatorOfBindingOrAssignmentElement(bindingElement) {
    switch (bindingElement.kind) {
      case 166 /* Parameter */:
      case 205 /* BindingElement */:
        return bindingElement.dotDotDotToken;
      case 227 /* SpreadElement */:
      case 301 /* SpreadAssignment */:
        return bindingElement;
    }
    return void 0;
  }
  function getPropertyNameOfBindingOrAssignmentElement(bindingElement) {
    const propertyName = tryGetPropertyNameOfBindingOrAssignmentElement(bindingElement);
    Debug.assert(!!propertyName || isSpreadAssignment(bindingElement), "Invalid property name for binding element.");
    return propertyName;
  }
  function tryGetPropertyNameOfBindingOrAssignmentElement(bindingElement) {
    switch (bindingElement.kind) {
      case 205 /* BindingElement */:
        if (bindingElement.propertyName) {
          const propertyName = bindingElement.propertyName;
          if (isPrivateIdentifier(propertyName)) {
            return Debug.failBadSyntaxKind(propertyName);
          }
          return isComputedPropertyName(propertyName) && isStringOrNumericLiteral(propertyName.expression) ? propertyName.expression : propertyName;
        }
        break;
      case 299 /* PropertyAssignment */:
        if (bindingElement.name) {
          const propertyName = bindingElement.name;
          if (isPrivateIdentifier(propertyName)) {
            return Debug.failBadSyntaxKind(propertyName);
          }
          return isComputedPropertyName(propertyName) && isStringOrNumericLiteral(propertyName.expression) ? propertyName.expression : propertyName;
        }
        break;
      case 301 /* SpreadAssignment */:
        if (bindingElement.name && isPrivateIdentifier(bindingElement.name)) {
          return Debug.failBadSyntaxKind(bindingElement.name);
        }
        return bindingElement.name;
    }
    const target = getTargetOfBindingOrAssignmentElement(bindingElement);
    if (target && isPropertyName(target)) {
      return target;
    }
  }
  function isStringOrNumericLiteral(node) {
    const kind = node.kind;
    return kind === 10 /* StringLiteral */ || kind === 8 /* NumericLiteral */;
  }
  function getElementsOfBindingOrAssignmentPattern(name) {
    switch (name.kind) {
      case 203 /* ObjectBindingPattern */:
      case 204 /* ArrayBindingPattern */:
      case 206 /* ArrayLiteralExpression */:
        return name.elements;
      case 207 /* ObjectLiteralExpression */:
        return name.properties;
    }
  }
  function getJSDocTypeAliasName(fullName) {
    if (fullName) {
      let rightNode = fullName;
      while (true) {
        if (isIdentifier(rightNode) || !rightNode.body) {
          return isIdentifier(rightNode) ? rightNode : rightNode.name;
        }
        rightNode = rightNode.body;
      }
    }
  }
  function canHaveIllegalType(node) {
    const kind = node.kind;
    return kind === 173 /* Constructor */ || kind === 175 /* SetAccessor */;
  }
  function canHaveIllegalTypeParameters(node) {
    const kind = node.kind;
    return kind === 173 /* Constructor */ || kind === 174 /* GetAccessor */ || kind === 175 /* SetAccessor */;
  }
  function canHaveIllegalDecorators(node) {
    const kind = node.kind;
    return kind === 299 /* PropertyAssignment */ || kind === 300 /* ShorthandPropertyAssignment */ || kind === 259 /* FunctionDeclaration */ || kind === 173 /* Constructor */ || kind === 178 /* IndexSignature */ || kind === 172 /* ClassStaticBlockDeclaration */ || kind === 279 /* MissingDeclaration */ || kind === 240 /* VariableStatement */ || kind === 261 /* InterfaceDeclaration */ || kind === 262 /* TypeAliasDeclaration */ || kind === 263 /* EnumDeclaration */ || kind === 264 /* ModuleDeclaration */ || kind === 268 /* ImportEqualsDeclaration */ || kind === 269 /* ImportDeclaration */ || kind === 267 /* NamespaceExportDeclaration */ || kind === 275 /* ExportDeclaration */ || kind === 274 /* ExportAssignment */;
  }
  function canHaveIllegalModifiers(node) {
    const kind = node.kind;
    return kind === 172 /* ClassStaticBlockDeclaration */ || kind === 299 /* PropertyAssignment */ || kind === 300 /* ShorthandPropertyAssignment */ || kind === 279 /* MissingDeclaration */ || kind === 267 /* NamespaceExportDeclaration */;
  }
  function isQuestionOrExclamationToken(node) {
    return isQuestionToken(node) || isExclamationToken(node);
  }
  function isIdentifierOrThisTypeNode(node) {
    return isIdentifier(node) || isThisTypeNode(node);
  }
  function isReadonlyKeywordOrPlusOrMinusToken(node) {
    return isReadonlyKeyword(node) || isPlusToken(node) || isMinusToken(node);
  }
  function isQuestionOrPlusOrMinusToken(node) {
    return isQuestionToken(node) || isPlusToken(node) || isMinusToken(node);
  }
  function isModuleName(node) {
    return isIdentifier(node) || isStringLiteral(node);
  }
  function isLiteralTypeLikeExpression(node) {
    const kind = node.kind;
    return kind === 104 /* NullKeyword */ || kind === 110 /* TrueKeyword */ || kind === 95 /* FalseKeyword */ || isLiteralExpression(node) || isPrefixUnaryExpression(node);
  }
  function isExponentiationOperator(kind) {
    return kind === 42 /* AsteriskAsteriskToken */;
  }
  function isMultiplicativeOperator(kind) {
    return kind === 41 /* AsteriskToken */ || kind === 43 /* SlashToken */ || kind === 44 /* PercentToken */;
  }
  function isMultiplicativeOperatorOrHigher(kind) {
    return isExponentiationOperator(kind) || isMultiplicativeOperator(kind);
  }
  function isAdditiveOperator(kind) {
    return kind === 39 /* PlusToken */ || kind === 40 /* MinusToken */;
  }
  function isAdditiveOperatorOrHigher(kind) {
    return isAdditiveOperator(kind) || isMultiplicativeOperatorOrHigher(kind);
  }
  function isShiftOperator(kind) {
    return kind === 47 /* LessThanLessThanToken */ || kind === 48 /* GreaterThanGreaterThanToken */ || kind === 49 /* GreaterThanGreaterThanGreaterThanToken */;
  }
  function isShiftOperatorOrHigher(kind) {
    return isShiftOperator(kind) || isAdditiveOperatorOrHigher(kind);
  }
  function isRelationalOperator(kind) {
    return kind === 29 /* LessThanToken */ || kind === 32 /* LessThanEqualsToken */ || kind === 31 /* GreaterThanToken */ || kind === 33 /* GreaterThanEqualsToken */ || kind === 102 /* InstanceOfKeyword */ || kind === 101 /* InKeyword */;
  }
  function isRelationalOperatorOrHigher(kind) {
    return isRelationalOperator(kind) || isShiftOperatorOrHigher(kind);
  }
  function isEqualityOperator(kind) {
    return kind === 34 /* EqualsEqualsToken */ || kind === 36 /* EqualsEqualsEqualsToken */ || kind === 35 /* ExclamationEqualsToken */ || kind === 37 /* ExclamationEqualsEqualsToken */;
  }
  function isEqualityOperatorOrHigher(kind) {
    return isEqualityOperator(kind) || isRelationalOperatorOrHigher(kind);
  }
  function isBitwiseOperator(kind) {
    return kind === 50 /* AmpersandToken */ || kind === 51 /* BarToken */ || kind === 52 /* CaretToken */;
  }
  function isBitwiseOperatorOrHigher(kind) {
    return isBitwiseOperator(kind) || isEqualityOperatorOrHigher(kind);
  }
  function isLogicalOperator2(kind) {
    return kind === 55 /* AmpersandAmpersandToken */ || kind === 56 /* BarBarToken */;
  }
  function isLogicalOperatorOrHigher(kind) {
    return isLogicalOperator2(kind) || isBitwiseOperatorOrHigher(kind);
  }
  function isAssignmentOperatorOrHigher(kind) {
    return kind === 60 /* QuestionQuestionToken */ || isLogicalOperatorOrHigher(kind) || isAssignmentOperator(kind);
  }
  function isBinaryOperator(kind) {
    return isAssignmentOperatorOrHigher(kind) || kind === 27 /* CommaToken */;
  }
  function isBinaryOperatorToken(node) {
    return isBinaryOperator(node.kind);
  }
  function createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState) {
    const machine = new BinaryExpressionStateMachine(onEnter, onLeft, onOperator, onRight, onExit, foldState);
    return trampoline;
    function trampoline(node, outerState) {
      const resultHolder = { value: void 0 };
      const stateStack = [BinaryExpressionState.enter];
      const nodeStack = [node];
      const userStateStack = [void 0];
      let stackIndex = 0;
      while (stateStack[stackIndex] !== BinaryExpressionState.done) {
        stackIndex = stateStack[stackIndex](machine, stackIndex, stateStack, nodeStack, userStateStack, resultHolder, outerState);
      }
      Debug.assertEqual(stackIndex, 0);
      return resultHolder.value;
    }
  }
  function isExportOrDefaultKeywordKind(kind) {
    return kind === 93 /* ExportKeyword */ || kind === 88 /* DefaultKeyword */;
  }
  function isExportOrDefaultModifier(node) {
    const kind = node.kind;
    return isExportOrDefaultKeywordKind(kind);
  }
  function isNonExportDefaultModifier(node) {
    const kind = node.kind;
    return isModifierKind(kind) && !isExportOrDefaultKeywordKind(kind);
  }
  function elideNodes(factory2, nodes) {
    if (nodes === void 0)
      return void 0;
    if (nodes.length === 0)
      return nodes;
    return setTextRange(factory2.createNodeArray([], nodes.hasTrailingComma), nodes);
  }
  function getNodeForGeneratedName(name) {
    var _a2;
    const autoGenerate = name.emitNode.autoGenerate;
    if (autoGenerate.flags & 4 /* Node */) {
      const autoGenerateId = autoGenerate.id;
      let node = name;
      let original = node.original;
      while (original) {
        node = original;
        const autoGenerate2 = (_a2 = node.emitNode) == null ? void 0 : _a2.autoGenerate;
        if (isMemberName(node) && (autoGenerate2 === void 0 || !!(autoGenerate2.flags & 4 /* Node */) && autoGenerate2.id !== autoGenerateId)) {
          break;
        }
        original = node.original;
      }
      return node;
    }
    return name;
  }
  function formatGeneratedNamePart(part, generateName) {
    return typeof part === "object" ? formatGeneratedName(
      /*privateName*/
      false,
      part.prefix,
      part.node,
      part.suffix,
      generateName
    ) : typeof part === "string" ? part.length > 0 && part.charCodeAt(0) === 35 /* hash */ ? part.slice(1) : part : "";
  }
  function formatIdentifier(name, generateName) {
    return typeof name === "string" ? name : formatIdentifierWorker(name, Debug.checkDefined(generateName));
  }
  function formatIdentifierWorker(node, generateName) {
    return isGeneratedPrivateIdentifier(node) ? generateName(node).slice(1) : isGeneratedIdentifier(node) ? generateName(node) : isPrivateIdentifier(node) ? node.escapedText.slice(1) : idText(node);
  }
  function formatGeneratedName(privateName, prefix, baseName, suffix, generateName) {
    prefix = formatGeneratedNamePart(prefix, generateName);
    suffix = formatGeneratedNamePart(suffix, generateName);
    baseName = formatIdentifier(baseName, generateName);
    return `${privateName ? "#" : ""}${prefix}${baseName}${suffix}`;
  }
  function createAccessorPropertyBackingField(factory2, node, modifiers, initializer) {
    return factory2.updatePropertyDeclaration(
      node,
      modifiers,
      factory2.getGeneratedPrivateNameForNode(
        node.name,
        /*prefix*/
        void 0,
        "_accessor_storage"
      ),
      /*questionOrExclamationToken*/
      void 0,
      /*type*/
      void 0,
      initializer
    );
  }
  function createAccessorPropertyGetRedirector(factory2, node, modifiers, name) {
    return factory2.createGetAccessorDeclaration(
      modifiers,
      name,
      [],
      /*type*/
      void 0,
      factory2.createBlock([
        factory2.createReturnStatement(
          factory2.createPropertyAccessExpression(
            factory2.createThis(),
            factory2.getGeneratedPrivateNameForNode(
              node.name,
              /*prefix*/
              void 0,
              "_accessor_storage"
            )
          )
        )
      ])
    );
  }
  function createAccessorPropertySetRedirector(factory2, node, modifiers, name) {
    return factory2.createSetAccessorDeclaration(
      modifiers,
      name,
      [factory2.createParameterDeclaration(
        /*modifiers*/
        void 0,
        /*dotdotDotToken*/
        void 0,
        "value"
      )],
      factory2.createBlock([
        factory2.createExpressionStatement(
          factory2.createAssignment(
            factory2.createPropertyAccessExpression(
              factory2.createThis(),
              factory2.getGeneratedPrivateNameForNode(
                node.name,
                /*prefix*/
                void 0,
                "_accessor_storage"
              )
            ),
            factory2.createIdentifier("value")
          )
        )
      ])
    );
  }
  function findComputedPropertyNameCacheAssignment(name) {
    let node = name.expression;
    while (true) {
      node = skipOuterExpressions(node);
      if (isCommaListExpression(node)) {
        node = last(node.elements);
        continue;
      }
      if (isCommaExpression(node)) {
        node = node.right;
        continue;
      }
      if (isAssignmentExpression(
        node,
        /*excludeCompoundAssignment*/
        true
      ) && isGeneratedIdentifier(node.left)) {
        return node;
      }
      break;
    }
  }
  function isSyntheticParenthesizedExpression(node) {
    return isParenthesizedExpression(node) && nodeIsSynthesized(node) && !node.emitNode;
  }
  function flattenCommaListWorker(node, expressions) {
    if (isSyntheticParenthesizedExpression(node)) {
      flattenCommaListWorker(node.expression, expressions);
    } else if (isCommaExpression(node)) {
      flattenCommaListWorker(node.left, expressions);
      flattenCommaListWorker(node.right, expressions);
    } else if (isCommaListExpression(node)) {
      for (const child of node.elements) {
        flattenCommaListWorker(child, expressions);
      }
    } else {
      expressions.push(node);
    }
  }
  function flattenCommaList(node) {
    const expressions = [];
    flattenCommaListWorker(node, expressions);
    return expressions;
  }
  function containsObjectRestOrSpread(node) {
    if (node.transformFlags & 65536 /* ContainsObjectRestOrSpread */)
      return true;
    if (node.transformFlags & 128 /* ContainsES2018 */) {
      for (const element of getElementsOfBindingOrAssignmentPattern(node)) {
        const target = getTargetOfBindingOrAssignmentElement(element);
        if (target && isAssignmentPattern(target)) {
          if (target.transformFlags & 65536 /* ContainsObjectRestOrSpread */) {
            return true;
          }
          if (target.transformFlags & 128 /* ContainsES2018 */) {
            if (containsObjectRestOrSpread(target))
              return true;
          }
        }
      }
    }
    return false;
  }
  var BinaryExpressionState, BinaryExpressionStateMachine;
  var init_utilities2 = __esm({
    "src/compiler/factory/utilities.ts"() {
      "use strict";
      init_ts2();
      ((BinaryExpressionState2) => {
        function enter(machine, stackIndex, stateStack, nodeStack, userStateStack, _resultHolder, outerState) {
          const prevUserState = stackIndex > 0 ? userStateStack[stackIndex - 1] : void 0;
          Debug.assertEqual(stateStack[stackIndex], enter);
          userStateStack[stackIndex] = machine.onEnter(nodeStack[stackIndex], prevUserState, outerState);
          stateStack[stackIndex] = nextState(machine, enter);
          return stackIndex;
        }
        BinaryExpressionState2.enter = enter;
        function left(machine, stackIndex, stateStack, nodeStack, userStateStack, _resultHolder, _outerState) {
          Debug.assertEqual(stateStack[stackIndex], left);
          Debug.assertIsDefined(machine.onLeft);
          stateStack[stackIndex] = nextState(machine, left);
          const nextNode = machine.onLeft(nodeStack[stackIndex].left, userStateStack[stackIndex], nodeStack[stackIndex]);
          if (nextNode) {
            checkCircularity(stackIndex, nodeStack, nextNode);
            return pushStack(stackIndex, stateStack, nodeStack, userStateStack, nextNode);
          }
          return stackIndex;
        }
        BinaryExpressionState2.left = left;
        function operator(machine, stackIndex, stateStack, nodeStack, userStateStack, _resultHolder, _outerState) {
          Debug.assertEqual(stateStack[stackIndex], operator);
          Debug.assertIsDefined(machine.onOperator);
          stateStack[stackIndex] = nextState(machine, operator);
          machine.onOperator(nodeStack[stackIndex].operatorToken, userStateStack[stackIndex], nodeStack[stackIndex]);
          return stackIndex;
        }
        BinaryExpressionState2.operator = operator;
        function right(machine, stackIndex, stateStack, nodeStack, userStateStack, _resultHolder, _outerState) {
          Debug.assertEqual(stateStack[stackIndex], right);
          Debug.assertIsDefined(machine.onRight);
          stateStack[stackIndex] = nextState(machine, right);
          const nextNode = machine.onRight(nodeStack[stackIndex].right, userStateStack[stackIndex], nodeStack[stackIndex]);
          if (nextNode) {
            checkCircularity(stackIndex, nodeStack, nextNode);
            return pushStack(stackIndex, stateStack, nodeStack, userStateStack, nextNode);
          }
          return stackIndex;
        }
        BinaryExpressionState2.right = right;
        function exit(machine, stackIndex, stateStack, nodeStack, userStateStack, resultHolder, _outerState) {
          Debug.assertEqual(stateStack[stackIndex], exit);
          stateStack[stackIndex] = nextState(machine, exit);
          const result = machine.onExit(nodeStack[stackIndex], userStateStack[stackIndex]);
          if (stackIndex > 0) {
            stackIndex--;
            if (machine.foldState) {
              const side = stateStack[stackIndex] === exit ? "right" : "left";
              userStateStack[stackIndex] = machine.foldState(userStateStack[stackIndex], result, side);
            }
          } else {
            resultHolder.value = result;
          }
          return stackIndex;
        }
        BinaryExpressionState2.exit = exit;
        function done(_machine, stackIndex, stateStack, _nodeStack, _userStateStack, _resultHolder, _outerState) {
          Debug.assertEqual(stateStack[stackIndex], done);
          return stackIndex;
        }
        BinaryExpressionState2.done = done;
        function nextState(machine, currentState) {
          switch (currentState) {
            case enter:
              if (machine.onLeft)
                return left;
            case left:
              if (machine.onOperator)
                return operator;
            case operator:
              if (machine.onRight)
                return right;
            case right:
              return exit;
            case exit:
              return done;
            case done:
              return done;
            default:
              Debug.fail("Invalid state");
          }
        }
        BinaryExpressionState2.nextState = nextState;
        function pushStack(stackIndex, stateStack, nodeStack, userStateStack, node) {
          stackIndex++;
          stateStack[stackIndex] = enter;
          nodeStack[stackIndex] = node;
          userStateStack[stackIndex] = void 0;
          return stackIndex;
        }
        function checkCircularity(stackIndex, nodeStack, node) {
          if (Debug.shouldAssert(2 /* Aggressive */)) {
            while (stackIndex >= 0) {
              Debug.assert(nodeStack[stackIndex] !== node, "Circular traversal detected.");
              stackIndex--;
            }
          }
        }
      })(BinaryExpressionState || (BinaryExpressionState = {}));
      BinaryExpressionStateMachine = class {
        constructor(onEnter, onLeft, onOperator, onRight, onExit, foldState) {
          this.onEnter = onEnter;
          this.onLeft = onLeft;
          this.onOperator = onOperator;
          this.onRight = onRight;
          this.onExit = onExit;
          this.foldState = foldState;
        }
      };
    }
  });

  // src/compiler/factory/utilitiesPublic.ts
  function setTextRange(range, location) {
    return location ? setTextRangePosEnd(range, location.pos, location.end) : range;
  }
  function canHaveModifiers(node) {
    const kind = node.kind;
    return kind === 165 /* TypeParameter */ || kind === 166 /* Parameter */ || kind === 168 /* PropertySignature */ || kind === 169 /* PropertyDeclaration */ || kind === 170 /* MethodSignature */ || kind === 171 /* MethodDeclaration */ || kind === 173 /* Constructor */ || kind === 174 /* GetAccessor */ || kind === 175 /* SetAccessor */ || kind === 178 /* IndexSignature */ || kind === 182 /* ConstructorType */ || kind === 215 /* FunctionExpression */ || kind === 216 /* ArrowFunction */ || kind === 228 /* ClassExpression */ || kind === 240 /* VariableStatement */ || kind === 259 /* FunctionDeclaration */ || kind === 260 /* ClassDeclaration */ || kind === 261 /* InterfaceDeclaration */ || kind === 262 /* TypeAliasDeclaration */ || kind === 263 /* EnumDeclaration */ || kind === 264 /* ModuleDeclaration */ || kind === 268 /* ImportEqualsDeclaration */ || kind === 269 /* ImportDeclaration */ || kind === 274 /* ExportAssignment */ || kind === 275 /* ExportDeclaration */;
  }
  function canHaveDecorators(node) {
    const kind = node.kind;
    return kind === 166 /* Parameter */ || kind === 169 /* PropertyDeclaration */ || kind === 171 /* MethodDeclaration */ || kind === 174 /* GetAccessor */ || kind === 175 /* SetAccessor */ || kind === 228 /* ClassExpression */ || kind === 260 /* ClassDeclaration */;
  }
  var init_utilitiesPublic2 = __esm({
    "src/compiler/factory/utilitiesPublic.ts"() {
      "use strict";
      init_ts2();
    }
  });

  // src/compiler/parser.ts
  function visitNode2(cbNode, node) {
    return node && cbNode(node);
  }
  function visitNodes(cbNode, cbNodes, nodes) {
    if (nodes) {
      if (cbNodes) {
        return cbNodes(nodes);
      }
      for (const node of nodes) {
        const result = cbNode(node);
        if (result) {
          return result;
        }
      }
    }
  }
  function isJSDocLikeText(text, start) {
    return text.charCodeAt(start + 1) === 42 /* asterisk */ && text.charCodeAt(start + 2) === 42 /* asterisk */ && text.charCodeAt(start + 3) !== 47 /* slash */;
  }
  function isFileProbablyExternalModule(sourceFile) {
    return forEach(sourceFile.statements, isAnExternalModuleIndicatorNode) || getImportMetaIfNecessary(sourceFile);
  }
  function isAnExternalModuleIndicatorNode(node) {
    return canHaveModifiers(node) && hasModifierOfKind(node, 93 /* ExportKeyword */) || isImportEqualsDeclaration(node) && isExternalModuleReference(node.moduleReference) || isImportDeclaration(node) || isExportAssignment(node) || isExportDeclaration(node) ? node : void 0;
  }
  function getImportMetaIfNecessary(sourceFile) {
    return sourceFile.flags & 4194304 /* PossiblyContainsImportMeta */ ? walkTreeForImportMeta(sourceFile) : void 0;
  }
  function walkTreeForImportMeta(node) {
    return isImportMeta2(node) ? node : forEachChild(node, walkTreeForImportMeta);
  }
  function hasModifierOfKind(node, kind) {
    return some(node.modifiers, (m) => m.kind === kind);
  }
  function isImportMeta2(node) {
    return isMetaProperty(node) && node.keywordToken === 100 /* ImportKeyword */ && node.name.escapedText === "meta";
  }
  function forEachChildInCallOrConstructSignature(node, cbNode, cbNodes) {
    return visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type);
  }
  function forEachChildInUnionOrIntersectionType(node, cbNode, cbNodes) {
    return visitNodes(cbNode, cbNodes, node.types);
  }
  function forEachChildInParenthesizedTypeOrTypeOperator(node, cbNode, _cbNodes) {
    return visitNode2(cbNode, node.type);
  }
  function forEachChildInObjectOrArrayBindingPattern(node, cbNode, cbNodes) {
    return visitNodes(cbNode, cbNodes, node.elements);
  }
  function forEachChildInCallOrNewExpression(node, cbNode, cbNodes) {
    return visitNode2(cbNode, node.expression) || // TODO: should we separate these branches out?
    visitNode2(cbNode, node.questionDotToken) || visitNodes(cbNode, cbNodes, node.typeArguments) || visitNodes(cbNode, cbNodes, node.arguments);
  }
  function forEachChildInBlock(node, cbNode, cbNodes) {
    return visitNodes(cbNode, cbNodes, node.statements);
  }
  function forEachChildInContinueOrBreakStatement(node, cbNode, _cbNodes) {
    return visitNode2(cbNode, node.label);
  }
  function forEachChildInClassDeclarationOrExpression(node, cbNode, cbNodes) {
    return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.heritageClauses) || visitNodes(cbNode, cbNodes, node.members);
  }
  function forEachChildInNamedImportsOrExports(node, cbNode, cbNodes) {
    return visitNodes(cbNode, cbNodes, node.elements);
  }
  function forEachChildInImportOrExportSpecifier(node, cbNode, _cbNodes) {
    return visitNode2(cbNode, node.propertyName) || visitNode2(cbNode, node.name);
  }
  function forEachChildInJsxOpeningOrSelfClosingElement(node, cbNode, cbNodes) {
    return visitNode2(cbNode, node.tagName) || visitNodes(cbNode, cbNodes, node.typeArguments) || visitNode2(cbNode, node.attributes);
  }
  function forEachChildInOptionalRestOrJSDocParameterModifier(node, cbNode, _cbNodes) {
    return visitNode2(cbNode, node.type);
  }
  function forEachChildInJSDocParameterOrPropertyTag(node, cbNode, cbNodes) {
    return visitNode2(cbNode, node.tagName) || (node.isNameFirst ? visitNode2(cbNode, node.name) || visitNode2(cbNode, node.typeExpression) : visitNode2(cbNode, node.typeExpression) || visitNode2(cbNode, node.name)) || (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment));
  }
  function forEachChildInJSDocTypeLikeTag(node, cbNode, cbNodes) {
    return visitNode2(cbNode, node.tagName) || visitNode2(cbNode, node.typeExpression) || (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment));
  }
  function forEachChildInJSDocLinkCodeOrPlain(node, cbNode, _cbNodes) {
    return visitNode2(cbNode, node.name);
  }
  function forEachChildInJSDocTag(node, cbNode, cbNodes) {
    return visitNode2(cbNode, node.tagName) || (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment));
  }
  function forEachChildInPartiallyEmittedExpression(node, cbNode, _cbNodes) {
    return visitNode2(cbNode, node.expression);
  }
  function forEachChild(node, cbNode, cbNodes) {
    if (node === void 0 || node.kind <= 162 /* LastToken */) {
      return;
    }
    const fn = forEachChildTable[node.kind];
    return fn === void 0 ? void 0 : fn(node, cbNode, cbNodes);
  }
  function forEachChildRecursively(rootNode, cbNode, cbNodes) {
    const queue = gatherPossibleChildren(rootNode);
    const parents = [];
    while (parents.length < queue.length) {
      parents.push(rootNode);
    }
    while (queue.length !== 0) {
      const current = queue.pop();
      const parent2 = parents.pop();
      if (isArray(current)) {
        if (cbNodes) {
          const res = cbNodes(current, parent2);
          if (res) {
            if (res === "skip")
              continue;
            return res;
          }
        }
        for (let i = current.length - 1; i >= 0; --i) {
          queue.push(current[i]);
          parents.push(parent2);
        }
      } else {
        const res = cbNode(current, parent2);
        if (res) {
          if (res === "skip")
            continue;
          return res;
        }
        if (current.kind >= 163 /* FirstNode */) {
          for (const child of gatherPossibleChildren(current)) {
            queue.push(child);
            parents.push(current);
          }
        }
      }
    }
  }
  function gatherPossibleChildren(node) {
    const children = [];
    forEachChild(node, addWorkItem, addWorkItem);
    return children;
    function addWorkItem(n) {
      children.unshift(n);
    }
  }
  function setExternalModuleIndicator(sourceFile) {
    sourceFile.externalModuleIndicator = isFileProbablyExternalModule(sourceFile);
  }
  function createSourceFile(fileName, sourceText, languageVersionOrOptions, setParentNodes = false, scriptKind) {
    var _a2, _b;
    (_a2 = tracing) == null ? void 0 : _a2.push(
      tracing.Phase.Parse,
      "createSourceFile",
      { path: fileName },
      /*separateBeginAndEnd*/
      true
    );
    mark("beforeParse");
    let result;
    perfLogger.logStartParseSourceFile(fileName);
    const {
      languageVersion,
      setExternalModuleIndicator: overrideSetExternalModuleIndicator,
      impliedNodeFormat: format
    } = typeof languageVersionOrOptions === "object" ? languageVersionOrOptions : { languageVersion: languageVersionOrOptions };
    if (languageVersion === 100 /* JSON */) {
      result = Parser.parseSourceFile(
        fileName,
        sourceText,
        languageVersion,
        /*syntaxCursor*/
        void 0,
        setParentNodes,
        6 /* JSON */,
        noop
      );
    } else {
      const setIndicator = format === void 0 ? overrideSetExternalModuleIndicator : (file) => {
        file.impliedNodeFormat = format;
        return (overrideSetExternalModuleIndicator || setExternalModuleIndicator)(file);
      };
      result = Parser.parseSourceFile(
        fileName,
        sourceText,
        languageVersion,
        /*syntaxCursor*/
        void 0,
        setParentNodes,
        scriptKind,
        setIndicator
      );
    }
    perfLogger.logStopParseSourceFile();
    mark("afterParse");
    measure("Parse", "beforeParse", "afterParse");
    (_b = tracing) == null ? void 0 : _b.pop();
    return result;
  }
  function parseIsolatedEntityName(text, languageVersion) {
    return Parser.parseIsolatedEntityName(text, languageVersion);
  }
  function parseJsonText(fileName, sourceText) {
    return Parser.parseJsonText(fileName, sourceText);
  }
  function isExternalModule(file) {
    return file.externalModuleIndicator !== void 0;
  }
  function updateSourceFile(sourceFile, newText, textChangeRange, aggressiveChecks = false) {
    const newSourceFile = IncrementalParser.updateSourceFile(sourceFile, newText, textChangeRange, aggressiveChecks);
    newSourceFile.flags |= sourceFile.flags & 6291456 /* PermanentlySetIncrementalFlags */;
    return newSourceFile;
  }
  function parseIsolatedJSDocComment(content, start, length2) {
    const result = Parser.JSDocParser.parseIsolatedJSDocComment(content, start, length2);
    if (result && result.jsDoc) {
      Parser.fixupParentReferences(result.jsDoc);
    }
    return result;
  }
  function parseJSDocTypeExpressionForTests(content, start, length2) {
    return Parser.JSDocParser.parseJSDocTypeExpressionForTests(content, start, length2);
  }
  function isDeclarationFileName(fileName) {
    return fileExtensionIsOneOf(fileName, supportedDeclarationExtensions) || fileExtensionIs(fileName, ".ts" /* Ts */) && stringContains(getBaseFileName(fileName), ".d.");
  }
  function parseResolutionMode(mode, pos, end, reportDiagnostic) {
    if (!mode) {
      return void 0;
    }
    if (mode === "import") {
      return 99 /* ESNext */;
    }
    if (mode === "require") {
      return 1 /* CommonJS */;
    }
    reportDiagnostic(pos, end - pos, Diagnostics.resolution_mode_should_be_either_require_or_import);
    return void 0;
  }
  function processCommentPragmas(context, sourceText) {
    const pragmas = [];
    for (const range of getLeadingCommentRanges(sourceText, 0) || emptyArray) {
      const comment = sourceText.substring(range.pos, range.end);
      extractPragmas(pragmas, range, comment);
    }
    context.pragmas = /* @__PURE__ */ new Map();
    for (const pragma of pragmas) {
      if (context.pragmas.has(pragma.name)) {
        const currentValue = context.pragmas.get(pragma.name);
        if (currentValue instanceof Array) {
          currentValue.push(pragma.args);
        } else {
          context.pragmas.set(pragma.name, [currentValue, pragma.args]);
        }
        continue;
      }
      context.pragmas.set(pragma.name, pragma.args);
    }
  }
  function processPragmasIntoFields(context, reportDiagnostic) {
    context.checkJsDirective = void 0;
    context.referencedFiles = [];
    context.typeReferenceDirectives = [];
    context.libReferenceDirectives = [];
    context.amdDependencies = [];
    context.hasNoDefaultLib = false;
    context.pragmas.forEach((entryOrList, key) => {
      switch (key) {
        case "reference": {
          const referencedFiles = context.referencedFiles;
          const typeReferenceDirectives = context.typeReferenceDirectives;
          const libReferenceDirectives = context.libReferenceDirectives;
          forEach(toArray(entryOrList), (arg) => {
            const { types, lib, path, ["resolution-mode"]: res } = arg.arguments;
            if (arg.arguments["no-default-lib"]) {
              context.hasNoDefaultLib = true;
            } else if (types) {
              const parsed = parseResolutionMode(res, types.pos, types.end, reportDiagnostic);
              typeReferenceDirectives.push({ pos: types.pos, end: types.end, fileName: types.value, ...parsed ? { resolutionMode: parsed } : {} });
            } else if (lib) {
              libReferenceDirectives.push({ pos: lib.pos, end: lib.end, fileName: lib.value });
            } else if (path) {
              referencedFiles.push({ pos: path.pos, end: path.end, fileName: path.value });
            } else {
              reportDiagnostic(arg.range.pos, arg.range.end - arg.range.pos, Diagnostics.Invalid_reference_directive_syntax);
            }
          });
          break;
        }
        case "amd-dependency": {
          context.amdDependencies = map(
            toArray(entryOrList),
            (x) => ({ name: x.arguments.name, path: x.arguments.path })
          );
          break;
        }
        case "amd-module": {
          if (entryOrList instanceof Array) {
            for (const entry of entryOrList) {
              if (context.moduleName) {
                reportDiagnostic(entry.range.pos, entry.range.end - entry.range.pos, Diagnostics.An_AMD_module_cannot_have_multiple_name_assignments);
              }
              context.moduleName = entry.arguments.name;
            }
          } else {
            context.moduleName = entryOrList.arguments.name;
          }
          break;
        }
        case "ts-nocheck":
        case "ts-check": {
          forEach(toArray(entryOrList), (entry) => {
            if (!context.checkJsDirective || entry.range.pos > context.checkJsDirective.pos) {
              context.checkJsDirective = {
                enabled: key === "ts-check",
                end: entry.range.end,
                pos: entry.range.pos
              };
            }
          });
          break;
        }
        case "jsx":
        case "jsxfrag":
        case "jsximportsource":
        case "jsxruntime":
          return;
        default:
          Debug.fail("Unhandled pragma kind");
      }
    });
  }
  function getNamedArgRegEx(name) {
    if (namedArgRegExCache.has(name)) {
      return namedArgRegExCache.get(name);
    }
    const result = new RegExp(`(\\s${name}\\s*=\\s*)(?:(?:'([^']*)')|(?:"([^"]*)"))`, "im");
    namedArgRegExCache.set(name, result);
    return result;
  }
  function extractPragmas(pragmas, range, text) {
    const tripleSlash = range.kind === 2 /* SingleLineCommentTrivia */ && tripleSlashXMLCommentStartRegEx.exec(text);
    if (tripleSlash) {
      const name = tripleSlash[1].toLowerCase();
      const pragma = commentPragmas[name];
      if (!pragma || !(pragma.kind & 1 /* TripleSlashXML */)) {
        return;
      }
      if (pragma.args) {
        const argument = {};
        for (const arg of pragma.args) {
          const matcher = getNamedArgRegEx(arg.name);
          const matchResult = matcher.exec(text);
          if (!matchResult && !arg.optional) {
            return;
          } else if (matchResult) {
            const value = matchResult[2] || matchResult[3];
            if (arg.captureSpan) {
              const startPos = range.pos + matchResult.index + matchResult[1].length + 1;
              argument[arg.name] = {
                value,
                pos: startPos,
                end: startPos + value.length
              };
            } else {
              argument[arg.name] = value;
            }
          }
        }
        pragmas.push({ name, args: { arguments: argument, range } });
      } else {
        pragmas.push({ name, args: { arguments: {}, range } });
      }
      return;
    }
    const singleLine = range.kind === 2 /* SingleLineCommentTrivia */ && singleLinePragmaRegEx.exec(text);
    if (singleLine) {
      return addPragmaForMatch(pragmas, range, 2 /* SingleLine */, singleLine);
    }
    if (range.kind === 3 /* MultiLineCommentTrivia */) {
      const multiLinePragmaRegEx = /@(\S+)(\s+.*)?$/gim;
      let multiLineMatch;
      while (multiLineMatch = multiLinePragmaRegEx.exec(text)) {
        addPragmaForMatch(pragmas, range, 4 /* MultiLine */, multiLineMatch);
      }
    }
  }
  function addPragmaForMatch(pragmas, range, kind, match) {
    if (!match)
      return;
    const name = match[1].toLowerCase();
    const pragma = commentPragmas[name];
    if (!pragma || !(pragma.kind & kind)) {
      return;
    }
    const args = match[2];
    const argument = getNamedPragmaArguments(pragma, args);
    if (argument === "fail")
      return;
    pragmas.push({ name, args: { arguments: argument, range } });
    return;
  }
  function getNamedPragmaArguments(pragma, text) {
    if (!text)
      return {};
    if (!pragma.args)
      return {};
    const args = trimString(text).split(/\s+/);
    const argMap = {};
    for (let i = 0; i < pragma.args.length; i++) {
      const argument = pragma.args[i];
      if (!args[i] && !argument.optional) {
        return "fail";
      }
      if (argument.captureSpan) {
        return Debug.fail("Capture spans not yet implemented for non-xml pragmas");
      }
      argMap[argument.name] = args[i];
    }
    return argMap;
  }
  function tagNamesAreEquivalent(lhs, rhs) {
    if (lhs.kind !== rhs.kind) {
      return false;
    }
    if (lhs.kind === 79 /* Identifier */) {
      return lhs.escapedText === rhs.escapedText;
    }
    if (lhs.kind === 108 /* ThisKeyword */) {
      return true;
    }
    return lhs.name.escapedText === rhs.name.escapedText && tagNamesAreEquivalent(lhs.expression, rhs.expression);
  }
  var NodeConstructor, TokenConstructor, IdentifierConstructor, PrivateIdentifierConstructor, SourceFileConstructor, parseBaseNodeFactory, parseNodeFactory, forEachChildTable, Parser, IncrementalParser, namedArgRegExCache, tripleSlashXMLCommentStartRegEx, singleLinePragmaRegEx;
  var init_parser = __esm({
    "src/compiler/parser.ts"() {
      "use strict";
      init_ts2();
      init_ts2();
      init_ts_performance();
      parseBaseNodeFactory = {
        createBaseSourceFileNode: (kind) => new (SourceFileConstructor || (SourceFileConstructor = objectAllocator.getSourceFileConstructor()))(kind, -1, -1),
        createBaseIdentifierNode: (kind) => new (IdentifierConstructor || (IdentifierConstructor = objectAllocator.getIdentifierConstructor()))(kind, -1, -1),
        createBasePrivateIdentifierNode: (kind) => new (PrivateIdentifierConstructor || (PrivateIdentifierConstructor = objectAllocator.getPrivateIdentifierConstructor()))(kind, -1, -1),
        createBaseTokenNode: (kind) => new (TokenConstructor || (TokenConstructor = objectAllocator.getTokenConstructor()))(kind, -1, -1),
        createBaseNode: (kind) => new (NodeConstructor || (NodeConstructor = objectAllocator.getNodeConstructor()))(kind, -1, -1)
      };
      parseNodeFactory = createNodeFactory(1 /* NoParenthesizerRules */, parseBaseNodeFactory);
      forEachChildTable = {
        [163 /* QualifiedName */]: function forEachChildInQualifiedName(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.left) || visitNode2(cbNode, node.right);
        },
        [165 /* TypeParameter */]: function forEachChildInTypeParameter(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.constraint) || visitNode2(cbNode, node.default) || visitNode2(cbNode, node.expression);
        },
        [300 /* ShorthandPropertyAssignment */]: function forEachChildInShorthandPropertyAssignment(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.questionToken) || visitNode2(cbNode, node.exclamationToken) || visitNode2(cbNode, node.equalsToken) || visitNode2(cbNode, node.objectAssignmentInitializer);
        },
        [301 /* SpreadAssignment */]: function forEachChildInSpreadAssignment(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [166 /* Parameter */]: function forEachChildInParameter(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.dotDotDotToken) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.questionToken) || visitNode2(cbNode, node.type) || visitNode2(cbNode, node.initializer);
        },
        [169 /* PropertyDeclaration */]: function forEachChildInPropertyDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.questionToken) || visitNode2(cbNode, node.exclamationToken) || visitNode2(cbNode, node.type) || visitNode2(cbNode, node.initializer);
        },
        [168 /* PropertySignature */]: function forEachChildInPropertySignature(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.questionToken) || visitNode2(cbNode, node.type) || visitNode2(cbNode, node.initializer);
        },
        [299 /* PropertyAssignment */]: function forEachChildInPropertyAssignment(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.questionToken) || visitNode2(cbNode, node.exclamationToken) || visitNode2(cbNode, node.initializer);
        },
        [257 /* VariableDeclaration */]: function forEachChildInVariableDeclaration(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.name) || visitNode2(cbNode, node.exclamationToken) || visitNode2(cbNode, node.type) || visitNode2(cbNode, node.initializer);
        },
        [205 /* BindingElement */]: function forEachChildInBindingElement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.dotDotDotToken) || visitNode2(cbNode, node.propertyName) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.initializer);
        },
        [178 /* IndexSignature */]: function forEachChildInIndexSignature(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type);
        },
        [182 /* ConstructorType */]: function forEachChildInConstructorType(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type);
        },
        [181 /* FunctionType */]: function forEachChildInFunctionType(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type);
        },
        [176 /* CallSignature */]: forEachChildInCallOrConstructSignature,
        [177 /* ConstructSignature */]: forEachChildInCallOrConstructSignature,
        [171 /* MethodDeclaration */]: function forEachChildInMethodDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.asteriskToken) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.questionToken) || visitNode2(cbNode, node.exclamationToken) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type) || visitNode2(cbNode, node.body);
        },
        [170 /* MethodSignature */]: function forEachChildInMethodSignature(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.questionToken) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type);
        },
        [173 /* Constructor */]: function forEachChildInConstructor(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type) || visitNode2(cbNode, node.body);
        },
        [174 /* GetAccessor */]: function forEachChildInGetAccessor(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type) || visitNode2(cbNode, node.body);
        },
        [175 /* SetAccessor */]: function forEachChildInSetAccessor(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type) || visitNode2(cbNode, node.body);
        },
        [259 /* FunctionDeclaration */]: function forEachChildInFunctionDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.asteriskToken) || visitNode2(cbNode, node.name) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type) || visitNode2(cbNode, node.body);
        },
        [215 /* FunctionExpression */]: function forEachChildInFunctionExpression(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.asteriskToken) || visitNode2(cbNode, node.name) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type) || visitNode2(cbNode, node.body);
        },
        [216 /* ArrowFunction */]: function forEachChildInArrowFunction(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type) || visitNode2(cbNode, node.equalsGreaterThanToken) || visitNode2(cbNode, node.body);
        },
        [172 /* ClassStaticBlockDeclaration */]: function forEachChildInClassStaticBlockDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.body);
        },
        [180 /* TypeReference */]: function forEachChildInTypeReference(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.typeName) || visitNodes(cbNode, cbNodes, node.typeArguments);
        },
        [179 /* TypePredicate */]: function forEachChildInTypePredicate(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.assertsModifier) || visitNode2(cbNode, node.parameterName) || visitNode2(cbNode, node.type);
        },
        [183 /* TypeQuery */]: function forEachChildInTypeQuery(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.exprName) || visitNodes(cbNode, cbNodes, node.typeArguments);
        },
        [184 /* TypeLiteral */]: function forEachChildInTypeLiteral(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.members);
        },
        [185 /* ArrayType */]: function forEachChildInArrayType(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.elementType);
        },
        [186 /* TupleType */]: function forEachChildInTupleType(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.elements);
        },
        [189 /* UnionType */]: forEachChildInUnionOrIntersectionType,
        [190 /* IntersectionType */]: forEachChildInUnionOrIntersectionType,
        [191 /* ConditionalType */]: function forEachChildInConditionalType(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.checkType) || visitNode2(cbNode, node.extendsType) || visitNode2(cbNode, node.trueType) || visitNode2(cbNode, node.falseType);
        },
        [192 /* InferType */]: function forEachChildInInferType(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.typeParameter);
        },
        [202 /* ImportType */]: function forEachChildInImportType(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.argument) || visitNode2(cbNode, node.assertions) || visitNode2(cbNode, node.qualifier) || visitNodes(cbNode, cbNodes, node.typeArguments);
        },
        [298 /* ImportTypeAssertionContainer */]: function forEachChildInImportTypeAssertionContainer(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.assertClause);
        },
        [193 /* ParenthesizedType */]: forEachChildInParenthesizedTypeOrTypeOperator,
        [195 /* TypeOperator */]: forEachChildInParenthesizedTypeOrTypeOperator,
        [196 /* IndexedAccessType */]: function forEachChildInIndexedAccessType(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.objectType) || visitNode2(cbNode, node.indexType);
        },
        [197 /* MappedType */]: function forEachChildInMappedType(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.readonlyToken) || visitNode2(cbNode, node.typeParameter) || visitNode2(cbNode, node.nameType) || visitNode2(cbNode, node.questionToken) || visitNode2(cbNode, node.type) || visitNodes(cbNode, cbNodes, node.members);
        },
        [198 /* LiteralType */]: function forEachChildInLiteralType(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.literal);
        },
        [199 /* NamedTupleMember */]: function forEachChildInNamedTupleMember(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.dotDotDotToken) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.questionToken) || visitNode2(cbNode, node.type);
        },
        [203 /* ObjectBindingPattern */]: forEachChildInObjectOrArrayBindingPattern,
        [204 /* ArrayBindingPattern */]: forEachChildInObjectOrArrayBindingPattern,
        [206 /* ArrayLiteralExpression */]: function forEachChildInArrayLiteralExpression(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.elements);
        },
        [207 /* ObjectLiteralExpression */]: function forEachChildInObjectLiteralExpression(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.properties);
        },
        [208 /* PropertyAccessExpression */]: function forEachChildInPropertyAccessExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression) || visitNode2(cbNode, node.questionDotToken) || visitNode2(cbNode, node.name);
        },
        [209 /* ElementAccessExpression */]: function forEachChildInElementAccessExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression) || visitNode2(cbNode, node.questionDotToken) || visitNode2(cbNode, node.argumentExpression);
        },
        [210 /* CallExpression */]: forEachChildInCallOrNewExpression,
        [211 /* NewExpression */]: forEachChildInCallOrNewExpression,
        [212 /* TaggedTemplateExpression */]: function forEachChildInTaggedTemplateExpression(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.tag) || visitNode2(cbNode, node.questionDotToken) || visitNodes(cbNode, cbNodes, node.typeArguments) || visitNode2(cbNode, node.template);
        },
        [213 /* TypeAssertionExpression */]: function forEachChildInTypeAssertionExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.type) || visitNode2(cbNode, node.expression);
        },
        [214 /* ParenthesizedExpression */]: function forEachChildInParenthesizedExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [217 /* DeleteExpression */]: function forEachChildInDeleteExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [218 /* TypeOfExpression */]: function forEachChildInTypeOfExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [219 /* VoidExpression */]: function forEachChildInVoidExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [221 /* PrefixUnaryExpression */]: function forEachChildInPrefixUnaryExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.operand);
        },
        [226 /* YieldExpression */]: function forEachChildInYieldExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.asteriskToken) || visitNode2(cbNode, node.expression);
        },
        [220 /* AwaitExpression */]: function forEachChildInAwaitExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [222 /* PostfixUnaryExpression */]: function forEachChildInPostfixUnaryExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.operand);
        },
        [223 /* BinaryExpression */]: function forEachChildInBinaryExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.left) || visitNode2(cbNode, node.operatorToken) || visitNode2(cbNode, node.right);
        },
        [231 /* AsExpression */]: function forEachChildInAsExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression) || visitNode2(cbNode, node.type);
        },
        [232 /* NonNullExpression */]: function forEachChildInNonNullExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [235 /* SatisfiesExpression */]: function forEachChildInSatisfiesExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression) || visitNode2(cbNode, node.type);
        },
        [233 /* MetaProperty */]: function forEachChildInMetaProperty(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.name);
        },
        [224 /* ConditionalExpression */]: function forEachChildInConditionalExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.condition) || visitNode2(cbNode, node.questionToken) || visitNode2(cbNode, node.whenTrue) || visitNode2(cbNode, node.colonToken) || visitNode2(cbNode, node.whenFalse);
        },
        [227 /* SpreadElement */]: function forEachChildInSpreadElement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [238 /* Block */]: forEachChildInBlock,
        [265 /* ModuleBlock */]: forEachChildInBlock,
        [308 /* SourceFile */]: function forEachChildInSourceFile(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.statements) || visitNode2(cbNode, node.endOfFileToken);
        },
        [240 /* VariableStatement */]: function forEachChildInVariableStatement(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.declarationList);
        },
        [258 /* VariableDeclarationList */]: function forEachChildInVariableDeclarationList(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.declarations);
        },
        [241 /* ExpressionStatement */]: function forEachChildInExpressionStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [242 /* IfStatement */]: function forEachChildInIfStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression) || visitNode2(cbNode, node.thenStatement) || visitNode2(cbNode, node.elseStatement);
        },
        [243 /* DoStatement */]: function forEachChildInDoStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.statement) || visitNode2(cbNode, node.expression);
        },
        [244 /* WhileStatement */]: function forEachChildInWhileStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression) || visitNode2(cbNode, node.statement);
        },
        [245 /* ForStatement */]: function forEachChildInForStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.initializer) || visitNode2(cbNode, node.condition) || visitNode2(cbNode, node.incrementor) || visitNode2(cbNode, node.statement);
        },
        [246 /* ForInStatement */]: function forEachChildInForInStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.initializer) || visitNode2(cbNode, node.expression) || visitNode2(cbNode, node.statement);
        },
        [247 /* ForOfStatement */]: function forEachChildInForOfStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.awaitModifier) || visitNode2(cbNode, node.initializer) || visitNode2(cbNode, node.expression) || visitNode2(cbNode, node.statement);
        },
        [248 /* ContinueStatement */]: forEachChildInContinueOrBreakStatement,
        [249 /* BreakStatement */]: forEachChildInContinueOrBreakStatement,
        [250 /* ReturnStatement */]: function forEachChildInReturnStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [251 /* WithStatement */]: function forEachChildInWithStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression) || visitNode2(cbNode, node.statement);
        },
        [252 /* SwitchStatement */]: function forEachChildInSwitchStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression) || visitNode2(cbNode, node.caseBlock);
        },
        [266 /* CaseBlock */]: function forEachChildInCaseBlock(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.clauses);
        },
        [292 /* CaseClause */]: function forEachChildInCaseClause(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.expression) || visitNodes(cbNode, cbNodes, node.statements);
        },
        [293 /* DefaultClause */]: function forEachChildInDefaultClause(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.statements);
        },
        [253 /* LabeledStatement */]: function forEachChildInLabeledStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.label) || visitNode2(cbNode, node.statement);
        },
        [254 /* ThrowStatement */]: function forEachChildInThrowStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [255 /* TryStatement */]: function forEachChildInTryStatement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.tryBlock) || visitNode2(cbNode, node.catchClause) || visitNode2(cbNode, node.finallyBlock);
        },
        [295 /* CatchClause */]: function forEachChildInCatchClause(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.variableDeclaration) || visitNode2(cbNode, node.block);
        },
        [167 /* Decorator */]: function forEachChildInDecorator(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [260 /* ClassDeclaration */]: forEachChildInClassDeclarationOrExpression,
        [228 /* ClassExpression */]: forEachChildInClassDeclarationOrExpression,
        [261 /* InterfaceDeclaration */]: function forEachChildInInterfaceDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNodes(cbNode, cbNodes, node.heritageClauses) || visitNodes(cbNode, cbNodes, node.members);
        },
        [262 /* TypeAliasDeclaration */]: function forEachChildInTypeAliasDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNodes(cbNode, cbNodes, node.typeParameters) || visitNode2(cbNode, node.type);
        },
        [263 /* EnumDeclaration */]: function forEachChildInEnumDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNodes(cbNode, cbNodes, node.members);
        },
        [302 /* EnumMember */]: function forEachChildInEnumMember(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.name) || visitNode2(cbNode, node.initializer);
        },
        [264 /* ModuleDeclaration */]: function forEachChildInModuleDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.body);
        },
        [268 /* ImportEqualsDeclaration */]: function forEachChildInImportEqualsDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name) || visitNode2(cbNode, node.moduleReference);
        },
        [269 /* ImportDeclaration */]: function forEachChildInImportDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.importClause) || visitNode2(cbNode, node.moduleSpecifier) || visitNode2(cbNode, node.assertClause);
        },
        [270 /* ImportClause */]: function forEachChildInImportClause(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.name) || visitNode2(cbNode, node.namedBindings);
        },
        [296 /* AssertClause */]: function forEachChildInAssertClause(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.elements);
        },
        [297 /* AssertEntry */]: function forEachChildInAssertEntry(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.name) || visitNode2(cbNode, node.value);
        },
        [267 /* NamespaceExportDeclaration */]: function forEachChildInNamespaceExportDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.name);
        },
        [271 /* NamespaceImport */]: function forEachChildInNamespaceImport(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.name);
        },
        [277 /* NamespaceExport */]: function forEachChildInNamespaceExport(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.name);
        },
        [272 /* NamedImports */]: forEachChildInNamedImportsOrExports,
        [276 /* NamedExports */]: forEachChildInNamedImportsOrExports,
        [275 /* ExportDeclaration */]: function forEachChildInExportDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.exportClause) || visitNode2(cbNode, node.moduleSpecifier) || visitNode2(cbNode, node.assertClause);
        },
        [273 /* ImportSpecifier */]: forEachChildInImportOrExportSpecifier,
        [278 /* ExportSpecifier */]: forEachChildInImportOrExportSpecifier,
        [274 /* ExportAssignment */]: function forEachChildInExportAssignment(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers) || visitNode2(cbNode, node.expression);
        },
        [225 /* TemplateExpression */]: function forEachChildInTemplateExpression(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.head) || visitNodes(cbNode, cbNodes, node.templateSpans);
        },
        [236 /* TemplateSpan */]: function forEachChildInTemplateSpan(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression) || visitNode2(cbNode, node.literal);
        },
        [200 /* TemplateLiteralType */]: function forEachChildInTemplateLiteralType(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.head) || visitNodes(cbNode, cbNodes, node.templateSpans);
        },
        [201 /* TemplateLiteralTypeSpan */]: function forEachChildInTemplateLiteralTypeSpan(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.type) || visitNode2(cbNode, node.literal);
        },
        [164 /* ComputedPropertyName */]: function forEachChildInComputedPropertyName(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [294 /* HeritageClause */]: function forEachChildInHeritageClause(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.types);
        },
        [230 /* ExpressionWithTypeArguments */]: function forEachChildInExpressionWithTypeArguments(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.expression) || visitNodes(cbNode, cbNodes, node.typeArguments);
        },
        [280 /* ExternalModuleReference */]: function forEachChildInExternalModuleReference(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [279 /* MissingDeclaration */]: function forEachChildInMissingDeclaration(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.modifiers);
        },
        [357 /* CommaListExpression */]: function forEachChildInCommaListExpression(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.elements);
        },
        [281 /* JsxElement */]: function forEachChildInJsxElement(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.openingElement) || visitNodes(cbNode, cbNodes, node.children) || visitNode2(cbNode, node.closingElement);
        },
        [285 /* JsxFragment */]: function forEachChildInJsxFragment(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.openingFragment) || visitNodes(cbNode, cbNodes, node.children) || visitNode2(cbNode, node.closingFragment);
        },
        [282 /* JsxSelfClosingElement */]: forEachChildInJsxOpeningOrSelfClosingElement,
        [283 /* JsxOpeningElement */]: forEachChildInJsxOpeningOrSelfClosingElement,
        [289 /* JsxAttributes */]: function forEachChildInJsxAttributes(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.properties);
        },
        [288 /* JsxAttribute */]: function forEachChildInJsxAttribute(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.name) || visitNode2(cbNode, node.initializer);
        },
        [290 /* JsxSpreadAttribute */]: function forEachChildInJsxSpreadAttribute(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.expression);
        },
        [291 /* JsxExpression */]: function forEachChildInJsxExpression(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.dotDotDotToken) || visitNode2(cbNode, node.expression);
        },
        [284 /* JsxClosingElement */]: function forEachChildInJsxClosingElement(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.tagName);
        },
        [187 /* OptionalType */]: forEachChildInOptionalRestOrJSDocParameterModifier,
        [188 /* RestType */]: forEachChildInOptionalRestOrJSDocParameterModifier,
        [312 /* JSDocTypeExpression */]: forEachChildInOptionalRestOrJSDocParameterModifier,
        [318 /* JSDocNonNullableType */]: forEachChildInOptionalRestOrJSDocParameterModifier,
        [317 /* JSDocNullableType */]: forEachChildInOptionalRestOrJSDocParameterModifier,
        [319 /* JSDocOptionalType */]: forEachChildInOptionalRestOrJSDocParameterModifier,
        [321 /* JSDocVariadicType */]: forEachChildInOptionalRestOrJSDocParameterModifier,
        [320 /* JSDocFunctionType */]: function forEachChildInJSDocFunctionType(node, cbNode, cbNodes) {
          return visitNodes(cbNode, cbNodes, node.parameters) || visitNode2(cbNode, node.type);
        },
        [323 /* JSDoc */]: function forEachChildInJSDoc(node, cbNode, cbNodes) {
          return (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment)) || visitNodes(cbNode, cbNodes, node.tags);
        },
        [350 /* JSDocSeeTag */]: function forEachChildInJSDocSeeTag(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.tagName) || visitNode2(cbNode, node.name) || (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment));
        },
        [313 /* JSDocNameReference */]: function forEachChildInJSDocNameReference(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.name);
        },
        [314 /* JSDocMemberName */]: function forEachChildInJSDocMemberName(node, cbNode, _cbNodes) {
          return visitNode2(cbNode, node.left) || visitNode2(cbNode, node.right);
        },
        [344 /* JSDocParameterTag */]: forEachChildInJSDocParameterOrPropertyTag,
        [351 /* JSDocPropertyTag */]: forEachChildInJSDocParameterOrPropertyTag,
        [333 /* JSDocAuthorTag */]: function forEachChildInJSDocAuthorTag(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.tagName) || (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment));
        },
        [332 /* JSDocImplementsTag */]: function forEachChildInJSDocImplementsTag(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.tagName) || visitNode2(cbNode, node.class) || (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment));
        },
        [331 /* JSDocAugmentsTag */]: function forEachChildInJSDocAugmentsTag(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.tagName) || visitNode2(cbNode, node.class) || (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment));
        },
        [348 /* JSDocTemplateTag */]: function forEachChildInJSDocTemplateTag(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.tagName) || visitNode2(cbNode, node.constraint) || visitNodes(cbNode, cbNodes, node.typeParameters) || (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment));
        },
        [349 /* JSDocTypedefTag */]: function forEachChildInJSDocTypedefTag(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.tagName) || (node.typeExpression && node.typeExpression.kind === 312 /* JSDocTypeExpression */ ? visitNode2(cbNode, node.typeExpression) || visitNode2(cbNode, node.fullName) || (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment)) : visitNode2(cbNode, node.fullName) || visitNode2(cbNode, node.typeExpression) || (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment)));
        },
        [341 /* JSDocCallbackTag */]: function forEachChildInJSDocCallbackTag(node, cbNode, cbNodes) {
          return visitNode2(cbNode, node.tagName) || visitNode2(cbNode, node.fullName) || visitNode2(cbNode, node.typeExpression) || (typeof node.comment === "string" ? void 0 : visitNodes(cbNode, cbNodes, node.comment));
        },
        [345 /* JSDocReturnTag */]: forEachChildInJSDocTypeLikeTag,
        [347 /* JSDocTypeTag */]: forEachChildInJSDocTypeLikeTag,
        [346 /* JSDocThisTag */]: forEachChildInJSDocTypeLikeTag,
        [343 /* JSDocEnumTag */]: forEachChildInJSDocTypeLikeTag,
        [353 /* JSDocSatisfiesTag */]: forEachChildInJSDocTypeLikeTag,
        [352 /* JSDocThrowsTag */]: forEachChildInJSDocTypeLikeTag,
        [342 /* JSDocOverloadTag */]: forEachChildInJSDocTypeLikeTag,
        [326 /* JSDocSignature */]: function forEachChildInJSDocSignature(node, cbNode, _cbNodes) {
          return forEach(node.typeParameters, cbNode) || forEach(node.parameters, cbNode) || visitNode2(cbNode, node.type);
        },
        [327 /* JSDocLink */]: forEachChildInJSDocLinkCodeOrPlain,
        [328 /* JSDocLinkCode */]: forEachChildInJSDocLinkCodeOrPlain,
        [329 /* JSDocLinkPlain */]: forEachChildInJSDocLinkCodeOrPlain,
        [325 /* JSDocTypeLiteral */]: function forEachChildInJSDocTypeLiteral(node, cbNode, _cbNodes) {
          return forEach(node.jsDocPropertyTags, cbNode);
        },
        [330 /* JSDocTag */]: forEachChildInJSDocTag,
        [335 /* JSDocClassTag */]: forEachChildInJSDocTag,
        [336 /* JSDocPublicTag */]: forEachChildInJSDocTag,
        [337 /* JSDocPrivateTag */]: forEachChildInJSDocTag,
        [338 /* JSDocProtectedTag */]: forEachChildInJSDocTag,
        [339 /* JSDocReadonlyTag */]: forEachChildInJSDocTag,
        [334 /* JSDocDeprecatedTag */]: forEachChildInJSDocTag,
        [340 /* JSDocOverrideTag */]: forEachChildInJSDocTag,
        [356 /* PartiallyEmittedExpression */]: forEachChildInPartiallyEmittedExpression
      };
      ((Parser2) => {
        var scanner2 = createScanner(
          99 /* Latest */,
          /*skipTrivia*/
          true
        );
        var disallowInAndDecoratorContext = 4096 /* DisallowInContext */ | 16384 /* DecoratorContext */;
        var NodeConstructor2;
        var TokenConstructor2;
        var IdentifierConstructor2;
        var PrivateIdentifierConstructor2;
        var SourceFileConstructor2;
        function countNode(node) {
          nodeCount++;
          return node;
        }
        var baseNodeFactory = {
          createBaseSourceFileNode: (kind) => countNode(new SourceFileConstructor2(
            kind,
            /*pos*/
            0,
            /*end*/
            0
          )),
          createBaseIdentifierNode: (kind) => countNode(new IdentifierConstructor2(
            kind,
            /*pos*/
            0,
            /*end*/
            0
          )),
          createBasePrivateIdentifierNode: (kind) => countNode(new PrivateIdentifierConstructor2(
            kind,
            /*pos*/
            0,
            /*end*/
            0
          )),
          createBaseTokenNode: (kind) => countNode(new TokenConstructor2(
            kind,
            /*pos*/
            0,
            /*end*/
            0
          )),
          createBaseNode: (kind) => countNode(new NodeConstructor2(
            kind,
            /*pos*/
            0,
            /*end*/
            0
          ))
        };
        var factory2 = createNodeFactory(1 /* NoParenthesizerRules */ | 2 /* NoNodeConverters */ | 8 /* NoOriginalNode */, baseNodeFactory);
        var {
          createNodeArray: factoryCreateNodeArray,
          createNumericLiteral: factoryCreateNumericLiteral,
          createStringLiteral: factoryCreateStringLiteral,
          createLiteralLikeNode: factoryCreateLiteralLikeNode,
          createIdentifier: factoryCreateIdentifier,
          createPrivateIdentifier: factoryCreatePrivateIdentifier,
          createToken: factoryCreateToken,
          createArrayLiteralExpression: factoryCreateArrayLiteralExpression,
          createObjectLiteralExpression: factoryCreateObjectLiteralExpression,
          createPropertyAccessExpression: factoryCreatePropertyAccessExpression,
          createPropertyAccessChain: factoryCreatePropertyAccessChain,
          createElementAccessExpression: factoryCreateElementAccessExpression,
          createElementAccessChain: factoryCreateElementAccessChain,
          createCallExpression: factoryCreateCallExpression,
          createCallChain: factoryCreateCallChain,
          createNewExpression: factoryCreateNewExpression,
          createParenthesizedExpression: factoryCreateParenthesizedExpression,
          createBlock: factoryCreateBlock,
          createVariableStatement: factoryCreateVariableStatement,
          createExpressionStatement: factoryCreateExpressionStatement,
          createIfStatement: factoryCreateIfStatement,
          createWhileStatement: factoryCreateWhileStatement,
          createForStatement: factoryCreateForStatement,
          createForOfStatement: factoryCreateForOfStatement,
          createVariableDeclaration: factoryCreateVariableDeclaration,
          createVariableDeclarationList: factoryCreateVariableDeclarationList
        } = factory2;
        var fileName;
        var sourceFlags;
        var sourceText;
        var languageVersion;
        var scriptKind;
        var languageVariant;
        var parseDiagnostics;
        var jsDocDiagnostics;
        var syntaxCursor;
        var currentToken;
        var nodeCount;
        var identifiers;
        var identifierCount;
        var parsingContext;
        var notParenthesizedArrow;
        var contextFlags;
        var topLevel = true;
        var parseErrorBeforeNextFinishedNode = false;
        function parseSourceFile(fileName2, sourceText2, languageVersion2, syntaxCursor2, setParentNodes = false, scriptKind2, setExternalModuleIndicatorOverride) {
          var _a2;
          scriptKind2 = ensureScriptKind(fileName2, scriptKind2);
          if (scriptKind2 === 6 /* JSON */) {
            const result2 = parseJsonText2(fileName2, sourceText2, languageVersion2, syntaxCursor2, setParentNodes);
            convertToObjectWorker(
              result2,
              (_a2 = result2.statements[0]) == null ? void 0 : _a2.expression,
              result2.parseDiagnostics,
              /*returnValue*/
              false,
              /*knownRootOptions*/
              void 0,
              /*jsonConversionNotifier*/
              void 0
            );
            result2.referencedFiles = emptyArray;
            result2.typeReferenceDirectives = emptyArray;
            result2.libReferenceDirectives = emptyArray;
            result2.amdDependencies = emptyArray;
            result2.hasNoDefaultLib = false;
            result2.pragmas = emptyMap;
            return result2;
          }
          initializeState(fileName2, sourceText2, languageVersion2, syntaxCursor2, scriptKind2);
          const result = parseSourceFileWorker(languageVersion2, setParentNodes, scriptKind2, setExternalModuleIndicatorOverride || setExternalModuleIndicator);
          clearState();
          return result;
        }
        Parser2.parseSourceFile = parseSourceFile;
        function parseIsolatedEntityName2(content, languageVersion2) {
          initializeState(
            "",
            content,
            languageVersion2,
            /*syntaxCursor*/
            void 0,
            1 /* JS */
          );
          nextToken();
          const entityName = parseEntityName(
            /*allowReservedWords*/
            true
          );
          const isInvalid = token() === 1 /* EndOfFileToken */ && !parseDiagnostics.length;
          clearState();
          return isInvalid ? entityName : void 0;
        }
        Parser2.parseIsolatedEntityName = parseIsolatedEntityName2;
        function parseJsonText2(fileName2, sourceText2, languageVersion2 = 2 /* ES2015 */, syntaxCursor2, setParentNodes = false) {
          initializeState(fileName2, sourceText2, languageVersion2, syntaxCursor2, 6 /* JSON */);
          sourceFlags = contextFlags;
          nextToken();
          const pos = getNodePos();
          let statements, endOfFileToken;
          if (token() === 1 /* EndOfFileToken */) {
            statements = createNodeArray([], pos, pos);
            endOfFileToken = parseTokenNode();
          } else {
            let expressions;
            while (token() !== 1 /* EndOfFileToken */) {
              let expression2;
              switch (token()) {
                case 22 /* OpenBracketToken */:
                  expression2 = parseArrayLiteralExpression();
                  break;
                case 110 /* TrueKeyword */:
                case 95 /* FalseKeyword */:
                case 104 /* NullKeyword */:
                  expression2 = parseTokenNode();
                  break;
                case 40 /* MinusToken */:
                  if (lookAhead(() => nextToken() === 8 /* NumericLiteral */ && nextToken() !== 58 /* ColonToken */)) {
                    expression2 = parsePrefixUnaryExpression();
                  } else {
                    expression2 = parseObjectLiteralExpression();
                  }
                  break;
                case 8 /* NumericLiteral */:
                case 10 /* StringLiteral */:
                  if (lookAhead(() => nextToken() !== 58 /* ColonToken */)) {
                    expression2 = parseLiteralNode();
                    break;
                  }
                default:
                  expression2 = parseObjectLiteralExpression();
                  break;
              }
              if (expressions && isArray(expressions)) {
                expressions.push(expression2);
              } else if (expressions) {
                expressions = [expressions, expression2];
              } else {
                expressions = expression2;
                if (token() !== 1 /* EndOfFileToken */) {
                  parseErrorAtCurrentToken(Diagnostics.Unexpected_token);
                }
              }
            }
            const expression = isArray(expressions) ? finishNode(factoryCreateArrayLiteralExpression(expressions), pos) : Debug.checkDefined(expressions);
            const statement = factoryCreateExpressionStatement(expression);
            finishNode(statement, pos);
            statements = createNodeArray([statement], pos);
            endOfFileToken = parseExpectedToken(1 /* EndOfFileToken */, Diagnostics.Unexpected_token);
          }
          const sourceFile = createSourceFile2(
            fileName2,
            2 /* ES2015 */,
            6 /* JSON */,
            /*isDeclaration*/
            false,
            statements,
            endOfFileToken,
            sourceFlags,
            noop
          );
          if (setParentNodes) {
            fixupParentReferences(sourceFile);
          }
          sourceFile.nodeCount = nodeCount;
          sourceFile.identifierCount = identifierCount;
          sourceFile.identifiers = identifiers;
          sourceFile.parseDiagnostics = attachFileToDiagnostics(parseDiagnostics, sourceFile);
          if (jsDocDiagnostics) {
            sourceFile.jsDocDiagnostics = attachFileToDiagnostics(jsDocDiagnostics, sourceFile);
          }
          const result = sourceFile;
          clearState();
          return result;
        }
        Parser2.parseJsonText = parseJsonText2;
        function initializeState(_fileName, _sourceText, _languageVersion, _syntaxCursor, _scriptKind) {
          NodeConstructor2 = objectAllocator.getNodeConstructor();
          TokenConstructor2 = objectAllocator.getTokenConstructor();
          IdentifierConstructor2 = objectAllocator.getIdentifierConstructor();
          PrivateIdentifierConstructor2 = objectAllocator.getPrivateIdentifierConstructor();
          SourceFileConstructor2 = objectAllocator.getSourceFileConstructor();
          fileName = normalizePath(_fileName);
          sourceText = _sourceText;
          languageVersion = _languageVersion;
          syntaxCursor = _syntaxCursor;
          scriptKind = _scriptKind;
          languageVariant = getLanguageVariant(_scriptKind);
          parseDiagnostics = [];
          parsingContext = 0;
          identifiers = /* @__PURE__ */ new Map();
          identifierCount = 0;
          nodeCount = 0;
          sourceFlags = 0;
          topLevel = true;
          switch (scriptKind) {
            case 1 /* JS */:
            case 2 /* JSX */:
              contextFlags = 262144 /* JavaScriptFile */;
              break;
            case 6 /* JSON */:
              contextFlags = 262144 /* JavaScriptFile */ | 67108864 /* JsonFile */;
              break;
            default:
              contextFlags = 0 /* None */;
              break;
          }
          parseErrorBeforeNextFinishedNode = false;
          scanner2.setText(sourceText);
          scanner2.setOnError(scanError);
          scanner2.setScriptTarget(languageVersion);
          scanner2.setLanguageVariant(languageVariant);
        }
        function clearState() {
          scanner2.clearCommentDirectives();
          scanner2.setText("");
          scanner2.setOnError(void 0);
          sourceText = void 0;
          languageVersion = void 0;
          syntaxCursor = void 0;
          scriptKind = void 0;
          languageVariant = void 0;
          sourceFlags = 0;
          parseDiagnostics = void 0;
          jsDocDiagnostics = void 0;
          parsingContext = 0;
          identifiers = void 0;
          notParenthesizedArrow = void 0;
          topLevel = true;
        }
        function parseSourceFileWorker(languageVersion2, setParentNodes, scriptKind2, setExternalModuleIndicator2) {
          const isDeclarationFile = isDeclarationFileName(fileName);
          if (isDeclarationFile) {
            contextFlags |= 16777216 /* Ambient */;
          }
          sourceFlags = contextFlags;
          nextToken();
          const statements = parseList(0 /* SourceElements */, parseStatement);
          Debug.assert(token() === 1 /* EndOfFileToken */);
          const endOfFileToken = addJSDocComment(parseTokenNode());
          const sourceFile = createSourceFile2(fileName, languageVersion2, scriptKind2, isDeclarationFile, statements, endOfFileToken, sourceFlags, setExternalModuleIndicator2);
          processCommentPragmas(sourceFile, sourceText);
          processPragmasIntoFields(sourceFile, reportPragmaDiagnostic);
          sourceFile.commentDirectives = scanner2.getCommentDirectives();
          sourceFile.nodeCount = nodeCount;
          sourceFile.identifierCount = identifierCount;
          sourceFile.identifiers = identifiers;
          sourceFile.parseDiagnostics = attachFileToDiagnostics(parseDiagnostics, sourceFile);
          if (jsDocDiagnostics) {
            sourceFile.jsDocDiagnostics = attachFileToDiagnostics(jsDocDiagnostics, sourceFile);
          }
          if (setParentNodes) {
            fixupParentReferences(sourceFile);
          }
          return sourceFile;
          function reportPragmaDiagnostic(pos, end, diagnostic) {
            parseDiagnostics.push(createDetachedDiagnostic(fileName, pos, end, diagnostic));
          }
        }
        function withJSDoc(node, hasJSDoc) {
          return hasJSDoc ? addJSDocComment(node) : node;
        }
        let hasDeprecatedTag = false;
        function addJSDocComment(node) {
          Debug.assert(!node.jsDoc);
          const jsDoc = mapDefined(getJSDocCommentRanges(node, sourceText), (comment) => JSDocParser.parseJSDocComment(node, comment.pos, comment.end - comment.pos));
          if (jsDoc.length)
            node.jsDoc = jsDoc;
          if (hasDeprecatedTag) {
            hasDeprecatedTag = false;
            node.flags |= 268435456 /* Deprecated */;
          }
          return node;
        }
        function reparseTopLevelAwait(sourceFile) {
          const savedSyntaxCursor = syntaxCursor;
          const baseSyntaxCursor = IncrementalParser.createSyntaxCursor(sourceFile);
          syntaxCursor = { currentNode: currentNode2 };
          const statements = [];
          const savedParseDiagnostics = parseDiagnostics;
          parseDiagnostics = [];
          let pos = 0;
          let start = findNextStatementWithAwait(sourceFile.statements, 0);
          while (start !== -1) {
            const prevStatement = sourceFile.statements[pos];
            const nextStatement = sourceFile.statements[start];
            addRange(statements, sourceFile.statements, pos, start);
            pos = findNextStatementWithoutAwait(sourceFile.statements, start);
            const diagnosticStart = findIndex(savedParseDiagnostics, (diagnostic) => diagnostic.start >= prevStatement.pos);
            const diagnosticEnd = diagnosticStart >= 0 ? findIndex(savedParseDiagnostics, (diagnostic) => diagnostic.start >= nextStatement.pos, diagnosticStart) : -1;
            if (diagnosticStart >= 0) {
              addRange(parseDiagnostics, savedParseDiagnostics, diagnosticStart, diagnosticEnd >= 0 ? diagnosticEnd : void 0);
            }
            speculationHelper(() => {
              const savedContextFlags = contextFlags;
              contextFlags |= 32768 /* AwaitContext */;
              scanner2.setTextPos(nextStatement.pos);
              nextToken();
              while (token() !== 1 /* EndOfFileToken */) {
                const startPos = scanner2.getStartPos();
                const statement = parseListElement(0 /* SourceElements */, parseStatement);
                statements.push(statement);
                if (startPos === scanner2.getStartPos()) {
                  nextToken();
                }
                if (pos >= 0) {
                  const nonAwaitStatement = sourceFile.statements[pos];
                  if (statement.end === nonAwaitStatement.pos) {
                    break;
                  }
                  if (statement.end > nonAwaitStatement.pos) {
                    pos = findNextStatementWithoutAwait(sourceFile.statements, pos + 1);
                  }
                }
              }
              contextFlags = savedContextFlags;
            }, 2 /* Reparse */);
            start = pos >= 0 ? findNextStatementWithAwait(sourceFile.statements, pos) : -1;
          }
          if (pos >= 0) {
            const prevStatement = sourceFile.statements[pos];
            addRange(statements, sourceFile.statements, pos);
            const diagnosticStart = findIndex(savedParseDiagnostics, (diagnostic) => diagnostic.start >= prevStatement.pos);
            if (diagnosticStart >= 0) {
              addRange(parseDiagnostics, savedParseDiagnostics, diagnosticStart);
            }
          }
          syntaxCursor = savedSyntaxCursor;
          return factory2.updateSourceFile(sourceFile, setTextRange(factoryCreateNodeArray(statements), sourceFile.statements));
          function containsPossibleTopLevelAwait(node) {
            return !(node.flags & 32768 /* AwaitContext */) && !!(node.transformFlags & 67108864 /* ContainsPossibleTopLevelAwait */);
          }
          function findNextStatementWithAwait(statements2, start2) {
            for (let i = start2; i < statements2.length; i++) {
              if (containsPossibleTopLevelAwait(statements2[i])) {
                return i;
              }
            }
            return -1;
          }
          function findNextStatementWithoutAwait(statements2, start2) {
            for (let i = start2; i < statements2.length; i++) {
              if (!containsPossibleTopLevelAwait(statements2[i])) {
                return i;
              }
            }
            return -1;
          }
          function currentNode2(position) {
            const node = baseSyntaxCursor.currentNode(position);
            if (topLevel && node && containsPossibleTopLevelAwait(node)) {
              node.intersectsChange = true;
            }
            return node;
          }
        }
        function fixupParentReferences(rootNode) {
          setParentRecursive(
            rootNode,
            /*incremental*/
            true
          );
        }
        Parser2.fixupParentReferences = fixupParentReferences;
        function createSourceFile2(fileName2, languageVersion2, scriptKind2, isDeclarationFile, statements, endOfFileToken, flags, setExternalModuleIndicator2) {
          let sourceFile = factory2.createSourceFile(statements, endOfFileToken, flags);
          setTextRangePosWidth(sourceFile, 0, sourceText.length);
          setFields(sourceFile);
          if (!isDeclarationFile && isExternalModule(sourceFile) && sourceFile.transformFlags & 67108864 /* ContainsPossibleTopLevelAwait */) {
            sourceFile = reparseTopLevelAwait(sourceFile);
            setFields(sourceFile);
          }
          return sourceFile;
          function setFields(sourceFile2) {
            sourceFile2.text = sourceText;
            sourceFile2.bindDiagnostics = [];
            sourceFile2.bindSuggestionDiagnostics = void 0;
            sourceFile2.languageVersion = languageVersion2;
            sourceFile2.fileName = fileName2;
            sourceFile2.languageVariant = getLanguageVariant(scriptKind2);
            sourceFile2.isDeclarationFile = isDeclarationFile;
            sourceFile2.scriptKind = scriptKind2;
            setExternalModuleIndicator2(sourceFile2);
            sourceFile2.setExternalModuleIndicator = setExternalModuleIndicator2;
          }
        }
        function setContextFlag(val, flag) {
          if (val) {
            contextFlags |= flag;
          } else {
            contextFlags &= ~flag;
          }
        }
        function setDisallowInContext(val) {
          setContextFlag(val, 4096 /* DisallowInContext */);
        }
        function setYieldContext(val) {
          setContextFlag(val, 8192 /* YieldContext */);
        }
        function setDecoratorContext(val) {
          setContextFlag(val, 16384 /* DecoratorContext */);
        }
        function setAwaitContext(val) {
          setContextFlag(val, 32768 /* AwaitContext */);
        }
        function doOutsideOfContext(context, func) {
          const contextFlagsToClear = context & contextFlags;
          if (contextFlagsToClear) {
            setContextFlag(
              /*val*/
              false,
              contextFlagsToClear
            );
            const result = func();
            setContextFlag(
              /*val*/
              true,
              contextFlagsToClear
            );
            return result;
          }
          return func();
        }
        function doInsideOfContext(context, func) {
          const contextFlagsToSet = context & ~contextFlags;
          if (contextFlagsToSet) {
            setContextFlag(
              /*val*/
              true,
              contextFlagsToSet
            );
            const result = func();
            setContextFlag(
              /*val*/
              false,
              contextFlagsToSet
            );
            return result;
          }
          return func();
        }
        function allowInAnd(func) {
          return doOutsideOfContext(4096 /* DisallowInContext */, func);
        }
        function disallowInAnd(func) {
          return doInsideOfContext(4096 /* DisallowInContext */, func);
        }
        function allowConditionalTypesAnd(func) {
          return doOutsideOfContext(65536 /* DisallowConditionalTypesContext */, func);
        }
        function disallowConditionalTypesAnd(func) {
          return doInsideOfContext(65536 /* DisallowConditionalTypesContext */, func);
        }
        function doInYieldContext(func) {
          return doInsideOfContext(8192 /* YieldContext */, func);
        }
        function doInDecoratorContext(func) {
          return doInsideOfContext(16384 /* DecoratorContext */, func);
        }
        function doInAwaitContext(func) {
          return doInsideOfContext(32768 /* AwaitContext */, func);
        }
        function doOutsideOfAwaitContext(func) {
          return doOutsideOfContext(32768 /* AwaitContext */, func);
        }
        function doInYieldAndAwaitContext(func) {
          return doInsideOfContext(8192 /* YieldContext */ | 32768 /* AwaitContext */, func);
        }
        function doOutsideOfYieldAndAwaitContext(func) {
          return doOutsideOfContext(8192 /* YieldContext */ | 32768 /* AwaitContext */, func);
        }
        function inContext(flags) {
          return (contextFlags & flags) !== 0;
        }
        function inYieldContext() {
          return inContext(8192 /* YieldContext */);
        }
        function inDisallowInContext() {
          return inContext(4096 /* DisallowInContext */);
        }
        function inDisallowConditionalTypesContext() {
          return inContext(65536 /* DisallowConditionalTypesContext */);
        }
        function inDecoratorContext() {
          return inContext(16384 /* DecoratorContext */);
        }
        function inAwaitContext() {
          return inContext(32768 /* AwaitContext */);
        }
        function parseErrorAtCurrentToken(message, arg0) {
          return parseErrorAt(scanner2.getTokenPos(), scanner2.getTextPos(), message, arg0);
        }
        function parseErrorAtPosition(start, length2, message, arg0) {
          const lastError = lastOrUndefined(parseDiagnostics);
          let result;
          if (!lastError || start !== lastError.start) {
            result = createDetachedDiagnostic(fileName, start, length2, message, arg0);
            parseDiagnostics.push(result);
          }
          parseErrorBeforeNextFinishedNode = true;
          return result;
        }
        function parseErrorAt(start, end, message, arg0) {
          return parseErrorAtPosition(start, end - start, message, arg0);
        }
        function parseErrorAtRange(range, message, arg0) {
          parseErrorAt(range.pos, range.end, message, arg0);
        }
        function scanError(message, length2) {
          parseErrorAtPosition(scanner2.getTextPos(), length2, message);
        }
        function getNodePos() {
          return scanner2.getStartPos();
        }
        function hasPrecedingJSDocComment() {
          return scanner2.hasPrecedingJSDocComment();
        }
        function token() {
          return currentToken;
        }
        function nextTokenWithoutCheck() {
          return currentToken = scanner2.scan();
        }
        function nextTokenAnd(func) {
          nextToken();
          return func();
        }
        function nextToken() {
          if (isKeyword(currentToken) && (scanner2.hasUnicodeEscape() || scanner2.hasExtendedUnicodeEscape())) {
            parseErrorAt(scanner2.getTokenPos(), scanner2.getTextPos(), Diagnostics.Keywords_cannot_contain_escape_characters);
          }
          return nextTokenWithoutCheck();
        }
        function nextTokenJSDoc() {
          return currentToken = scanner2.scanJsDocToken();
        }
        function reScanGreaterToken() {
          return currentToken = scanner2.reScanGreaterToken();
        }
        function reScanSlashToken() {
          return currentToken = scanner2.reScanSlashToken();
        }
        function reScanTemplateToken(isTaggedTemplate) {
          return currentToken = scanner2.reScanTemplateToken(isTaggedTemplate);
        }
        function reScanTemplateHeadOrNoSubstitutionTemplate() {
          return currentToken = scanner2.reScanTemplateHeadOrNoSubstitutionTemplate();
        }
        function reScanLessThanToken() {
          return currentToken = scanner2.reScanLessThanToken();
        }
        function reScanHashToken() {
          return currentToken = scanner2.reScanHashToken();
        }
        function scanJsxIdentifier() {
          return currentToken = scanner2.scanJsxIdentifier();
        }
        function scanJsxText() {
          return currentToken = scanner2.scanJsxToken();
        }
        function scanJsxAttributeValue() {
          return currentToken = scanner2.scanJsxAttributeValue();
        }
        function speculationHelper(callback, speculationKind) {
          const saveToken = currentToken;
          const saveParseDiagnosticsLength = parseDiagnostics.length;
          const saveParseErrorBeforeNextFinishedNode = parseErrorBeforeNextFinishedNode;
          const saveContextFlags = contextFlags;
          const result = speculationKind !== 0 /* TryParse */ ? scanner2.lookAhead(callback) : scanner2.tryScan(callback);
          Debug.assert(saveContextFlags === contextFlags);
          if (!result || speculationKind !== 0 /* TryParse */) {
            currentToken = saveToken;
            if (speculationKind !== 2 /* Reparse */) {
              parseDiagnostics.length = saveParseDiagnosticsLength;
            }
            parseErrorBeforeNextFinishedNode = saveParseErrorBeforeNextFinishedNode;
          }
          return result;
        }
        function lookAhead(callback) {
          return speculationHelper(callback, 1 /* Lookahead */);
        }
        function tryParse(callback) {
          return speculationHelper(callback, 0 /* TryParse */);
        }
        function isBindingIdentifier() {
          if (token() === 79 /* Identifier */) {
            return true;
          }
          return token() > 116 /* LastReservedWord */;
        }
        function isIdentifier2() {
          if (token() === 79 /* Identifier */) {
            return true;
          }
          if (token() === 125 /* YieldKeyword */ && inYieldContext()) {
            return false;
          }
          if (token() === 133 /* AwaitKeyword */ && inAwaitContext()) {
            return false;
          }
          return token() > 116 /* LastReservedWord */;
        }
        function parseExpected(kind, diagnosticMessage, shouldAdvance = true) {
          if (token() === kind) {
            if (shouldAdvance) {
              nextToken();
            }
            return true;
          }
          if (diagnosticMessage) {
            parseErrorAtCurrentToken(diagnosticMessage);
          } else {
            parseErrorAtCurrentToken(Diagnostics._0_expected, tokenToString(kind));
          }
          return false;
        }
        const viableKeywordSuggestions = Object.keys(textToKeywordObj).filter((keyword) => keyword.length > 2);
        function parseErrorForMissingSemicolonAfter(node) {
          var _a2;
          if (isTaggedTemplateExpression(node)) {
            parseErrorAt(skipTrivia(sourceText, node.template.pos), node.template.end, Diagnostics.Module_declaration_names_may_only_use_or_quoted_strings);
            return;
          }
          const expressionText = isIdentifier(node) ? idText(node) : void 0;
          if (!expressionText || !isIdentifierText(expressionText, languageVersion)) {
            parseErrorAtCurrentToken(Diagnostics._0_expected, tokenToString(26 /* SemicolonToken */));
            return;
          }
          const pos = skipTrivia(sourceText, node.pos);
          switch (expressionText) {
            case "const":
            case "let":
            case "var":
              parseErrorAt(pos, node.end, Diagnostics.Variable_declaration_not_allowed_at_this_location);
              return;
            case "declare":
              return;
            case "interface":
              parseErrorForInvalidName(Diagnostics.Interface_name_cannot_be_0, Diagnostics.Interface_must_be_given_a_name, 18 /* OpenBraceToken */);
              return;
            case "is":
              parseErrorAt(pos, scanner2.getTextPos(), Diagnostics.A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods);
              return;
            case "module":
            case "namespace":
              parseErrorForInvalidName(Diagnostics.Namespace_name_cannot_be_0, Diagnostics.Namespace_must_be_given_a_name, 18 /* OpenBraceToken */);
              return;
            case "type":
              parseErrorForInvalidName(Diagnostics.Type_alias_name_cannot_be_0, Diagnostics.Type_alias_must_be_given_a_name, 63 /* EqualsToken */);
              return;
          }
          const suggestion = (_a2 = getSpellingSuggestion(expressionText, viableKeywordSuggestions, (n) => n)) != null ? _a2 : getSpaceSuggestion(expressionText);
          if (suggestion) {
            parseErrorAt(pos, node.end, Diagnostics.Unknown_keyword_or_identifier_Did_you_mean_0, suggestion);
            return;
          }
          if (token() === 0 /* Unknown */) {
            return;
          }
          parseErrorAt(pos, node.end, Diagnostics.Unexpected_keyword_or_identifier);
        }
        function parseErrorForInvalidName(nameDiagnostic, blankDiagnostic, tokenIfBlankName) {
          if (token() === tokenIfBlankName) {
            parseErrorAtCurrentToken(blankDiagnostic);
          } else {
            parseErrorAtCurrentToken(nameDiagnostic, scanner2.getTokenValue());
          }
        }
        function getSpaceSuggestion(expressionText) {
          for (const keyword of viableKeywordSuggestions) {
            if (expressionText.length > keyword.length + 2 && startsWith(expressionText, keyword)) {
              return `${keyword} ${expressionText.slice(keyword.length)}`;
            }
          }
          return void 0;
        }
        function parseSemicolonAfterPropertyName(name, type, initializer) {
          if (token() === 59 /* AtToken */ && !scanner2.hasPrecedingLineBreak()) {
            parseErrorAtCurrentToken(Diagnostics.Decorators_must_precede_the_name_and_all_keywords_of_property_declarations);
            return;
          }
          if (token() === 20 /* OpenParenToken */) {
            parseErrorAtCurrentToken(Diagnostics.Cannot_start_a_function_call_in_a_type_annotation);
            nextToken();
            return;
          }
          if (type && !canParseSemicolon()) {
            if (initializer) {
              parseErrorAtCurrentToken(Diagnostics._0_expected, tokenToString(26 /* SemicolonToken */));
            } else {
              parseErrorAtCurrentToken(Diagnostics.Expected_for_property_initializer);
            }
            return;
          }
          if (tryParseSemicolon()) {
            return;
          }
          if (initializer) {
            parseErrorAtCurrentToken(Diagnostics._0_expected, tokenToString(26 /* SemicolonToken */));
            return;
          }
          parseErrorForMissingSemicolonAfter(name);
        }
        function parseExpectedJSDoc(kind) {
          if (token() === kind) {
            nextTokenJSDoc();
            return true;
          }
          parseErrorAtCurrentToken(Diagnostics._0_expected, tokenToString(kind));
          return false;
        }
        function parseExpectedMatchingBrackets(openKind, closeKind, openParsed, openPosition) {
          if (token() === closeKind) {
            nextToken();
            return;
          }
          const lastError = parseErrorAtCurrentToken(Diagnostics._0_expected, tokenToString(closeKind));
          if (!openParsed) {
            return;
          }
          if (lastError) {
            addRelatedInfo(
              lastError,
              createDetachedDiagnostic(fileName, openPosition, 1, Diagnostics.The_parser_expected_to_find_a_1_to_match_the_0_token_here, tokenToString(openKind), tokenToString(closeKind))
            );
          }
        }
        function parseOptional(t) {
          if (token() === t) {
            nextToken();
            return true;
          }
          return false;
        }
        function parseOptionalToken(t) {
          if (token() === t) {
            return parseTokenNode();
          }
          return void 0;
        }
        function parseOptionalTokenJSDoc(t) {
          if (token() === t) {
            return parseTokenNodeJSDoc();
          }
          return void 0;
        }
        function parseExpectedToken(t, diagnosticMessage, arg0) {
          return parseOptionalToken(t) || createMissingNode(
            t,
            /*reportAtCurrentPosition*/
            false,
            diagnosticMessage || Diagnostics._0_expected,
            arg0 || tokenToString(t)
          );
        }
        function parseExpectedTokenJSDoc(t) {
          return parseOptionalTokenJSDoc(t) || createMissingNode(
            t,
            /*reportAtCurrentPosition*/
            false,
            Diagnostics._0_expected,
            tokenToString(t)
          );
        }
        function parseTokenNode() {
          const pos = getNodePos();
          const kind = token();
          nextToken();
          return finishNode(factoryCreateToken(kind), pos);
        }
        function parseTokenNodeJSDoc() {
          const pos = getNodePos();
          const kind = token();
          nextTokenJSDoc();
          return finishNode(factoryCreateToken(kind), pos);
        }
        function canParseSemicolon() {
          if (token() === 26 /* SemicolonToken */) {
            return true;
          }
          return token() === 19 /* CloseBraceToken */ || token() === 1 /* EndOfFileToken */ || scanner2.hasPrecedingLineBreak();
        }
        function tryParseSemicolon() {
          if (!canParseSemicolon()) {
            return false;
          }
          if (token() === 26 /* SemicolonToken */) {
            nextToken();
          }
          return true;
        }
        function parseSemicolon() {
          return tryParseSemicolon() || parseExpected(26 /* SemicolonToken */);
        }
        function createNodeArray(elements, pos, end, hasTrailingComma) {
          const array = factoryCreateNodeArray(elements, hasTrailingComma);
          setTextRangePosEnd(array, pos, end != null ? end : scanner2.getStartPos());
          return array;
        }
        function finishNode(node, pos, end) {
          setTextRangePosEnd(node, pos, end != null ? end : scanner2.getStartPos());
          if (contextFlags) {
            node.flags |= contextFlags;
          }
          if (parseErrorBeforeNextFinishedNode) {
            parseErrorBeforeNextFinishedNode = false;
            node.flags |= 131072 /* ThisNodeHasError */;
          }
          return node;
        }
        function createMissingNode(kind, reportAtCurrentPosition, diagnosticMessage, arg0) {
          if (reportAtCurrentPosition) {
            parseErrorAtPosition(scanner2.getStartPos(), 0, diagnosticMessage, arg0);
          } else if (diagnosticMessage) {
            parseErrorAtCurrentToken(diagnosticMessage, arg0);
          }
          const pos = getNodePos();
          const result = kind === 79 /* Identifier */ ? factoryCreateIdentifier(
            "",
            /*originalKeywordKind*/
            void 0
          ) : isTemplateLiteralKind(kind) ? factory2.createTemplateLiteralLikeNode(
            kind,
            "",
            "",
            /*templateFlags*/
            void 0
          ) : kind === 8 /* NumericLiteral */ ? factoryCreateNumericLiteral(
            "",
            /*numericLiteralFlags*/
            void 0
          ) : kind === 10 /* StringLiteral */ ? factoryCreateStringLiteral(
            "",
            /*isSingleQuote*/
            void 0
          ) : kind === 279 /* MissingDeclaration */ ? factory2.createMissingDeclaration() : factoryCreateToken(kind);
          return finishNode(result, pos);
        }
        function internIdentifier(text) {
          let identifier = identifiers.get(text);
          if (identifier === void 0) {
            identifiers.set(text, identifier = text);
          }
          return identifier;
        }
        function createIdentifier(isIdentifier3, diagnosticMessage, privateIdentifierDiagnosticMessage) {
          if (isIdentifier3) {
            identifierCount++;
            const pos = getNodePos();
            const originalKeywordKind = token();
            const text = internIdentifier(scanner2.getTokenValue());
            const hasExtendedUnicodeEscape = scanner2.hasExtendedUnicodeEscape();
            nextTokenWithoutCheck();
            return finishNode(factoryCreateIdentifier(text, originalKeywordKind, hasExtendedUnicodeEscape), pos);
          }
          if (token() === 80 /* PrivateIdentifier */) {
            parseErrorAtCurrentToken(privateIdentifierDiagnosticMessage || Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies);
            return createIdentifier(
              /*isIdentifier*/
              true
            );
          }
          if (token() === 0 /* Unknown */ && scanner2.tryScan(() => scanner2.reScanInvalidIdentifier() === 79 /* Identifier */)) {
            return createIdentifier(
              /*isIdentifier*/
              true
            );
          }
          identifierCount++;
          const reportAtCurrentPosition = token() === 1 /* EndOfFileToken */;
          const isReservedWord = scanner2.isReservedWord();
          const msgArg = scanner2.getTokenText();
          const defaultMessage = isReservedWord ? Diagnostics.Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here : Diagnostics.Identifier_expected;
          return createMissingNode(79 /* Identifier */, reportAtCurrentPosition, diagnosticMessage || defaultMessage, msgArg);
        }
        function parseBindingIdentifier(privateIdentifierDiagnosticMessage) {
          return createIdentifier(
            isBindingIdentifier(),
            /*diagnosticMessage*/
            void 0,
            privateIdentifierDiagnosticMessage
          );
        }
        function parseIdentifier(diagnosticMessage, privateIdentifierDiagnosticMessage) {
          return createIdentifier(isIdentifier2(), diagnosticMessage, privateIdentifierDiagnosticMessage);
        }
        function parseIdentifierName(diagnosticMessage) {
          return createIdentifier(tokenIsIdentifierOrKeyword(token()), diagnosticMessage);
        }
        function isLiteralPropertyName() {
          return tokenIsIdentifierOrKeyword(token()) || token() === 10 /* StringLiteral */ || token() === 8 /* NumericLiteral */;
        }
        function isAssertionKey2() {
          return tokenIsIdentifierOrKeyword(token()) || token() === 10 /* StringLiteral */;
        }
        function parsePropertyNameWorker(allowComputedPropertyNames) {
          if (token() === 10 /* StringLiteral */ || token() === 8 /* NumericLiteral */) {
            const node = parseLiteralNode();
            node.text = internIdentifier(node.text);
            return node;
          }
          if (allowComputedPropertyNames && token() === 22 /* OpenBracketToken */) {
            return parseComputedPropertyName();
          }
          if (token() === 80 /* PrivateIdentifier */) {
            return parsePrivateIdentifier();
          }
          return parseIdentifierName();
        }
        function parsePropertyName() {
          return parsePropertyNameWorker(
            /*allowComputedPropertyNames*/
            true
          );
        }
        function parseComputedPropertyName() {
          const pos = getNodePos();
          parseExpected(22 /* OpenBracketToken */);
          const expression = allowInAnd(parseExpression);
          parseExpected(23 /* CloseBracketToken */);
          return finishNode(factory2.createComputedPropertyName(expression), pos);
        }
        function parsePrivateIdentifier() {
          const pos = getNodePos();
          const node = factoryCreatePrivateIdentifier(internIdentifier(scanner2.getTokenValue()));
          nextToken();
          return finishNode(node, pos);
        }
        function parseContextualModifier(t) {
          return token() === t && tryParse(nextTokenCanFollowModifier);
        }
        function nextTokenIsOnSameLineAndCanFollowModifier() {
          nextToken();
          if (scanner2.hasPrecedingLineBreak()) {
            return false;
          }
          return canFollowModifier();
        }
        function nextTokenCanFollowModifier() {
          switch (token()) {
            case 85 /* ConstKeyword */:
              return nextToken() === 92 /* EnumKeyword */;
            case 93 /* ExportKeyword */:
              nextToken();
              if (token() === 88 /* DefaultKeyword */) {
                return lookAhead(nextTokenCanFollowDefaultKeyword);
              }
              if (token() === 154 /* TypeKeyword */) {
                return lookAhead(nextTokenCanFollowExportModifier);
              }
              return canFollowExportModifier();
            case 88 /* DefaultKeyword */:
              return nextTokenCanFollowDefaultKeyword();
            case 124 /* StaticKeyword */:
            case 137 /* GetKeyword */:
            case 151 /* SetKeyword */:
              nextToken();
              return canFollowModifier();
            default:
              return nextTokenIsOnSameLineAndCanFollowModifier();
          }
        }
        function canFollowExportModifier() {
          return token() === 59 /* AtToken */ || token() !== 41 /* AsteriskToken */ && token() !== 128 /* AsKeyword */ && token() !== 18 /* OpenBraceToken */ && canFollowModifier();
        }
        function nextTokenCanFollowExportModifier() {
          nextToken();
          return canFollowExportModifier();
        }
        function parseAnyContextualModifier() {
          return isModifierKind(token()) && tryParse(nextTokenCanFollowModifier);
        }
        function canFollowModifier() {
          return token() === 22 /* OpenBracketToken */ || token() === 18 /* OpenBraceToken */ || token() === 41 /* AsteriskToken */ || token() === 25 /* DotDotDotToken */ || isLiteralPropertyName();
        }
        function nextTokenCanFollowDefaultKeyword() {
          nextToken();
          return token() === 84 /* ClassKeyword */ || token() === 98 /* FunctionKeyword */ || token() === 118 /* InterfaceKeyword */ || token() === 59 /* AtToken */ || token() === 126 /* AbstractKeyword */ && lookAhead(nextTokenIsClassKeywordOnSameLine) || token() === 132 /* AsyncKeyword */ && lookAhead(nextTokenIsFunctionKeywordOnSameLine);
        }
        function isListElement2(parsingContext2, inErrorRecovery) {
          const node = currentNode(parsingContext2);
          if (node) {
            return true;
          }
          switch (parsingContext2) {
            case 0 /* SourceElements */:
            case 1 /* BlockStatements */:
            case 3 /* SwitchClauseStatements */:
              return !(token() === 26 /* SemicolonToken */ && inErrorRecovery) && isStartOfStatement();
            case 2 /* SwitchClauses */:
              return token() === 82 /* CaseKeyword */ || token() === 88 /* DefaultKeyword */;
            case 4 /* TypeMembers */:
              return lookAhead(isTypeMemberStart);
            case 5 /* ClassMembers */:
              return lookAhead(isClassMemberStart) || token() === 26 /* SemicolonToken */ && !inErrorRecovery;
            case 6 /* EnumMembers */:
              return token() === 22 /* OpenBracketToken */ || isLiteralPropertyName();
            case 12 /* ObjectLiteralMembers */:
              switch (token()) {
                case 22 /* OpenBracketToken */:
                case 41 /* AsteriskToken */:
                case 25 /* DotDotDotToken */:
                case 24 /* DotToken */:
                  return true;
                default:
                  return isLiteralPropertyName();
              }
            case 18 /* RestProperties */:
              return isLiteralPropertyName();
            case 9 /* ObjectBindingElements */:
              return token() === 22 /* OpenBracketToken */ || token() === 25 /* DotDotDotToken */ || isLiteralPropertyName();
            case 24 /* AssertEntries */:
              return isAssertionKey2();
            case 7 /* HeritageClauseElement */:
              if (token() === 18 /* OpenBraceToken */) {
                return lookAhead(isValidHeritageClauseObjectLiteral);
              }
              if (!inErrorRecovery) {
                return isStartOfLeftHandSideExpression() && !isHeritageClauseExtendsOrImplementsKeyword();
              } else {
                return isIdentifier2() && !isHeritageClauseExtendsOrImplementsKeyword();
              }
            case 8 /* VariableDeclarations */:
              return isBindingIdentifierOrPrivateIdentifierOrPattern();
            case 10 /* ArrayBindingElements */:
              return token() === 27 /* CommaToken */ || token() === 25 /* DotDotDotToken */ || isBindingIdentifierOrPrivateIdentifierOrPattern();
            case 19 /* TypeParameters */:
              return token() === 101 /* InKeyword */ || token() === 85 /* ConstKeyword */ || isIdentifier2();
            case 15 /* ArrayLiteralMembers */:
              switch (token()) {
                case 27 /* CommaToken */:
                case 24 /* DotToken */:
                  return true;
              }
            case 11 /* ArgumentExpressions */:
              return token() === 25 /* DotDotDotToken */ || isStartOfExpression();
            case 16 /* Parameters */:
              return isStartOfParameter(
                /*isJSDocParameter*/
                false
              );
            case 17 /* JSDocParameters */:
              return isStartOfParameter(
                /*isJSDocParameter*/
                true
              );
            case 20 /* TypeArguments */:
            case 21 /* TupleElementTypes */:
              return token() === 27 /* CommaToken */ || isStartOfType();
            case 22 /* HeritageClauses */:
              return isHeritageClause2();
            case 23 /* ImportOrExportSpecifiers */:
              return tokenIsIdentifierOrKeyword(token());
            case 13 /* JsxAttributes */:
              return tokenIsIdentifierOrKeyword(token()) || token() === 18 /* OpenBraceToken */;
            case 14 /* JsxChildren */:
              return true;
          }
          return Debug.fail("Non-exhaustive case in 'isListElement'.");
        }
        function isValidHeritageClauseObjectLiteral() {
          Debug.assert(token() === 18 /* OpenBraceToken */);
          if (nextToken() === 19 /* CloseBraceToken */) {
            const next = nextToken();
            return next === 27 /* CommaToken */ || next === 18 /* OpenBraceToken */ || next === 94 /* ExtendsKeyword */ || next === 117 /* ImplementsKeyword */;
          }
          return true;
        }
        function nextTokenIsIdentifier() {
          nextToken();
          return isIdentifier2();
        }
        function nextTokenIsIdentifierOrKeyword() {
          nextToken();
          return tokenIsIdentifierOrKeyword(token());
        }
        function nextTokenIsIdentifierOrKeywordOrGreaterThan() {
          nextToken();
          return tokenIsIdentifierOrKeywordOrGreaterThan(token());
        }
        function isHeritageClauseExtendsOrImplementsKeyword() {
          if (token() === 117 /* ImplementsKeyword */ || token() === 94 /* ExtendsKeyword */) {
            return lookAhead(nextTokenIsStartOfExpression);
          }
          return false;
        }
        function nextTokenIsStartOfExpression() {
          nextToken();
          return isStartOfExpression();
        }
        function nextTokenIsStartOfType() {
          nextToken();
          return isStartOfType();
        }
        function isListTerminator(kind) {
          if (token() === 1 /* EndOfFileToken */) {
            return true;
          }
          switch (kind) {
            case 1 /* BlockStatements */:
            case 2 /* SwitchClauses */:
            case 4 /* TypeMembers */:
            case 5 /* ClassMembers */:
            case 6 /* EnumMembers */:
            case 12 /* ObjectLiteralMembers */:
            case 9 /* ObjectBindingElements */:
            case 23 /* ImportOrExportSpecifiers */:
            case 24 /* AssertEntries */:
              return token() === 19 /* CloseBraceToken */;
            case 3 /* SwitchClauseStatements */:
              return token() === 19 /* CloseBraceToken */ || token() === 82 /* CaseKeyword */ || token() === 88 /* DefaultKeyword */;
            case 7 /* HeritageClauseElement */:
              return token() === 18 /* OpenBraceToken */ || token() === 94 /* ExtendsKeyword */ || token() === 117 /* ImplementsKeyword */;
            case 8 /* VariableDeclarations */:
              return isVariableDeclaratorListTerminator();
            case 19 /* TypeParameters */:
              return token() === 31 /* GreaterThanToken */ || token() === 20 /* OpenParenToken */ || token() === 18 /* OpenBraceToken */ || token() === 94 /* ExtendsKeyword */ || token() === 117 /* ImplementsKeyword */;
            case 11 /* ArgumentExpressions */:
              return token() === 21 /* CloseParenToken */ || token() === 26 /* SemicolonToken */;
            case 15 /* ArrayLiteralMembers */:
            case 21 /* TupleElementTypes */:
            case 10 /* ArrayBindingElements */:
              return token() === 23 /* CloseBracketToken */;
            case 17 /* JSDocParameters */:
            case 16 /* Parameters */:
            case 18 /* RestProperties */:
              return token() === 21 /* CloseParenToken */ || token() === 23 /* CloseBracketToken */;
            case 20 /* TypeArguments */:
              return token() !== 27 /* CommaToken */;
            case 22 /* HeritageClauses */:
              return token() === 18 /* OpenBraceToken */ || token() === 19 /* CloseBraceToken */;
            case 13 /* JsxAttributes */:
              return token() === 31 /* GreaterThanToken */ || token() === 43 /* SlashToken */;
            case 14 /* JsxChildren */:
              return token() === 29 /* LessThanToken */ && lookAhead(nextTokenIsSlash);
            default:
              return false;
          }
        }
        function isVariableDeclaratorListTerminator() {
          if (canParseSemicolon()) {
            return true;
          }
          if (isInOrOfKeyword(token())) {
            return true;
          }
          if (token() === 38 /* EqualsGreaterThanToken */) {
            return true;
          }
          return false;
        }
        function isInSomeParsingContext() {
          for (let kind = 0; kind < 25 /* Count */; kind++) {
            if (parsingContext & 1 << kind) {
              if (isListElement2(
                kind,
                /*inErrorRecovery*/
                true
              ) || isListTerminator(kind)) {
                return true;
              }
            }
          }
          return false;
        }
        function parseList(kind, parseElement) {
          const saveParsingContext = parsingContext;
          parsingContext |= 1 << kind;
          const list = [];
          const listPos = getNodePos();
          while (!isListTerminator(kind)) {
            if (isListElement2(
              kind,
              /*inErrorRecovery*/
              false
            )) {
              list.push(parseListElement(kind, parseElement));
              continue;
            }
            if (abortParsingListOrMoveToNextToken(kind)) {
              break;
            }
          }
          parsingContext = saveParsingContext;
          return createNodeArray(list, listPos);
        }
        function parseListElement(parsingContext2, parseElement) {
          const node = currentNode(parsingContext2);
          if (node) {
            return consumeNode(node);
          }
          return parseElement();
        }
        function currentNode(parsingContext2, pos) {
          var _a2;
          if (!syntaxCursor || !isReusableParsingContext(parsingContext2) || parseErrorBeforeNextFinishedNode) {
            return void 0;
          }
          const node = syntaxCursor.currentNode(pos != null ? pos : scanner2.getStartPos());
          if (nodeIsMissing(node) || node.intersectsChange || containsParseError(node)) {
            return void 0;
          }
          const nodeContextFlags = node.flags & 50720768 /* ContextFlags */;
          if (nodeContextFlags !== contextFlags) {
            return void 0;
          }
          if (!canReuseNode(node, parsingContext2)) {
            return void 0;
          }
          if (canHaveJSDoc(node) && ((_a2 = node.jsDoc) == null ? void 0 : _a2.jsDocCache)) {
            node.jsDoc.jsDocCache = void 0;
          }
          return node;
        }
        function consumeNode(node) {
          scanner2.setTextPos(node.end);
          nextToken();
          return node;
        }
        function isReusableParsingContext(parsingContext2) {
          switch (parsingContext2) {
            case 5 /* ClassMembers */:
            case 2 /* SwitchClauses */:
            case 0 /* SourceElements */:
            case 1 /* BlockStatements */:
            case 3 /* SwitchClauseStatements */:
            case 6 /* EnumMembers */:
            case 4 /* TypeMembers */:
            case 8 /* VariableDeclarations */:
            case 17 /* JSDocParameters */:
            case 16 /* Parameters */:
              return true;
          }
          return false;
        }
        function canReuseNode(node, parsingContext2) {
          switch (parsingContext2) {
            case 5 /* ClassMembers */:
              return isReusableClassMember(node);
            case 2 /* SwitchClauses */:
              return isReusableSwitchClause(node);
            case 0 /* SourceElements */:
            case 1 /* BlockStatements */:
            case 3 /* SwitchClauseStatements */:
              return isReusableStatement(node);
            case 6 /* EnumMembers */:
              return isReusableEnumMember(node);
            case 4 /* TypeMembers */:
              return isReusableTypeMember(node);
            case 8 /* VariableDeclarations */:
              return isReusableVariableDeclaration(node);
            case 17 /* JSDocParameters */:
            case 16 /* Parameters */:
              return isReusableParameter(node);
          }
          return false;
        }
        function isReusableClassMember(node) {
          if (node) {
            switch (node.kind) {
              case 173 /* Constructor */:
              case 178 /* IndexSignature */:
              case 174 /* GetAccessor */:
              case 175 /* SetAccessor */:
              case 169 /* PropertyDeclaration */:
              case 237 /* SemicolonClassElement */:
                return true;
              case 171 /* MethodDeclaration */:
                const methodDeclaration = node;
                const nameIsConstructor = methodDeclaration.name.kind === 79 /* Identifier */ && methodDeclaration.name.escapedText === "constructor";
                return !nameIsConstructor;
            }
          }
          return false;
        }
        function isReusableSwitchClause(node) {
          if (node) {
            switch (node.kind) {
              case 292 /* CaseClause */:
              case 293 /* DefaultClause */:
                return true;
            }
          }
          return false;
        }
        function isReusableStatement(node) {
          if (node) {
            switch (node.kind) {
              case 259 /* FunctionDeclaration */:
              case 240 /* VariableStatement */:
              case 238 /* Block */:
              case 242 /* IfStatement */:
              case 241 /* ExpressionStatement */:
              case 254 /* ThrowStatement */:
              case 250 /* ReturnStatement */:
              case 252 /* SwitchStatement */:
              case 249 /* BreakStatement */:
              case 248 /* ContinueStatement */:
              case 246 /* ForInStatement */:
              case 247 /* ForOfStatement */:
              case 245 /* ForStatement */:
              case 244 /* WhileStatement */:
              case 251 /* WithStatement */:
              case 239 /* EmptyStatement */:
              case 255 /* TryStatement */:
              case 253 /* LabeledStatement */:
              case 243 /* DoStatement */:
              case 256 /* DebuggerStatement */:
              case 269 /* ImportDeclaration */:
              case 268 /* ImportEqualsDeclaration */:
              case 275 /* ExportDeclaration */:
              case 274 /* ExportAssignment */:
              case 264 /* ModuleDeclaration */:
              case 260 /* ClassDeclaration */:
              case 261 /* InterfaceDeclaration */:
              case 263 /* EnumDeclaration */:
              case 262 /* TypeAliasDeclaration */:
                return true;
            }
          }
          return false;
        }
        function isReusableEnumMember(node) {
          return node.kind === 302 /* EnumMember */;
        }
        function isReusableTypeMember(node) {
          if (node) {
            switch (node.kind) {
              case 177 /* ConstructSignature */:
              case 170 /* MethodSignature */:
              case 178 /* IndexSignature */:
              case 168 /* PropertySignature */:
              case 176 /* CallSignature */:
                return true;
            }
          }
          return false;
        }
        function isReusableVariableDeclaration(node) {
          if (node.kind !== 257 /* VariableDeclaration */) {
            return false;
          }
          const variableDeclarator = node;
          return variableDeclarator.initializer === void 0;
        }
        function isReusableParameter(node) {
          if (node.kind !== 166 /* Parameter */) {
            return false;
          }
          const parameter = node;
          return parameter.initializer === void 0;
        }
        function abortParsingListOrMoveToNextToken(kind) {
          parsingContextErrors(kind);
          if (isInSomeParsingContext()) {
            return true;
          }
          nextToken();
          return false;
        }
        function parsingContextErrors(context) {
          switch (context) {
            case 0 /* SourceElements */:
              return token() === 88 /* DefaultKeyword */ ? parseErrorAtCurrentToken(Diagnostics._0_expected, tokenToString(93 /* ExportKeyword */)) : parseErrorAtCurrentToken(Diagnostics.Declaration_or_statement_expected);
            case 1 /* BlockStatements */:
              return parseErrorAtCurrentToken(Diagnostics.Declaration_or_statement_expected);
            case 2 /* SwitchClauses */:
              return parseErrorAtCurrentToken(Diagnostics.case_or_default_expected);
            case 3 /* SwitchClauseStatements */:
              return parseErrorAtCurrentToken(Diagnostics.Statement_expected);
            case 18 /* RestProperties */:
            case 4 /* TypeMembers */:
              return parseErrorAtCurrentToken(Diagnostics.Property_or_signature_expected);
            case 5 /* ClassMembers */:
              return parseErrorAtCurrentToken(Diagnostics.Unexpected_token_A_constructor_method_accessor_or_property_was_expected);
            case 6 /* EnumMembers */:
              return parseErrorAtCurrentToken(Diagnostics.Enum_member_expected);
            case 7 /* HeritageClauseElement */:
              return parseErrorAtCurrentToken(Diagnostics.Expression_expected);
            case 8 /* VariableDeclarations */:
              return isKeyword(token()) ? parseErrorAtCurrentToken(Diagnostics._0_is_not_allowed_as_a_variable_declaration_name, tokenToString(token())) : parseErrorAtCurrentToken(Diagnostics.Variable_declaration_expected);
            case 9 /* ObjectBindingElements */:
              return parseErrorAtCurrentToken(Diagnostics.Property_destructuring_pattern_expected);
            case 10 /* ArrayBindingElements */:
              return parseErrorAtCurrentToken(Diagnostics.Array_element_destructuring_pattern_expected);
            case 11 /* ArgumentExpressions */:
              return parseErrorAtCurrentToken(Diagnostics.Argument_expression_expected);
            case 12 /* ObjectLiteralMembers */:
              return parseErrorAtCurrentToken(Diagnostics.Property_assignment_expected);
            case 15 /* ArrayLiteralMembers */:
              return parseErrorAtCurrentToken(Diagnostics.Expression_or_comma_expected);
            case 17 /* JSDocParameters */:
              return parseErrorAtCurrentToken(Diagnostics.Parameter_declaration_expected);
            case 16 /* Parameters */:
              return isKeyword(token()) ? parseErrorAtCurrentToken(Diagnostics._0_is_not_allowed_as_a_parameter_name, tokenToString(token())) : parseErrorAtCurrentToken(Diagnostics.Parameter_declaration_expected);
            case 19 /* TypeParameters */:
              return parseErrorAtCurrentToken(Diagnostics.Type_parameter_declaration_expected);
            case 20 /* TypeArguments */:
              return parseErrorAtCurrentToken(Diagnostics.Type_argument_expected);
            case 21 /* TupleElementTypes */:
              return parseErrorAtCurrentToken(Diagnostics.Type_expected);
            case 22 /* HeritageClauses */:
              return parseErrorAtCurrentToken(Diagnostics.Unexpected_token_expected);
            case 23 /* ImportOrExportSpecifiers */:
              return parseErrorAtCurrentToken(Diagnostics.Identifier_expected);
            case 13 /* JsxAttributes */:
              return parseErrorAtCurrentToken(Diagnostics.Identifier_expected);
            case 14 /* JsxChildren */:
              return parseErrorAtCurrentToken(Diagnostics.Identifier_expected);
            case 24 /* AssertEntries */:
              return parseErrorAtCurrentToken(Diagnostics.Identifier_or_string_literal_expected);
            case 25 /* Count */:
              return Debug.fail("ParsingContext.Count used as a context");
            default:
              Debug.assertNever(context);
          }
        }
        function parseDelimitedList(kind, parseElement, considerSemicolonAsDelimiter) {
          const saveParsingContext = parsingContext;
          parsingContext |= 1 << kind;
          const list = [];
          const listPos = getNodePos();
          let commaStart = -1;
          while (true) {
            if (isListElement2(
              kind,
              /*inErrorRecovery*/
              false
            )) {
              const startPos = scanner2.getStartPos();
              const result = parseListElement(kind, parseElement);
              if (!result) {
                parsingContext = saveParsingContext;
                return void 0;
              }
              list.push(result);
              commaStart = scanner2.getTokenPos();
              if (parseOptional(27 /* CommaToken */)) {
                continue;
              }
              commaStart = -1;
              if (isListTerminator(kind)) {
                break;
              }
              parseExpected(27 /* CommaToken */, getExpectedCommaDiagnostic(kind));
              if (considerSemicolonAsDelimiter && token() === 26 /* SemicolonToken */ && !scanner2.hasPrecedingLineBreak()) {
                nextToken();
              }
              if (startPos === scanner2.getStartPos()) {
                nextToken();
              }
              continue;
            }
            if (isListTerminator(kind)) {
              break;
            }
            if (abortParsingListOrMoveToNextToken(kind)) {
              break;
            }
          }
          parsingContext = saveParsingContext;
          return createNodeArray(
            list,
            listPos,
            /*end*/
            void 0,
            commaStart >= 0
          );
        }
        function getExpectedCommaDiagnostic(kind) {
          return kind === 6 /* EnumMembers */ ? Diagnostics.An_enum_member_name_must_be_followed_by_a_or : void 0;
        }
        function createMissingList() {
          const list = createNodeArray([], getNodePos());
          list.isMissingList = true;
          return list;
        }
        function isMissingList(arr) {
          return !!arr.isMissingList;
        }
        function parseBracketedList(kind, parseElement, open, close) {
          if (parseExpected(open)) {
            const result = parseDelimitedList(kind, parseElement);
            parseExpected(close);
            return result;
          }
          return createMissingList();
        }
        function parseEntityName(allowReservedWords, diagnosticMessage) {
          const pos = getNodePos();
          let entity = allowReservedWords ? parseIdentifierName(diagnosticMessage) : parseIdentifier(diagnosticMessage);
          while (parseOptional(24 /* DotToken */)) {
            if (token() === 29 /* LessThanToken */) {
              break;
            }
            entity = finishNode(
              factory2.createQualifiedName(
                entity,
                parseRightSideOfDot(
                  allowReservedWords,
                  /* allowPrivateIdentifiers */
                  false
                )
              ),
              pos
            );
          }
          return entity;
        }
        function createQualifiedName(entity, name) {
          return finishNode(factory2.createQualifiedName(entity, name), entity.pos);
        }
        function parseRightSideOfDot(allowIdentifierNames, allowPrivateIdentifiers) {
          if (scanner2.hasPrecedingLineBreak() && tokenIsIdentifierOrKeyword(token())) {
            const matchesPattern = lookAhead(nextTokenIsIdentifierOrKeywordOnSameLine);
            if (matchesPattern) {
              return createMissingNode(
                79 /* Identifier */,
                /*reportAtCurrentPosition*/
                true,
                Diagnostics.Identifier_expected
              );
            }
          }
          if (token() === 80 /* PrivateIdentifier */) {
            const node = parsePrivateIdentifier();
            return allowPrivateIdentifiers ? node : createMissingNode(
              79 /* Identifier */,
              /*reportAtCurrentPosition*/
              true,
              Diagnostics.Identifier_expected
            );
          }
          return allowIdentifierNames ? parseIdentifierName() : parseIdentifier();
        }
        function parseTemplateSpans(isTaggedTemplate) {
          const pos = getNodePos();
          const list = [];
          let node;
          do {
            node = parseTemplateSpan(isTaggedTemplate);
            list.push(node);
          } while (node.literal.kind === 16 /* TemplateMiddle */);
          return createNodeArray(list, pos);
        }
        function parseTemplateExpression(isTaggedTemplate) {
          const pos = getNodePos();
          return finishNode(
            factory2.createTemplateExpression(
              parseTemplateHead(isTaggedTemplate),
              parseTemplateSpans(isTaggedTemplate)
            ),
            pos
          );
        }
        function parseTemplateType() {
          const pos = getNodePos();
          return finishNode(
            factory2.createTemplateLiteralType(
              parseTemplateHead(
                /*isTaggedTemplate*/
                false
              ),
              parseTemplateTypeSpans()
            ),
            pos
          );
        }
        function parseTemplateTypeSpans() {
          const pos = getNodePos();
          const list = [];
          let node;
          do {
            node = parseTemplateTypeSpan();
            list.push(node);
          } while (node.literal.kind === 16 /* TemplateMiddle */);
          return createNodeArray(list, pos);
        }
        function parseTemplateTypeSpan() {
          const pos = getNodePos();
          return finishNode(
            factory2.createTemplateLiteralTypeSpan(
              parseType(),
              parseLiteralOfTemplateSpan(
                /*isTaggedTemplate*/
                false
              )
            ),
            pos
          );
        }
        function parseLiteralOfTemplateSpan(isTaggedTemplate) {
          if (token() === 19 /* CloseBraceToken */) {
            reScanTemplateToken(isTaggedTemplate);
            return parseTemplateMiddleOrTemplateTail();
          } else {
            return parseExpectedToken(17 /* TemplateTail */, Diagnostics._0_expected, tokenToString(19 /* CloseBraceToken */));
          }
        }
        function parseTemplateSpan(isTaggedTemplate) {
          const pos = getNodePos();
          return finishNode(
            factory2.createTemplateSpan(
              allowInAnd(parseExpression),
              parseLiteralOfTemplateSpan(isTaggedTemplate)
            ),
            pos
          );
        }
        function parseLiteralNode() {
          return parseLiteralLikeNode(token());
        }
        function parseTemplateHead(isTaggedTemplate) {
          if (isTaggedTemplate) {
            reScanTemplateHeadOrNoSubstitutionTemplate();
          }
          const fragment = parseLiteralLikeNode(token());
          Debug.assert(fragment.kind === 15 /* TemplateHead */, "Template head has wrong token kind");
          return fragment;
        }
        function parseTemplateMiddleOrTemplateTail() {
          const fragment = parseLiteralLikeNode(token());
          Debug.assert(fragment.kind === 16 /* TemplateMiddle */ || fragment.kind === 17 /* TemplateTail */, "Template fragment has wrong token kind");
          return fragment;
        }
        function getTemplateLiteralRawText(kind) {
          const isLast = kind === 14 /* NoSubstitutionTemplateLiteral */ || kind === 17 /* TemplateTail */;
          const tokenText = scanner2.getTokenText();
          return tokenText.substring(1, tokenText.length - (scanner2.isUnterminated() ? 0 : isLast ? 1 : 2));
        }
        function parseLiteralLikeNode(kind) {
          const pos = getNodePos();
          const node = isTemplateLiteralKind(kind) ? factory2.createTemplateLiteralLikeNode(kind, scanner2.getTokenValue(), getTemplateLiteralRawText(kind), scanner2.getTokenFlags() & 2048 /* TemplateLiteralLikeFlags */) : (
            // Octal literals are not allowed in strict mode or ES5
            // Note that theoretically the following condition would hold true literals like 009,
            // which is not octal. But because of how the scanner separates the tokens, we would
            // never get a token like this. Instead, we would get 00 and 9 as two separate tokens.
            // We also do not need to check for negatives because any prefix operator would be part of a
            // parent unary expression.
            kind === 8 /* NumericLiteral */ ? factoryCreateNumericLiteral(scanner2.getTokenValue(), scanner2.getNumericLiteralFlags()) : kind === 10 /* StringLiteral */ ? factoryCreateStringLiteral(
              scanner2.getTokenValue(),
              /*isSingleQuote*/
              void 0,
              scanner2.hasExtendedUnicodeEscape()
            ) : isLiteralKind(kind) ? factoryCreateLiteralLikeNode(kind, scanner2.getTokenValue()) : Debug.fail()
          );
          if (scanner2.hasExtendedUnicodeEscape()) {
            node.hasExtendedUnicodeEscape = true;
          }
          if (scanner2.isUnterminated()) {
            node.isUnterminated = true;
          }
          nextToken();
          return finishNode(node, pos);
        }
        function parseEntityNameOfTypeReference() {
          return parseEntityName(
            /*allowReservedWords*/
            true,
            Diagnostics.Type_expected
          );
        }
        function parseTypeArgumentsOfTypeReference() {
          if (!scanner2.hasPrecedingLineBreak() && reScanLessThanToken() === 29 /* LessThanToken */) {
            return parseBracketedList(20 /* TypeArguments */, parseType, 29 /* LessThanToken */, 31 /* GreaterThanToken */);
          }
        }
        function parseTypeReference() {
          const pos = getNodePos();
          return finishNode(
            factory2.createTypeReferenceNode(
              parseEntityNameOfTypeReference(),
              parseTypeArgumentsOfTypeReference()
            ),
            pos
          );
        }
        function typeHasArrowFunctionBlockingParseError(node) {
          switch (node.kind) {
            case 180 /* TypeReference */:
              return nodeIsMissing(node.typeName);
            case 181 /* FunctionType */:
            case 182 /* ConstructorType */: {
              const { parameters, type } = node;
              return isMissingList(parameters) || typeHasArrowFunctionBlockingParseError(type);
            }
            case 193 /* ParenthesizedType */:
              return typeHasArrowFunctionBlockingParseError(node.type);
            default:
              return false;
          }
        }
        function parseThisTypePredicate(lhs) {
          nextToken();
          return finishNode(factory2.createTypePredicateNode(
            /*assertsModifier*/
            void 0,
            lhs,
            parseType()
          ), lhs.pos);
        }
        function parseThisTypeNode() {
          const pos = getNodePos();
          nextToken();
          return finishNode(factory2.createThisTypeNode(), pos);
        }
        function parseJSDocAllType() {
          const pos = getNodePos();
          nextToken();
          return finishNode(factory2.createJSDocAllType(), pos);
        }
        function parseJSDocNonNullableType() {
          const pos = getNodePos();
          nextToken();
          return finishNode(factory2.createJSDocNonNullableType(
            parseNonArrayType(),
            /*postfix*/
            false
          ), pos);
        }
        function parseJSDocUnknownOrNullableType() {
          const pos = getNodePos();
          nextToken();
          if (token() === 27 /* CommaToken */ || token() === 19 /* CloseBraceToken */ || token() === 21 /* CloseParenToken */ || token() === 31 /* GreaterThanToken */ || token() === 63 /* EqualsToken */ || token() === 51 /* BarToken */) {
            return finishNode(factory2.createJSDocUnknownType(), pos);
          } else {
            return finishNode(factory2.createJSDocNullableType(
              parseType(),
              /*postfix*/
              false
            ), pos);
          }
        }
        function parseJSDocFunctionType() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          if (lookAhead(nextTokenIsOpenParen)) {
            nextToken();
            const parameters = parseParameters(4 /* Type */ | 32 /* JSDoc */);
            const type = parseReturnType(
              58 /* ColonToken */,
              /*isType*/
              false
            );
            return withJSDoc(finishNode(factory2.createJSDocFunctionType(parameters, type), pos), hasJSDoc);
          }
          return finishNode(factory2.createTypeReferenceNode(
            parseIdentifierName(),
            /*typeArguments*/
            void 0
          ), pos);
        }
        function parseJSDocParameter() {
          const pos = getNodePos();
          let name;
          if (token() === 108 /* ThisKeyword */ || token() === 103 /* NewKeyword */) {
            name = parseIdentifierName();
            parseExpected(58 /* ColonToken */);
          }
          return finishNode(
            factory2.createParameterDeclaration(
              /*modifiers*/
              void 0,
              /*dotDotDotToken*/
              void 0,
              // TODO(rbuckton): JSDoc parameters don't have names (except `this`/`new`), should we manufacture an empty identifier?
              name,
              /*questionToken*/
              void 0,
              parseJSDocType(),
              /*initializer*/
              void 0
            ),
            pos
          );
        }
        function parseJSDocType() {
          scanner2.setInJSDocType(true);
          const pos = getNodePos();
          if (parseOptional(142 /* ModuleKeyword */)) {
            const moduleTag = factory2.createJSDocNamepathType(
              /*type*/
              void 0
            );
            terminate:
              while (true) {
                switch (token()) {
                  case 19 /* CloseBraceToken */:
                  case 1 /* EndOfFileToken */:
                  case 27 /* CommaToken */:
                  case 5 /* WhitespaceTrivia */:
                    break terminate;
                  default:
                    nextTokenJSDoc();
                }
              }
            scanner2.setInJSDocType(false);
            return finishNode(moduleTag, pos);
          }
          const hasDotDotDot = parseOptional(25 /* DotDotDotToken */);
          let type = parseTypeOrTypePredicate();
          scanner2.setInJSDocType(false);
          if (hasDotDotDot) {
            type = finishNode(factory2.createJSDocVariadicType(type), pos);
          }
          if (token() === 63 /* EqualsToken */) {
            nextToken();
            return finishNode(factory2.createJSDocOptionalType(type), pos);
          }
          return type;
        }
        function parseTypeQuery() {
          const pos = getNodePos();
          parseExpected(112 /* TypeOfKeyword */);
          const entityName = parseEntityName(
            /*allowReservedWords*/
            true
          );
          const typeArguments = !scanner2.hasPrecedingLineBreak() ? tryParseTypeArguments() : void 0;
          return finishNode(factory2.createTypeQueryNode(entityName, typeArguments), pos);
        }
        function parseTypeParameter() {
          const pos = getNodePos();
          const modifiers = parseModifiers(
            /*allowDecorators*/
            false,
            /*permitConstAsModifier*/
            true
          );
          const name = parseIdentifier();
          let constraint;
          let expression;
          if (parseOptional(94 /* ExtendsKeyword */)) {
            if (isStartOfType() || !isStartOfExpression()) {
              constraint = parseType();
            } else {
              expression = parseUnaryExpressionOrHigher();
            }
          }
          const defaultType = parseOptional(63 /* EqualsToken */) ? parseType() : void 0;
          const node = factory2.createTypeParameterDeclaration(modifiers, name, constraint, defaultType);
          node.expression = expression;
          return finishNode(node, pos);
        }
        function parseTypeParameters() {
          if (token() === 29 /* LessThanToken */) {
            return parseBracketedList(19 /* TypeParameters */, parseTypeParameter, 29 /* LessThanToken */, 31 /* GreaterThanToken */);
          }
        }
        function isStartOfParameter(isJSDocParameter) {
          return token() === 25 /* DotDotDotToken */ || isBindingIdentifierOrPrivateIdentifierOrPattern() || isModifierKind(token()) || token() === 59 /* AtToken */ || isStartOfType(
            /*inStartOfParameter*/
            !isJSDocParameter
          );
        }
        function parseNameOfParameter(modifiers) {
          const name = parseIdentifierOrPattern(Diagnostics.Private_identifiers_cannot_be_used_as_parameters);
          if (getFullWidth(name) === 0 && !some(modifiers) && isModifierKind(token())) {
            nextToken();
          }
          return name;
        }
        function isParameterNameStart() {
          return isBindingIdentifier() || token() === 22 /* OpenBracketToken */ || token() === 18 /* OpenBraceToken */;
        }
        function parseParameter(inOuterAwaitContext) {
          return parseParameterWorker(inOuterAwaitContext);
        }
        function parseParameterForSpeculation(inOuterAwaitContext) {
          return parseParameterWorker(
            inOuterAwaitContext,
            /*allowAmbiguity*/
            false
          );
        }
        function parseParameterWorker(inOuterAwaitContext, allowAmbiguity = true) {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          const modifiers = inOuterAwaitContext ? doInAwaitContext(() => parseModifiers(
            /*allowDecorators*/
            true
          )) : doOutsideOfAwaitContext(() => parseModifiers(
            /*allowDecorators*/
            true
          ));
          if (token() === 108 /* ThisKeyword */) {
            const node2 = factory2.createParameterDeclaration(
              modifiers,
              /*dotDotDotToken*/
              void 0,
              createIdentifier(
                /*isIdentifier*/
                true
              ),
              /*questionToken*/
              void 0,
              parseTypeAnnotation(),
              /*initializer*/
              void 0
            );
            const modifier = firstOrUndefined(modifiers);
            if (modifier) {
              parseErrorAtRange(modifier, Diagnostics.Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters);
            }
            return withJSDoc(finishNode(node2, pos), hasJSDoc);
          }
          const savedTopLevel = topLevel;
          topLevel = false;
          const dotDotDotToken = parseOptionalToken(25 /* DotDotDotToken */);
          if (!allowAmbiguity && !isParameterNameStart()) {
            return void 0;
          }
          const node = withJSDoc(
            finishNode(
              factory2.createParameterDeclaration(
                modifiers,
                dotDotDotToken,
                parseNameOfParameter(modifiers),
                parseOptionalToken(57 /* QuestionToken */),
                parseTypeAnnotation(),
                parseInitializer()
              ),
              pos
            ),
            hasJSDoc
          );
          topLevel = savedTopLevel;
          return node;
        }
        function parseReturnType(returnToken, isType) {
          if (shouldParseReturnType(returnToken, isType)) {
            return allowConditionalTypesAnd(parseTypeOrTypePredicate);
          }
        }
        function shouldParseReturnType(returnToken, isType) {
          if (returnToken === 38 /* EqualsGreaterThanToken */) {
            parseExpected(returnToken);
            return true;
          } else if (parseOptional(58 /* ColonToken */)) {
            return true;
          } else if (isType && token() === 38 /* EqualsGreaterThanToken */) {
            parseErrorAtCurrentToken(Diagnostics._0_expected, tokenToString(58 /* ColonToken */));
            nextToken();
            return true;
          }
          return false;
        }
        function parseParametersWorker(flags, allowAmbiguity) {
          const savedYieldContext = inYieldContext();
          const savedAwaitContext = inAwaitContext();
          setYieldContext(!!(flags & 1 /* Yield */));
          setAwaitContext(!!(flags & 2 /* Await */));
          const parameters = flags & 32 /* JSDoc */ ? parseDelimitedList(17 /* JSDocParameters */, parseJSDocParameter) : parseDelimitedList(16 /* Parameters */, () => allowAmbiguity ? parseParameter(savedAwaitContext) : parseParameterForSpeculation(savedAwaitContext));
          setYieldContext(savedYieldContext);
          setAwaitContext(savedAwaitContext);
          return parameters;
        }
        function parseParameters(flags) {
          if (!parseExpected(20 /* OpenParenToken */)) {
            return createMissingList();
          }
          const parameters = parseParametersWorker(
            flags,
            /*allowAmbiguity*/
            true
          );
          parseExpected(21 /* CloseParenToken */);
          return parameters;
        }
        function parseTypeMemberSemicolon() {
          if (parseOptional(27 /* CommaToken */)) {
            return;
          }
          parseSemicolon();
        }
        function parseSignatureMember(kind) {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          if (kind === 177 /* ConstructSignature */) {
            parseExpected(103 /* NewKeyword */);
          }
          const typeParameters = parseTypeParameters();
          const parameters = parseParameters(4 /* Type */);
          const type = parseReturnType(
            58 /* ColonToken */,
            /*isType*/
            true
          );
          parseTypeMemberSemicolon();
          const node = kind === 176 /* CallSignature */ ? factory2.createCallSignature(typeParameters, parameters, type) : factory2.createConstructSignature(typeParameters, parameters, type);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function isIndexSignature() {
          return token() === 22 /* OpenBracketToken */ && lookAhead(isUnambiguouslyIndexSignature);
        }
        function isUnambiguouslyIndexSignature() {
          nextToken();
          if (token() === 25 /* DotDotDotToken */ || token() === 23 /* CloseBracketToken */) {
            return true;
          }
          if (isModifierKind(token())) {
            nextToken();
            if (isIdentifier2()) {
              return true;
            }
          } else if (!isIdentifier2()) {
            return false;
          } else {
            nextToken();
          }
          if (token() === 58 /* ColonToken */ || token() === 27 /* CommaToken */) {
            return true;
          }
          if (token() !== 57 /* QuestionToken */) {
            return false;
          }
          nextToken();
          return token() === 58 /* ColonToken */ || token() === 27 /* CommaToken */ || token() === 23 /* CloseBracketToken */;
        }
        function parseIndexSignatureDeclaration(pos, hasJSDoc, modifiers) {
          const parameters = parseBracketedList(16 /* Parameters */, () => parseParameter(
            /*inOuterAwaitContext*/
            false
          ), 22 /* OpenBracketToken */, 23 /* CloseBracketToken */);
          const type = parseTypeAnnotation();
          parseTypeMemberSemicolon();
          const node = factory2.createIndexSignature(modifiers, parameters, type);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parsePropertyOrMethodSignature(pos, hasJSDoc, modifiers) {
          const name = parsePropertyName();
          const questionToken = parseOptionalToken(57 /* QuestionToken */);
          let node;
          if (token() === 20 /* OpenParenToken */ || token() === 29 /* LessThanToken */) {
            const typeParameters = parseTypeParameters();
            const parameters = parseParameters(4 /* Type */);
            const type = parseReturnType(
              58 /* ColonToken */,
              /*isType*/
              true
            );
            node = factory2.createMethodSignature(modifiers, name, questionToken, typeParameters, parameters, type);
          } else {
            const type = parseTypeAnnotation();
            node = factory2.createPropertySignature(modifiers, name, questionToken, type);
            if (token() === 63 /* EqualsToken */)
              node.initializer = parseInitializer();
          }
          parseTypeMemberSemicolon();
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function isTypeMemberStart() {
          if (token() === 20 /* OpenParenToken */ || token() === 29 /* LessThanToken */ || token() === 137 /* GetKeyword */ || token() === 151 /* SetKeyword */) {
            return true;
          }
          let idToken = false;
          while (isModifierKind(token())) {
            idToken = true;
            nextToken();
          }
          if (token() === 22 /* OpenBracketToken */) {
            return true;
          }
          if (isLiteralPropertyName()) {
            idToken = true;
            nextToken();
          }
          if (idToken) {
            return token() === 20 /* OpenParenToken */ || token() === 29 /* LessThanToken */ || token() === 57 /* QuestionToken */ || token() === 58 /* ColonToken */ || token() === 27 /* CommaToken */ || canParseSemicolon();
          }
          return false;
        }
        function parseTypeMember() {
          if (token() === 20 /* OpenParenToken */ || token() === 29 /* LessThanToken */) {
            return parseSignatureMember(176 /* CallSignature */);
          }
          if (token() === 103 /* NewKeyword */ && lookAhead(nextTokenIsOpenParenOrLessThan)) {
            return parseSignatureMember(177 /* ConstructSignature */);
          }
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          const modifiers = parseModifiers(
            /*allowDecorators*/
            false
          );
          if (parseContextualModifier(137 /* GetKeyword */)) {
            return parseAccessorDeclaration(pos, hasJSDoc, modifiers, 174 /* GetAccessor */, 4 /* Type */);
          }
          if (parseContextualModifier(151 /* SetKeyword */)) {
            return parseAccessorDeclaration(pos, hasJSDoc, modifiers, 175 /* SetAccessor */, 4 /* Type */);
          }
          if (isIndexSignature()) {
            return parseIndexSignatureDeclaration(pos, hasJSDoc, modifiers);
          }
          return parsePropertyOrMethodSignature(pos, hasJSDoc, modifiers);
        }
        function nextTokenIsOpenParenOrLessThan() {
          nextToken();
          return token() === 20 /* OpenParenToken */ || token() === 29 /* LessThanToken */;
        }
        function nextTokenIsDot() {
          return nextToken() === 24 /* DotToken */;
        }
        function nextTokenIsOpenParenOrLessThanOrDot() {
          switch (nextToken()) {
            case 20 /* OpenParenToken */:
            case 29 /* LessThanToken */:
            case 24 /* DotToken */:
              return true;
          }
          return false;
        }
        function parseTypeLiteral() {
          const pos = getNodePos();
          return finishNode(factory2.createTypeLiteralNode(parseObjectTypeMembers()), pos);
        }
        function parseObjectTypeMembers() {
          let members;
          if (parseExpected(18 /* OpenBraceToken */)) {
            members = parseList(4 /* TypeMembers */, parseTypeMember);
            parseExpected(19 /* CloseBraceToken */);
          } else {
            members = createMissingList();
          }
          return members;
        }
        function isStartOfMappedType() {
          nextToken();
          if (token() === 39 /* PlusToken */ || token() === 40 /* MinusToken */) {
            return nextToken() === 146 /* ReadonlyKeyword */;
          }
          if (token() === 146 /* ReadonlyKeyword */) {
            nextToken();
          }
          return token() === 22 /* OpenBracketToken */ && nextTokenIsIdentifier() && nextToken() === 101 /* InKeyword */;
        }
        function parseMappedTypeParameter() {
          const pos = getNodePos();
          const name = parseIdentifierName();
          parseExpected(101 /* InKeyword */);
          const type = parseType();
          return finishNode(factory2.createTypeParameterDeclaration(
            /*modifiers*/
            void 0,
            name,
            type,
            /*defaultType*/
            void 0
          ), pos);
        }
        function parseMappedType() {
          const pos = getNodePos();
          parseExpected(18 /* OpenBraceToken */);
          let readonlyToken;
          if (token() === 146 /* ReadonlyKeyword */ || token() === 39 /* PlusToken */ || token() === 40 /* MinusToken */) {
            readonlyToken = parseTokenNode();
            if (readonlyToken.kind !== 146 /* ReadonlyKeyword */) {
              parseExpected(146 /* ReadonlyKeyword */);
            }
          }
          parseExpected(22 /* OpenBracketToken */);
          const typeParameter = parseMappedTypeParameter();
          const nameType = parseOptional(128 /* AsKeyword */) ? parseType() : void 0;
          parseExpected(23 /* CloseBracketToken */);
          let questionToken;
          if (token() === 57 /* QuestionToken */ || token() === 39 /* PlusToken */ || token() === 40 /* MinusToken */) {
            questionToken = parseTokenNode();
            if (questionToken.kind !== 57 /* QuestionToken */) {
              parseExpected(57 /* QuestionToken */);
            }
          }
          const type = parseTypeAnnotation();
          parseSemicolon();
          const members = parseList(4 /* TypeMembers */, parseTypeMember);
          parseExpected(19 /* CloseBraceToken */);
          return finishNode(factory2.createMappedTypeNode(readonlyToken, typeParameter, nameType, questionToken, type, members), pos);
        }
        function parseTupleElementType() {
          const pos = getNodePos();
          if (parseOptional(25 /* DotDotDotToken */)) {
            return finishNode(factory2.createRestTypeNode(parseType()), pos);
          }
          const type = parseType();
          if (isJSDocNullableType(type) && type.pos === type.type.pos) {
            const node = factory2.createOptionalTypeNode(type.type);
            setTextRange(node, type);
            node.flags = type.flags;
            return node;
          }
          return type;
        }
        function isNextTokenColonOrQuestionColon() {
          return nextToken() === 58 /* ColonToken */ || token() === 57 /* QuestionToken */ && nextToken() === 58 /* ColonToken */;
        }
        function isTupleElementName() {
          if (token() === 25 /* DotDotDotToken */) {
            return tokenIsIdentifierOrKeyword(nextToken()) && isNextTokenColonOrQuestionColon();
          }
          return tokenIsIdentifierOrKeyword(token()) && isNextTokenColonOrQuestionColon();
        }
        function parseTupleElementNameOrTupleElementType() {
          if (lookAhead(isTupleElementName)) {
            const pos = getNodePos();
            const hasJSDoc = hasPrecedingJSDocComment();
            const dotDotDotToken = parseOptionalToken(25 /* DotDotDotToken */);
            const name = parseIdentifierName();
            const questionToken = parseOptionalToken(57 /* QuestionToken */);
            parseExpected(58 /* ColonToken */);
            const type = parseTupleElementType();
            const node = factory2.createNamedTupleMember(dotDotDotToken, name, questionToken, type);
            return withJSDoc(finishNode(node, pos), hasJSDoc);
          }
          return parseTupleElementType();
        }
        function parseTupleType() {
          const pos = getNodePos();
          return finishNode(
            factory2.createTupleTypeNode(
              parseBracketedList(21 /* TupleElementTypes */, parseTupleElementNameOrTupleElementType, 22 /* OpenBracketToken */, 23 /* CloseBracketToken */)
            ),
            pos
          );
        }
        function parseParenthesizedType() {
          const pos = getNodePos();
          parseExpected(20 /* OpenParenToken */);
          const type = parseType();
          parseExpected(21 /* CloseParenToken */);
          return finishNode(factory2.createParenthesizedType(type), pos);
        }
        function parseModifiersForConstructorType() {
          let modifiers;
          if (token() === 126 /* AbstractKeyword */) {
            const pos = getNodePos();
            nextToken();
            const modifier = finishNode(factoryCreateToken(126 /* AbstractKeyword */), pos);
            modifiers = createNodeArray([modifier], pos);
          }
          return modifiers;
        }
        function parseFunctionOrConstructorType() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          const modifiers = parseModifiersForConstructorType();
          const isConstructorType = parseOptional(103 /* NewKeyword */);
          Debug.assert(!modifiers || isConstructorType, "Per isStartOfFunctionOrConstructorType, a function type cannot have modifiers.");
          const typeParameters = parseTypeParameters();
          const parameters = parseParameters(4 /* Type */);
          const type = parseReturnType(
            38 /* EqualsGreaterThanToken */,
            /*isType*/
            false
          );
          const node = isConstructorType ? factory2.createConstructorTypeNode(modifiers, typeParameters, parameters, type) : factory2.createFunctionTypeNode(typeParameters, parameters, type);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseKeywordAndNoDot() {
          const node = parseTokenNode();
          return token() === 24 /* DotToken */ ? void 0 : node;
        }
        function parseLiteralTypeNode(negative) {
          const pos = getNodePos();
          if (negative) {
            nextToken();
          }
          let expression = token() === 110 /* TrueKeyword */ || token() === 95 /* FalseKeyword */ || token() === 104 /* NullKeyword */ ? parseTokenNode() : parseLiteralLikeNode(token());
          if (negative) {
            expression = finishNode(factory2.createPrefixUnaryExpression(40 /* MinusToken */, expression), pos);
          }
          return finishNode(factory2.createLiteralTypeNode(expression), pos);
        }
        function isStartOfTypeOfImportType() {
          nextToken();
          return token() === 100 /* ImportKeyword */;
        }
        function parseImportTypeAssertions() {
          const pos = getNodePos();
          const openBracePosition = scanner2.getTokenPos();
          parseExpected(18 /* OpenBraceToken */);
          const multiLine = scanner2.hasPrecedingLineBreak();
          parseExpected(130 /* AssertKeyword */);
          parseExpected(58 /* ColonToken */);
          const clause = parseAssertClause(
            /*skipAssertKeyword*/
            true
          );
          if (!parseExpected(19 /* CloseBraceToken */)) {
            const lastError = lastOrUndefined(parseDiagnostics);
            if (lastError && lastError.code === Diagnostics._0_expected.code) {
              addRelatedInfo(
                lastError,
                createDetachedDiagnostic(fileName, openBracePosition, 1, Diagnostics.The_parser_expected_to_find_a_1_to_match_the_0_token_here, "{", "}")
              );
            }
          }
          return finishNode(factory2.createImportTypeAssertionContainer(clause, multiLine), pos);
        }
        function parseImportType() {
          sourceFlags |= 2097152 /* PossiblyContainsDynamicImport */;
          const pos = getNodePos();
          const isTypeOf = parseOptional(112 /* TypeOfKeyword */);
          parseExpected(100 /* ImportKeyword */);
          parseExpected(20 /* OpenParenToken */);
          const type = parseType();
          let assertions;
          if (parseOptional(27 /* CommaToken */)) {
            assertions = parseImportTypeAssertions();
          }
          parseExpected(21 /* CloseParenToken */);
          const qualifier = parseOptional(24 /* DotToken */) ? parseEntityNameOfTypeReference() : void 0;
          const typeArguments = parseTypeArgumentsOfTypeReference();
          return finishNode(factory2.createImportTypeNode(type, assertions, qualifier, typeArguments, isTypeOf), pos);
        }
        function nextTokenIsNumericOrBigIntLiteral() {
          nextToken();
          return token() === 8 /* NumericLiteral */ || token() === 9 /* BigIntLiteral */;
        }
        function parseNonArrayType() {
          switch (token()) {
            case 131 /* AnyKeyword */:
            case 157 /* UnknownKeyword */:
            case 152 /* StringKeyword */:
            case 148 /* NumberKeyword */:
            case 160 /* BigIntKeyword */:
            case 153 /* SymbolKeyword */:
            case 134 /* BooleanKeyword */:
            case 155 /* UndefinedKeyword */:
            case 144 /* NeverKeyword */:
            case 149 /* ObjectKeyword */:
              return tryParse(parseKeywordAndNoDot) || parseTypeReference();
            case 66 /* AsteriskEqualsToken */:
              scanner2.reScanAsteriskEqualsToken();
            case 41 /* AsteriskToken */:
              return parseJSDocAllType();
            case 60 /* QuestionQuestionToken */:
              scanner2.reScanQuestionToken();
            case 57 /* QuestionToken */:
              return parseJSDocUnknownOrNullableType();
            case 98 /* FunctionKeyword */:
              return parseJSDocFunctionType();
            case 53 /* ExclamationToken */:
              return parseJSDocNonNullableType();
            case 14 /* NoSubstitutionTemplateLiteral */:
            case 10 /* StringLiteral */:
            case 8 /* NumericLiteral */:
            case 9 /* BigIntLiteral */:
            case 110 /* TrueKeyword */:
            case 95 /* FalseKeyword */:
            case 104 /* NullKeyword */:
              return parseLiteralTypeNode();
            case 40 /* MinusToken */:
              return lookAhead(nextTokenIsNumericOrBigIntLiteral) ? parseLiteralTypeNode(
                /*negative*/
                true
              ) : parseTypeReference();
            case 114 /* VoidKeyword */:
              return parseTokenNode();
            case 108 /* ThisKeyword */: {
              const thisKeyword = parseThisTypeNode();
              if (token() === 140 /* IsKeyword */ && !scanner2.hasPrecedingLineBreak()) {
                return parseThisTypePredicate(thisKeyword);
              } else {
                return thisKeyword;
              }
            }
            case 112 /* TypeOfKeyword */:
              return lookAhead(isStartOfTypeOfImportType) ? parseImportType() : parseTypeQuery();
            case 18 /* OpenBraceToken */:
              return lookAhead(isStartOfMappedType) ? parseMappedType() : parseTypeLiteral();
            case 22 /* OpenBracketToken */:
              return parseTupleType();
            case 20 /* OpenParenToken */:
              return parseParenthesizedType();
            case 100 /* ImportKeyword */:
              return parseImportType();
            case 129 /* AssertsKeyword */:
              return lookAhead(nextTokenIsIdentifierOrKeywordOnSameLine) ? parseAssertsTypePredicate() : parseTypeReference();
            case 15 /* TemplateHead */:
              return parseTemplateType();
            default:
              return parseTypeReference();
          }
        }
        function isStartOfType(inStartOfParameter) {
          switch (token()) {
            case 131 /* AnyKeyword */:
            case 157 /* UnknownKeyword */:
            case 152 /* StringKeyword */:
            case 148 /* NumberKeyword */:
            case 160 /* BigIntKeyword */:
            case 134 /* BooleanKeyword */:
            case 146 /* ReadonlyKeyword */:
            case 153 /* SymbolKeyword */:
            case 156 /* UniqueKeyword */:
            case 114 /* VoidKeyword */:
            case 155 /* UndefinedKeyword */:
            case 104 /* NullKeyword */:
            case 108 /* ThisKeyword */:
            case 112 /* TypeOfKeyword */:
            case 144 /* NeverKeyword */:
            case 18 /* OpenBraceToken */:
            case 22 /* OpenBracketToken */:
            case 29 /* LessThanToken */:
            case 51 /* BarToken */:
            case 50 /* AmpersandToken */:
            case 103 /* NewKeyword */:
            case 10 /* StringLiteral */:
            case 8 /* NumericLiteral */:
            case 9 /* BigIntLiteral */:
            case 110 /* TrueKeyword */:
            case 95 /* FalseKeyword */:
            case 149 /* ObjectKeyword */:
            case 41 /* AsteriskToken */:
            case 57 /* QuestionToken */:
            case 53 /* ExclamationToken */:
            case 25 /* DotDotDotToken */:
            case 138 /* InferKeyword */:
            case 100 /* ImportKeyword */:
            case 129 /* AssertsKeyword */:
            case 14 /* NoSubstitutionTemplateLiteral */:
            case 15 /* TemplateHead */:
              return true;
            case 98 /* FunctionKeyword */:
              return !inStartOfParameter;
            case 40 /* MinusToken */:
              return !inStartOfParameter && lookAhead(nextTokenIsNumericOrBigIntLiteral);
            case 20 /* OpenParenToken */:
              return !inStartOfParameter && lookAhead(isStartOfParenthesizedOrFunctionType);
            default:
              return isIdentifier2();
          }
        }
        function isStartOfParenthesizedOrFunctionType() {
          nextToken();
          return token() === 21 /* CloseParenToken */ || isStartOfParameter(
            /*isJSDocParameter*/
            false
          ) || isStartOfType();
        }
        function parsePostfixTypeOrHigher() {
          const pos = getNodePos();
          let type = parseNonArrayType();
          while (!scanner2.hasPrecedingLineBreak()) {
            switch (token()) {
              case 53 /* ExclamationToken */:
                nextToken();
                type = finishNode(factory2.createJSDocNonNullableType(
                  type,
                  /*postfix*/
                  true
                ), pos);
                break;
              case 57 /* QuestionToken */:
                if (lookAhead(nextTokenIsStartOfType)) {
                  return type;
                }
                nextToken();
                type = finishNode(factory2.createJSDocNullableType(
                  type,
                  /*postfix*/
                  true
                ), pos);
                break;
              case 22 /* OpenBracketToken */:
                parseExpected(22 /* OpenBracketToken */);
                if (isStartOfType()) {
                  const indexType = parseType();
                  parseExpected(23 /* CloseBracketToken */);
                  type = finishNode(factory2.createIndexedAccessTypeNode(type, indexType), pos);
                } else {
                  parseExpected(23 /* CloseBracketToken */);
                  type = finishNode(factory2.createArrayTypeNode(type), pos);
                }
                break;
              default:
                return type;
            }
          }
          return type;
        }
        function parseTypeOperator(operator) {
          const pos = getNodePos();
          parseExpected(operator);
          return finishNode(factory2.createTypeOperatorNode(operator, parseTypeOperatorOrHigher()), pos);
        }
        function tryParseConstraintOfInferType() {
          if (parseOptional(94 /* ExtendsKeyword */)) {
            const constraint = disallowConditionalTypesAnd(parseType);
            if (inDisallowConditionalTypesContext() || token() !== 57 /* QuestionToken */) {
              return constraint;
            }
          }
        }
        function parseTypeParameterOfInferType() {
          const pos = getNodePos();
          const name = parseIdentifier();
          const constraint = tryParse(tryParseConstraintOfInferType);
          const node = factory2.createTypeParameterDeclaration(
            /*modifiers*/
            void 0,
            name,
            constraint
          );
          return finishNode(node, pos);
        }
        function parseInferType() {
          const pos = getNodePos();
          parseExpected(138 /* InferKeyword */);
          return finishNode(factory2.createInferTypeNode(parseTypeParameterOfInferType()), pos);
        }
        function parseTypeOperatorOrHigher() {
          const operator = token();
          switch (operator) {
            case 141 /* KeyOfKeyword */:
            case 156 /* UniqueKeyword */:
            case 146 /* ReadonlyKeyword */:
              return parseTypeOperator(operator);
            case 138 /* InferKeyword */:
              return parseInferType();
          }
          return allowConditionalTypesAnd(parsePostfixTypeOrHigher);
        }
        function parseFunctionOrConstructorTypeToError(isInUnionType) {
          if (isStartOfFunctionTypeOrConstructorType()) {
            const type = parseFunctionOrConstructorType();
            let diagnostic;
            if (isFunctionTypeNode(type)) {
              diagnostic = isInUnionType ? Diagnostics.Function_type_notation_must_be_parenthesized_when_used_in_a_union_type : Diagnostics.Function_type_notation_must_be_parenthesized_when_used_in_an_intersection_type;
            } else {
              diagnostic = isInUnionType ? Diagnostics.Constructor_type_notation_must_be_parenthesized_when_used_in_a_union_type : Diagnostics.Constructor_type_notation_must_be_parenthesized_when_used_in_an_intersection_type;
            }
            parseErrorAtRange(type, diagnostic);
            return type;
          }
          return void 0;
        }
        function parseUnionOrIntersectionType(operator, parseConstituentType, createTypeNode) {
          const pos = getNodePos();
          const isUnionType = operator === 51 /* BarToken */;
          const hasLeadingOperator = parseOptional(operator);
          let type = hasLeadingOperator && parseFunctionOrConstructorTypeToError(isUnionType) || parseConstituentType();
          if (token() === operator || hasLeadingOperator) {
            const types = [type];
            while (parseOptional(operator)) {
              types.push(parseFunctionOrConstructorTypeToError(isUnionType) || parseConstituentType());
            }
            type = finishNode(createTypeNode(createNodeArray(types, pos)), pos);
          }
          return type;
        }
        function parseIntersectionTypeOrHigher() {
          return parseUnionOrIntersectionType(50 /* AmpersandToken */, parseTypeOperatorOrHigher, factory2.createIntersectionTypeNode);
        }
        function parseUnionTypeOrHigher() {
          return parseUnionOrIntersectionType(51 /* BarToken */, parseIntersectionTypeOrHigher, factory2.createUnionTypeNode);
        }
        function nextTokenIsNewKeyword() {
          nextToken();
          return token() === 103 /* NewKeyword */;
        }
        function isStartOfFunctionTypeOrConstructorType() {
          if (token() === 29 /* LessThanToken */) {
            return true;
          }
          if (token() === 20 /* OpenParenToken */ && lookAhead(isUnambiguouslyStartOfFunctionType)) {
            return true;
          }
          return token() === 103 /* NewKeyword */ || token() === 126 /* AbstractKeyword */ && lookAhead(nextTokenIsNewKeyword);
        }
        function skipParameterStart() {
          if (isModifierKind(token())) {
            parseModifiers(
              /*allowDecorators*/
              false
            );
          }
          if (isIdentifier2() || token() === 108 /* ThisKeyword */) {
            nextToken();
            return true;
          }
          if (token() === 22 /* OpenBracketToken */ || token() === 18 /* OpenBraceToken */) {
            const previousErrorCount = parseDiagnostics.length;
            parseIdentifierOrPattern();
            return previousErrorCount === parseDiagnostics.length;
          }
          return false;
        }
        function isUnambiguouslyStartOfFunctionType() {
          nextToken();
          if (token() === 21 /* CloseParenToken */ || token() === 25 /* DotDotDotToken */) {
            return true;
          }
          if (skipParameterStart()) {
            if (token() === 58 /* ColonToken */ || token() === 27 /* CommaToken */ || token() === 57 /* QuestionToken */ || token() === 63 /* EqualsToken */) {
              return true;
            }
            if (token() === 21 /* CloseParenToken */) {
              nextToken();
              if (token() === 38 /* EqualsGreaterThanToken */) {
                return true;
              }
            }
          }
          return false;
        }
        function parseTypeOrTypePredicate() {
          const pos = getNodePos();
          const typePredicateVariable = isIdentifier2() && tryParse(parseTypePredicatePrefix);
          const type = parseType();
          if (typePredicateVariable) {
            return finishNode(factory2.createTypePredicateNode(
              /*assertsModifier*/
              void 0,
              typePredicateVariable,
              type
            ), pos);
          } else {
            return type;
          }
        }
        function parseTypePredicatePrefix() {
          const id = parseIdentifier();
          if (token() === 140 /* IsKeyword */ && !scanner2.hasPrecedingLineBreak()) {
            nextToken();
            return id;
          }
        }
        function parseAssertsTypePredicate() {
          const pos = getNodePos();
          const assertsModifier = parseExpectedToken(129 /* AssertsKeyword */);
          const parameterName = token() === 108 /* ThisKeyword */ ? parseThisTypeNode() : parseIdentifier();
          const type = parseOptional(140 /* IsKeyword */) ? parseType() : void 0;
          return finishNode(factory2.createTypePredicateNode(assertsModifier, parameterName, type), pos);
        }
        function parseType() {
          if (contextFlags & 40960 /* TypeExcludesFlags */) {
            return doOutsideOfContext(40960 /* TypeExcludesFlags */, parseType);
          }
          if (isStartOfFunctionTypeOrConstructorType()) {
            return parseFunctionOrConstructorType();
          }
          const pos = getNodePos();
          const type = parseUnionTypeOrHigher();
          if (!inDisallowConditionalTypesContext() && !scanner2.hasPrecedingLineBreak() && parseOptional(94 /* ExtendsKeyword */)) {
            const extendsType = disallowConditionalTypesAnd(parseType);
            parseExpected(57 /* QuestionToken */);
            const trueType = allowConditionalTypesAnd(parseType);
            parseExpected(58 /* ColonToken */);
            const falseType = allowConditionalTypesAnd(parseType);
            return finishNode(factory2.createConditionalTypeNode(type, extendsType, trueType, falseType), pos);
          }
          return type;
        }
        function parseTypeAnnotation() {
          return parseOptional(58 /* ColonToken */) ? parseType() : void 0;
        }
        function isStartOfLeftHandSideExpression() {
          switch (token()) {
            case 108 /* ThisKeyword */:
            case 106 /* SuperKeyword */:
            case 104 /* NullKeyword */:
            case 110 /* TrueKeyword */:
            case 95 /* FalseKeyword */:
            case 8 /* NumericLiteral */:
            case 9 /* BigIntLiteral */:
            case 10 /* StringLiteral */:
            case 14 /* NoSubstitutionTemplateLiteral */:
            case 15 /* TemplateHead */:
            case 20 /* OpenParenToken */:
            case 22 /* OpenBracketToken */:
            case 18 /* OpenBraceToken */:
            case 98 /* FunctionKeyword */:
            case 84 /* ClassKeyword */:
            case 103 /* NewKeyword */:
            case 43 /* SlashToken */:
            case 68 /* SlashEqualsToken */:
            case 79 /* Identifier */:
              return true;
            case 100 /* ImportKeyword */:
              return lookAhead(nextTokenIsOpenParenOrLessThanOrDot);
            default:
              return isIdentifier2();
          }
        }
        function isStartOfExpression() {
          if (isStartOfLeftHandSideExpression()) {
            return true;
          }
          switch (token()) {
            case 39 /* PlusToken */:
            case 40 /* MinusToken */:
            case 54 /* TildeToken */:
            case 53 /* ExclamationToken */:
            case 89 /* DeleteKeyword */:
            case 112 /* TypeOfKeyword */:
            case 114 /* VoidKeyword */:
            case 45 /* PlusPlusToken */:
            case 46 /* MinusMinusToken */:
            case 29 /* LessThanToken */:
            case 133 /* AwaitKeyword */:
            case 125 /* YieldKeyword */:
            case 80 /* PrivateIdentifier */:
            case 59 /* AtToken */:
              return true;
            default:
              if (isBinaryOperator2()) {
                return true;
              }
              return isIdentifier2();
          }
        }
        function isStartOfExpressionStatement() {
          return token() !== 18 /* OpenBraceToken */ && token() !== 98 /* FunctionKeyword */ && token() !== 84 /* ClassKeyword */ && token() !== 59 /* AtToken */ && isStartOfExpression();
        }
        function parseExpression() {
          const saveDecoratorContext = inDecoratorContext();
          if (saveDecoratorContext) {
            setDecoratorContext(
              /*val*/
              false
            );
          }
          const pos = getNodePos();
          let expr = parseAssignmentExpressionOrHigher(
            /*allowReturnTypeInArrowFunction*/
            true
          );
          let operatorToken;
          while (operatorToken = parseOptionalToken(27 /* CommaToken */)) {
            expr = makeBinaryExpression(expr, operatorToken, parseAssignmentExpressionOrHigher(
              /*allowReturnTypeInArrowFunction*/
              true
            ), pos);
          }
          if (saveDecoratorContext) {
            setDecoratorContext(
              /*val*/
              true
            );
          }
          return expr;
        }
        function parseInitializer() {
          return parseOptional(63 /* EqualsToken */) ? parseAssignmentExpressionOrHigher(
            /*allowReturnTypeInArrowFunction*/
            true
          ) : void 0;
        }
        function parseAssignmentExpressionOrHigher(allowReturnTypeInArrowFunction) {
          if (isYieldExpression2()) {
            return parseYieldExpression();
          }
          const arrowExpression = tryParseParenthesizedArrowFunctionExpression(allowReturnTypeInArrowFunction) || tryParseAsyncSimpleArrowFunctionExpression(allowReturnTypeInArrowFunction);
          if (arrowExpression) {
            return arrowExpression;
          }
          const pos = getNodePos();
          const expr = parseBinaryExpressionOrHigher(0 /* Lowest */);
          if (expr.kind === 79 /* Identifier */ && token() === 38 /* EqualsGreaterThanToken */) {
            return parseSimpleArrowFunctionExpression(
              pos,
              expr,
              allowReturnTypeInArrowFunction,
              /*asyncModifier*/
              void 0
            );
          }
          if (isLeftHandSideExpression(expr) && isAssignmentOperator(reScanGreaterToken())) {
            return makeBinaryExpression(expr, parseTokenNode(), parseAssignmentExpressionOrHigher(allowReturnTypeInArrowFunction), pos);
          }
          return parseConditionalExpressionRest(expr, pos, allowReturnTypeInArrowFunction);
        }
        function isYieldExpression2() {
          if (token() === 125 /* YieldKeyword */) {
            if (inYieldContext()) {
              return true;
            }
            return lookAhead(nextTokenIsIdentifierOrKeywordOrLiteralOnSameLine);
          }
          return false;
        }
        function nextTokenIsIdentifierOnSameLine() {
          nextToken();
          return !scanner2.hasPrecedingLineBreak() && isIdentifier2();
        }
        function parseYieldExpression() {
          const pos = getNodePos();
          nextToken();
          if (!scanner2.hasPrecedingLineBreak() && (token() === 41 /* AsteriskToken */ || isStartOfExpression())) {
            return finishNode(
              factory2.createYieldExpression(
                parseOptionalToken(41 /* AsteriskToken */),
                parseAssignmentExpressionOrHigher(
                  /*allowReturnTypeInArrowFunction*/
                  true
                )
              ),
              pos
            );
          } else {
            return finishNode(factory2.createYieldExpression(
              /*asteriskToken*/
              void 0,
              /*expression*/
              void 0
            ), pos);
          }
        }
        function parseSimpleArrowFunctionExpression(pos, identifier, allowReturnTypeInArrowFunction, asyncModifier) {
          Debug.assert(token() === 38 /* EqualsGreaterThanToken */, "parseSimpleArrowFunctionExpression should only have been called if we had a =>");
          const parameter = factory2.createParameterDeclaration(
            /*modifiers*/
            void 0,
            /*dotDotDotToken*/
            void 0,
            identifier,
            /*questionToken*/
            void 0,
            /*type*/
            void 0,
            /*initializer*/
            void 0
          );
          finishNode(parameter, identifier.pos);
          const parameters = createNodeArray([parameter], parameter.pos, parameter.end);
          const equalsGreaterThanToken = parseExpectedToken(38 /* EqualsGreaterThanToken */);
          const body = parseArrowFunctionExpressionBody(
            /*isAsync*/
            !!asyncModifier,
            allowReturnTypeInArrowFunction
          );
          const node = factory2.createArrowFunction(
            asyncModifier,
            /*typeParameters*/
            void 0,
            parameters,
            /*type*/
            void 0,
            equalsGreaterThanToken,
            body
          );
          return addJSDocComment(finishNode(node, pos));
        }
        function tryParseParenthesizedArrowFunctionExpression(allowReturnTypeInArrowFunction) {
          const triState = isParenthesizedArrowFunctionExpression();
          if (triState === 0 /* False */) {
            return void 0;
          }
          return triState === 1 /* True */ ? parseParenthesizedArrowFunctionExpression(
            /*allowAmbiguity*/
            true,
            /*allowReturnTypeInArrowFunction*/
            true
          ) : tryParse(() => parsePossibleParenthesizedArrowFunctionExpression(allowReturnTypeInArrowFunction));
        }
        function isParenthesizedArrowFunctionExpression() {
          if (token() === 20 /* OpenParenToken */ || token() === 29 /* LessThanToken */ || token() === 132 /* AsyncKeyword */) {
            return lookAhead(isParenthesizedArrowFunctionExpressionWorker);
          }
          if (token() === 38 /* EqualsGreaterThanToken */) {
            return 1 /* True */;
          }
          return 0 /* False */;
        }
        function isParenthesizedArrowFunctionExpressionWorker() {
          if (token() === 132 /* AsyncKeyword */) {
            nextToken();
            if (scanner2.hasPrecedingLineBreak()) {
              return 0 /* False */;
            }
            if (token() !== 20 /* OpenParenToken */ && token() !== 29 /* LessThanToken */) {
              return 0 /* False */;
            }
          }
          const first2 = token();
          const second = nextToken();
          if (first2 === 20 /* OpenParenToken */) {
            if (second === 21 /* CloseParenToken */) {
              const third = nextToken();
              switch (third) {
                case 38 /* EqualsGreaterThanToken */:
                case 58 /* ColonToken */:
                case 18 /* OpenBraceToken */:
                  return 1 /* True */;
                default:
                  return 0 /* False */;
              }
            }
            if (second === 22 /* OpenBracketToken */ || second === 18 /* OpenBraceToken */) {
              return 2 /* Unknown */;
            }
            if (second === 25 /* DotDotDotToken */) {
              return 1 /* True */;
            }
            if (isModifierKind(second) && second !== 132 /* AsyncKeyword */ && lookAhead(nextTokenIsIdentifier)) {
              if (nextToken() === 128 /* AsKeyword */) {
                return 0 /* False */;
              }
              return 1 /* True */;
            }
            if (!isIdentifier2() && second !== 108 /* ThisKeyword */) {
              return 0 /* False */;
            }
            switch (nextToken()) {
              case 58 /* ColonToken */:
                return 1 /* True */;
              case 57 /* QuestionToken */:
                nextToken();
                if (token() === 58 /* ColonToken */ || token() === 27 /* CommaToken */ || token() === 63 /* EqualsToken */ || token() === 21 /* CloseParenToken */) {
                  return 1 /* True */;
                }
                return 0 /* False */;
              case 27 /* CommaToken */:
              case 63 /* EqualsToken */:
              case 21 /* CloseParenToken */:
                return 2 /* Unknown */;
            }
            return 0 /* False */;
          } else {
            Debug.assert(first2 === 29 /* LessThanToken */);
            if (!isIdentifier2() && token() !== 85 /* ConstKeyword */) {
              return 0 /* False */;
            }
            if (languageVariant === 1 /* JSX */) {
              const isArrowFunctionInJsx = lookAhead(() => {
                parseOptional(85 /* ConstKeyword */);
                const third = nextToken();
                if (third === 94 /* ExtendsKeyword */) {
                  const fourth = nextToken();
                  switch (fourth) {
                    case 63 /* EqualsToken */:
                    case 31 /* GreaterThanToken */:
                    case 43 /* SlashToken */:
                      return false;
                    default:
                      return true;
                  }
                } else if (third === 27 /* CommaToken */ || third === 63 /* EqualsToken */) {
                  return true;
                }
                return false;
              });
              if (isArrowFunctionInJsx) {
                return 1 /* True */;
              }
              return 0 /* False */;
            }
            return 2 /* Unknown */;
          }
        }
        function parsePossibleParenthesizedArrowFunctionExpression(allowReturnTypeInArrowFunction) {
          const tokenPos = scanner2.getTokenPos();
          if (notParenthesizedArrow == null ? void 0 : notParenthesizedArrow.has(tokenPos)) {
            return void 0;
          }
          const result = parseParenthesizedArrowFunctionExpression(
            /*allowAmbiguity*/
            false,
            allowReturnTypeInArrowFunction
          );
          if (!result) {
            (notParenthesizedArrow || (notParenthesizedArrow = /* @__PURE__ */ new Set())).add(tokenPos);
          }
          return result;
        }
        function tryParseAsyncSimpleArrowFunctionExpression(allowReturnTypeInArrowFunction) {
          if (token() === 132 /* AsyncKeyword */) {
            if (lookAhead(isUnParenthesizedAsyncArrowFunctionWorker) === 1 /* True */) {
              const pos = getNodePos();
              const asyncModifier = parseModifiersForArrowFunction();
              const expr = parseBinaryExpressionOrHigher(0 /* Lowest */);
              return parseSimpleArrowFunctionExpression(pos, expr, allowReturnTypeInArrowFunction, asyncModifier);
            }
          }
          return void 0;
        }
        function isUnParenthesizedAsyncArrowFunctionWorker() {
          if (token() === 132 /* AsyncKeyword */) {
            nextToken();
            if (scanner2.hasPrecedingLineBreak() || token() === 38 /* EqualsGreaterThanToken */) {
              return 0 /* False */;
            }
            const expr = parseBinaryExpressionOrHigher(0 /* Lowest */);
            if (!scanner2.hasPrecedingLineBreak() && expr.kind === 79 /* Identifier */ && token() === 38 /* EqualsGreaterThanToken */) {
              return 1 /* True */;
            }
          }
          return 0 /* False */;
        }
        function parseParenthesizedArrowFunctionExpression(allowAmbiguity, allowReturnTypeInArrowFunction) {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          const modifiers = parseModifiersForArrowFunction();
          const isAsync = some(modifiers, isAsyncModifier) ? 2 /* Await */ : 0 /* None */;
          const typeParameters = parseTypeParameters();
          let parameters;
          if (!parseExpected(20 /* OpenParenToken */)) {
            if (!allowAmbiguity) {
              return void 0;
            }
            parameters = createMissingList();
          } else {
            if (!allowAmbiguity) {
              const maybeParameters = parseParametersWorker(isAsync, allowAmbiguity);
              if (!maybeParameters) {
                return void 0;
              }
              parameters = maybeParameters;
            } else {
              parameters = parseParametersWorker(isAsync, allowAmbiguity);
            }
            if (!parseExpected(21 /* CloseParenToken */) && !allowAmbiguity) {
              return void 0;
            }
          }
          const hasReturnColon = token() === 58 /* ColonToken */;
          const type = parseReturnType(
            58 /* ColonToken */,
            /*isType*/
            false
          );
          if (type && !allowAmbiguity && typeHasArrowFunctionBlockingParseError(type)) {
            return void 0;
          }
          let unwrappedType = type;
          while ((unwrappedType == null ? void 0 : unwrappedType.kind) === 193 /* ParenthesizedType */) {
            unwrappedType = unwrappedType.type;
          }
          const hasJSDocFunctionType = unwrappedType && isJSDocFunctionType(unwrappedType);
          if (!allowAmbiguity && token() !== 38 /* EqualsGreaterThanToken */ && (hasJSDocFunctionType || token() !== 18 /* OpenBraceToken */)) {
            return void 0;
          }
          const lastToken = token();
          const equalsGreaterThanToken = parseExpectedToken(38 /* EqualsGreaterThanToken */);
          const body = lastToken === 38 /* EqualsGreaterThanToken */ || lastToken === 18 /* OpenBraceToken */ ? parseArrowFunctionExpressionBody(some(modifiers, isAsyncModifier), allowReturnTypeInArrowFunction) : parseIdentifier();
          if (!allowReturnTypeInArrowFunction && hasReturnColon) {
            if (token() !== 58 /* ColonToken */) {
              return void 0;
            }
          }
          const node = factory2.createArrowFunction(modifiers, typeParameters, parameters, type, equalsGreaterThanToken, body);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseArrowFunctionExpressionBody(isAsync, allowReturnTypeInArrowFunction) {
          if (token() === 18 /* OpenBraceToken */) {
            return parseFunctionBlock(isAsync ? 2 /* Await */ : 0 /* None */);
          }
          if (token() !== 26 /* SemicolonToken */ && token() !== 98 /* FunctionKeyword */ && token() !== 84 /* ClassKeyword */ && isStartOfStatement() && !isStartOfExpressionStatement()) {
            return parseFunctionBlock(16 /* IgnoreMissingOpenBrace */ | (isAsync ? 2 /* Await */ : 0 /* None */));
          }
          const savedTopLevel = topLevel;
          topLevel = false;
          const node = isAsync ? doInAwaitContext(() => parseAssignmentExpressionOrHigher(allowReturnTypeInArrowFunction)) : doOutsideOfAwaitContext(() => parseAssignmentExpressionOrHigher(allowReturnTypeInArrowFunction));
          topLevel = savedTopLevel;
          return node;
        }
        function parseConditionalExpressionRest(leftOperand, pos, allowReturnTypeInArrowFunction) {
          const questionToken = parseOptionalToken(57 /* QuestionToken */);
          if (!questionToken) {
            return leftOperand;
          }
          let colonToken;
          return finishNode(
            factory2.createConditionalExpression(
              leftOperand,
              questionToken,
              doOutsideOfContext(disallowInAndDecoratorContext, () => parseAssignmentExpressionOrHigher(
                /*allowReturnTypeInArrowFunction*/
                false
              )),
              colonToken = parseExpectedToken(58 /* ColonToken */),
              nodeIsPresent(colonToken) ? parseAssignmentExpressionOrHigher(allowReturnTypeInArrowFunction) : createMissingNode(
                79 /* Identifier */,
                /*reportAtCurrentPosition*/
                false,
                Diagnostics._0_expected,
                tokenToString(58 /* ColonToken */)
              )
            ),
            pos
          );
        }
        function parseBinaryExpressionOrHigher(precedence) {
          const pos = getNodePos();
          const leftOperand = parseUnaryExpressionOrHigher();
          return parseBinaryExpressionRest(precedence, leftOperand, pos);
        }
        function isInOrOfKeyword(t) {
          return t === 101 /* InKeyword */ || t === 162 /* OfKeyword */;
        }
        function parseBinaryExpressionRest(precedence, leftOperand, pos) {
          while (true) {
            reScanGreaterToken();
            const newPrecedence = getBinaryOperatorPrecedence(token());
            const consumeCurrentOperator = token() === 42 /* AsteriskAsteriskToken */ ? newPrecedence >= precedence : newPrecedence > precedence;
            if (!consumeCurrentOperator) {
              break;
            }
            if (token() === 101 /* InKeyword */ && inDisallowInContext()) {
              break;
            }
            if (token() === 128 /* AsKeyword */ || token() === 150 /* SatisfiesKeyword */) {
              if (scanner2.hasPrecedingLineBreak()) {
                break;
              } else {
                const keywordKind = token();
                nextToken();
                leftOperand = keywordKind === 150 /* SatisfiesKeyword */ ? makeSatisfiesExpression(leftOperand, parseType()) : makeAsExpression(leftOperand, parseType());
              }
            } else {
              leftOperand = makeBinaryExpression(leftOperand, parseTokenNode(), parseBinaryExpressionOrHigher(newPrecedence), pos);
            }
          }
          return leftOperand;
        }
        function isBinaryOperator2() {
          if (inDisallowInContext() && token() === 101 /* InKeyword */) {
            return false;
          }
          return getBinaryOperatorPrecedence(token()) > 0;
        }
        function makeSatisfiesExpression(left, right) {
          return finishNode(factory2.createSatisfiesExpression(left, right), left.pos);
        }
        function makeBinaryExpression(left, operatorToken, right, pos) {
          return finishNode(factory2.createBinaryExpression(left, operatorToken, right), pos);
        }
        function makeAsExpression(left, right) {
          return finishNode(factory2.createAsExpression(left, right), left.pos);
        }
        function parsePrefixUnaryExpression() {
          const pos = getNodePos();
          return finishNode(factory2.createPrefixUnaryExpression(token(), nextTokenAnd(parseSimpleUnaryExpression)), pos);
        }
        function parseDeleteExpression() {
          const pos = getNodePos();
          return finishNode(factory2.createDeleteExpression(nextTokenAnd(parseSimpleUnaryExpression)), pos);
        }
        function parseTypeOfExpression() {
          const pos = getNodePos();
          return finishNode(factory2.createTypeOfExpression(nextTokenAnd(parseSimpleUnaryExpression)), pos);
        }
        function parseVoidExpression() {
          const pos = getNodePos();
          return finishNode(factory2.createVoidExpression(nextTokenAnd(parseSimpleUnaryExpression)), pos);
        }
        function isAwaitExpression2() {
          if (token() === 133 /* AwaitKeyword */) {
            if (inAwaitContext()) {
              return true;
            }
            return lookAhead(nextTokenIsIdentifierOrKeywordOrLiteralOnSameLine);
          }
          return false;
        }
        function parseAwaitExpression() {
          const pos = getNodePos();
          return finishNode(factory2.createAwaitExpression(nextTokenAnd(parseSimpleUnaryExpression)), pos);
        }
        function parseUnaryExpressionOrHigher() {
          if (isUpdateExpression()) {
            const pos = getNodePos();
            const updateExpression = parseUpdateExpression();
            return token() === 42 /* AsteriskAsteriskToken */ ? parseBinaryExpressionRest(getBinaryOperatorPrecedence(token()), updateExpression, pos) : updateExpression;
          }
          const unaryOperator = token();
          const simpleUnaryExpression = parseSimpleUnaryExpression();
          if (token() === 42 /* AsteriskAsteriskToken */) {
            const pos = skipTrivia(sourceText, simpleUnaryExpression.pos);
            const { end } = simpleUnaryExpression;
            if (simpleUnaryExpression.kind === 213 /* TypeAssertionExpression */) {
              parseErrorAt(pos, end, Diagnostics.A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses);
            } else {
              parseErrorAt(pos, end, Diagnostics.An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses, tokenToString(unaryOperator));
            }
          }
          return simpleUnaryExpression;
        }
        function parseSimpleUnaryExpression() {
          switch (token()) {
            case 39 /* PlusToken */:
            case 40 /* MinusToken */:
            case 54 /* TildeToken */:
            case 53 /* ExclamationToken */:
              return parsePrefixUnaryExpression();
            case 89 /* DeleteKeyword */:
              return parseDeleteExpression();
            case 112 /* TypeOfKeyword */:
              return parseTypeOfExpression();
            case 114 /* VoidKeyword */:
              return parseVoidExpression();
            case 29 /* LessThanToken */:
              if (languageVariant === 1 /* JSX */) {
                return parseJsxElementOrSelfClosingElementOrFragment(
                  /*inExpressionContext*/
                  true,
                  /*topInvalidNodePosition*/
                  void 0,
                  /*openingTag*/
                  void 0,
                  /*mustBeUnary*/
                  true
                );
              }
              return parseTypeAssertion();
            case 133 /* AwaitKeyword */:
              if (isAwaitExpression2()) {
                return parseAwaitExpression();
              }
            default:
              return parseUpdateExpression();
          }
        }
        function isUpdateExpression() {
          switch (token()) {
            case 39 /* PlusToken */:
            case 40 /* MinusToken */:
            case 54 /* TildeToken */:
            case 53 /* ExclamationToken */:
            case 89 /* DeleteKeyword */:
            case 112 /* TypeOfKeyword */:
            case 114 /* VoidKeyword */:
            case 133 /* AwaitKeyword */:
              return false;
            case 29 /* LessThanToken */:
              if (languageVariant !== 1 /* JSX */) {
                return false;
              }
            default:
              return true;
          }
        }
        function parseUpdateExpression() {
          if (token() === 45 /* PlusPlusToken */ || token() === 46 /* MinusMinusToken */) {
            const pos = getNodePos();
            return finishNode(factory2.createPrefixUnaryExpression(token(), nextTokenAnd(parseLeftHandSideExpressionOrHigher)), pos);
          } else if (languageVariant === 1 /* JSX */ && token() === 29 /* LessThanToken */ && lookAhead(nextTokenIsIdentifierOrKeywordOrGreaterThan)) {
            return parseJsxElementOrSelfClosingElementOrFragment(
              /*inExpressionContext*/
              true
            );
          }
          const expression = parseLeftHandSideExpressionOrHigher();
          Debug.assert(isLeftHandSideExpression(expression));
          if ((token() === 45 /* PlusPlusToken */ || token() === 46 /* MinusMinusToken */) && !scanner2.hasPrecedingLineBreak()) {
            const operator = token();
            nextToken();
            return finishNode(factory2.createPostfixUnaryExpression(expression, operator), expression.pos);
          }
          return expression;
        }
        function parseLeftHandSideExpressionOrHigher() {
          const pos = getNodePos();
          let expression;
          if (token() === 100 /* ImportKeyword */) {
            if (lookAhead(nextTokenIsOpenParenOrLessThan)) {
              sourceFlags |= 2097152 /* PossiblyContainsDynamicImport */;
              expression = parseTokenNode();
            } else if (lookAhead(nextTokenIsDot)) {
              nextToken();
              nextToken();
              expression = finishNode(factory2.createMetaProperty(100 /* ImportKeyword */, parseIdentifierName()), pos);
              sourceFlags |= 4194304 /* PossiblyContainsImportMeta */;
            } else {
              expression = parseMemberExpressionOrHigher();
            }
          } else {
            expression = token() === 106 /* SuperKeyword */ ? parseSuperExpression() : parseMemberExpressionOrHigher();
          }
          return parseCallExpressionRest(pos, expression);
        }
        function parseMemberExpressionOrHigher() {
          const pos = getNodePos();
          const expression = parsePrimaryExpression();
          return parseMemberExpressionRest(
            pos,
            expression,
            /*allowOptionalChain*/
            true
          );
        }
        function parseSuperExpression() {
          const pos = getNodePos();
          let expression = parseTokenNode();
          if (token() === 29 /* LessThanToken */) {
            const startPos = getNodePos();
            const typeArguments = tryParse(parseTypeArgumentsInExpression);
            if (typeArguments !== void 0) {
              parseErrorAt(startPos, getNodePos(), Diagnostics.super_may_not_use_type_arguments);
              if (!isTemplateStartOfTaggedTemplate()) {
                expression = factory2.createExpressionWithTypeArguments(expression, typeArguments);
              }
            }
          }
          if (token() === 20 /* OpenParenToken */ || token() === 24 /* DotToken */ || token() === 22 /* OpenBracketToken */) {
            return expression;
          }
          parseExpectedToken(24 /* DotToken */, Diagnostics.super_must_be_followed_by_an_argument_list_or_member_access);
          return finishNode(factoryCreatePropertyAccessExpression(expression, parseRightSideOfDot(
            /*allowIdentifierNames*/
            true,
            /*allowPrivateIdentifiers*/
            true
          )), pos);
        }
        function parseJsxElementOrSelfClosingElementOrFragment(inExpressionContext, topInvalidNodePosition, openingTag, mustBeUnary = false) {
          const pos = getNodePos();
          const opening = parseJsxOpeningOrSelfClosingElementOrOpeningFragment(inExpressionContext);
          let result;
          if (opening.kind === 283 /* JsxOpeningElement */) {
            let children = parseJsxChildren(opening);
            let closingElement;
            const lastChild = children[children.length - 1];
            if ((lastChild == null ? void 0 : lastChild.kind) === 281 /* JsxElement */ && !tagNamesAreEquivalent(lastChild.openingElement.tagName, lastChild.closingElement.tagName) && tagNamesAreEquivalent(opening.tagName, lastChild.closingElement.tagName)) {
              const end = lastChild.children.end;
              const newLast = finishNode(
                factory2.createJsxElement(
                  lastChild.openingElement,
                  lastChild.children,
                  finishNode(factory2.createJsxClosingElement(finishNode(factoryCreateIdentifier(""), end, end)), end, end)
                ),
                lastChild.openingElement.pos,
                end
              );
              children = createNodeArray([...children.slice(0, children.length - 1), newLast], children.pos, end);
              closingElement = lastChild.closingElement;
            } else {
              closingElement = parseJsxClosingElement(opening, inExpressionContext);
              if (!tagNamesAreEquivalent(opening.tagName, closingElement.tagName)) {
                if (openingTag && isJsxOpeningElement(openingTag) && tagNamesAreEquivalent(closingElement.tagName, openingTag.tagName)) {
                  parseErrorAtRange(opening.tagName, Diagnostics.JSX_element_0_has_no_corresponding_closing_tag, getTextOfNodeFromSourceText(sourceText, opening.tagName));
                } else {
                  parseErrorAtRange(closingElement.tagName, Diagnostics.Expected_corresponding_JSX_closing_tag_for_0, getTextOfNodeFromSourceText(sourceText, opening.tagName));
                }
              }
            }
            result = finishNode(factory2.createJsxElement(opening, children, closingElement), pos);
          } else if (opening.kind === 286 /* JsxOpeningFragment */) {
            result = finishNode(factory2.createJsxFragment(opening, parseJsxChildren(opening), parseJsxClosingFragment(inExpressionContext)), pos);
          } else {
            Debug.assert(opening.kind === 282 /* JsxSelfClosingElement */);
            result = opening;
          }
          if (!mustBeUnary && inExpressionContext && token() === 29 /* LessThanToken */) {
            const topBadPos = typeof topInvalidNodePosition === "undefined" ? result.pos : topInvalidNodePosition;
            const invalidElement = tryParse(() => parseJsxElementOrSelfClosingElementOrFragment(
              /*inExpressionContext*/
              true,
              topBadPos
            ));
            if (invalidElement) {
              const operatorToken = createMissingNode(
                27 /* CommaToken */,
                /*reportAtCurrentPosition*/
                false
              );
              setTextRangePosWidth(operatorToken, invalidElement.pos, 0);
              parseErrorAt(skipTrivia(sourceText, topBadPos), invalidElement.end, Diagnostics.JSX_expressions_must_have_one_parent_element);
              return finishNode(factory2.createBinaryExpression(result, operatorToken, invalidElement), pos);
            }
          }
          return result;
        }
        function parseJsxText() {
          const pos = getNodePos();
          const node = factory2.createJsxText(scanner2.getTokenValue(), currentToken === 12 /* JsxTextAllWhiteSpaces */);
          currentToken = scanner2.scanJsxToken();
          return finishNode(node, pos);
        }
        function parseJsxChild(openingTag, token2) {
          switch (token2) {
            case 1 /* EndOfFileToken */:
              if (isJsxOpeningFragment(openingTag)) {
                parseErrorAtRange(openingTag, Diagnostics.JSX_fragment_has_no_corresponding_closing_tag);
              } else {
                const tag = openingTag.tagName;
                const start = skipTrivia(sourceText, tag.pos);
                parseErrorAt(start, tag.end, Diagnostics.JSX_element_0_has_no_corresponding_closing_tag, getTextOfNodeFromSourceText(sourceText, openingTag.tagName));
              }
              return void 0;
            case 30 /* LessThanSlashToken */:
            case 7 /* ConflictMarkerTrivia */:
              return void 0;
            case 11 /* JsxText */:
            case 12 /* JsxTextAllWhiteSpaces */:
              return parseJsxText();
            case 18 /* OpenBraceToken */:
              return parseJsxExpression(
                /*inExpressionContext*/
                false
              );
            case 29 /* LessThanToken */:
              return parseJsxElementOrSelfClosingElementOrFragment(
                /*inExpressionContext*/
                false,
                /*topInvalidNodePosition*/
                void 0,
                openingTag
              );
            default:
              return Debug.assertNever(token2);
          }
        }
        function parseJsxChildren(openingTag) {
          const list = [];
          const listPos = getNodePos();
          const saveParsingContext = parsingContext;
          parsingContext |= 1 << 14 /* JsxChildren */;
          while (true) {
            const child = parseJsxChild(openingTag, currentToken = scanner2.reScanJsxToken());
            if (!child)
              break;
            list.push(child);
            if (isJsxOpeningElement(openingTag) && (child == null ? void 0 : child.kind) === 281 /* JsxElement */ && !tagNamesAreEquivalent(child.openingElement.tagName, child.closingElement.tagName) && tagNamesAreEquivalent(openingTag.tagName, child.closingElement.tagName)) {
              break;
            }
          }
          parsingContext = saveParsingContext;
          return createNodeArray(list, listPos);
        }
        function parseJsxAttributes() {
          const pos = getNodePos();
          return finishNode(factory2.createJsxAttributes(parseList(13 /* JsxAttributes */, parseJsxAttribute)), pos);
        }
        function parseJsxOpeningOrSelfClosingElementOrOpeningFragment(inExpressionContext) {
          const pos = getNodePos();
          parseExpected(29 /* LessThanToken */);
          if (token() === 31 /* GreaterThanToken */) {
            scanJsxText();
            return finishNode(factory2.createJsxOpeningFragment(), pos);
          }
          const tagName = parseJsxElementName();
          const typeArguments = (contextFlags & 262144 /* JavaScriptFile */) === 0 ? tryParseTypeArguments() : void 0;
          const attributes = parseJsxAttributes();
          let node;
          if (token() === 31 /* GreaterThanToken */) {
            scanJsxText();
            node = factory2.createJsxOpeningElement(tagName, typeArguments, attributes);
          } else {
            parseExpected(43 /* SlashToken */);
            if (parseExpected(
              31 /* GreaterThanToken */,
              /*diagnostic*/
              void 0,
              /*shouldAdvance*/
              false
            )) {
              if (inExpressionContext) {
                nextToken();
              } else {
                scanJsxText();
              }
            }
            node = factory2.createJsxSelfClosingElement(tagName, typeArguments, attributes);
          }
          return finishNode(node, pos);
        }
        function parseJsxElementName() {
          const pos = getNodePos();
          scanJsxIdentifier();
          let expression = token() === 108 /* ThisKeyword */ ? parseTokenNode() : parseIdentifierName();
          while (parseOptional(24 /* DotToken */)) {
            expression = finishNode(factoryCreatePropertyAccessExpression(expression, parseRightSideOfDot(
              /*allowIdentifierNames*/
              true,
              /*allowPrivateIdentifiers*/
              false
            )), pos);
          }
          return expression;
        }
        function parseJsxExpression(inExpressionContext) {
          const pos = getNodePos();
          if (!parseExpected(18 /* OpenBraceToken */)) {
            return void 0;
          }
          let dotDotDotToken;
          let expression;
          if (token() !== 19 /* CloseBraceToken */) {
            dotDotDotToken = parseOptionalToken(25 /* DotDotDotToken */);
            expression = parseExpression();
          }
          if (inExpressionContext) {
            parseExpected(19 /* CloseBraceToken */);
          } else {
            if (parseExpected(
              19 /* CloseBraceToken */,
              /*message*/
              void 0,
              /*shouldAdvance*/
              false
            )) {
              scanJsxText();
            }
          }
          return finishNode(factory2.createJsxExpression(dotDotDotToken, expression), pos);
        }
        function parseJsxAttribute() {
          if (token() === 18 /* OpenBraceToken */) {
            return parseJsxSpreadAttribute();
          }
          scanJsxIdentifier();
          const pos = getNodePos();
          return finishNode(factory2.createJsxAttribute(parseIdentifierName(), parseJsxAttributeValue()), pos);
        }
        function parseJsxAttributeValue() {
          if (token() === 63 /* EqualsToken */) {
            if (scanJsxAttributeValue() === 10 /* StringLiteral */) {
              return parseLiteralNode();
            }
            if (token() === 18 /* OpenBraceToken */) {
              return parseJsxExpression(
                /*inExpressionContext*/
                true
              );
            }
            if (token() === 29 /* LessThanToken */) {
              return parseJsxElementOrSelfClosingElementOrFragment(
                /*inExpressionContext*/
                true
              );
            }
            parseErrorAtCurrentToken(Diagnostics.or_JSX_element_expected);
          }
          return void 0;
        }
        function parseJsxSpreadAttribute() {
          const pos = getNodePos();
          parseExpected(18 /* OpenBraceToken */);
          parseExpected(25 /* DotDotDotToken */);
          const expression = parseExpression();
          parseExpected(19 /* CloseBraceToken */);
          return finishNode(factory2.createJsxSpreadAttribute(expression), pos);
        }
        function parseJsxClosingElement(open, inExpressionContext) {
          const pos = getNodePos();
          parseExpected(30 /* LessThanSlashToken */);
          const tagName = parseJsxElementName();
          if (parseExpected(
            31 /* GreaterThanToken */,
            /*diagnostic*/
            void 0,
            /*shouldAdvance*/
            false
          )) {
            if (inExpressionContext || !tagNamesAreEquivalent(open.tagName, tagName)) {
              nextToken();
            } else {
              scanJsxText();
            }
          }
          return finishNode(factory2.createJsxClosingElement(tagName), pos);
        }
        function parseJsxClosingFragment(inExpressionContext) {
          const pos = getNodePos();
          parseExpected(30 /* LessThanSlashToken */);
          if (parseExpected(
            31 /* GreaterThanToken */,
            Diagnostics.Expected_corresponding_closing_tag_for_JSX_fragment,
            /*shouldAdvance*/
            false
          )) {
            if (inExpressionContext) {
              nextToken();
            } else {
              scanJsxText();
            }
          }
          return finishNode(factory2.createJsxJsxClosingFragment(), pos);
        }
        function parseTypeAssertion() {
          Debug.assert(languageVariant !== 1 /* JSX */, "Type assertions should never be parsed in JSX; they should be parsed as comparisons or JSX elements/fragments.");
          const pos = getNodePos();
          parseExpected(29 /* LessThanToken */);
          const type = parseType();
          parseExpected(31 /* GreaterThanToken */);
          const expression = parseSimpleUnaryExpression();
          return finishNode(factory2.createTypeAssertion(type, expression), pos);
        }
        function nextTokenIsIdentifierOrKeywordOrOpenBracketOrTemplate() {
          nextToken();
          return tokenIsIdentifierOrKeyword(token()) || token() === 22 /* OpenBracketToken */ || isTemplateStartOfTaggedTemplate();
        }
        function isStartOfOptionalPropertyOrElementAccessChain() {
          return token() === 28 /* QuestionDotToken */ && lookAhead(nextTokenIsIdentifierOrKeywordOrOpenBracketOrTemplate);
        }
        function tryReparseOptionalChain(node) {
          if (node.flags & 32 /* OptionalChain */) {
            return true;
          }
          if (isNonNullExpression(node)) {
            let expr = node.expression;
            while (isNonNullExpression(expr) && !(expr.flags & 32 /* OptionalChain */)) {
              expr = expr.expression;
            }
            if (expr.flags & 32 /* OptionalChain */) {
              while (isNonNullExpression(node)) {
                node.flags |= 32 /* OptionalChain */;
                node = node.expression;
              }
              return true;
            }
          }
          return false;
        }
        function parsePropertyAccessExpressionRest(pos, expression, questionDotToken) {
          const name = parseRightSideOfDot(
            /*allowIdentifierNames*/
            true,
            /*allowPrivateIdentifiers*/
            true
          );
          const isOptionalChain2 = questionDotToken || tryReparseOptionalChain(expression);
          const propertyAccess = isOptionalChain2 ? factoryCreatePropertyAccessChain(expression, questionDotToken, name) : factoryCreatePropertyAccessExpression(expression, name);
          if (isOptionalChain2 && isPrivateIdentifier(propertyAccess.name)) {
            parseErrorAtRange(propertyAccess.name, Diagnostics.An_optional_chain_cannot_contain_private_identifiers);
          }
          if (isExpressionWithTypeArguments(expression) && expression.typeArguments) {
            const pos2 = expression.typeArguments.pos - 1;
            const end = skipTrivia(sourceText, expression.typeArguments.end) + 1;
            parseErrorAt(pos2, end, Diagnostics.An_instantiation_expression_cannot_be_followed_by_a_property_access);
          }
          return finishNode(propertyAccess, pos);
        }
        function parseElementAccessExpressionRest(pos, expression, questionDotToken) {
          let argumentExpression;
          if (token() === 23 /* CloseBracketToken */) {
            argumentExpression = createMissingNode(
              79 /* Identifier */,
              /*reportAtCurrentPosition*/
              true,
              Diagnostics.An_element_access_expression_should_take_an_argument
            );
          } else {
            const argument = allowInAnd(parseExpression);
            if (isStringOrNumericLiteralLike(argument)) {
              argument.text = internIdentifier(argument.text);
            }
            argumentExpression = argument;
          }
          parseExpected(23 /* CloseBracketToken */);
          const indexedAccess = questionDotToken || tryReparseOptionalChain(expression) ? factoryCreateElementAccessChain(expression, questionDotToken, argumentExpression) : factoryCreateElementAccessExpression(expression, argumentExpression);
          return finishNode(indexedAccess, pos);
        }
        function parseMemberExpressionRest(pos, expression, allowOptionalChain) {
          while (true) {
            let questionDotToken;
            let isPropertyAccess = false;
            if (allowOptionalChain && isStartOfOptionalPropertyOrElementAccessChain()) {
              questionDotToken = parseExpectedToken(28 /* QuestionDotToken */);
              isPropertyAccess = tokenIsIdentifierOrKeyword(token());
            } else {
              isPropertyAccess = parseOptional(24 /* DotToken */);
            }
            if (isPropertyAccess) {
              expression = parsePropertyAccessExpressionRest(pos, expression, questionDotToken);
              continue;
            }
            if ((questionDotToken || !inDecoratorContext()) && parseOptional(22 /* OpenBracketToken */)) {
              expression = parseElementAccessExpressionRest(pos, expression, questionDotToken);
              continue;
            }
            if (isTemplateStartOfTaggedTemplate()) {
              expression = !questionDotToken && expression.kind === 230 /* ExpressionWithTypeArguments */ ? parseTaggedTemplateRest(pos, expression.expression, questionDotToken, expression.typeArguments) : parseTaggedTemplateRest(
                pos,
                expression,
                questionDotToken,
                /*typeArguments*/
                void 0
              );
              continue;
            }
            if (!questionDotToken) {
              if (token() === 53 /* ExclamationToken */ && !scanner2.hasPrecedingLineBreak()) {
                nextToken();
                expression = finishNode(factory2.createNonNullExpression(expression), pos);
                continue;
              }
              const typeArguments = tryParse(parseTypeArgumentsInExpression);
              if (typeArguments) {
                expression = finishNode(factory2.createExpressionWithTypeArguments(expression, typeArguments), pos);
                continue;
              }
            }
            return expression;
          }
        }
        function isTemplateStartOfTaggedTemplate() {
          return token() === 14 /* NoSubstitutionTemplateLiteral */ || token() === 15 /* TemplateHead */;
        }
        function parseTaggedTemplateRest(pos, tag, questionDotToken, typeArguments) {
          const tagExpression = factory2.createTaggedTemplateExpression(
            tag,
            typeArguments,
            token() === 14 /* NoSubstitutionTemplateLiteral */ ? (reScanTemplateHeadOrNoSubstitutionTemplate(), parseLiteralNode()) : parseTemplateExpression(
              /*isTaggedTemplate*/
              true
            )
          );
          if (questionDotToken || tag.flags & 32 /* OptionalChain */) {
            tagExpression.flags |= 32 /* OptionalChain */;
          }
          tagExpression.questionDotToken = questionDotToken;
          return finishNode(tagExpression, pos);
        }
        function parseCallExpressionRest(pos, expression) {
          while (true) {
            expression = parseMemberExpressionRest(
              pos,
              expression,
              /*allowOptionalChain*/
              true
            );
            let typeArguments;
            const questionDotToken = parseOptionalToken(28 /* QuestionDotToken */);
            if (questionDotToken) {
              typeArguments = tryParse(parseTypeArgumentsInExpression);
              if (isTemplateStartOfTaggedTemplate()) {
                expression = parseTaggedTemplateRest(pos, expression, questionDotToken, typeArguments);
                continue;
              }
            }
            if (typeArguments || token() === 20 /* OpenParenToken */) {
              if (!questionDotToken && expression.kind === 230 /* ExpressionWithTypeArguments */) {
                typeArguments = expression.typeArguments;
                expression = expression.expression;
              }
              const argumentList = parseArgumentList();
              const callExpr = questionDotToken || tryReparseOptionalChain(expression) ? factoryCreateCallChain(expression, questionDotToken, typeArguments, argumentList) : factoryCreateCallExpression(expression, typeArguments, argumentList);
              expression = finishNode(callExpr, pos);
              continue;
            }
            if (questionDotToken) {
              const name = createMissingNode(
                79 /* Identifier */,
                /*reportAtCurrentPosition*/
                false,
                Diagnostics.Identifier_expected
              );
              expression = finishNode(factoryCreatePropertyAccessChain(expression, questionDotToken, name), pos);
            }
            break;
          }
          return expression;
        }
        function parseArgumentList() {
          parseExpected(20 /* OpenParenToken */);
          const result = parseDelimitedList(11 /* ArgumentExpressions */, parseArgumentExpression);
          parseExpected(21 /* CloseParenToken */);
          return result;
        }
        function parseTypeArgumentsInExpression() {
          if ((contextFlags & 262144 /* JavaScriptFile */) !== 0) {
            return void 0;
          }
          if (reScanLessThanToken() !== 29 /* LessThanToken */) {
            return void 0;
          }
          nextToken();
          const typeArguments = parseDelimitedList(20 /* TypeArguments */, parseType);
          if (reScanGreaterToken() !== 31 /* GreaterThanToken */) {
            return void 0;
          }
          nextToken();
          return typeArguments && canFollowTypeArgumentsInExpression() ? typeArguments : void 0;
        }
        function canFollowTypeArgumentsInExpression() {
          switch (token()) {
            case 20 /* OpenParenToken */:
            case 14 /* NoSubstitutionTemplateLiteral */:
            case 15 /* TemplateHead */:
              return true;
            case 29 /* LessThanToken */:
            case 31 /* GreaterThanToken */:
            case 39 /* PlusToken */:
            case 40 /* MinusToken */:
              return false;
          }
          return scanner2.hasPrecedingLineBreak() || isBinaryOperator2() || !isStartOfExpression();
        }
        function parsePrimaryExpression() {
          switch (token()) {
            case 8 /* NumericLiteral */:
            case 9 /* BigIntLiteral */:
            case 10 /* StringLiteral */:
            case 14 /* NoSubstitutionTemplateLiteral */:
              return parseLiteralNode();
            case 108 /* ThisKeyword */:
            case 106 /* SuperKeyword */:
            case 104 /* NullKeyword */:
            case 110 /* TrueKeyword */:
            case 95 /* FalseKeyword */:
              return parseTokenNode();
            case 20 /* OpenParenToken */:
              return parseParenthesizedExpression();
            case 22 /* OpenBracketToken */:
              return parseArrayLiteralExpression();
            case 18 /* OpenBraceToken */:
              return parseObjectLiteralExpression();
            case 132 /* AsyncKeyword */:
              if (!lookAhead(nextTokenIsFunctionKeywordOnSameLine)) {
                break;
              }
              return parseFunctionExpression();
            case 59 /* AtToken */:
              return parseDecoratedExpression();
            case 84 /* ClassKeyword */:
              return parseClassExpression();
            case 98 /* FunctionKeyword */:
              return parseFunctionExpression();
            case 103 /* NewKeyword */:
              return parseNewExpressionOrNewDotTarget();
            case 43 /* SlashToken */:
            case 68 /* SlashEqualsToken */:
              if (reScanSlashToken() === 13 /* RegularExpressionLiteral */) {
                return parseLiteralNode();
              }
              break;
            case 15 /* TemplateHead */:
              return parseTemplateExpression(
                /* isTaggedTemplate */
                false
              );
            case 80 /* PrivateIdentifier */:
              return parsePrivateIdentifier();
          }
          return parseIdentifier(Diagnostics.Expression_expected);
        }
        function parseParenthesizedExpression() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(20 /* OpenParenToken */);
          const expression = allowInAnd(parseExpression);
          parseExpected(21 /* CloseParenToken */);
          return withJSDoc(finishNode(factoryCreateParenthesizedExpression(expression), pos), hasJSDoc);
        }
        function parseSpreadElement() {
          const pos = getNodePos();
          parseExpected(25 /* DotDotDotToken */);
          const expression = parseAssignmentExpressionOrHigher(
            /*allowReturnTypeInArrowFunction*/
            true
          );
          return finishNode(factory2.createSpreadElement(expression), pos);
        }
        function parseArgumentOrArrayLiteralElement() {
          return token() === 25 /* DotDotDotToken */ ? parseSpreadElement() : token() === 27 /* CommaToken */ ? finishNode(factory2.createOmittedExpression(), getNodePos()) : parseAssignmentExpressionOrHigher(
            /*allowReturnTypeInArrowFunction*/
            true
          );
        }
        function parseArgumentExpression() {
          return doOutsideOfContext(disallowInAndDecoratorContext, parseArgumentOrArrayLiteralElement);
        }
        function parseArrayLiteralExpression() {
          const pos = getNodePos();
          const openBracketPosition = scanner2.getTokenPos();
          const openBracketParsed = parseExpected(22 /* OpenBracketToken */);
          const multiLine = scanner2.hasPrecedingLineBreak();
          const elements = parseDelimitedList(15 /* ArrayLiteralMembers */, parseArgumentOrArrayLiteralElement);
          parseExpectedMatchingBrackets(22 /* OpenBracketToken */, 23 /* CloseBracketToken */, openBracketParsed, openBracketPosition);
          return finishNode(factoryCreateArrayLiteralExpression(elements, multiLine), pos);
        }
        function parseObjectLiteralElement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          if (parseOptionalToken(25 /* DotDotDotToken */)) {
            const expression = parseAssignmentExpressionOrHigher(
              /*allowReturnTypeInArrowFunction*/
              true
            );
            return withJSDoc(finishNode(factory2.createSpreadAssignment(expression), pos), hasJSDoc);
          }
          const modifiers = parseModifiers(
            /*allowDecorators*/
            true
          );
          if (parseContextualModifier(137 /* GetKeyword */)) {
            return parseAccessorDeclaration(pos, hasJSDoc, modifiers, 174 /* GetAccessor */, 0 /* None */);
          }
          if (parseContextualModifier(151 /* SetKeyword */)) {
            return parseAccessorDeclaration(pos, hasJSDoc, modifiers, 175 /* SetAccessor */, 0 /* None */);
          }
          const asteriskToken = parseOptionalToken(41 /* AsteriskToken */);
          const tokenIsIdentifier = isIdentifier2();
          const name = parsePropertyName();
          const questionToken = parseOptionalToken(57 /* QuestionToken */);
          const exclamationToken = parseOptionalToken(53 /* ExclamationToken */);
          if (asteriskToken || token() === 20 /* OpenParenToken */ || token() === 29 /* LessThanToken */) {
            return parseMethodDeclaration(pos, hasJSDoc, modifiers, asteriskToken, name, questionToken, exclamationToken);
          }
          let node;
          const isShorthandPropertyAssignment2 = tokenIsIdentifier && token() !== 58 /* ColonToken */;
          if (isShorthandPropertyAssignment2) {
            const equalsToken = parseOptionalToken(63 /* EqualsToken */);
            const objectAssignmentInitializer = equalsToken ? allowInAnd(() => parseAssignmentExpressionOrHigher(
              /*allowReturnTypeInArrowFunction*/
              true
            )) : void 0;
            node = factory2.createShorthandPropertyAssignment(name, objectAssignmentInitializer);
            node.equalsToken = equalsToken;
          } else {
            parseExpected(58 /* ColonToken */);
            const initializer = allowInAnd(() => parseAssignmentExpressionOrHigher(
              /*allowReturnTypeInArrowFunction*/
              true
            ));
            node = factory2.createPropertyAssignment(name, initializer);
          }
          node.modifiers = modifiers;
          node.questionToken = questionToken;
          node.exclamationToken = exclamationToken;
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseObjectLiteralExpression() {
          const pos = getNodePos();
          const openBracePosition = scanner2.getTokenPos();
          const openBraceParsed = parseExpected(18 /* OpenBraceToken */);
          const multiLine = scanner2.hasPrecedingLineBreak();
          const properties = parseDelimitedList(
            12 /* ObjectLiteralMembers */,
            parseObjectLiteralElement,
            /*considerSemicolonAsDelimiter*/
            true
          );
          parseExpectedMatchingBrackets(18 /* OpenBraceToken */, 19 /* CloseBraceToken */, openBraceParsed, openBracePosition);
          return finishNode(factoryCreateObjectLiteralExpression(properties, multiLine), pos);
        }
        function parseFunctionExpression() {
          const savedDecoratorContext = inDecoratorContext();
          setDecoratorContext(
            /*val*/
            false
          );
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          const modifiers = parseModifiers(
            /*allowDecorators*/
            false
          );
          parseExpected(98 /* FunctionKeyword */);
          const asteriskToken = parseOptionalToken(41 /* AsteriskToken */);
          const isGenerator = asteriskToken ? 1 /* Yield */ : 0 /* None */;
          const isAsync = some(modifiers, isAsyncModifier) ? 2 /* Await */ : 0 /* None */;
          const name = isGenerator && isAsync ? doInYieldAndAwaitContext(parseOptionalBindingIdentifier) : isGenerator ? doInYieldContext(parseOptionalBindingIdentifier) : isAsync ? doInAwaitContext(parseOptionalBindingIdentifier) : parseOptionalBindingIdentifier();
          const typeParameters = parseTypeParameters();
          const parameters = parseParameters(isGenerator | isAsync);
          const type = parseReturnType(
            58 /* ColonToken */,
            /*isType*/
            false
          );
          const body = parseFunctionBlock(isGenerator | isAsync);
          setDecoratorContext(savedDecoratorContext);
          const node = factory2.createFunctionExpression(modifiers, asteriskToken, name, typeParameters, parameters, type, body);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseOptionalBindingIdentifier() {
          return isBindingIdentifier() ? parseBindingIdentifier() : void 0;
        }
        function parseNewExpressionOrNewDotTarget() {
          const pos = getNodePos();
          parseExpected(103 /* NewKeyword */);
          if (parseOptional(24 /* DotToken */)) {
            const name = parseIdentifierName();
            return finishNode(factory2.createMetaProperty(103 /* NewKeyword */, name), pos);
          }
          const expressionPos = getNodePos();
          let expression = parseMemberExpressionRest(
            expressionPos,
            parsePrimaryExpression(),
            /*allowOptionalChain*/
            false
          );
          let typeArguments;
          if (expression.kind === 230 /* ExpressionWithTypeArguments */) {
            typeArguments = expression.typeArguments;
            expression = expression.expression;
          }
          if (token() === 28 /* QuestionDotToken */) {
            parseErrorAtCurrentToken(Diagnostics.Invalid_optional_chain_from_new_expression_Did_you_mean_to_call_0, getTextOfNodeFromSourceText(sourceText, expression));
          }
          const argumentList = token() === 20 /* OpenParenToken */ ? parseArgumentList() : void 0;
          return finishNode(factoryCreateNewExpression(expression, typeArguments, argumentList), pos);
        }
        function parseBlock(ignoreMissingOpenBrace, diagnosticMessage) {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          const openBracePosition = scanner2.getTokenPos();
          const openBraceParsed = parseExpected(18 /* OpenBraceToken */, diagnosticMessage);
          if (openBraceParsed || ignoreMissingOpenBrace) {
            const multiLine = scanner2.hasPrecedingLineBreak();
            const statements = parseList(1 /* BlockStatements */, parseStatement);
            parseExpectedMatchingBrackets(18 /* OpenBraceToken */, 19 /* CloseBraceToken */, openBraceParsed, openBracePosition);
            const result = withJSDoc(finishNode(factoryCreateBlock(statements, multiLine), pos), hasJSDoc);
            if (token() === 63 /* EqualsToken */) {
              parseErrorAtCurrentToken(Diagnostics.Declaration_or_statement_expected_This_follows_a_block_of_statements_so_if_you_intended_to_write_a_destructuring_assignment_you_might_need_to_wrap_the_whole_assignment_in_parentheses);
              nextToken();
            }
            return result;
          } else {
            const statements = createMissingList();
            return withJSDoc(finishNode(factoryCreateBlock(
              statements,
              /*multiLine*/
              void 0
            ), pos), hasJSDoc);
          }
        }
        function parseFunctionBlock(flags, diagnosticMessage) {
          const savedYieldContext = inYieldContext();
          setYieldContext(!!(flags & 1 /* Yield */));
          const savedAwaitContext = inAwaitContext();
          setAwaitContext(!!(flags & 2 /* Await */));
          const savedTopLevel = topLevel;
          topLevel = false;
          const saveDecoratorContext = inDecoratorContext();
          if (saveDecoratorContext) {
            setDecoratorContext(
              /*val*/
              false
            );
          }
          const block = parseBlock(!!(flags & 16 /* IgnoreMissingOpenBrace */), diagnosticMessage);
          if (saveDecoratorContext) {
            setDecoratorContext(
              /*val*/
              true
            );
          }
          topLevel = savedTopLevel;
          setYieldContext(savedYieldContext);
          setAwaitContext(savedAwaitContext);
          return block;
        }
        function parseEmptyStatement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(26 /* SemicolonToken */);
          return withJSDoc(finishNode(factory2.createEmptyStatement(), pos), hasJSDoc);
        }
        function parseIfStatement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(99 /* IfKeyword */);
          const openParenPosition = scanner2.getTokenPos();
          const openParenParsed = parseExpected(20 /* OpenParenToken */);
          const expression = allowInAnd(parseExpression);
          parseExpectedMatchingBrackets(20 /* OpenParenToken */, 21 /* CloseParenToken */, openParenParsed, openParenPosition);
          const thenStatement = parseStatement();
          const elseStatement = parseOptional(91 /* ElseKeyword */) ? parseStatement() : void 0;
          return withJSDoc(finishNode(factoryCreateIfStatement(expression, thenStatement, elseStatement), pos), hasJSDoc);
        }
        function parseDoStatement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(90 /* DoKeyword */);
          const statement = parseStatement();
          parseExpected(115 /* WhileKeyword */);
          const openParenPosition = scanner2.getTokenPos();
          const openParenParsed = parseExpected(20 /* OpenParenToken */);
          const expression = allowInAnd(parseExpression);
          parseExpectedMatchingBrackets(20 /* OpenParenToken */, 21 /* CloseParenToken */, openParenParsed, openParenPosition);
          parseOptional(26 /* SemicolonToken */);
          return withJSDoc(finishNode(factory2.createDoStatement(statement, expression), pos), hasJSDoc);
        }
        function parseWhileStatement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(115 /* WhileKeyword */);
          const openParenPosition = scanner2.getTokenPos();
          const openParenParsed = parseExpected(20 /* OpenParenToken */);
          const expression = allowInAnd(parseExpression);
          parseExpectedMatchingBrackets(20 /* OpenParenToken */, 21 /* CloseParenToken */, openParenParsed, openParenPosition);
          const statement = parseStatement();
          return withJSDoc(finishNode(factoryCreateWhileStatement(expression, statement), pos), hasJSDoc);
        }
        function parseForOrForInOrForOfStatement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(97 /* ForKeyword */);
          const awaitToken = parseOptionalToken(133 /* AwaitKeyword */);
          parseExpected(20 /* OpenParenToken */);
          let initializer;
          if (token() !== 26 /* SemicolonToken */) {
            if (token() === 113 /* VarKeyword */ || token() === 119 /* LetKeyword */ || token() === 85 /* ConstKeyword */) {
              initializer = parseVariableDeclarationList(
                /*inForStatementInitializer*/
                true
              );
            } else {
              initializer = disallowInAnd(parseExpression);
            }
          }
          let node;
          if (awaitToken ? parseExpected(162 /* OfKeyword */) : parseOptional(162 /* OfKeyword */)) {
            const expression = allowInAnd(() => parseAssignmentExpressionOrHigher(
              /*allowReturnTypeInArrowFunction*/
              true
            ));
            parseExpected(21 /* CloseParenToken */);
            node = factoryCreateForOfStatement(awaitToken, initializer, expression, parseStatement());
          } else if (parseOptional(101 /* InKeyword */)) {
            const expression = allowInAnd(parseExpression);
            parseExpected(21 /* CloseParenToken */);
            node = factory2.createForInStatement(initializer, expression, parseStatement());
          } else {
            parseExpected(26 /* SemicolonToken */);
            const condition = token() !== 26 /* SemicolonToken */ && token() !== 21 /* CloseParenToken */ ? allowInAnd(parseExpression) : void 0;
            parseExpected(26 /* SemicolonToken */);
            const incrementor = token() !== 21 /* CloseParenToken */ ? allowInAnd(parseExpression) : void 0;
            parseExpected(21 /* CloseParenToken */);
            node = factoryCreateForStatement(initializer, condition, incrementor, parseStatement());
          }
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseBreakOrContinueStatement(kind) {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(kind === 249 /* BreakStatement */ ? 81 /* BreakKeyword */ : 86 /* ContinueKeyword */);
          const label = canParseSemicolon() ? void 0 : parseIdentifier();
          parseSemicolon();
          const node = kind === 249 /* BreakStatement */ ? factory2.createBreakStatement(label) : factory2.createContinueStatement(label);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseReturnStatement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(105 /* ReturnKeyword */);
          const expression = canParseSemicolon() ? void 0 : allowInAnd(parseExpression);
          parseSemicolon();
          return withJSDoc(finishNode(factory2.createReturnStatement(expression), pos), hasJSDoc);
        }
        function parseWithStatement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(116 /* WithKeyword */);
          const openParenPosition = scanner2.getTokenPos();
          const openParenParsed = parseExpected(20 /* OpenParenToken */);
          const expression = allowInAnd(parseExpression);
          parseExpectedMatchingBrackets(20 /* OpenParenToken */, 21 /* CloseParenToken */, openParenParsed, openParenPosition);
          const statement = doInsideOfContext(33554432 /* InWithStatement */, parseStatement);
          return withJSDoc(finishNode(factory2.createWithStatement(expression, statement), pos), hasJSDoc);
        }
        function parseCaseClause() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(82 /* CaseKeyword */);
          const expression = allowInAnd(parseExpression);
          parseExpected(58 /* ColonToken */);
          const statements = parseList(3 /* SwitchClauseStatements */, parseStatement);
          return withJSDoc(finishNode(factory2.createCaseClause(expression, statements), pos), hasJSDoc);
        }
        function parseDefaultClause() {
          const pos = getNodePos();
          parseExpected(88 /* DefaultKeyword */);
          parseExpected(58 /* ColonToken */);
          const statements = parseList(3 /* SwitchClauseStatements */, parseStatement);
          return finishNode(factory2.createDefaultClause(statements), pos);
        }
        function parseCaseOrDefaultClause() {
          return token() === 82 /* CaseKeyword */ ? parseCaseClause() : parseDefaultClause();
        }
        function parseCaseBlock() {
          const pos = getNodePos();
          parseExpected(18 /* OpenBraceToken */);
          const clauses = parseList(2 /* SwitchClauses */, parseCaseOrDefaultClause);
          parseExpected(19 /* CloseBraceToken */);
          return finishNode(factory2.createCaseBlock(clauses), pos);
        }
        function parseSwitchStatement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(107 /* SwitchKeyword */);
          parseExpected(20 /* OpenParenToken */);
          const expression = allowInAnd(parseExpression);
          parseExpected(21 /* CloseParenToken */);
          const caseBlock = parseCaseBlock();
          return withJSDoc(finishNode(factory2.createSwitchStatement(expression, caseBlock), pos), hasJSDoc);
        }
        function parseThrowStatement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(109 /* ThrowKeyword */);
          let expression = scanner2.hasPrecedingLineBreak() ? void 0 : allowInAnd(parseExpression);
          if (expression === void 0) {
            identifierCount++;
            expression = finishNode(factoryCreateIdentifier(""), getNodePos());
          }
          if (!tryParseSemicolon()) {
            parseErrorForMissingSemicolonAfter(expression);
          }
          return withJSDoc(finishNode(factory2.createThrowStatement(expression), pos), hasJSDoc);
        }
        function parseTryStatement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(111 /* TryKeyword */);
          const tryBlock = parseBlock(
            /*ignoreMissingOpenBrace*/
            false
          );
          const catchClause = token() === 83 /* CatchKeyword */ ? parseCatchClause() : void 0;
          let finallyBlock;
          if (!catchClause || token() === 96 /* FinallyKeyword */) {
            parseExpected(96 /* FinallyKeyword */, Diagnostics.catch_or_finally_expected);
            finallyBlock = parseBlock(
              /*ignoreMissingOpenBrace*/
              false
            );
          }
          return withJSDoc(finishNode(factory2.createTryStatement(tryBlock, catchClause, finallyBlock), pos), hasJSDoc);
        }
        function parseCatchClause() {
          const pos = getNodePos();
          parseExpected(83 /* CatchKeyword */);
          let variableDeclaration;
          if (parseOptional(20 /* OpenParenToken */)) {
            variableDeclaration = parseVariableDeclaration();
            parseExpected(21 /* CloseParenToken */);
          } else {
            variableDeclaration = void 0;
          }
          const block = parseBlock(
            /*ignoreMissingOpenBrace*/
            false
          );
          return finishNode(factory2.createCatchClause(variableDeclaration, block), pos);
        }
        function parseDebuggerStatement() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          parseExpected(87 /* DebuggerKeyword */);
          parseSemicolon();
          return withJSDoc(finishNode(factory2.createDebuggerStatement(), pos), hasJSDoc);
        }
        function parseExpressionOrLabeledStatement() {
          const pos = getNodePos();
          let hasJSDoc = hasPrecedingJSDocComment();
          let node;
          const hasParen = token() === 20 /* OpenParenToken */;
          const expression = allowInAnd(parseExpression);
          if (isIdentifier(expression) && parseOptional(58 /* ColonToken */)) {
            node = factory2.createLabeledStatement(expression, parseStatement());
          } else {
            if (!tryParseSemicolon()) {
              parseErrorForMissingSemicolonAfter(expression);
            }
            node = factoryCreateExpressionStatement(expression);
            if (hasParen) {
              hasJSDoc = false;
            }
          }
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function nextTokenIsIdentifierOrKeywordOnSameLine() {
          nextToken();
          return tokenIsIdentifierOrKeyword(token()) && !scanner2.hasPrecedingLineBreak();
        }
        function nextTokenIsClassKeywordOnSameLine() {
          nextToken();
          return token() === 84 /* ClassKeyword */ && !scanner2.hasPrecedingLineBreak();
        }
        function nextTokenIsFunctionKeywordOnSameLine() {
          nextToken();
          return token() === 98 /* FunctionKeyword */ && !scanner2.hasPrecedingLineBreak();
        }
        function nextTokenIsIdentifierOrKeywordOrLiteralOnSameLine() {
          nextToken();
          return (tokenIsIdentifierOrKeyword(token()) || token() === 8 /* NumericLiteral */ || token() === 9 /* BigIntLiteral */ || token() === 10 /* StringLiteral */) && !scanner2.hasPrecedingLineBreak();
        }
        function isDeclaration2() {
          while (true) {
            switch (token()) {
              case 113 /* VarKeyword */:
              case 119 /* LetKeyword */:
              case 85 /* ConstKeyword */:
              case 98 /* FunctionKeyword */:
              case 84 /* ClassKeyword */:
              case 92 /* EnumKeyword */:
                return true;
              case 118 /* InterfaceKeyword */:
              case 154 /* TypeKeyword */:
                return nextTokenIsIdentifierOnSameLine();
              case 142 /* ModuleKeyword */:
              case 143 /* NamespaceKeyword */:
                return nextTokenIsIdentifierOrStringLiteralOnSameLine();
              case 126 /* AbstractKeyword */:
              case 127 /* AccessorKeyword */:
              case 132 /* AsyncKeyword */:
              case 136 /* DeclareKeyword */:
              case 121 /* PrivateKeyword */:
              case 122 /* ProtectedKeyword */:
              case 123 /* PublicKeyword */:
              case 146 /* ReadonlyKeyword */:
                nextToken();
                if (scanner2.hasPrecedingLineBreak()) {
                  return false;
                }
                continue;
              case 159 /* GlobalKeyword */:
                nextToken();
                return token() === 18 /* OpenBraceToken */ || token() === 79 /* Identifier */ || token() === 93 /* ExportKeyword */;
              case 100 /* ImportKeyword */:
                nextToken();
                return token() === 10 /* StringLiteral */ || token() === 41 /* AsteriskToken */ || token() === 18 /* OpenBraceToken */ || tokenIsIdentifierOrKeyword(token());
              case 93 /* ExportKeyword */:
                let currentToken2 = nextToken();
                if (currentToken2 === 154 /* TypeKeyword */) {
                  currentToken2 = lookAhead(nextToken);
                }
                if (currentToken2 === 63 /* EqualsToken */ || currentToken2 === 41 /* AsteriskToken */ || currentToken2 === 18 /* OpenBraceToken */ || currentToken2 === 88 /* DefaultKeyword */ || currentToken2 === 128 /* AsKeyword */ || currentToken2 === 59 /* AtToken */) {
                  return true;
                }
                continue;
              case 124 /* StaticKeyword */:
                nextToken();
                continue;
              default:
                return false;
            }
          }
        }
        function isStartOfDeclaration() {
          return lookAhead(isDeclaration2);
        }
        function isStartOfStatement() {
          switch (token()) {
            case 59 /* AtToken */:
            case 26 /* SemicolonToken */:
            case 18 /* OpenBraceToken */:
            case 113 /* VarKeyword */:
            case 119 /* LetKeyword */:
            case 98 /* FunctionKeyword */:
            case 84 /* ClassKeyword */:
            case 92 /* EnumKeyword */:
            case 99 /* IfKeyword */:
            case 90 /* DoKeyword */:
            case 115 /* WhileKeyword */:
            case 97 /* ForKeyword */:
            case 86 /* ContinueKeyword */:
            case 81 /* BreakKeyword */:
            case 105 /* ReturnKeyword */:
            case 116 /* WithKeyword */:
            case 107 /* SwitchKeyword */:
            case 109 /* ThrowKeyword */:
            case 111 /* TryKeyword */:
            case 87 /* DebuggerKeyword */:
            case 83 /* CatchKeyword */:
            case 96 /* FinallyKeyword */:
              return true;
            case 100 /* ImportKeyword */:
              return isStartOfDeclaration() || lookAhead(nextTokenIsOpenParenOrLessThanOrDot);
            case 85 /* ConstKeyword */:
            case 93 /* ExportKeyword */:
              return isStartOfDeclaration();
            case 132 /* AsyncKeyword */:
            case 136 /* DeclareKeyword */:
            case 118 /* InterfaceKeyword */:
            case 142 /* ModuleKeyword */:
            case 143 /* NamespaceKeyword */:
            case 154 /* TypeKeyword */:
            case 159 /* GlobalKeyword */:
              return true;
            case 127 /* AccessorKeyword */:
            case 123 /* PublicKeyword */:
            case 121 /* PrivateKeyword */:
            case 122 /* ProtectedKeyword */:
            case 124 /* StaticKeyword */:
            case 146 /* ReadonlyKeyword */:
              return isStartOfDeclaration() || !lookAhead(nextTokenIsIdentifierOrKeywordOnSameLine);
            default:
              return isStartOfExpression();
          }
        }
        function nextTokenIsBindingIdentifierOrStartOfDestructuring() {
          nextToken();
          return isBindingIdentifier() || token() === 18 /* OpenBraceToken */ || token() === 22 /* OpenBracketToken */;
        }
        function isLetDeclaration() {
          return lookAhead(nextTokenIsBindingIdentifierOrStartOfDestructuring);
        }
        function parseStatement() {
          switch (token()) {
            case 26 /* SemicolonToken */:
              return parseEmptyStatement();
            case 18 /* OpenBraceToken */:
              return parseBlock(
                /*ignoreMissingOpenBrace*/
                false
              );
            case 113 /* VarKeyword */:
              return parseVariableStatement(
                getNodePos(),
                hasPrecedingJSDocComment(),
                /*modifiers*/
                void 0
              );
            case 119 /* LetKeyword */:
              if (isLetDeclaration()) {
                return parseVariableStatement(
                  getNodePos(),
                  hasPrecedingJSDocComment(),
                  /*modifiers*/
                  void 0
                );
              }
              break;
            case 98 /* FunctionKeyword */:
              return parseFunctionDeclaration(
                getNodePos(),
                hasPrecedingJSDocComment(),
                /*modifiers*/
                void 0
              );
            case 84 /* ClassKeyword */:
              return parseClassDeclaration(
                getNodePos(),
                hasPrecedingJSDocComment(),
                /*modifiers*/
                void 0
              );
            case 99 /* IfKeyword */:
              return parseIfStatement();
            case 90 /* DoKeyword */:
              return parseDoStatement();
            case 115 /* WhileKeyword */:
              return parseWhileStatement();
            case 97 /* ForKeyword */:
              return parseForOrForInOrForOfStatement();
            case 86 /* ContinueKeyword */:
              return parseBreakOrContinueStatement(248 /* ContinueStatement */);
            case 81 /* BreakKeyword */:
              return parseBreakOrContinueStatement(249 /* BreakStatement */);
            case 105 /* ReturnKeyword */:
              return parseReturnStatement();
            case 116 /* WithKeyword */:
              return parseWithStatement();
            case 107 /* SwitchKeyword */:
              return parseSwitchStatement();
            case 109 /* ThrowKeyword */:
              return parseThrowStatement();
            case 111 /* TryKeyword */:
            case 83 /* CatchKeyword */:
            case 96 /* FinallyKeyword */:
              return parseTryStatement();
            case 87 /* DebuggerKeyword */:
              return parseDebuggerStatement();
            case 59 /* AtToken */:
              return parseDeclaration();
            case 132 /* AsyncKeyword */:
            case 118 /* InterfaceKeyword */:
            case 154 /* TypeKeyword */:
            case 142 /* ModuleKeyword */:
            case 143 /* NamespaceKeyword */:
            case 136 /* DeclareKeyword */:
            case 85 /* ConstKeyword */:
            case 92 /* EnumKeyword */:
            case 93 /* ExportKeyword */:
            case 100 /* ImportKeyword */:
            case 121 /* PrivateKeyword */:
            case 122 /* ProtectedKeyword */:
            case 123 /* PublicKeyword */:
            case 126 /* AbstractKeyword */:
            case 127 /* AccessorKeyword */:
            case 124 /* StaticKeyword */:
            case 146 /* ReadonlyKeyword */:
            case 159 /* GlobalKeyword */:
              if (isStartOfDeclaration()) {
                return parseDeclaration();
              }
              break;
          }
          return parseExpressionOrLabeledStatement();
        }
        function isDeclareModifier(modifier) {
          return modifier.kind === 136 /* DeclareKeyword */;
        }
        function parseDeclaration() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          const modifiers = parseModifiers(
            /*allowDecorators*/
            true
          );
          const isAmbient = some(modifiers, isDeclareModifier);
          if (isAmbient) {
            const node = tryReuseAmbientDeclaration(pos);
            if (node) {
              return node;
            }
            for (const m of modifiers) {
              m.flags |= 16777216 /* Ambient */;
            }
            return doInsideOfContext(16777216 /* Ambient */, () => parseDeclarationWorker(pos, hasJSDoc, modifiers));
          } else {
            return parseDeclarationWorker(pos, hasJSDoc, modifiers);
          }
        }
        function tryReuseAmbientDeclaration(pos) {
          return doInsideOfContext(16777216 /* Ambient */, () => {
            const node = currentNode(parsingContext, pos);
            if (node) {
              return consumeNode(node);
            }
          });
        }
        function parseDeclarationWorker(pos, hasJSDoc, modifiersIn) {
          switch (token()) {
            case 113 /* VarKeyword */:
            case 119 /* LetKeyword */:
            case 85 /* ConstKeyword */:
              return parseVariableStatement(pos, hasJSDoc, modifiersIn);
            case 98 /* FunctionKeyword */:
              return parseFunctionDeclaration(pos, hasJSDoc, modifiersIn);
            case 84 /* ClassKeyword */:
              return parseClassDeclaration(pos, hasJSDoc, modifiersIn);
            case 118 /* InterfaceKeyword */:
              return parseInterfaceDeclaration(pos, hasJSDoc, modifiersIn);
            case 154 /* TypeKeyword */:
              return parseTypeAliasDeclaration(pos, hasJSDoc, modifiersIn);
            case 92 /* EnumKeyword */:
              return parseEnumDeclaration(pos, hasJSDoc, modifiersIn);
            case 159 /* GlobalKeyword */:
            case 142 /* ModuleKeyword */:
            case 143 /* NamespaceKeyword */:
              return parseModuleDeclaration(pos, hasJSDoc, modifiersIn);
            case 100 /* ImportKeyword */:
              return parseImportDeclarationOrImportEqualsDeclaration(pos, hasJSDoc, modifiersIn);
            case 93 /* ExportKeyword */:
              nextToken();
              switch (token()) {
                case 88 /* DefaultKeyword */:
                case 63 /* EqualsToken */:
                  return parseExportAssignment(pos, hasJSDoc, modifiersIn);
                case 128 /* AsKeyword */:
                  return parseNamespaceExportDeclaration(pos, hasJSDoc, modifiersIn);
                default:
                  return parseExportDeclaration(pos, hasJSDoc, modifiersIn);
              }
            default:
              if (modifiersIn) {
                const missing = createMissingNode(
                  279 /* MissingDeclaration */,
                  /*reportAtCurrentPosition*/
                  true,
                  Diagnostics.Declaration_expected
                );
                setTextRangePos(missing, pos);
                missing.modifiers = modifiersIn;
                return missing;
              }
              return void 0;
          }
        }
        function nextTokenIsIdentifierOrStringLiteralOnSameLine() {
          nextToken();
          return !scanner2.hasPrecedingLineBreak() && (isIdentifier2() || token() === 10 /* StringLiteral */);
        }
        function parseFunctionBlockOrSemicolon(flags, diagnosticMessage) {
          if (token() !== 18 /* OpenBraceToken */) {
            if (flags & 4 /* Type */) {
              parseTypeMemberSemicolon();
              return;
            }
            if (canParseSemicolon()) {
              parseSemicolon();
              return;
            }
          }
          return parseFunctionBlock(flags, diagnosticMessage);
        }
        function parseArrayBindingElement() {
          const pos = getNodePos();
          if (token() === 27 /* CommaToken */) {
            return finishNode(factory2.createOmittedExpression(), pos);
          }
          const dotDotDotToken = parseOptionalToken(25 /* DotDotDotToken */);
          const name = parseIdentifierOrPattern();
          const initializer = parseInitializer();
          return finishNode(factory2.createBindingElement(
            dotDotDotToken,
            /*propertyName*/
            void 0,
            name,
            initializer
          ), pos);
        }
        function parseObjectBindingElement() {
          const pos = getNodePos();
          const dotDotDotToken = parseOptionalToken(25 /* DotDotDotToken */);
          const tokenIsIdentifier = isBindingIdentifier();
          let propertyName = parsePropertyName();
          let name;
          if (tokenIsIdentifier && token() !== 58 /* ColonToken */) {
            name = propertyName;
            propertyName = void 0;
          } else {
            parseExpected(58 /* ColonToken */);
            name = parseIdentifierOrPattern();
          }
          const initializer = parseInitializer();
          return finishNode(factory2.createBindingElement(dotDotDotToken, propertyName, name, initializer), pos);
        }
        function parseObjectBindingPattern() {
          const pos = getNodePos();
          parseExpected(18 /* OpenBraceToken */);
          const elements = parseDelimitedList(9 /* ObjectBindingElements */, parseObjectBindingElement);
          parseExpected(19 /* CloseBraceToken */);
          return finishNode(factory2.createObjectBindingPattern(elements), pos);
        }
        function parseArrayBindingPattern() {
          const pos = getNodePos();
          parseExpected(22 /* OpenBracketToken */);
          const elements = parseDelimitedList(10 /* ArrayBindingElements */, parseArrayBindingElement);
          parseExpected(23 /* CloseBracketToken */);
          return finishNode(factory2.createArrayBindingPattern(elements), pos);
        }
        function isBindingIdentifierOrPrivateIdentifierOrPattern() {
          return token() === 18 /* OpenBraceToken */ || token() === 22 /* OpenBracketToken */ || token() === 80 /* PrivateIdentifier */ || isBindingIdentifier();
        }
        function parseIdentifierOrPattern(privateIdentifierDiagnosticMessage) {
          if (token() === 22 /* OpenBracketToken */) {
            return parseArrayBindingPattern();
          }
          if (token() === 18 /* OpenBraceToken */) {
            return parseObjectBindingPattern();
          }
          return parseBindingIdentifier(privateIdentifierDiagnosticMessage);
        }
        function parseVariableDeclarationAllowExclamation() {
          return parseVariableDeclaration(
            /*allowExclamation*/
            true
          );
        }
        function parseVariableDeclaration(allowExclamation) {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          const name = parseIdentifierOrPattern(Diagnostics.Private_identifiers_are_not_allowed_in_variable_declarations);
          let exclamationToken;
          if (allowExclamation && name.kind === 79 /* Identifier */ && token() === 53 /* ExclamationToken */ && !scanner2.hasPrecedingLineBreak()) {
            exclamationToken = parseTokenNode();
          }
          const type = parseTypeAnnotation();
          const initializer = isInOrOfKeyword(token()) ? void 0 : parseInitializer();
          const node = factoryCreateVariableDeclaration(name, exclamationToken, type, initializer);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseVariableDeclarationList(inForStatementInitializer) {
          const pos = getNodePos();
          let flags = 0;
          switch (token()) {
            case 113 /* VarKeyword */:
              break;
            case 119 /* LetKeyword */:
              flags |= 1 /* Let */;
              break;
            case 85 /* ConstKeyword */:
              flags |= 2 /* Const */;
              break;
            default:
              Debug.fail();
          }
          nextToken();
          let declarations;
          if (token() === 162 /* OfKeyword */ && lookAhead(canFollowContextualOfKeyword)) {
            declarations = createMissingList();
          } else {
            const savedDisallowIn = inDisallowInContext();
            setDisallowInContext(inForStatementInitializer);
            declarations = parseDelimitedList(
              8 /* VariableDeclarations */,
              inForStatementInitializer ? parseVariableDeclaration : parseVariableDeclarationAllowExclamation
            );
            setDisallowInContext(savedDisallowIn);
          }
          return finishNode(factoryCreateVariableDeclarationList(declarations, flags), pos);
        }
        function canFollowContextualOfKeyword() {
          return nextTokenIsIdentifier() && nextToken() === 21 /* CloseParenToken */;
        }
        function parseVariableStatement(pos, hasJSDoc, modifiers) {
          const declarationList = parseVariableDeclarationList(
            /*inForStatementInitializer*/
            false
          );
          parseSemicolon();
          const node = factoryCreateVariableStatement(modifiers, declarationList);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseFunctionDeclaration(pos, hasJSDoc, modifiers) {
          const savedAwaitContext = inAwaitContext();
          const modifierFlags = modifiersToFlags(modifiers);
          parseExpected(98 /* FunctionKeyword */);
          const asteriskToken = parseOptionalToken(41 /* AsteriskToken */);
          const name = modifierFlags & 1024 /* Default */ ? parseOptionalBindingIdentifier() : parseBindingIdentifier();
          const isGenerator = asteriskToken ? 1 /* Yield */ : 0 /* None */;
          const isAsync = modifierFlags & 512 /* Async */ ? 2 /* Await */ : 0 /* None */;
          const typeParameters = parseTypeParameters();
          if (modifierFlags & 1 /* Export */)
            setAwaitContext(
              /*value*/
              true
            );
          const parameters = parseParameters(isGenerator | isAsync);
          const type = parseReturnType(
            58 /* ColonToken */,
            /*isType*/
            false
          );
          const body = parseFunctionBlockOrSemicolon(isGenerator | isAsync, Diagnostics.or_expected);
          setAwaitContext(savedAwaitContext);
          const node = factory2.createFunctionDeclaration(modifiers, asteriskToken, name, typeParameters, parameters, type, body);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseConstructorName() {
          if (token() === 135 /* ConstructorKeyword */) {
            return parseExpected(135 /* ConstructorKeyword */);
          }
          if (token() === 10 /* StringLiteral */ && lookAhead(nextToken) === 20 /* OpenParenToken */) {
            return tryParse(() => {
              const literalNode = parseLiteralNode();
              return literalNode.text === "constructor" ? literalNode : void 0;
            });
          }
        }
        function tryParseConstructorDeclaration(pos, hasJSDoc, modifiers) {
          return tryParse(() => {
            if (parseConstructorName()) {
              const typeParameters = parseTypeParameters();
              const parameters = parseParameters(0 /* None */);
              const type = parseReturnType(
                58 /* ColonToken */,
                /*isType*/
                false
              );
              const body = parseFunctionBlockOrSemicolon(0 /* None */, Diagnostics.or_expected);
              const node = factory2.createConstructorDeclaration(modifiers, parameters, body);
              node.typeParameters = typeParameters;
              node.type = type;
              return withJSDoc(finishNode(node, pos), hasJSDoc);
            }
          });
        }
        function parseMethodDeclaration(pos, hasJSDoc, modifiers, asteriskToken, name, questionToken, exclamationToken, diagnosticMessage) {
          const isGenerator = asteriskToken ? 1 /* Yield */ : 0 /* None */;
          const isAsync = some(modifiers, isAsyncModifier) ? 2 /* Await */ : 0 /* None */;
          const typeParameters = parseTypeParameters();
          const parameters = parseParameters(isGenerator | isAsync);
          const type = parseReturnType(
            58 /* ColonToken */,
            /*isType*/
            false
          );
          const body = parseFunctionBlockOrSemicolon(isGenerator | isAsync, diagnosticMessage);
          const node = factory2.createMethodDeclaration(
            modifiers,
            asteriskToken,
            name,
            questionToken,
            typeParameters,
            parameters,
            type,
            body
          );
          node.exclamationToken = exclamationToken;
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parsePropertyDeclaration(pos, hasJSDoc, modifiers, name, questionToken) {
          const exclamationToken = !questionToken && !scanner2.hasPrecedingLineBreak() ? parseOptionalToken(53 /* ExclamationToken */) : void 0;
          const type = parseTypeAnnotation();
          const initializer = doOutsideOfContext(8192 /* YieldContext */ | 32768 /* AwaitContext */ | 4096 /* DisallowInContext */, parseInitializer);
          parseSemicolonAfterPropertyName(name, type, initializer);
          const node = factory2.createPropertyDeclaration(
            modifiers,
            name,
            questionToken || exclamationToken,
            type,
            initializer
          );
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parsePropertyOrMethodDeclaration(pos, hasJSDoc, modifiers) {
          const asteriskToken = parseOptionalToken(41 /* AsteriskToken */);
          const name = parsePropertyName();
          const questionToken = parseOptionalToken(57 /* QuestionToken */);
          if (asteriskToken || token() === 20 /* OpenParenToken */ || token() === 29 /* LessThanToken */) {
            return parseMethodDeclaration(
              pos,
              hasJSDoc,
              modifiers,
              asteriskToken,
              name,
              questionToken,
              /*exclamationToken*/
              void 0,
              Diagnostics.or_expected
            );
          }
          return parsePropertyDeclaration(pos, hasJSDoc, modifiers, name, questionToken);
        }
        function parseAccessorDeclaration(pos, hasJSDoc, modifiers, kind, flags) {
          const name = parsePropertyName();
          const typeParameters = parseTypeParameters();
          const parameters = parseParameters(0 /* None */);
          const type = parseReturnType(
            58 /* ColonToken */,
            /*isType*/
            false
          );
          const body = parseFunctionBlockOrSemicolon(flags);
          const node = kind === 174 /* GetAccessor */ ? factory2.createGetAccessorDeclaration(modifiers, name, parameters, type, body) : factory2.createSetAccessorDeclaration(modifiers, name, parameters, body);
          node.typeParameters = typeParameters;
          if (isSetAccessorDeclaration(node))
            node.type = type;
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function isClassMemberStart() {
          let idToken;
          if (token() === 59 /* AtToken */) {
            return true;
          }
          while (isModifierKind(token())) {
            idToken = token();
            if (isClassMemberModifier(idToken)) {
              return true;
            }
            nextToken();
          }
          if (token() === 41 /* AsteriskToken */) {
            return true;
          }
          if (isLiteralPropertyName()) {
            idToken = token();
            nextToken();
          }
          if (token() === 22 /* OpenBracketToken */) {
            return true;
          }
          if (idToken !== void 0) {
            if (!isKeyword(idToken) || idToken === 151 /* SetKeyword */ || idToken === 137 /* GetKeyword */) {
              return true;
            }
            switch (token()) {
              case 20 /* OpenParenToken */:
              case 29 /* LessThanToken */:
              case 53 /* ExclamationToken */:
              case 58 /* ColonToken */:
              case 63 /* EqualsToken */:
              case 57 /* QuestionToken */:
                return true;
              default:
                return canParseSemicolon();
            }
          }
          return false;
        }
        function parseClassStaticBlockDeclaration(pos, hasJSDoc, modifiers) {
          parseExpectedToken(124 /* StaticKeyword */);
          const body = parseClassStaticBlockBody();
          const node = withJSDoc(finishNode(factory2.createClassStaticBlockDeclaration(body), pos), hasJSDoc);
          node.modifiers = modifiers;
          return node;
        }
        function parseClassStaticBlockBody() {
          const savedYieldContext = inYieldContext();
          const savedAwaitContext = inAwaitContext();
          setYieldContext(false);
          setAwaitContext(true);
          const body = parseBlock(
            /*ignoreMissingOpenBrace*/
            false
          );
          setYieldContext(savedYieldContext);
          setAwaitContext(savedAwaitContext);
          return body;
        }
        function parseDecoratorExpression() {
          if (inAwaitContext() && token() === 133 /* AwaitKeyword */) {
            const pos = getNodePos();
            const awaitExpression = parseIdentifier(Diagnostics.Expression_expected);
            nextToken();
            const memberExpression = parseMemberExpressionRest(
              pos,
              awaitExpression,
              /*allowOptionalChain*/
              true
            );
            return parseCallExpressionRest(pos, memberExpression);
          }
          return parseLeftHandSideExpressionOrHigher();
        }
        function tryParseDecorator() {
          const pos = getNodePos();
          if (!parseOptional(59 /* AtToken */)) {
            return void 0;
          }
          const expression = doInDecoratorContext(parseDecoratorExpression);
          return finishNode(factory2.createDecorator(expression), pos);
        }
        function tryParseModifier(hasSeenStaticModifier, permitConstAsModifier, stopOnStartOfClassStaticBlock) {
          const pos = getNodePos();
          const kind = token();
          if (token() === 85 /* ConstKeyword */ && permitConstAsModifier) {
            if (!tryParse(nextTokenIsOnSameLineAndCanFollowModifier)) {
              return void 0;
            }
          } else if (stopOnStartOfClassStaticBlock && token() === 124 /* StaticKeyword */ && lookAhead(nextTokenIsOpenBrace)) {
            return void 0;
          } else if (hasSeenStaticModifier && token() === 124 /* StaticKeyword */) {
            return void 0;
          } else {
            if (!parseAnyContextualModifier()) {
              return void 0;
            }
          }
          return finishNode(factoryCreateToken(kind), pos);
        }
        function parseModifiers(allowDecorators, permitConstAsModifier, stopOnStartOfClassStaticBlock) {
          const pos = getNodePos();
          let list;
          let decorator, modifier, hasSeenStaticModifier = false, hasLeadingModifier = false, hasTrailingDecorator = false;
          if (allowDecorators && token() === 59 /* AtToken */) {
            while (decorator = tryParseDecorator()) {
              list = append(list, decorator);
            }
          }
          while (modifier = tryParseModifier(hasSeenStaticModifier, permitConstAsModifier, stopOnStartOfClassStaticBlock)) {
            if (modifier.kind === 124 /* StaticKeyword */)
              hasSeenStaticModifier = true;
            list = append(list, modifier);
            hasLeadingModifier = true;
          }
          if (hasLeadingModifier && allowDecorators && token() === 59 /* AtToken */) {
            while (decorator = tryParseDecorator()) {
              list = append(list, decorator);
              hasTrailingDecorator = true;
            }
          }
          if (hasTrailingDecorator) {
            while (modifier = tryParseModifier(hasSeenStaticModifier, permitConstAsModifier, stopOnStartOfClassStaticBlock)) {
              if (modifier.kind === 124 /* StaticKeyword */)
                hasSeenStaticModifier = true;
              list = append(list, modifier);
            }
          }
          return list && createNodeArray(list, pos);
        }
        function parseModifiersForArrowFunction() {
          let modifiers;
          if (token() === 132 /* AsyncKeyword */) {
            const pos = getNodePos();
            nextToken();
            const modifier = finishNode(factoryCreateToken(132 /* AsyncKeyword */), pos);
            modifiers = createNodeArray([modifier], pos);
          }
          return modifiers;
        }
        function parseClassElement() {
          const pos = getNodePos();
          if (token() === 26 /* SemicolonToken */) {
            nextToken();
            return finishNode(factory2.createSemicolonClassElement(), pos);
          }
          const hasJSDoc = hasPrecedingJSDocComment();
          const modifiers = parseModifiers(
            /*allowDecorators*/
            true,
            /*permitConstAsModifier*/
            true,
            /*stopOnStartOfClassStaticBlock*/
            true
          );
          if (token() === 124 /* StaticKeyword */ && lookAhead(nextTokenIsOpenBrace)) {
            return parseClassStaticBlockDeclaration(pos, hasJSDoc, modifiers);
          }
          if (parseContextualModifier(137 /* GetKeyword */)) {
            return parseAccessorDeclaration(pos, hasJSDoc, modifiers, 174 /* GetAccessor */, 0 /* None */);
          }
          if (parseContextualModifier(151 /* SetKeyword */)) {
            return parseAccessorDeclaration(pos, hasJSDoc, modifiers, 175 /* SetAccessor */, 0 /* None */);
          }
          if (token() === 135 /* ConstructorKeyword */ || token() === 10 /* StringLiteral */) {
            const constructorDeclaration = tryParseConstructorDeclaration(pos, hasJSDoc, modifiers);
            if (constructorDeclaration) {
              return constructorDeclaration;
            }
          }
          if (isIndexSignature()) {
            return parseIndexSignatureDeclaration(pos, hasJSDoc, modifiers);
          }
          if (tokenIsIdentifierOrKeyword(token()) || token() === 10 /* StringLiteral */ || token() === 8 /* NumericLiteral */ || token() === 41 /* AsteriskToken */ || token() === 22 /* OpenBracketToken */) {
            const isAmbient = some(modifiers, isDeclareModifier);
            if (isAmbient) {
              for (const m of modifiers) {
                m.flags |= 16777216 /* Ambient */;
              }
              return doInsideOfContext(16777216 /* Ambient */, () => parsePropertyOrMethodDeclaration(pos, hasJSDoc, modifiers));
            } else {
              return parsePropertyOrMethodDeclaration(pos, hasJSDoc, modifiers);
            }
          }
          if (modifiers) {
            const name = createMissingNode(
              79 /* Identifier */,
              /*reportAtCurrentPosition*/
              true,
              Diagnostics.Declaration_expected
            );
            return parsePropertyDeclaration(
              pos,
              hasJSDoc,
              modifiers,
              name,
              /*questionToken*/
              void 0
            );
          }
          return Debug.fail("Should not have attempted to parse class member declaration.");
        }
        function parseDecoratedExpression() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          const modifiers = parseModifiers(
            /*allowDecorators*/
            true
          );
          if (token() === 84 /* ClassKeyword */) {
            return parseClassDeclarationOrExpression(pos, hasJSDoc, modifiers, 228 /* ClassExpression */);
          }
          const missing = createMissingNode(
            279 /* MissingDeclaration */,
            /*reportAtCurrentPosition*/
            true,
            Diagnostics.Expression_expected
          );
          setTextRangePos(missing, pos);
          missing.modifiers = modifiers;
          return missing;
        }
        function parseClassExpression() {
          return parseClassDeclarationOrExpression(
            getNodePos(),
            hasPrecedingJSDocComment(),
            /*modifiers*/
            void 0,
            228 /* ClassExpression */
          );
        }
        function parseClassDeclaration(pos, hasJSDoc, modifiers) {
          return parseClassDeclarationOrExpression(pos, hasJSDoc, modifiers, 260 /* ClassDeclaration */);
        }
        function parseClassDeclarationOrExpression(pos, hasJSDoc, modifiers, kind) {
          const savedAwaitContext = inAwaitContext();
          parseExpected(84 /* ClassKeyword */);
          const name = parseNameOfClassDeclarationOrExpression();
          const typeParameters = parseTypeParameters();
          if (some(modifiers, isExportModifier))
            setAwaitContext(
              /*value*/
              true
            );
          const heritageClauses = parseHeritageClauses();
          let members;
          if (parseExpected(18 /* OpenBraceToken */)) {
            members = parseClassMembers();
            parseExpected(19 /* CloseBraceToken */);
          } else {
            members = createMissingList();
          }
          setAwaitContext(savedAwaitContext);
          const node = kind === 260 /* ClassDeclaration */ ? factory2.createClassDeclaration(modifiers, name, typeParameters, heritageClauses, members) : factory2.createClassExpression(modifiers, name, typeParameters, heritageClauses, members);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseNameOfClassDeclarationOrExpression() {
          return isBindingIdentifier() && !isImplementsClause() ? createIdentifier(isBindingIdentifier()) : void 0;
        }
        function isImplementsClause() {
          return token() === 117 /* ImplementsKeyword */ && lookAhead(nextTokenIsIdentifierOrKeyword);
        }
        function parseHeritageClauses() {
          if (isHeritageClause2()) {
            return parseList(22 /* HeritageClauses */, parseHeritageClause);
          }
          return void 0;
        }
        function parseHeritageClause() {
          const pos = getNodePos();
          const tok = token();
          Debug.assert(tok === 94 /* ExtendsKeyword */ || tok === 117 /* ImplementsKeyword */);
          nextToken();
          const types = parseDelimitedList(7 /* HeritageClauseElement */, parseExpressionWithTypeArguments);
          return finishNode(factory2.createHeritageClause(tok, types), pos);
        }
        function parseExpressionWithTypeArguments() {
          const pos = getNodePos();
          const expression = parseLeftHandSideExpressionOrHigher();
          if (expression.kind === 230 /* ExpressionWithTypeArguments */) {
            return expression;
          }
          const typeArguments = tryParseTypeArguments();
          return finishNode(factory2.createExpressionWithTypeArguments(expression, typeArguments), pos);
        }
        function tryParseTypeArguments() {
          return token() === 29 /* LessThanToken */ ? parseBracketedList(20 /* TypeArguments */, parseType, 29 /* LessThanToken */, 31 /* GreaterThanToken */) : void 0;
        }
        function isHeritageClause2() {
          return token() === 94 /* ExtendsKeyword */ || token() === 117 /* ImplementsKeyword */;
        }
        function parseClassMembers() {
          return parseList(5 /* ClassMembers */, parseClassElement);
        }
        function parseInterfaceDeclaration(pos, hasJSDoc, modifiers) {
          parseExpected(118 /* InterfaceKeyword */);
          const name = parseIdentifier();
          const typeParameters = parseTypeParameters();
          const heritageClauses = parseHeritageClauses();
          const members = parseObjectTypeMembers();
          const node = factory2.createInterfaceDeclaration(modifiers, name, typeParameters, heritageClauses, members);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseTypeAliasDeclaration(pos, hasJSDoc, modifiers) {
          parseExpected(154 /* TypeKeyword */);
          const name = parseIdentifier();
          const typeParameters = parseTypeParameters();
          parseExpected(63 /* EqualsToken */);
          const type = token() === 139 /* IntrinsicKeyword */ && tryParse(parseKeywordAndNoDot) || parseType();
          parseSemicolon();
          const node = factory2.createTypeAliasDeclaration(modifiers, name, typeParameters, type);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseEnumMember() {
          const pos = getNodePos();
          const hasJSDoc = hasPrecedingJSDocComment();
          const name = parsePropertyName();
          const initializer = allowInAnd(parseInitializer);
          return withJSDoc(finishNode(factory2.createEnumMember(name, initializer), pos), hasJSDoc);
        }
        function parseEnumDeclaration(pos, hasJSDoc, modifiers) {
          parseExpected(92 /* EnumKeyword */);
          const name = parseIdentifier();
          let members;
          if (parseExpected(18 /* OpenBraceToken */)) {
            members = doOutsideOfYieldAndAwaitContext(() => parseDelimitedList(6 /* EnumMembers */, parseEnumMember));
            parseExpected(19 /* CloseBraceToken */);
          } else {
            members = createMissingList();
          }
          const node = factory2.createEnumDeclaration(modifiers, name, members);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseModuleBlock() {
          const pos = getNodePos();
          let statements;
          if (parseExpected(18 /* OpenBraceToken */)) {
            statements = parseList(1 /* BlockStatements */, parseStatement);
            parseExpected(19 /* CloseBraceToken */);
          } else {
            statements = createMissingList();
          }
          return finishNode(factory2.createModuleBlock(statements), pos);
        }
        function parseModuleOrNamespaceDeclaration(pos, hasJSDoc, modifiers, flags) {
          const namespaceFlag = flags & 16 /* Namespace */;
          const name = parseIdentifier();
          const body = parseOptional(24 /* DotToken */) ? parseModuleOrNamespaceDeclaration(
            getNodePos(),
            /*hasJSDoc*/
            false,
            /*modifiers*/
            void 0,
            4 /* NestedNamespace */ | namespaceFlag
          ) : parseModuleBlock();
          const node = factory2.createModuleDeclaration(modifiers, name, body, flags);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseAmbientExternalModuleDeclaration(pos, hasJSDoc, modifiersIn) {
          let flags = 0;
          let name;
          if (token() === 159 /* GlobalKeyword */) {
            name = parseIdentifier();
            flags |= 1024 /* GlobalAugmentation */;
          } else {
            name = parseLiteralNode();
            name.text = internIdentifier(name.text);
          }
          let body;
          if (token() === 18 /* OpenBraceToken */) {
            body = parseModuleBlock();
          } else {
            parseSemicolon();
          }
          const node = factory2.createModuleDeclaration(modifiersIn, name, body, flags);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseModuleDeclaration(pos, hasJSDoc, modifiersIn) {
          let flags = 0;
          if (token() === 159 /* GlobalKeyword */) {
            return parseAmbientExternalModuleDeclaration(pos, hasJSDoc, modifiersIn);
          } else if (parseOptional(143 /* NamespaceKeyword */)) {
            flags |= 16 /* Namespace */;
          } else {
            parseExpected(142 /* ModuleKeyword */);
            if (token() === 10 /* StringLiteral */) {
              return parseAmbientExternalModuleDeclaration(pos, hasJSDoc, modifiersIn);
            }
          }
          return parseModuleOrNamespaceDeclaration(pos, hasJSDoc, modifiersIn, flags);
        }
        function isExternalModuleReference2() {
          return token() === 147 /* RequireKeyword */ && lookAhead(nextTokenIsOpenParen);
        }
        function nextTokenIsOpenParen() {
          return nextToken() === 20 /* OpenParenToken */;
        }
        function nextTokenIsOpenBrace() {
          return nextToken() === 18 /* OpenBraceToken */;
        }
        function nextTokenIsSlash() {
          return nextToken() === 43 /* SlashToken */;
        }
        function parseNamespaceExportDeclaration(pos, hasJSDoc, modifiers) {
          parseExpected(128 /* AsKeyword */);
          parseExpected(143 /* NamespaceKeyword */);
          const name = parseIdentifier();
          parseSemicolon();
          const node = factory2.createNamespaceExportDeclaration(name);
          node.modifiers = modifiers;
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseImportDeclarationOrImportEqualsDeclaration(pos, hasJSDoc, modifiers) {
          parseExpected(100 /* ImportKeyword */);
          const afterImportPos = scanner2.getStartPos();
          let identifier;
          if (isIdentifier2()) {
            identifier = parseIdentifier();
          }
          let isTypeOnly = false;
          if (token() !== 158 /* FromKeyword */ && (identifier == null ? void 0 : identifier.escapedText) === "type" && (isIdentifier2() || tokenAfterImportDefinitelyProducesImportDeclaration())) {
            isTypeOnly = true;
            identifier = isIdentifier2() ? parseIdentifier() : void 0;
          }
          if (identifier && !tokenAfterImportedIdentifierDefinitelyProducesImportDeclaration()) {
            return parseImportEqualsDeclaration(pos, hasJSDoc, modifiers, identifier, isTypeOnly);
          }
          let importClause;
          if (identifier || // import id
          token() === 41 /* AsteriskToken */ || // import *
          token() === 18 /* OpenBraceToken */) {
            importClause = parseImportClause(identifier, afterImportPos, isTypeOnly);
            parseExpected(158 /* FromKeyword */);
          }
          const moduleSpecifier = parseModuleSpecifier();
          let assertClause;
          if (token() === 130 /* AssertKeyword */ && !scanner2.hasPrecedingLineBreak()) {
            assertClause = parseAssertClause();
          }
          parseSemicolon();
          const node = factory2.createImportDeclaration(modifiers, importClause, moduleSpecifier, assertClause);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseAssertEntry() {
          const pos = getNodePos();
          const name = tokenIsIdentifierOrKeyword(token()) ? parseIdentifierName() : parseLiteralLikeNode(10 /* StringLiteral */);
          parseExpected(58 /* ColonToken */);
          const value = parseAssignmentExpressionOrHigher(
            /*allowReturnTypeInArrowFunction*/
            true
          );
          return finishNode(factory2.createAssertEntry(name, value), pos);
        }
        function parseAssertClause(skipAssertKeyword) {
          const pos = getNodePos();
          if (!skipAssertKeyword) {
            parseExpected(130 /* AssertKeyword */);
          }
          const openBracePosition = scanner2.getTokenPos();
          if (parseExpected(18 /* OpenBraceToken */)) {
            const multiLine = scanner2.hasPrecedingLineBreak();
            const elements = parseDelimitedList(
              24 /* AssertEntries */,
              parseAssertEntry,
              /*considerSemicolonAsDelimiter*/
              true
            );
            if (!parseExpected(19 /* CloseBraceToken */)) {
              const lastError = lastOrUndefined(parseDiagnostics);
              if (lastError && lastError.code === Diagnostics._0_expected.code) {
                addRelatedInfo(
                  lastError,
                  createDetachedDiagnostic(fileName, openBracePosition, 1, Diagnostics.The_parser_expected_to_find_a_1_to_match_the_0_token_here, "{", "}")
                );
              }
            }
            return finishNode(factory2.createAssertClause(elements, multiLine), pos);
          } else {
            const elements = createNodeArray(
              [],
              getNodePos(),
              /*end*/
              void 0,
              /*hasTrailingComma*/
              false
            );
            return finishNode(factory2.createAssertClause(
              elements,
              /*multiLine*/
              false
            ), pos);
          }
        }
        function tokenAfterImportDefinitelyProducesImportDeclaration() {
          return token() === 41 /* AsteriskToken */ || token() === 18 /* OpenBraceToken */;
        }
        function tokenAfterImportedIdentifierDefinitelyProducesImportDeclaration() {
          return token() === 27 /* CommaToken */ || token() === 158 /* FromKeyword */;
        }
        function parseImportEqualsDeclaration(pos, hasJSDoc, modifiers, identifier, isTypeOnly) {
          parseExpected(63 /* EqualsToken */);
          const moduleReference = parseModuleReference();
          parseSemicolon();
          const node = factory2.createImportEqualsDeclaration(modifiers, isTypeOnly, identifier, moduleReference);
          const finished = withJSDoc(finishNode(node, pos), hasJSDoc);
          return finished;
        }
        function parseImportClause(identifier, pos, isTypeOnly) {
          let namedBindings;
          if (!identifier || parseOptional(27 /* CommaToken */)) {
            namedBindings = token() === 41 /* AsteriskToken */ ? parseNamespaceImport() : parseNamedImportsOrExports(272 /* NamedImports */);
          }
          return finishNode(factory2.createImportClause(isTypeOnly, identifier, namedBindings), pos);
        }
        function parseModuleReference() {
          return isExternalModuleReference2() ? parseExternalModuleReference() : parseEntityName(
            /*allowReservedWords*/
            false
          );
        }
        function parseExternalModuleReference() {
          const pos = getNodePos();
          parseExpected(147 /* RequireKeyword */);
          parseExpected(20 /* OpenParenToken */);
          const expression = parseModuleSpecifier();
          parseExpected(21 /* CloseParenToken */);
          return finishNode(factory2.createExternalModuleReference(expression), pos);
        }
        function parseModuleSpecifier() {
          if (token() === 10 /* StringLiteral */) {
            const result = parseLiteralNode();
            result.text = internIdentifier(result.text);
            return result;
          } else {
            return parseExpression();
          }
        }
        function parseNamespaceImport() {
          const pos = getNodePos();
          parseExpected(41 /* AsteriskToken */);
          parseExpected(128 /* AsKeyword */);
          const name = parseIdentifier();
          return finishNode(factory2.createNamespaceImport(name), pos);
        }
        function parseNamedImportsOrExports(kind) {
          const pos = getNodePos();
          const node = kind === 272 /* NamedImports */ ? factory2.createNamedImports(parseBracketedList(23 /* ImportOrExportSpecifiers */, parseImportSpecifier, 18 /* OpenBraceToken */, 19 /* CloseBraceToken */)) : factory2.createNamedExports(parseBracketedList(23 /* ImportOrExportSpecifiers */, parseExportSpecifier, 18 /* OpenBraceToken */, 19 /* CloseBraceToken */));
          return finishNode(node, pos);
        }
        function parseExportSpecifier() {
          const hasJSDoc = hasPrecedingJSDocComment();
          return withJSDoc(parseImportOrExportSpecifier(278 /* ExportSpecifier */), hasJSDoc);
        }
        function parseImportSpecifier() {
          return parseImportOrExportSpecifier(273 /* ImportSpecifier */);
        }
        function parseImportOrExportSpecifier(kind) {
          const pos = getNodePos();
          let checkIdentifierIsKeyword = isKeyword(token()) && !isIdentifier2();
          let checkIdentifierStart = scanner2.getTokenPos();
          let checkIdentifierEnd = scanner2.getTextPos();
          let isTypeOnly = false;
          let propertyName;
          let canParseAsKeyword = true;
          let name = parseIdentifierName();
          if (name.escapedText === "type") {
            if (token() === 128 /* AsKeyword */) {
              const firstAs = parseIdentifierName();
              if (token() === 128 /* AsKeyword */) {
                const secondAs = parseIdentifierName();
                if (tokenIsIdentifierOrKeyword(token())) {
                  isTypeOnly = true;
                  propertyName = firstAs;
                  name = parseNameWithKeywordCheck();
                  canParseAsKeyword = false;
                } else {
                  propertyName = name;
                  name = secondAs;
                  canParseAsKeyword = false;
                }
              } else if (tokenIsIdentifierOrKeyword(token())) {
                propertyName = name;
                canParseAsKeyword = false;
                name = parseNameWithKeywordCheck();
              } else {
                isTypeOnly = true;
                name = firstAs;
              }
            } else if (tokenIsIdentifierOrKeyword(token())) {
              isTypeOnly = true;
              name = parseNameWithKeywordCheck();
            }
          }
          if (canParseAsKeyword && token() === 128 /* AsKeyword */) {
            propertyName = name;
            parseExpected(128 /* AsKeyword */);
            name = parseNameWithKeywordCheck();
          }
          if (kind === 273 /* ImportSpecifier */ && checkIdentifierIsKeyword) {
            parseErrorAt(checkIdentifierStart, checkIdentifierEnd, Diagnostics.Identifier_expected);
          }
          const node = kind === 273 /* ImportSpecifier */ ? factory2.createImportSpecifier(isTypeOnly, propertyName, name) : factory2.createExportSpecifier(isTypeOnly, propertyName, name);
          return finishNode(node, pos);
          function parseNameWithKeywordCheck() {
            checkIdentifierIsKeyword = isKeyword(token()) && !isIdentifier2();
            checkIdentifierStart = scanner2.getTokenPos();
            checkIdentifierEnd = scanner2.getTextPos();
            return parseIdentifierName();
          }
        }
        function parseNamespaceExport(pos) {
          return finishNode(factory2.createNamespaceExport(parseIdentifierName()), pos);
        }
        function parseExportDeclaration(pos, hasJSDoc, modifiers) {
          const savedAwaitContext = inAwaitContext();
          setAwaitContext(
            /*value*/
            true
          );
          let exportClause;
          let moduleSpecifier;
          let assertClause;
          const isTypeOnly = parseOptional(154 /* TypeKeyword */);
          const namespaceExportPos = getNodePos();
          if (parseOptional(41 /* AsteriskToken */)) {
            if (parseOptional(128 /* AsKeyword */)) {
              exportClause = parseNamespaceExport(namespaceExportPos);
            }
            parseExpected(158 /* FromKeyword */);
            moduleSpecifier = parseModuleSpecifier();
          } else {
            exportClause = parseNamedImportsOrExports(276 /* NamedExports */);
            if (token() === 158 /* FromKeyword */ || token() === 10 /* StringLiteral */ && !scanner2.hasPrecedingLineBreak()) {
              parseExpected(158 /* FromKeyword */);
              moduleSpecifier = parseModuleSpecifier();
            }
          }
          if (moduleSpecifier && token() === 130 /* AssertKeyword */ && !scanner2.hasPrecedingLineBreak()) {
            assertClause = parseAssertClause();
          }
          parseSemicolon();
          setAwaitContext(savedAwaitContext);
          const node = factory2.createExportDeclaration(modifiers, isTypeOnly, exportClause, moduleSpecifier, assertClause);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        function parseExportAssignment(pos, hasJSDoc, modifiers) {
          const savedAwaitContext = inAwaitContext();
          setAwaitContext(
            /*value*/
            true
          );
          let isExportEquals;
          if (parseOptional(63 /* EqualsToken */)) {
            isExportEquals = true;
          } else {
            parseExpected(88 /* DefaultKeyword */);
          }
          const expression = parseAssignmentExpressionOrHigher(
            /*allowReturnTypeInArrowFunction*/
            true
          );
          parseSemicolon();
          setAwaitContext(savedAwaitContext);
          const node = factory2.createExportAssignment(modifiers, isExportEquals, expression);
          return withJSDoc(finishNode(node, pos), hasJSDoc);
        }
        let ParsingContext;
        ((ParsingContext2) => {
          ParsingContext2[ParsingContext2["SourceElements"] = 0] = "SourceElements";
          ParsingContext2[ParsingContext2["BlockStatements"] = 1] = "BlockStatements";
          ParsingContext2[ParsingContext2["SwitchClauses"] = 2] = "SwitchClauses";
          ParsingContext2[ParsingContext2["SwitchClauseStatements"] = 3] = "SwitchClauseStatements";
          ParsingContext2[ParsingContext2["TypeMembers"] = 4] = "TypeMembers";
          ParsingContext2[ParsingContext2["ClassMembers"] = 5] = "ClassMembers";
          ParsingContext2[ParsingContext2["EnumMembers"] = 6] = "EnumMembers";
          ParsingContext2[ParsingContext2["HeritageClauseElement"] = 7] = "HeritageClauseElement";
          ParsingContext2[ParsingContext2["VariableDeclarations"] = 8] = "VariableDeclarations";
          ParsingContext2[ParsingContext2["ObjectBindingElements"] = 9] = "ObjectBindingElements";
          ParsingContext2[ParsingContext2["ArrayBindingElements"] = 10] = "ArrayBindingElements";
          ParsingContext2[ParsingContext2["ArgumentExpressions"] = 11] = "ArgumentExpressions";
          ParsingContext2[ParsingContext2["ObjectLiteralMembers"] = 12] = "ObjectLiteralMembers";
          ParsingContext2[ParsingContext2["JsxAttributes"] = 13] = "JsxAttributes";
          ParsingContext2[ParsingContext2["JsxChildren"] = 14] = "JsxChildren";
          ParsingContext2[ParsingContext2["ArrayLiteralMembers"] = 15] = "ArrayLiteralMembers";
          ParsingContext2[ParsingContext2["Parameters"] = 16] = "Parameters";
          ParsingContext2[ParsingContext2["JSDocParameters"] = 17] = "JSDocParameters";
          ParsingContext2[ParsingContext2["RestProperties"] = 18] = "RestProperties";
          ParsingContext2[ParsingContext2["TypeParameters"] = 19] = "TypeParameters";
          ParsingContext2[ParsingContext2["TypeArguments"] = 20] = "TypeArguments";
          ParsingContext2[ParsingContext2["TupleElementTypes"] = 21] = "TupleElementTypes";
          ParsingContext2[ParsingContext2["HeritageClauses"] = 22] = "HeritageClauses";
          ParsingContext2[ParsingContext2["ImportOrExportSpecifiers"] = 23] = "ImportOrExportSpecifiers";
          ParsingContext2[ParsingContext2["AssertEntries"] = 24] = "AssertEntries";
          ParsingContext2[ParsingContext2["Count"] = 25] = "Count";
        })(ParsingContext || (ParsingContext = {}));
        let Tristate;
        ((Tristate2) => {
          Tristate2[Tristate2["False"] = 0] = "False";
          Tristate2[Tristate2["True"] = 1] = "True";
          Tristate2[Tristate2["Unknown"] = 2] = "Unknown";
        })(Tristate || (Tristate = {}));
        let JSDocParser;
        ((JSDocParser2) => {
          function parseJSDocTypeExpressionForTests2(content, start, length2) {
            initializeState(
              "file.js",
              content,
              99 /* Latest */,
              /*_syntaxCursor:*/
              void 0,
              1 /* JS */
            );
            scanner2.setText(content, start, length2);
            currentToken = scanner2.scan();
            const jsDocTypeExpression = parseJSDocTypeExpression();
            const sourceFile = createSourceFile2(
              "file.js",
              99 /* Latest */,
              1 /* JS */,
              /*isDeclarationFile*/
              false,
              [],
              factoryCreateToken(1 /* EndOfFileToken */),
              0 /* None */,
              noop
            );
            const diagnostics = attachFileToDiagnostics(parseDiagnostics, sourceFile);
            if (jsDocDiagnostics) {
              sourceFile.jsDocDiagnostics = attachFileToDiagnostics(jsDocDiagnostics, sourceFile);
            }
            clearState();
            return jsDocTypeExpression ? { jsDocTypeExpression, diagnostics } : void 0;
          }
          JSDocParser2.parseJSDocTypeExpressionForTests = parseJSDocTypeExpressionForTests2;
          function parseJSDocTypeExpression(mayOmitBraces) {
            const pos = getNodePos();
            const hasBrace = (mayOmitBraces ? parseOptional : parseExpected)(18 /* OpenBraceToken */);
            const type = doInsideOfContext(8388608 /* JSDoc */, parseJSDocType);
            if (!mayOmitBraces || hasBrace) {
              parseExpectedJSDoc(19 /* CloseBraceToken */);
            }
            const result = factory2.createJSDocTypeExpression(type);
            fixupParentReferences(result);
            return finishNode(result, pos);
          }
          JSDocParser2.parseJSDocTypeExpression = parseJSDocTypeExpression;
          function parseJSDocNameReference() {
            const pos = getNodePos();
            const hasBrace = parseOptional(18 /* OpenBraceToken */);
            const p2 = getNodePos();
            let entityName = parseEntityName(
              /* allowReservedWords*/
              false
            );
            while (token() === 80 /* PrivateIdentifier */) {
              reScanHashToken();
              nextTokenJSDoc();
              entityName = finishNode(factory2.createJSDocMemberName(entityName, parseIdentifier()), p2);
            }
            if (hasBrace) {
              parseExpectedJSDoc(19 /* CloseBraceToken */);
            }
            const result = factory2.createJSDocNameReference(entityName);
            fixupParentReferences(result);
            return finishNode(result, pos);
          }
          JSDocParser2.parseJSDocNameReference = parseJSDocNameReference;
          function parseIsolatedJSDocComment2(content, start, length2) {
            initializeState(
              "",
              content,
              99 /* Latest */,
              /*_syntaxCursor:*/
              void 0,
              1 /* JS */
            );
            const jsDoc = doInsideOfContext(8388608 /* JSDoc */, () => parseJSDocCommentWorker(start, length2));
            const sourceFile = { languageVariant: 0 /* Standard */, text: content };
            const diagnostics = attachFileToDiagnostics(parseDiagnostics, sourceFile);
            clearState();
            return jsDoc ? { jsDoc, diagnostics } : void 0;
          }
          JSDocParser2.parseIsolatedJSDocComment = parseIsolatedJSDocComment2;
          function parseJSDocComment(parent2, start, length2) {
            const saveToken = currentToken;
            const saveParseDiagnosticsLength = parseDiagnostics.length;
            const saveParseErrorBeforeNextFinishedNode = parseErrorBeforeNextFinishedNode;
            const comment = doInsideOfContext(8388608 /* JSDoc */, () => parseJSDocCommentWorker(start, length2));
            setParent(comment, parent2);
            if (contextFlags & 262144 /* JavaScriptFile */) {
              if (!jsDocDiagnostics) {
                jsDocDiagnostics = [];
              }
              jsDocDiagnostics.push(...parseDiagnostics);
            }
            currentToken = saveToken;
            parseDiagnostics.length = saveParseDiagnosticsLength;
            parseErrorBeforeNextFinishedNode = saveParseErrorBeforeNextFinishedNode;
            return comment;
          }
          JSDocParser2.parseJSDocComment = parseJSDocComment;
          let JSDocState;
          ((JSDocState2) => {
            JSDocState2[JSDocState2["BeginningOfLine"] = 0] = "BeginningOfLine";
            JSDocState2[JSDocState2["SawAsterisk"] = 1] = "SawAsterisk";
            JSDocState2[JSDocState2["SavingComments"] = 2] = "SavingComments";
            JSDocState2[JSDocState2["SavingBackticks"] = 3] = "SavingBackticks";
          })(JSDocState || (JSDocState = {}));
          let PropertyLikeParse;
          ((PropertyLikeParse2) => {
            PropertyLikeParse2[PropertyLikeParse2["Property"] = 1] = "Property";
            PropertyLikeParse2[PropertyLikeParse2["Parameter"] = 2] = "Parameter";
            PropertyLikeParse2[PropertyLikeParse2["CallbackParameter"] = 4] = "CallbackParameter";
          })(PropertyLikeParse || (PropertyLikeParse = {}));
          function parseJSDocCommentWorker(start = 0, length2) {
            const content = sourceText;
            const end = length2 === void 0 ? content.length : start + length2;
            length2 = end - start;
            Debug.assert(start >= 0);
            Debug.assert(start <= end);
            Debug.assert(end <= content.length);
            if (!isJSDocLikeText(content, start)) {
              return void 0;
            }
            let tags;
            let tagsPos;
            let tagsEnd;
            let linkEnd;
            let commentsPos;
            let comments = [];
            const parts = [];
            return scanner2.scanRange(start + 3, length2 - 5, () => {
              let state = 1 /* SawAsterisk */;
              let margin;
              let indent2 = start - (content.lastIndexOf("\n", start) + 1) + 4;
              function pushComment(text) {
                if (!margin) {
                  margin = indent2;
                }
                comments.push(text);
                indent2 += text.length;
              }
              nextTokenJSDoc();
              while (parseOptionalJsdoc(5 /* WhitespaceTrivia */))
                ;
              if (parseOptionalJsdoc(4 /* NewLineTrivia */)) {
                state = 0 /* BeginningOfLine */;
                indent2 = 0;
              }
              loop:
                while (true) {
                  switch (token()) {
                    case 59 /* AtToken */:
                      if (state === 0 /* BeginningOfLine */ || state === 1 /* SawAsterisk */) {
                        removeTrailingWhitespace(comments);
                        if (!commentsPos)
                          commentsPos = getNodePos();
                        addTag(parseTag(indent2));
                        state = 0 /* BeginningOfLine */;
                        margin = void 0;
                      } else {
                        pushComment(scanner2.getTokenText());
                      }
                      break;
                    case 4 /* NewLineTrivia */:
                      comments.push(scanner2.getTokenText());
                      state = 0 /* BeginningOfLine */;
                      indent2 = 0;
                      break;
                    case 41 /* AsteriskToken */:
                      const asterisk = scanner2.getTokenText();
                      if (state === 1 /* SawAsterisk */ || state === 2 /* SavingComments */) {
                        state = 2 /* SavingComments */;
                        pushComment(asterisk);
                      } else {
                        state = 1 /* SawAsterisk */;
                        indent2 += asterisk.length;
                      }
                      break;
                    case 5 /* WhitespaceTrivia */:
                      const whitespace = scanner2.getTokenText();
                      if (state === 2 /* SavingComments */) {
                        comments.push(whitespace);
                      } else if (margin !== void 0 && indent2 + whitespace.length > margin) {
                        comments.push(whitespace.slice(margin - indent2));
                      }
                      indent2 += whitespace.length;
                      break;
                    case 1 /* EndOfFileToken */:
                      break loop;
                    case 18 /* OpenBraceToken */:
                      state = 2 /* SavingComments */;
                      const commentEnd = scanner2.getStartPos();
                      const linkStart = scanner2.getTextPos() - 1;
                      const link = parseJSDocLink(linkStart);
                      if (link) {
                        if (!linkEnd) {
                          removeLeadingNewlines(comments);
                        }
                        parts.push(finishNode(factory2.createJSDocText(comments.join("")), linkEnd != null ? linkEnd : start, commentEnd));
                        parts.push(link);
                        comments = [];
                        linkEnd = scanner2.getTextPos();
                        break;
                      }
                    default:
                      state = 2 /* SavingComments */;
                      pushComment(scanner2.getTokenText());
                      break;
                  }
                  nextTokenJSDoc();
                }
              removeTrailingWhitespace(comments);
              if (parts.length && comments.length) {
                parts.push(finishNode(factory2.createJSDocText(comments.join("")), linkEnd != null ? linkEnd : start, commentsPos));
              }
              if (parts.length && tags)
                Debug.assertIsDefined(commentsPos, "having parsed tags implies that the end of the comment span should be set");
              const tagsArray = tags && createNodeArray(tags, tagsPos, tagsEnd);
              return finishNode(factory2.createJSDocComment(parts.length ? createNodeArray(parts, start, commentsPos) : comments.length ? comments.join("") : void 0, tagsArray), start, end);
            });
            function removeLeadingNewlines(comments2) {
              while (comments2.length && (comments2[0] === "\n" || comments2[0] === "\r")) {
                comments2.shift();
              }
            }
            function removeTrailingWhitespace(comments2) {
              while (comments2.length && comments2[comments2.length - 1].trim() === "") {
                comments2.pop();
              }
            }
            function isNextNonwhitespaceTokenEndOfFile() {
              while (true) {
                nextTokenJSDoc();
                if (token() === 1 /* EndOfFileToken */) {
                  return true;
                }
                if (!(token() === 5 /* WhitespaceTrivia */ || token() === 4 /* NewLineTrivia */)) {
                  return false;
                }
              }
            }
            function skipWhitespace() {
              if (token() === 5 /* WhitespaceTrivia */ || token() === 4 /* NewLineTrivia */) {
                if (lookAhead(isNextNonwhitespaceTokenEndOfFile)) {
                  return;
                }
              }
              while (token() === 5 /* WhitespaceTrivia */ || token() === 4 /* NewLineTrivia */) {
                nextTokenJSDoc();
              }
            }
            function skipWhitespaceOrAsterisk() {
              if (token() === 5 /* WhitespaceTrivia */ || token() === 4 /* NewLineTrivia */) {
                if (lookAhead(isNextNonwhitespaceTokenEndOfFile)) {
                  return "";
                }
              }
              let precedingLineBreak = scanner2.hasPrecedingLineBreak();
              let seenLineBreak = false;
              let indentText = "";
              while (precedingLineBreak && token() === 41 /* AsteriskToken */ || token() === 5 /* WhitespaceTrivia */ || token() === 4 /* NewLineTrivia */) {
                indentText += scanner2.getTokenText();
                if (token() === 4 /* NewLineTrivia */) {
                  precedingLineBreak = true;
                  seenLineBreak = true;
                  indentText = "";
                } else if (token() === 41 /* AsteriskToken */) {
                  precedingLineBreak = false;
                }
                nextTokenJSDoc();
              }
              return seenLineBreak ? indentText : "";
            }
            function parseTag(margin) {
              Debug.assert(token() === 59 /* AtToken */);
              const start2 = scanner2.getTokenPos();
              nextTokenJSDoc();
              const tagName = parseJSDocIdentifierName(
                /*message*/
                void 0
              );
              const indentText = skipWhitespaceOrAsterisk();
              let tag;
              switch (tagName.escapedText) {
                case "author":
                  tag = parseAuthorTag(start2, tagName, margin, indentText);
                  break;
                case "implements":
                  tag = parseImplementsTag(start2, tagName, margin, indentText);
                  break;
                case "augments":
                case "extends":
                  tag = parseAugmentsTag(start2, tagName, margin, indentText);
                  break;
                case "class":
                case "constructor":
                  tag = parseSimpleTag(start2, factory2.createJSDocClassTag, tagName, margin, indentText);
                  break;
                case "public":
                  tag = parseSimpleTag(start2, factory2.createJSDocPublicTag, tagName, margin, indentText);
                  break;
                case "private":
                  tag = parseSimpleTag(start2, factory2.createJSDocPrivateTag, tagName, margin, indentText);
                  break;
                case "protected":
                  tag = parseSimpleTag(start2, factory2.createJSDocProtectedTag, tagName, margin, indentText);
                  break;
                case "readonly":
                  tag = parseSimpleTag(start2, factory2.createJSDocReadonlyTag, tagName, margin, indentText);
                  break;
                case "override":
                  tag = parseSimpleTag(start2, factory2.createJSDocOverrideTag, tagName, margin, indentText);
                  break;
                case "deprecated":
                  hasDeprecatedTag = true;
                  tag = parseSimpleTag(start2, factory2.createJSDocDeprecatedTag, tagName, margin, indentText);
                  break;
                case "this":
                  tag = parseThisTag(start2, tagName, margin, indentText);
                  break;
                case "enum":
                  tag = parseEnumTag(start2, tagName, margin, indentText);
                  break;
                case "arg":
                case "argument":
                case "param":
                  return parseParameterOrPropertyTag(start2, tagName, 2 /* Parameter */, margin);
                case "return":
                case "returns":
                  tag = parseReturnTag(start2, tagName, margin, indentText);
                  break;
                case "template":
                  tag = parseTemplateTag(start2, tagName, margin, indentText);
                  break;
                case "type":
                  tag = parseTypeTag(start2, tagName, margin, indentText);
                  break;
                case "typedef":
                  tag = parseTypedefTag(start2, tagName, margin, indentText);
                  break;
                case "callback":
                  tag = parseCallbackTag(start2, tagName, margin, indentText);
                  break;
                case "overload":
                  tag = parseOverloadTag(start2, tagName, margin, indentText);
                  break;
                case "satisfies":
                  tag = parseSatisfiesTag(start2, tagName, margin, indentText);
                  break;
                case "see":
                  tag = parseSeeTag(start2, tagName, margin, indentText);
                  break;
                case "exception":
                case "throws":
                  tag = parseThrowsTag(start2, tagName, margin, indentText);
                  break;
                default:
                  tag = parseUnknownTag(start2, tagName, margin, indentText);
                  break;
              }
              return tag;
            }
            function parseTrailingTagComments(pos, end2, margin, indentText) {
              if (!indentText) {
                margin += end2 - pos;
              }
              return parseTagComments(margin, indentText.slice(margin));
            }
            function parseTagComments(indent2, initialMargin) {
              const commentsPos2 = getNodePos();
              let comments2 = [];
              const parts2 = [];
              let linkEnd2;
              let state = 0 /* BeginningOfLine */;
              let previousWhitespace = true;
              let margin;
              function pushComment(text) {
                if (!margin) {
                  margin = indent2;
                }
                comments2.push(text);
                indent2 += text.length;
              }
              if (initialMargin !== void 0) {
                if (initialMargin !== "") {
                  pushComment(initialMargin);
                }
                state = 1 /* SawAsterisk */;
              }
              let tok = token();
              loop:
                while (true) {
                  switch (tok) {
                    case 4 /* NewLineTrivia */:
                      state = 0 /* BeginningOfLine */;
                      comments2.push(scanner2.getTokenText());
                      indent2 = 0;
                      break;
                    case 59 /* AtToken */:
                      if (state === 3 /* SavingBackticks */ || state === 2 /* SavingComments */ && (!previousWhitespace || lookAhead(isNextJSDocTokenWhitespace))) {
                        comments2.push(scanner2.getTokenText());
                        break;
                      }
                      scanner2.setTextPos(scanner2.getTextPos() - 1);
                    case 1 /* EndOfFileToken */:
                      break loop;
                    case 5 /* WhitespaceTrivia */:
                      if (state === 2 /* SavingComments */ || state === 3 /* SavingBackticks */) {
                        pushComment(scanner2.getTokenText());
                      } else {
                        const whitespace = scanner2.getTokenText();
                        if (margin !== void 0 && indent2 + whitespace.length > margin) {
                          comments2.push(whitespace.slice(margin - indent2));
                        }
                        indent2 += whitespace.length;
                      }
                      break;
                    case 18 /* OpenBraceToken */:
                      state = 2 /* SavingComments */;
                      const commentEnd = scanner2.getStartPos();
                      const linkStart = scanner2.getTextPos() - 1;
                      const link = parseJSDocLink(linkStart);
                      if (link) {
                        parts2.push(finishNode(factory2.createJSDocText(comments2.join("")), linkEnd2 != null ? linkEnd2 : commentsPos2, commentEnd));
                        parts2.push(link);
                        comments2 = [];
                        linkEnd2 = scanner2.getTextPos();
                      } else {
                        pushComment(scanner2.getTokenText());
                      }
                      break;
                    case 61 /* BacktickToken */:
                      if (state === 3 /* SavingBackticks */) {
                        state = 2 /* SavingComments */;
                      } else {
                        state = 3 /* SavingBackticks */;
                      }
                      pushComment(scanner2.getTokenText());
                      break;
                    case 41 /* AsteriskToken */:
                      if (state === 0 /* BeginningOfLine */) {
                        state = 1 /* SawAsterisk */;
                        indent2 += 1;
                        break;
                      }
                    default:
                      if (state !== 3 /* SavingBackticks */) {
                        state = 2 /* SavingComments */;
                      }
                      pushComment(scanner2.getTokenText());
                      break;
                  }
                  previousWhitespace = token() === 5 /* WhitespaceTrivia */;
                  tok = nextTokenJSDoc();
                }
              removeLeadingNewlines(comments2);
              removeTrailingWhitespace(comments2);
              if (parts2.length) {
                if (comments2.length) {
                  parts2.push(finishNode(factory2.createJSDocText(comments2.join("")), linkEnd2 != null ? linkEnd2 : commentsPos2));
                }
                return createNodeArray(parts2, commentsPos2, scanner2.getTextPos());
              } else if (comments2.length) {
                return comments2.join("");
              }
            }
            function isNextJSDocTokenWhitespace() {
              const next = nextTokenJSDoc();
              return next === 5 /* WhitespaceTrivia */ || next === 4 /* NewLineTrivia */;
            }
            function parseJSDocLink(start2) {
              const linkType = tryParse(parseJSDocLinkPrefix);
              if (!linkType) {
                return void 0;
              }
              nextTokenJSDoc();
              skipWhitespace();
              const p2 = getNodePos();
              let name = tokenIsIdentifierOrKeyword(token()) ? parseEntityName(
                /*allowReservedWords*/
                true
              ) : void 0;
              if (name) {
                while (token() === 80 /* PrivateIdentifier */) {
                  reScanHashToken();
                  nextTokenJSDoc();
                  name = finishNode(factory2.createJSDocMemberName(name, parseIdentifier()), p2);
                }
              }
              const text = [];
              while (token() !== 19 /* CloseBraceToken */ && token() !== 4 /* NewLineTrivia */ && token() !== 1 /* EndOfFileToken */) {
                text.push(scanner2.getTokenText());
                nextTokenJSDoc();
              }
              const create = linkType === "link" ? factory2.createJSDocLink : linkType === "linkcode" ? factory2.createJSDocLinkCode : factory2.createJSDocLinkPlain;
              return finishNode(create(name, text.join("")), start2, scanner2.getTextPos());
            }
            function parseJSDocLinkPrefix() {
              skipWhitespaceOrAsterisk();
              if (token() === 18 /* OpenBraceToken */ && nextTokenJSDoc() === 59 /* AtToken */ && tokenIsIdentifierOrKeyword(nextTokenJSDoc())) {
                const kind = scanner2.getTokenValue();
                if (isJSDocLinkTag(kind))
                  return kind;
              }
            }
            function isJSDocLinkTag(kind) {
              return kind === "link" || kind === "linkcode" || kind === "linkplain";
            }
            function parseUnknownTag(start2, tagName, indent2, indentText) {
              return finishNode(factory2.createJSDocUnknownTag(tagName, parseTrailingTagComments(start2, getNodePos(), indent2, indentText)), start2);
            }
            function addTag(tag) {
              if (!tag) {
                return;
              }
              if (!tags) {
                tags = [tag];
                tagsPos = tag.pos;
              } else {
                tags.push(tag);
              }
              tagsEnd = tag.end;
            }
            function tryParseTypeExpression() {
              skipWhitespaceOrAsterisk();
              return token() === 18 /* OpenBraceToken */ ? parseJSDocTypeExpression() : void 0;
            }
            function parseBracketNameInPropertyAndParamTag() {
              const isBracketed = parseOptionalJsdoc(22 /* OpenBracketToken */);
              if (isBracketed) {
                skipWhitespace();
              }
              const isBackquoted = parseOptionalJsdoc(61 /* BacktickToken */);
              const name = parseJSDocEntityName();
              if (isBackquoted) {
                parseExpectedTokenJSDoc(61 /* BacktickToken */);
              }
              if (isBracketed) {
                skipWhitespace();
                if (parseOptionalToken(63 /* EqualsToken */)) {
                  parseExpression();
                }
                parseExpected(23 /* CloseBracketToken */);
              }
              return { name, isBracketed };
            }
            function isObjectOrObjectArrayTypeReference(node) {
              switch (node.kind) {
                case 149 /* ObjectKeyword */:
                  return true;
                case 185 /* ArrayType */:
                  return isObjectOrObjectArrayTypeReference(node.elementType);
                default:
                  return isTypeReferenceNode(node) && isIdentifier(node.typeName) && node.typeName.escapedText === "Object" && !node.typeArguments;
              }
            }
            function parseParameterOrPropertyTag(start2, tagName, target, indent2) {
              let typeExpression = tryParseTypeExpression();
              let isNameFirst = !typeExpression;
              skipWhitespaceOrAsterisk();
              const { name, isBracketed } = parseBracketNameInPropertyAndParamTag();
              const indentText = skipWhitespaceOrAsterisk();
              if (isNameFirst && !lookAhead(parseJSDocLinkPrefix)) {
                typeExpression = tryParseTypeExpression();
              }
              const comment = parseTrailingTagComments(start2, getNodePos(), indent2, indentText);
              const nestedTypeLiteral = target !== 4 /* CallbackParameter */ && parseNestedTypeLiteral(typeExpression, name, target, indent2);
              if (nestedTypeLiteral) {
                typeExpression = nestedTypeLiteral;
                isNameFirst = true;
              }
              const result = target === 1 /* Property */ ? factory2.createJSDocPropertyTag(tagName, name, isBracketed, typeExpression, isNameFirst, comment) : factory2.createJSDocParameterTag(tagName, name, isBracketed, typeExpression, isNameFirst, comment);
              return finishNode(result, start2);
            }
            function parseNestedTypeLiteral(typeExpression, name, target, indent2) {
              if (typeExpression && isObjectOrObjectArrayTypeReference(typeExpression.type)) {
                const pos = getNodePos();
                let child;
                let children;
                while (child = tryParse(() => parseChildParameterOrPropertyTag(target, indent2, name))) {
                  if (child.kind === 344 /* JSDocParameterTag */ || child.kind === 351 /* JSDocPropertyTag */) {
                    children = append(children, child);
                  }
                }
                if (children) {
                  const literal = finishNode(factory2.createJSDocTypeLiteral(children, typeExpression.type.kind === 185 /* ArrayType */), pos);
                  return finishNode(factory2.createJSDocTypeExpression(literal), pos);
                }
              }
            }
            function parseReturnTag(start2, tagName, indent2, indentText) {
              if (some(tags, isJSDocReturnTag)) {
                parseErrorAt(tagName.pos, scanner2.getTokenPos(), Diagnostics._0_tag_already_specified, tagName.escapedText);
              }
              const typeExpression = tryParseTypeExpression();
              return finishNode(factory2.createJSDocReturnTag(tagName, typeExpression, parseTrailingTagComments(start2, getNodePos(), indent2, indentText)), start2);
            }
            function parseTypeTag(start2, tagName, indent2, indentText) {
              if (some(tags, isJSDocTypeTag)) {
                parseErrorAt(tagName.pos, scanner2.getTokenPos(), Diagnostics._0_tag_already_specified, tagName.escapedText);
              }
              const typeExpression = parseJSDocTypeExpression(
                /*mayOmitBraces*/
                true
              );
              const comments2 = indent2 !== void 0 && indentText !== void 0 ? parseTrailingTagComments(start2, getNodePos(), indent2, indentText) : void 0;
              return finishNode(factory2.createJSDocTypeTag(tagName, typeExpression, comments2), start2);
            }
            function parseSeeTag(start2, tagName, indent2, indentText) {
              const isMarkdownOrJSDocLink = token() === 22 /* OpenBracketToken */ || lookAhead(() => nextTokenJSDoc() === 59 /* AtToken */ && tokenIsIdentifierOrKeyword(nextTokenJSDoc()) && isJSDocLinkTag(scanner2.getTokenValue()));
              const nameExpression = isMarkdownOrJSDocLink ? void 0 : parseJSDocNameReference();
              const comments2 = indent2 !== void 0 && indentText !== void 0 ? parseTrailingTagComments(start2, getNodePos(), indent2, indentText) : void 0;
              return finishNode(factory2.createJSDocSeeTag(tagName, nameExpression, comments2), start2);
            }
            function parseThrowsTag(start2, tagName, indent2, indentText) {
              const typeExpression = tryParseTypeExpression();
              const comment = parseTrailingTagComments(start2, getNodePos(), indent2, indentText);
              return finishNode(factory2.createJSDocThrowsTag(tagName, typeExpression, comment), start2);
            }
            function parseAuthorTag(start2, tagName, indent2, indentText) {
              const commentStart = getNodePos();
              const textOnly = parseAuthorNameAndEmail();
              let commentEnd = scanner2.getStartPos();
              const comments2 = parseTrailingTagComments(start2, commentEnd, indent2, indentText);
              if (!comments2) {
                commentEnd = scanner2.getStartPos();
              }
              const allParts = typeof comments2 !== "string" ? createNodeArray(concatenate([finishNode(textOnly, commentStart, commentEnd)], comments2), commentStart) : textOnly.text + comments2;
              return finishNode(factory2.createJSDocAuthorTag(tagName, allParts), start2);
            }
            function parseAuthorNameAndEmail() {
              const comments2 = [];
              let inEmail = false;
              let token2 = scanner2.getToken();
              while (token2 !== 1 /* EndOfFileToken */ && token2 !== 4 /* NewLineTrivia */) {
                if (token2 === 29 /* LessThanToken */) {
                  inEmail = true;
                } else if (token2 === 59 /* AtToken */ && !inEmail) {
                  break;
                } else if (token2 === 31 /* GreaterThanToken */ && inEmail) {
                  comments2.push(scanner2.getTokenText());
                  scanner2.setTextPos(scanner2.getTokenPos() + 1);
                  break;
                }
                comments2.push(scanner2.getTokenText());
                token2 = nextTokenJSDoc();
              }
              return factory2.createJSDocText(comments2.join(""));
            }
            function parseImplementsTag(start2, tagName, margin, indentText) {
              const className = parseExpressionWithTypeArgumentsForAugments();
              return finishNode(factory2.createJSDocImplementsTag(tagName, className, parseTrailingTagComments(start2, getNodePos(), margin, indentText)), start2);
            }
            function parseAugmentsTag(start2, tagName, margin, indentText) {
              const className = parseExpressionWithTypeArgumentsForAugments();
              return finishNode(factory2.createJSDocAugmentsTag(tagName, className, parseTrailingTagComments(start2, getNodePos(), margin, indentText)), start2);
            }
            function parseSatisfiesTag(start2, tagName, margin, indentText) {
              const typeExpression = parseJSDocTypeExpression(
                /*mayOmitBraces*/
                false
              );
              const comments2 = margin !== void 0 && indentText !== void 0 ? parseTrailingTagComments(start2, getNodePos(), margin, indentText) : void 0;
              return finishNode(factory2.createJSDocSatisfiesTag(tagName, typeExpression, comments2), start2);
            }
            function parseExpressionWithTypeArgumentsForAugments() {
              const usedBrace = parseOptional(18 /* OpenBraceToken */);
              const pos = getNodePos();
              const expression = parsePropertyAccessEntityNameExpression();
              const typeArguments = tryParseTypeArguments();
              const node = factory2.createExpressionWithTypeArguments(expression, typeArguments);
              const res = finishNode(node, pos);
              if (usedBrace) {
                parseExpected(19 /* CloseBraceToken */);
              }
              return res;
            }
            function parsePropertyAccessEntityNameExpression() {
              const pos = getNodePos();
              let node = parseJSDocIdentifierName();
              while (parseOptional(24 /* DotToken */)) {
                const name = parseJSDocIdentifierName();
                node = finishNode(factoryCreatePropertyAccessExpression(node, name), pos);
              }
              return node;
            }
            function parseSimpleTag(start2, createTag, tagName, margin, indentText) {
              return finishNode(createTag(tagName, parseTrailingTagComments(start2, getNodePos(), margin, indentText)), start2);
            }
            function parseThisTag(start2, tagName, margin, indentText) {
              const typeExpression = parseJSDocTypeExpression(
                /*mayOmitBraces*/
                true
              );
              skipWhitespace();
              return finishNode(factory2.createJSDocThisTag(tagName, typeExpression, parseTrailingTagComments(start2, getNodePos(), margin, indentText)), start2);
            }
            function parseEnumTag(start2, tagName, margin, indentText) {
              const typeExpression = parseJSDocTypeExpression(
                /*mayOmitBraces*/
                true
              );
              skipWhitespace();
              return finishNode(factory2.createJSDocEnumTag(tagName, typeExpression, parseTrailingTagComments(start2, getNodePos(), margin, indentText)), start2);
            }
            function parseTypedefTag(start2, tagName, indent2, indentText) {
              var _a2;
              let typeExpression = tryParseTypeExpression();
              skipWhitespaceOrAsterisk();
              const fullName = parseJSDocTypeNameWithNamespace();
              skipWhitespace();
              let comment = parseTagComments(indent2);
              let end2;
              if (!typeExpression || isObjectOrObjectArrayTypeReference(typeExpression.type)) {
                let child;
                let childTypeTag;
                let jsDocPropertyTags;
                let hasChildren = false;
                while (child = tryParse(() => parseChildPropertyTag(indent2))) {
                  hasChildren = true;
                  if (child.kind === 347 /* JSDocTypeTag */) {
                    if (childTypeTag) {
                      const lastError = parseErrorAtCurrentToken(Diagnostics.A_JSDoc_typedef_comment_may_not_contain_multiple_type_tags);
                      if (lastError) {
                        addRelatedInfo(lastError, createDetachedDiagnostic(fileName, 0, 0, Diagnostics.The_tag_was_first_specified_here));
                      }
                      break;
                    } else {
                      childTypeTag = child;
                    }
                  } else {
                    jsDocPropertyTags = append(jsDocPropertyTags, child);
                  }
                }
                if (hasChildren) {
                  const isArrayType = typeExpression && typeExpression.type.kind === 185 /* ArrayType */;
                  const jsdocTypeLiteral = factory2.createJSDocTypeLiteral(jsDocPropertyTags, isArrayType);
                  typeExpression = childTypeTag && childTypeTag.typeExpression && !isObjectOrObjectArrayTypeReference(childTypeTag.typeExpression.type) ? childTypeTag.typeExpression : finishNode(jsdocTypeLiteral, start2);
                  end2 = typeExpression.end;
                }
              }
              end2 = end2 || comment !== void 0 ? getNodePos() : ((_a2 = fullName != null ? fullName : typeExpression) != null ? _a2 : tagName).end;
              if (!comment) {
                comment = parseTrailingTagComments(start2, end2, indent2, indentText);
              }
              const typedefTag = factory2.createJSDocTypedefTag(tagName, typeExpression, fullName, comment);
              return finishNode(typedefTag, start2, end2);
            }
            function parseJSDocTypeNameWithNamespace(nested) {
              const pos = scanner2.getTokenPos();
              if (!tokenIsIdentifierOrKeyword(token())) {
                return void 0;
              }
              const typeNameOrNamespaceName = parseJSDocIdentifierName();
              if (parseOptional(24 /* DotToken */)) {
                const body = parseJSDocTypeNameWithNamespace(
                  /*nested*/
                  true
                );
                const jsDocNamespaceNode = factory2.createModuleDeclaration(
                  /*modifiers*/
                  void 0,
                  typeNameOrNamespaceName,
                  body,
                  nested ? 4 /* NestedNamespace */ : void 0
                );
                return finishNode(jsDocNamespaceNode, pos);
              }
              if (nested) {
                typeNameOrNamespaceName.flags |= 2048 /* IdentifierIsInJSDocNamespace */;
              }
              return typeNameOrNamespaceName;
            }
            function parseCallbackTagParameters(indent2) {
              const pos = getNodePos();
              let child;
              let parameters;
              while (child = tryParse(() => parseChildParameterOrPropertyTag(4 /* CallbackParameter */, indent2))) {
                parameters = append(parameters, child);
              }
              return createNodeArray(parameters || [], pos);
            }
            function parseJSDocSignature(start2, indent2) {
              const parameters = parseCallbackTagParameters(indent2);
              const returnTag = tryParse(() => {
                if (parseOptionalJsdoc(59 /* AtToken */)) {
                  const tag = parseTag(indent2);
                  if (tag && tag.kind === 345 /* JSDocReturnTag */) {
                    return tag;
                  }
                }
              });
              return finishNode(factory2.createJSDocSignature(
                /*typeParameters*/
                void 0,
                parameters,
                returnTag
              ), start2);
            }
            function parseCallbackTag(start2, tagName, indent2, indentText) {
              const fullName = parseJSDocTypeNameWithNamespace();
              skipWhitespace();
              let comment = parseTagComments(indent2);
              const typeExpression = parseJSDocSignature(start2, indent2);
              if (!comment) {
                comment = parseTrailingTagComments(start2, getNodePos(), indent2, indentText);
              }
              const end2 = comment !== void 0 ? getNodePos() : typeExpression.end;
              return finishNode(factory2.createJSDocCallbackTag(tagName, typeExpression, fullName, comment), start2, end2);
            }
            function parseOverloadTag(start2, tagName, indent2, indentText) {
              skipWhitespace();
              let comment = parseTagComments(indent2);
              const typeExpression = parseJSDocSignature(start2, indent2);
              if (!comment) {
                comment = parseTrailingTagComments(start2, getNodePos(), indent2, indentText);
              }
              const end2 = comment !== void 0 ? getNodePos() : typeExpression.end;
              return finishNode(factory2.createJSDocOverloadTag(tagName, typeExpression, comment), start2, end2);
            }
            function escapedTextsEqual(a, b) {
              while (!isIdentifier(a) || !isIdentifier(b)) {
                if (!isIdentifier(a) && !isIdentifier(b) && a.right.escapedText === b.right.escapedText) {
                  a = a.left;
                  b = b.left;
                } else {
                  return false;
                }
              }
              return a.escapedText === b.escapedText;
            }
            function parseChildPropertyTag(indent2) {
              return parseChildParameterOrPropertyTag(1 /* Property */, indent2);
            }
            function parseChildParameterOrPropertyTag(target, indent2, name) {
              let canParseTag = true;
              let seenAsterisk = false;
              while (true) {
                switch (nextTokenJSDoc()) {
                  case 59 /* AtToken */:
                    if (canParseTag) {
                      const child = tryParseChildTag(target, indent2);
                      if (child && (child.kind === 344 /* JSDocParameterTag */ || child.kind === 351 /* JSDocPropertyTag */) && target !== 4 /* CallbackParameter */ && name && (isIdentifier(child.name) || !escapedTextsEqual(name, child.name.left))) {
                        return false;
                      }
                      return child;
                    }
                    seenAsterisk = false;
                    break;
                  case 4 /* NewLineTrivia */:
                    canParseTag = true;
                    seenAsterisk = false;
                    break;
                  case 41 /* AsteriskToken */:
                    if (seenAsterisk) {
                      canParseTag = false;
                    }
                    seenAsterisk = true;
                    break;
                  case 79 /* Identifier */:
                    canParseTag = false;
                    break;
                  case 1 /* EndOfFileToken */:
                    return false;
                }
              }
            }
            function tryParseChildTag(target, indent2) {
              Debug.assert(token() === 59 /* AtToken */);
              const start2 = scanner2.getStartPos();
              nextTokenJSDoc();
              const tagName = parseJSDocIdentifierName();
              skipWhitespace();
              let t;
              switch (tagName.escapedText) {
                case "type":
                  return target === 1 /* Property */ && parseTypeTag(start2, tagName);
                case "prop":
                case "property":
                  t = 1 /* Property */;
                  break;
                case "arg":
                case "argument":
                case "param":
                  t = 2 /* Parameter */ | 4 /* CallbackParameter */;
                  break;
                default:
                  return false;
              }
              if (!(target & t)) {
                return false;
              }
              return parseParameterOrPropertyTag(start2, tagName, target, indent2);
            }
            function parseTemplateTagTypeParameter() {
              const typeParameterPos = getNodePos();
              const isBracketed = parseOptionalJsdoc(22 /* OpenBracketToken */);
              if (isBracketed) {
                skipWhitespace();
              }
              const name = parseJSDocIdentifierName(Diagnostics.Unexpected_token_A_type_parameter_name_was_expected_without_curly_braces);
              let defaultType;
              if (isBracketed) {
                skipWhitespace();
                parseExpected(63 /* EqualsToken */);
                defaultType = doInsideOfContext(8388608 /* JSDoc */, parseJSDocType);
                parseExpected(23 /* CloseBracketToken */);
              }
              if (nodeIsMissing(name)) {
                return void 0;
              }
              return finishNode(factory2.createTypeParameterDeclaration(
                /*modifiers*/
                void 0,
                name,
                /*constraint*/
                void 0,
                defaultType
              ), typeParameterPos);
            }
            function parseTemplateTagTypeParameters() {
              const pos = getNodePos();
              const typeParameters = [];
              do {
                skipWhitespace();
                const node = parseTemplateTagTypeParameter();
                if (node !== void 0) {
                  typeParameters.push(node);
                }
                skipWhitespaceOrAsterisk();
              } while (parseOptionalJsdoc(27 /* CommaToken */));
              return createNodeArray(typeParameters, pos);
            }
            function parseTemplateTag(start2, tagName, indent2, indentText) {
              const constraint = token() === 18 /* OpenBraceToken */ ? parseJSDocTypeExpression() : void 0;
              const typeParameters = parseTemplateTagTypeParameters();
              return finishNode(factory2.createJSDocTemplateTag(tagName, constraint, typeParameters, parseTrailingTagComments(start2, getNodePos(), indent2, indentText)), start2);
            }
            function parseOptionalJsdoc(t) {
              if (token() === t) {
                nextTokenJSDoc();
                return true;
              }
              return false;
            }
            function parseJSDocEntityName() {
              let entity = parseJSDocIdentifierName();
              if (parseOptional(22 /* OpenBracketToken */)) {
                parseExpected(23 /* CloseBracketToken */);
              }
              while (parseOptional(24 /* DotToken */)) {
                const name = parseJSDocIdentifierName();
                if (parseOptional(22 /* OpenBracketToken */)) {
                  parseExpected(23 /* CloseBracketToken */);
                }
                entity = createQualifiedName(entity, name);
              }
              return entity;
            }
            function parseJSDocIdentifierName(message) {
              if (!tokenIsIdentifierOrKeyword(token())) {
                return createMissingNode(
                  79 /* Identifier */,
                  /*reportAtCurrentPosition*/
                  !message,
                  message || Diagnostics.Identifier_expected
                );
              }
              identifierCount++;
              const pos = scanner2.getTokenPos();
              const end2 = scanner2.getTextPos();
              const originalKeywordKind = token();
              const text = internIdentifier(scanner2.getTokenValue());
              const result = finishNode(factoryCreateIdentifier(text, originalKeywordKind), pos, end2);
              nextTokenJSDoc();
              return result;
            }
          }
        })(JSDocParser = Parser2.JSDocParser || (Parser2.JSDocParser = {}));
      })(Parser || (Parser = {}));
      ((IncrementalParser2) => {
        function updateSourceFile2(sourceFile, newText, textChangeRange, aggressiveChecks) {
          aggressiveChecks = aggressiveChecks || Debug.shouldAssert(2 /* Aggressive */);
          checkChangeRange(sourceFile, newText, textChangeRange, aggressiveChecks);
          if (textChangeRangeIsUnchanged(textChangeRange)) {
            return sourceFile;
          }
          if (sourceFile.statements.length === 0) {
            return Parser.parseSourceFile(
              sourceFile.fileName,
              newText,
              sourceFile.languageVersion,
              /*syntaxCursor*/
              void 0,
              /*setParentNodes*/
              true,
              sourceFile.scriptKind,
              sourceFile.setExternalModuleIndicator
            );
          }
          const incrementalSourceFile = sourceFile;
          Debug.assert(!incrementalSourceFile.hasBeenIncrementallyParsed);
          incrementalSourceFile.hasBeenIncrementallyParsed = true;
          Parser.fixupParentReferences(incrementalSourceFile);
          const oldText = sourceFile.text;
          const syntaxCursor = createSyntaxCursor(sourceFile);
          const changeRange = extendToAffectedRange(sourceFile, textChangeRange);
          checkChangeRange(sourceFile, newText, changeRange, aggressiveChecks);
          Debug.assert(changeRange.span.start <= textChangeRange.span.start);
          Debug.assert(textSpanEnd(changeRange.span) === textSpanEnd(textChangeRange.span));
          Debug.assert(textSpanEnd(textChangeRangeNewSpan(changeRange)) === textSpanEnd(textChangeRangeNewSpan(textChangeRange)));
          const delta = textChangeRangeNewSpan(changeRange).length - changeRange.span.length;
          updateTokenPositionsAndMarkElements(
            incrementalSourceFile,
            changeRange.span.start,
            textSpanEnd(changeRange.span),
            textSpanEnd(textChangeRangeNewSpan(changeRange)),
            delta,
            oldText,
            newText,
            aggressiveChecks
          );
          const result = Parser.parseSourceFile(
            sourceFile.fileName,
            newText,
            sourceFile.languageVersion,
            syntaxCursor,
            /*setParentNodes*/
            true,
            sourceFile.scriptKind,
            sourceFile.setExternalModuleIndicator
          );
          result.commentDirectives = getNewCommentDirectives(
            sourceFile.commentDirectives,
            result.commentDirectives,
            changeRange.span.start,
            textSpanEnd(changeRange.span),
            delta,
            oldText,
            newText,
            aggressiveChecks
          );
          result.impliedNodeFormat = sourceFile.impliedNodeFormat;
          return result;
        }
        IncrementalParser2.updateSourceFile = updateSourceFile2;
        function getNewCommentDirectives(oldDirectives, newDirectives, changeStart, changeRangeOldEnd, delta, oldText, newText, aggressiveChecks) {
          if (!oldDirectives)
            return newDirectives;
          let commentDirectives;
          let addedNewlyScannedDirectives = false;
          for (const directive of oldDirectives) {
            const { range, type } = directive;
            if (range.end < changeStart) {
              commentDirectives = append(commentDirectives, directive);
            } else if (range.pos > changeRangeOldEnd) {
              addNewlyScannedDirectives();
              const updatedDirective = {
                range: { pos: range.pos + delta, end: range.end + delta },
                type
              };
              commentDirectives = append(commentDirectives, updatedDirective);
              if (aggressiveChecks) {
                Debug.assert(oldText.substring(range.pos, range.end) === newText.substring(updatedDirective.range.pos, updatedDirective.range.end));
              }
            }
          }
          addNewlyScannedDirectives();
          return commentDirectives;
          function addNewlyScannedDirectives() {
            if (addedNewlyScannedDirectives)
              return;
            addedNewlyScannedDirectives = true;
            if (!commentDirectives) {
              commentDirectives = newDirectives;
            } else if (newDirectives) {
              commentDirectives.push(...newDirectives);
            }
          }
        }
        function moveElementEntirelyPastChangeRange(element, isArray2, delta, oldText, newText, aggressiveChecks) {
          if (isArray2) {
            visitArray2(element);
          } else {
            visitNode3(element);
          }
          return;
          function visitNode3(node) {
            let text = "";
            if (aggressiveChecks && shouldCheckNode(node)) {
              text = oldText.substring(node.pos, node.end);
            }
            if (node._children) {
              node._children = void 0;
            }
            setTextRangePosEnd(node, node.pos + delta, node.end + delta);
            if (aggressiveChecks && shouldCheckNode(node)) {
              Debug.assert(text === newText.substring(node.pos, node.end));
            }
            forEachChild(node, visitNode3, visitArray2);
            if (hasJSDocNodes(node)) {
              for (const jsDocComment of node.jsDoc) {
                visitNode3(jsDocComment);
              }
            }
            checkNodePositions(node, aggressiveChecks);
          }
          function visitArray2(array) {
            array._children = void 0;
            setTextRangePosEnd(array, array.pos + delta, array.end + delta);
            for (const node of array) {
              visitNode3(node);
            }
          }
        }
        function shouldCheckNode(node) {
          switch (node.kind) {
            case 10 /* StringLiteral */:
            case 8 /* NumericLiteral */:
            case 79 /* Identifier */:
              return true;
          }
          return false;
        }
        function adjustIntersectingElement(element, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta) {
          Debug.assert(element.end >= changeStart, "Adjusting an element that was entirely before the change range");
          Debug.assert(element.pos <= changeRangeOldEnd, "Adjusting an element that was entirely after the change range");
          Debug.assert(element.pos <= element.end);
          const pos = Math.min(element.pos, changeRangeNewEnd);
          const end = element.end >= changeRangeOldEnd ? (
            // Element ends after the change range.  Always adjust the end pos.
            element.end + delta
          ) : (
            // Element ends in the change range.  The element will keep its position if
            // possible. Or Move backward to the new-end if it's in the 'Y' range.
            Math.min(element.end, changeRangeNewEnd)
          );
          Debug.assert(pos <= end);
          if (element.parent) {
            Debug.assertGreaterThanOrEqual(pos, element.parent.pos);
            Debug.assertLessThanOrEqual(end, element.parent.end);
          }
          setTextRangePosEnd(element, pos, end);
        }
        function checkNodePositions(node, aggressiveChecks) {
          if (aggressiveChecks) {
            let pos = node.pos;
            const visitNode3 = (child) => {
              Debug.assert(child.pos >= pos);
              pos = child.end;
            };
            if (hasJSDocNodes(node)) {
              for (const jsDocComment of node.jsDoc) {
                visitNode3(jsDocComment);
              }
            }
            forEachChild(node, visitNode3);
            Debug.assert(pos <= node.end);
          }
        }
        function updateTokenPositionsAndMarkElements(sourceFile, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta, oldText, newText, aggressiveChecks) {
          visitNode3(sourceFile);
          return;
          function visitNode3(child) {
            Debug.assert(child.pos <= child.end);
            if (child.pos > changeRangeOldEnd) {
              moveElementEntirelyPastChangeRange(
                child,
                /*isArray*/
                false,
                delta,
                oldText,
                newText,
                aggressiveChecks
              );
              return;
            }
            const fullEnd = child.end;
            if (fullEnd >= changeStart) {
              child.intersectsChange = true;
              child._children = void 0;
              adjustIntersectingElement(child, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta);
              forEachChild(child, visitNode3, visitArray2);
              if (hasJSDocNodes(child)) {
                for (const jsDocComment of child.jsDoc) {
                  visitNode3(jsDocComment);
                }
              }
              checkNodePositions(child, aggressiveChecks);
              return;
            }
            Debug.assert(fullEnd < changeStart);
          }
          function visitArray2(array) {
            Debug.assert(array.pos <= array.end);
            if (array.pos > changeRangeOldEnd) {
              moveElementEntirelyPastChangeRange(
                array,
                /*isArray*/
                true,
                delta,
                oldText,
                newText,
                aggressiveChecks
              );
              return;
            }
            const fullEnd = array.end;
            if (fullEnd >= changeStart) {
              array.intersectsChange = true;
              array._children = void 0;
              adjustIntersectingElement(array, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta);
              for (const node of array) {
                visitNode3(node);
              }
              return;
            }
            Debug.assert(fullEnd < changeStart);
          }
        }
        function extendToAffectedRange(sourceFile, changeRange) {
          const maxLookahead = 1;
          let start = changeRange.span.start;
          for (let i = 0; start > 0 && i <= maxLookahead; i++) {
            const nearestNode = findNearestNodeStartingBeforeOrAtPosition(sourceFile, start);
            Debug.assert(nearestNode.pos <= start);
            const position = nearestNode.pos;
            start = Math.max(0, position - 1);
          }
          const finalSpan = createTextSpanFromBounds(start, textSpanEnd(changeRange.span));
          const finalLength = changeRange.newLength + (changeRange.span.start - start);
          return createTextChangeRange(finalSpan, finalLength);
        }
        function findNearestNodeStartingBeforeOrAtPosition(sourceFile, position) {
          let bestResult = sourceFile;
          let lastNodeEntirelyBeforePosition;
          forEachChild(sourceFile, visit);
          if (lastNodeEntirelyBeforePosition) {
            const lastChildOfLastEntireNodeBeforePosition = getLastDescendant(lastNodeEntirelyBeforePosition);
            if (lastChildOfLastEntireNodeBeforePosition.pos > bestResult.pos) {
              bestResult = lastChildOfLastEntireNodeBeforePosition;
            }
          }
          return bestResult;
          function getLastDescendant(node) {
            while (true) {
              const lastChild = getLastChild(node);
              if (lastChild) {
                node = lastChild;
              } else {
                return node;
              }
            }
          }
          function visit(child) {
            if (nodeIsMissing(child)) {
              return;
            }
            if (child.pos <= position) {
              if (child.pos >= bestResult.pos) {
                bestResult = child;
              }
              if (position < child.end) {
                forEachChild(child, visit);
                return true;
              } else {
                Debug.assert(child.end <= position);
                lastNodeEntirelyBeforePosition = child;
              }
            } else {
              Debug.assert(child.pos > position);
              return true;
            }
          }
        }
        function checkChangeRange(sourceFile, newText, textChangeRange, aggressiveChecks) {
          const oldText = sourceFile.text;
          if (textChangeRange) {
            Debug.assert(oldText.length - textChangeRange.span.length + textChangeRange.newLength === newText.length);
            if (aggressiveChecks || Debug.shouldAssert(3 /* VeryAggressive */)) {
              const oldTextPrefix = oldText.substr(0, textChangeRange.span.start);
              const newTextPrefix = newText.substr(0, textChangeRange.span.start);
              Debug.assert(oldTextPrefix === newTextPrefix);
              const oldTextSuffix = oldText.substring(textSpanEnd(textChangeRange.span), oldText.length);
              const newTextSuffix = newText.substring(textSpanEnd(textChangeRangeNewSpan(textChangeRange)), newText.length);
              Debug.assert(oldTextSuffix === newTextSuffix);
            }
          }
        }
        function createSyntaxCursor(sourceFile) {
          let currentArray = sourceFile.statements;
          let currentArrayIndex = 0;
          Debug.assert(currentArrayIndex < currentArray.length);
          let current = currentArray[currentArrayIndex];
          let lastQueriedPosition = -1 /* Value */;
          return {
            currentNode(position) {
              if (position !== lastQueriedPosition) {
                if (current && current.end === position && currentArrayIndex < currentArray.length - 1) {
                  currentArrayIndex++;
                  current = currentArray[currentArrayIndex];
                }
                if (!current || current.pos !== position) {
                  findHighestListElementThatStartsAtPosition(position);
                }
              }
              lastQueriedPosition = position;
              Debug.assert(!current || current.pos === position);
              return current;
            }
          };
          function findHighestListElementThatStartsAtPosition(position) {
            currentArray = void 0;
            currentArrayIndex = -1 /* Value */;
            current = void 0;
            forEachChild(sourceFile, visitNode3, visitArray2);
            return;
            function visitNode3(node) {
              if (position >= node.pos && position < node.end) {
                forEachChild(node, visitNode3, visitArray2);
                return true;
              }
              return false;
            }
            function visitArray2(array) {
              if (position >= array.pos && position < array.end) {
                for (let i = 0; i < array.length; i++) {
                  const child = array[i];
                  if (child) {
                    if (child.pos === position) {
                      currentArray = array;
                      currentArrayIndex = i;
                      current = child;
                      return true;
                    } else {
                      if (child.pos < position && position < child.end) {
                        forEachChild(child, visitNode3, visitArray2);
                        return true;
                      }
                    }
                  }
                }
              }
              return false;
            }
          }
        }
        IncrementalParser2.createSyntaxCursor = createSyntaxCursor;
        let InvalidPosition;
        ((InvalidPosition2) => {
          InvalidPosition2[InvalidPosition2["Value"] = -1] = "Value";
        })(InvalidPosition || (InvalidPosition = {}));
      })(IncrementalParser || (IncrementalParser = {}));
      namedArgRegExCache = /* @__PURE__ */ new Map();
      tripleSlashXMLCommentStartRegEx = /^\/\/\/\s*<(\S+)\s.*?\/>/im;
      singleLinePragmaRegEx = /^\/\/\/?\s*@(\S+)\s*(.*)\s*$/im;
    }
  });

  // src/compiler/commandLineParser.ts
  function createOptionNameMap(optionDeclarations2) {
    const optionsNameMap = /* @__PURE__ */ new Map();
    const shortOptionNames = /* @__PURE__ */ new Map();
    forEach(optionDeclarations2, (option) => {
      optionsNameMap.set(option.name.toLowerCase(), option);
      if (option.shortName) {
        shortOptionNames.set(option.shortName, option.name);
      }
    });
    return { optionsNameMap, shortOptionNames };
  }
  function getOptionsNameMap() {
    return optionsNameMapCache || (optionsNameMapCache = createOptionNameMap(optionDeclarations));
  }
  function createCompilerDiagnosticForInvalidCustomType(opt) {
    return createDiagnosticForInvalidCustomType(opt, createCompilerDiagnostic);
  }
  function createDiagnosticForInvalidCustomType(opt, createDiagnostic) {
    const namesOfType = arrayFrom(opt.type.keys());
    const stringNames = (opt.deprecatedKeys ? namesOfType.filter((k) => !opt.deprecatedKeys.has(k)) : namesOfType).map((key) => `'${key}'`).join(", ");
    return createDiagnostic(Diagnostics.Argument_for_0_option_must_be_Colon_1, `--${opt.name}`, stringNames);
  }
  function parseCustomTypeOption(opt, value, errors) {
    return convertJsonOptionOfCustomType(opt, trimString(value || ""), errors);
  }
  function parseListTypeOption(opt, value = "", errors) {
    value = trimString(value);
    if (startsWith(value, "-")) {
      return void 0;
    }
    if (opt.type === "listOrElement" && !stringContains(value, ",")) {
      return validateJsonOptionValue(opt, value, errors);
    }
    if (value === "") {
      return [];
    }
    const values = value.split(",");
    switch (opt.element.type) {
      case "number":
        return mapDefined(values, (v) => validateJsonOptionValue(opt.element, parseInt(v), errors));
      case "string":
        return mapDefined(values, (v) => validateJsonOptionValue(opt.element, v || "", errors));
      case "boolean":
      case "object":
        return Debug.fail(`List of ${opt.element.type} is not yet supported.`);
      default:
        return mapDefined(values, (v) => parseCustomTypeOption(opt.element, v, errors));
    }
  }
  function getOptionName(option) {
    return option.name;
  }
  function createUnknownOptionError(unknownOption, diagnostics, createDiagnostics, unknownOptionErrorText) {
    var _a2;
    if ((_a2 = diagnostics.alternateMode) == null ? void 0 : _a2.getOptionsNameMap().optionsNameMap.has(unknownOption.toLowerCase())) {
      return createDiagnostics(diagnostics.alternateMode.diagnostic, unknownOption);
    }
    const possibleOption = getSpellingSuggestion(unknownOption, diagnostics.optionDeclarations, getOptionName);
    return possibleOption ? createDiagnostics(diagnostics.unknownDidYouMeanDiagnostic, unknownOptionErrorText || unknownOption, possibleOption.name) : createDiagnostics(diagnostics.unknownOptionDiagnostic, unknownOptionErrorText || unknownOption);
  }
  function parseCommandLineWorker(diagnostics, commandLine, readFile) {
    const options = {};
    let watchOptions;
    const fileNames = [];
    const errors = [];
    parseStrings(commandLine);
    return {
      options,
      watchOptions,
      fileNames,
      errors
    };
    function parseStrings(args) {
      let i = 0;
      while (i < args.length) {
        const s = args[i];
        i++;
        if (s.charCodeAt(0) === 64 /* at */) {
          parseResponseFile(s.slice(1));
        } else if (s.charCodeAt(0) === 45 /* minus */) {
          const inputOptionName = s.slice(s.charCodeAt(1) === 45 /* minus */ ? 2 : 1);
          const opt = getOptionDeclarationFromName(
            diagnostics.getOptionsNameMap,
            inputOptionName,
            /*allowShort*/
            true
          );
          if (opt) {
            i = parseOptionValue(args, i, diagnostics, opt, options, errors);
          } else {
            const watchOpt = getOptionDeclarationFromName(
              watchOptionsDidYouMeanDiagnostics.getOptionsNameMap,
              inputOptionName,
              /*allowShort*/
              true
            );
            if (watchOpt) {
              i = parseOptionValue(args, i, watchOptionsDidYouMeanDiagnostics, watchOpt, watchOptions || (watchOptions = {}), errors);
            } else {
              errors.push(createUnknownOptionError(inputOptionName, diagnostics, createCompilerDiagnostic, s));
            }
          }
        } else {
          fileNames.push(s);
        }
      }
    }
    function parseResponseFile(fileName) {
      const text = tryReadFile(fileName, readFile || ((fileName2) => sys.readFile(fileName2)));
      if (!isString(text)) {
        errors.push(text);
        return;
      }
      const args = [];
      let pos = 0;
      while (true) {
        while (pos < text.length && text.charCodeAt(pos) <= 32 /* space */)
          pos++;
        if (pos >= text.length)
          break;
        const start = pos;
        if (text.charCodeAt(start) === 34 /* doubleQuote */) {
          pos++;
          while (pos < text.length && text.charCodeAt(pos) !== 34 /* doubleQuote */)
            pos++;
          if (pos < text.length) {
            args.push(text.substring(start + 1, pos));
            pos++;
          } else {
            errors.push(createCompilerDiagnostic(Diagnostics.Unterminated_quoted_string_in_response_file_0, fileName));
          }
        } else {
          while (text.charCodeAt(pos) > 32 /* space */)
            pos++;
          args.push(text.substring(start, pos));
        }
      }
      parseStrings(args);
    }
  }
  function parseOptionValue(args, i, diagnostics, opt, options, errors) {
    if (opt.isTSConfigOnly) {
      const optValue = args[i];
      if (optValue === "null") {
        options[opt.name] = void 0;
        i++;
      } else if (opt.type === "boolean") {
        if (optValue === "false") {
          options[opt.name] = validateJsonOptionValue(
            opt,
            /*value*/
            false,
            errors
          );
          i++;
        } else {
          if (optValue === "true")
            i++;
          errors.push(createCompilerDiagnostic(Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line, opt.name));
        }
      } else {
        errors.push(createCompilerDiagnostic(Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line, opt.name));
        if (optValue && !startsWith(optValue, "-"))
          i++;
      }
    } else {
      if (!args[i] && opt.type !== "boolean") {
        errors.push(createCompilerDiagnostic(diagnostics.optionTypeMismatchDiagnostic, opt.name, getCompilerOptionValueTypeString(opt)));
      }
      if (args[i] !== "null") {
        switch (opt.type) {
          case "number":
            options[opt.name] = validateJsonOptionValue(opt, parseInt(args[i]), errors);
            i++;
            break;
          case "boolean":
            const optValue = args[i];
            options[opt.name] = validateJsonOptionValue(opt, optValue !== "false", errors);
            if (optValue === "false" || optValue === "true") {
              i++;
            }
            break;
          case "string":
            options[opt.name] = validateJsonOptionValue(opt, args[i] || "", errors);
            i++;
            break;
          case "list":
            const result = parseListTypeOption(opt, args[i], errors);
            options[opt.name] = result || [];
            if (result) {
              i++;
            }
            break;
          case "listOrElement":
            Debug.fail("listOrElement not supported here");
            break;
          default:
            options[opt.name] = parseCustomTypeOption(opt, args[i], errors);
            i++;
            break;
        }
      } else {
        options[opt.name] = void 0;
        i++;
      }
    }
    return i;
  }
  function parseCommandLine(commandLine, readFile) {
    return parseCommandLineWorker(compilerOptionsDidYouMeanDiagnostics, commandLine, readFile);
  }
  function getOptionFromName(optionName, allowShort) {
    return getOptionDeclarationFromName(getOptionsNameMap, optionName, allowShort);
  }
  function getOptionDeclarationFromName(getOptionNameMap, optionName, allowShort = false) {
    optionName = optionName.toLowerCase();
    const { optionsNameMap, shortOptionNames } = getOptionNameMap();
    if (allowShort) {
      const short = shortOptionNames.get(optionName);
      if (short !== void 0) {
        optionName = short;
      }
    }
    return optionsNameMap.get(optionName);
  }
  function getBuildOptionsNameMap() {
    return buildOptionsNameMapCache || (buildOptionsNameMapCache = createOptionNameMap(buildOpts));
  }
  function parseBuildCommand(args) {
    const { options, watchOptions, fileNames: projects, errors } = parseCommandLineWorker(
      buildOptionsDidYouMeanDiagnostics,
      args
    );
    const buildOptions = options;
    if (projects.length === 0) {
      projects.push(".");
    }
    if (buildOptions.clean && buildOptions.force) {
      errors.push(createCompilerDiagnostic(Diagnostics.Options_0_and_1_cannot_be_combined, "clean", "force"));
    }
    if (buildOptions.clean && buildOptions.verbose) {
      errors.push(createCompilerDiagnostic(Diagnostics.Options_0_and_1_cannot_be_combined, "clean", "verbose"));
    }
    if (buildOptions.clean && buildOptions.watch) {
      errors.push(createCompilerDiagnostic(Diagnostics.Options_0_and_1_cannot_be_combined, "clean", "watch"));
    }
    if (buildOptions.watch && buildOptions.dry) {
      errors.push(createCompilerDiagnostic(Diagnostics.Options_0_and_1_cannot_be_combined, "watch", "dry"));
    }
    return { buildOptions, watchOptions, projects, errors };
  }
  function getDiagnosticText(_message, ..._args) {
    const diagnostic = createCompilerDiagnostic.apply(void 0, arguments);
    return diagnostic.messageText;
  }
  function getParsedCommandLineOfConfigFile(configFileName, optionsToExtend, host, extendedConfigCache, watchOptionsToExtend, extraFileExtensions) {
    const configFileText = tryReadFile(configFileName, (fileName) => host.readFile(fileName));
    if (!isString(configFileText)) {
      host.onUnRecoverableConfigFileDiagnostic(configFileText);
      return void 0;
    }
    const result = parseJsonText(configFileName, configFileText);
    const cwd = host.getCurrentDirectory();
    result.path = toPath(configFileName, cwd, createGetCanonicalFileName(host.useCaseSensitiveFileNames));
    result.resolvedPath = result.path;
    result.originalFileName = result.fileName;
    return parseJsonSourceFileConfigFileContent(
      result,
      host,
      getNormalizedAbsolutePath(getDirectoryPath(configFileName), cwd),
      optionsToExtend,
      getNormalizedAbsolutePath(configFileName, cwd),
      /*resolutionStack*/
      void 0,
      extraFileExtensions,
      extendedConfigCache,
      watchOptionsToExtend
    );
  }
  function readConfigFile(fileName, readFile) {
    const textOrDiagnostic = tryReadFile(fileName, readFile);
    return isString(textOrDiagnostic) ? parseConfigFileTextToJson(fileName, textOrDiagnostic) : { config: {}, error: textOrDiagnostic };
  }
  function parseConfigFileTextToJson(fileName, jsonText) {
    const jsonSourceFile = parseJsonText(fileName, jsonText);
    return {
      config: convertConfigFileToObject(
        jsonSourceFile,
        jsonSourceFile.parseDiagnostics,
        /*reportOptionsErrors*/
        false,
        /*optionsIterator*/
        void 0
      ),
      error: jsonSourceFile.parseDiagnostics.length ? jsonSourceFile.parseDiagnostics[0] : void 0
    };
  }
  function readJsonConfigFile(fileName, readFile) {
    const textOrDiagnostic = tryReadFile(fileName, readFile);
    return isString(textOrDiagnostic) ? parseJsonText(fileName, textOrDiagnostic) : { fileName, parseDiagnostics: [textOrDiagnostic] };
  }
  function tryReadFile(fileName, readFile) {
    let text;
    try {
      text = readFile(fileName);
    } catch (e) {
      return createCompilerDiagnostic(Diagnostics.Cannot_read_file_0_Colon_1, fileName, e.message);
    }
    return text === void 0 ? createCompilerDiagnostic(Diagnostics.Cannot_read_file_0, fileName) : text;
  }
  function commandLineOptionsToMap(options) {
    return arrayToMap(options, getOptionName);
  }
  function getWatchOptionsNameMap() {
    return watchOptionsNameMapCache || (watchOptionsNameMapCache = createOptionNameMap(optionsForWatch));
  }
  function getCommandLineCompilerOptionsMap() {
    return commandLineCompilerOptionsMapCache || (commandLineCompilerOptionsMapCache = commandLineOptionsToMap(optionDeclarations));
  }
  function getCommandLineWatchOptionsMap() {
    return commandLineWatchOptionsMapCache || (commandLineWatchOptionsMapCache = commandLineOptionsToMap(optionsForWatch));
  }
  function getCommandLineTypeAcquisitionMap() {
    return commandLineTypeAcquisitionMapCache || (commandLineTypeAcquisitionMapCache = commandLineOptionsToMap(typeAcquisitionDeclarations));
  }
  function getTsconfigRootOptionsMap() {
    if (_tsconfigRootOptions === void 0) {
      _tsconfigRootOptions = {
        name: void 0,
        // should never be needed since this is root
        type: "object",
        elementOptions: commandLineOptionsToMap([
          {
            name: "compilerOptions",
            type: "object",
            elementOptions: getCommandLineCompilerOptionsMap(),
            extraKeyDiagnostics: compilerOptionsDidYouMeanDiagnostics
          },
          {
            name: "watchOptions",
            type: "object",
            elementOptions: getCommandLineWatchOptionsMap(),
            extraKeyDiagnostics: watchOptionsDidYouMeanDiagnostics
          },
          {
            name: "typeAcquisition",
            type: "object",
            elementOptions: getCommandLineTypeAcquisitionMap(),
            extraKeyDiagnostics: typeAcquisitionDidYouMeanDiagnostics
          },
          extendsOptionDeclaration,
          {
            name: "references",
            type: "list",
            element: {
              name: "references",
              type: "object"
            },
            category: Diagnostics.Projects
          },
          {
            name: "files",
            type: "list",
            element: {
              name: "files",
              type: "string"
            },
            category: Diagnostics.File_Management
          },
          {
            name: "include",
            type: "list",
            element: {
              name: "include",
              type: "string"
            },
            category: Diagnostics.File_Management,
            defaultValueDescription: Diagnostics.if_files_is_specified_otherwise_Asterisk_Asterisk_Slash_Asterisk
          },
          {
            name: "exclude",
            type: "list",
            element: {
              name: "exclude",
              type: "string"
            },
            category: Diagnostics.File_Management,
            defaultValueDescription: Diagnostics.node_modules_bower_components_jspm_packages_plus_the_value_of_outDir_if_one_is_specified
          },
          compileOnSaveCommandLineOption
        ])
      };
    }
    return _tsconfigRootOptions;
  }
  function convertConfigFileToObject(sourceFile, errors, reportOptionsErrors, optionsIterator) {
    var _a2;
    const rootExpression = (_a2 = sourceFile.statements[0]) == null ? void 0 : _a2.expression;
    const knownRootOptions = reportOptionsErrors ? getTsconfigRootOptionsMap() : void 0;
    if (rootExpression && rootExpression.kind !== 207 /* ObjectLiteralExpression */) {
      errors.push(createDiagnosticForNodeInSourceFile(
        sourceFile,
        rootExpression,
        Diagnostics.The_root_value_of_a_0_file_must_be_an_object,
        getBaseFileName(sourceFile.fileName) === "jsconfig.json" ? "jsconfig.json" : "tsconfig.json"
      ));
      if (isArrayLiteralExpression(rootExpression)) {
        const firstObject = find(rootExpression.elements, isObjectLiteralExpression);
        if (firstObject) {
          return convertToObjectWorker(
            sourceFile,
            firstObject,
            errors,
            /*returnValue*/
            true,
            knownRootOptions,
            optionsIterator
          );
        }
      }
      return {};
    }
    return convertToObjectWorker(
      sourceFile,
      rootExpression,
      errors,
      /*returnValue*/
      true,
      knownRootOptions,
      optionsIterator
    );
  }
  function convertToObject(sourceFile, errors) {
    var _a2;
    return convertToObjectWorker(
      sourceFile,
      (_a2 = sourceFile.statements[0]) == null ? void 0 : _a2.expression,
      errors,
      /*returnValue*/
      true,
      /*knownRootOptions*/
      void 0,
      /*jsonConversionNotifier*/
      void 0
    );
  }
  function convertToObjectWorker(sourceFile, rootExpression, errors, returnValue, knownRootOptions, jsonConversionNotifier) {
    if (!rootExpression) {
      return returnValue ? {} : void 0;
    }
    return convertPropertyValueToJson(rootExpression, knownRootOptions);
    function isRootOptionMap(knownOptions) {
      return knownRootOptions && knownRootOptions.elementOptions === knownOptions;
    }
    function convertObjectLiteralExpressionToJson(node, knownOptions, extraKeyDiagnostics, parentOption) {
      const result = returnValue ? {} : void 0;
      for (const element of node.properties) {
        if (element.kind !== 299 /* PropertyAssignment */) {
          errors.push(createDiagnosticForNodeInSourceFile(sourceFile, element, Diagnostics.Property_assignment_expected));
          continue;
        }
        if (element.questionToken) {
          errors.push(createDiagnosticForNodeInSourceFile(sourceFile, element.questionToken, Diagnostics.The_0_modifier_can_only_be_used_in_TypeScript_files, "?"));
        }
        if (!isDoubleQuotedString(element.name)) {
          errors.push(createDiagnosticForNodeInSourceFile(sourceFile, element.name, Diagnostics.String_literal_with_double_quotes_expected));
        }
        const textOfKey = isComputedNonLiteralName(element.name) ? void 0 : getTextOfPropertyName(element.name);
        const keyText = textOfKey && unescapeLeadingUnderscores(textOfKey);
        const option = keyText && knownOptions ? knownOptions.get(keyText) : void 0;
        if (keyText && extraKeyDiagnostics && !option) {
          if (knownOptions) {
            errors.push(createUnknownOptionError(
              keyText,
              extraKeyDiagnostics,
              (message, arg0, arg1) => createDiagnosticForNodeInSourceFile(sourceFile, element.name, message, arg0, arg1)
            ));
          } else {
            errors.push(createDiagnosticForNodeInSourceFile(sourceFile, element.name, extraKeyDiagnostics.unknownOptionDiagnostic, keyText));
          }
        }
        const value = convertPropertyValueToJson(element.initializer, option);
        if (typeof keyText !== "undefined") {
          if (returnValue) {
            result[keyText] = value;
          }
          if (jsonConversionNotifier && // Current callbacks are only on known parent option or if we are setting values in the root
          (parentOption || isRootOptionMap(knownOptions))) {
            const isValidOptionValue = isCompilerOptionsValue(option, value);
            if (parentOption) {
              if (isValidOptionValue) {
                jsonConversionNotifier.onSetValidOptionKeyValueInParent(parentOption, option, value);
              }
            } else if (isRootOptionMap(knownOptions)) {
              if (isValidOptionValue) {
                jsonConversionNotifier.onSetValidOptionKeyValueInRoot(keyText, element.name, value, element.initializer);
              } else if (!option) {
                jsonConversionNotifier.onSetUnknownOptionKeyValueInRoot(keyText, element.name, value, element.initializer);
              }
            }
          }
        }
      }
      return result;
    }
    function convertArrayLiteralExpressionToJson(elements, elementOption) {
      if (!returnValue) {
        elements.forEach((element) => convertPropertyValueToJson(element, elementOption));
        return void 0;
      }
      return filter(elements.map((element) => convertPropertyValueToJson(element, elementOption)), (v) => v !== void 0);
    }
    function convertPropertyValueToJson(valueExpression, option) {
      let invalidReported;
      switch (valueExpression.kind) {
        case 110 /* TrueKeyword */:
          reportInvalidOptionValue(option && option.type !== "boolean" && (option.type !== "listOrElement" || option.element.type !== "boolean"));
          return validateValue(
            /*value*/
            true
          );
        case 95 /* FalseKeyword */:
          reportInvalidOptionValue(option && option.type !== "boolean" && (option.type !== "listOrElement" || option.element.type !== "boolean"));
          return validateValue(
            /*value*/
            false
          );
        case 104 /* NullKeyword */:
          reportInvalidOptionValue(option && option.name === "extends");
          return validateValue(
            /*value*/
            null
          );
        case 10 /* StringLiteral */:
          if (!isDoubleQuotedString(valueExpression)) {
            errors.push(createDiagnosticForNodeInSourceFile(sourceFile, valueExpression, Diagnostics.String_literal_with_double_quotes_expected));
          }
          reportInvalidOptionValue(option && isString(option.type) && option.type !== "string" && (option.type !== "listOrElement" || isString(option.element.type) && option.element.type !== "string"));
          const text = valueExpression.text;
          if (option) {
            Debug.assert(option.type !== "listOrElement" || option.element.type === "string", "Only string or array of string is handled for now");
          }
          if (option && !isString(option.type)) {
            const customOption = option;
            if (!customOption.type.has(text.toLowerCase())) {
              errors.push(
                createDiagnosticForInvalidCustomType(
                  customOption,
                  (message, arg0, arg1) => createDiagnosticForNodeInSourceFile(sourceFile, valueExpression, message, arg0, arg1)
                )
              );
              invalidReported = true;
            }
          }
          return validateValue(text);
        case 8 /* NumericLiteral */:
          reportInvalidOptionValue(option && option.type !== "number" && (option.type !== "listOrElement" || option.element.type !== "number"));
          return validateValue(Number(valueExpression.text));
        case 221 /* PrefixUnaryExpression */:
          if (valueExpression.operator !== 40 /* MinusToken */ || valueExpression.operand.kind !== 8 /* NumericLiteral */) {
            break;
          }
          reportInvalidOptionValue(option && option.type !== "number" && (option.type !== "listOrElement" || option.element.type !== "number"));
          return validateValue(-Number(valueExpression.operand.text));
        case 207 /* ObjectLiteralExpression */:
          reportInvalidOptionValue(option && option.type !== "object" && (option.type !== "listOrElement" || option.element.type !== "object"));
          const objectLiteralExpression = valueExpression;
          if (option) {
            const { elementOptions, extraKeyDiagnostics, name: optionName } = option;
            return validateValue(convertObjectLiteralExpressionToJson(
              objectLiteralExpression,
              elementOptions,
              extraKeyDiagnostics,
              optionName
            ));
          } else {
            return validateValue(convertObjectLiteralExpressionToJson(
              objectLiteralExpression,
              /* knownOptions*/
              void 0,
              /*extraKeyDiagnosticMessage */
              void 0,
              /*parentOption*/
              void 0
            ));
          }
        case 206 /* ArrayLiteralExpression */:
          reportInvalidOptionValue(option && option.type !== "list" && option.type !== "listOrElement");
          return validateValue(convertArrayLiteralExpressionToJson(
            valueExpression.elements,
            option && option.element
          ));
      }
      if (option) {
        reportInvalidOptionValue(
          /*isError*/
          true
        );
      } else {
        errors.push(createDiagnosticForNodeInSourceFile(sourceFile, valueExpression, Diagnostics.Property_value_can_only_be_string_literal_numeric_literal_true_false_null_object_literal_or_array_literal));
      }
      return void 0;
      function validateValue(value) {
        var _a2;
        if (!invalidReported) {
          const diagnostic = (_a2 = option == null ? void 0 : option.extraValidation) == null ? void 0 : _a2.call(option, value);
          if (diagnostic) {
            errors.push(createDiagnosticForNodeInSourceFile(sourceFile, valueExpression, ...diagnostic));
            return void 0;
          }
        }
        return value;
      }
      function reportInvalidOptionValue(isError) {
        if (isError) {
          errors.push(createDiagnosticForNodeInSourceFile(sourceFile, valueExpression, Diagnostics.Compiler_option_0_requires_a_value_of_type_1, option.name, getCompilerOptionValueTypeString(option)));
          invalidReported = true;
        }
      }
    }
    function isDoubleQuotedString(node) {
      return isStringLiteral(node) && isStringDoubleQuoted(node, sourceFile);
    }
  }
  function getCompilerOptionValueTypeString(option) {
    return option.type === "listOrElement" ? `${getCompilerOptionValueTypeString(option.element)} or Array` : option.type === "list" ? "Array" : isString(option.type) ? option.type : "string";
  }
  function isCompilerOptionsValue(option, value) {
    if (option) {
      if (isNullOrUndefined(value))
        return true;
      if (option.type === "list") {
        return isArray(value);
      }
      if (option.type === "listOrElement") {
        return isArray(value) || isCompilerOptionsValue(option.element, value);
      }
      const expectedType = isString(option.type) ? option.type : "string";
      return typeof value === expectedType;
    }
    return false;
  }
  function convertToTSConfig(configParseResult, configFileName, host) {
    var _a2, _b, _c;
    const getCanonicalFileName = createGetCanonicalFileName(host.useCaseSensitiveFileNames);
    const files = map(
      filter(
        configParseResult.fileNames,
        !((_b = (_a2 = configParseResult.options.configFile) == null ? void 0 : _a2.configFileSpecs) == null ? void 0 : _b.validatedIncludeSpecs) ? returnTrue : matchesSpecs(
          configFileName,
          configParseResult.options.configFile.configFileSpecs.validatedIncludeSpecs,
          configParseResult.options.configFile.configFileSpecs.validatedExcludeSpecs,
          host
        )
      ),
      (f) => getRelativePathFromFile(getNormalizedAbsolutePath(configFileName, host.getCurrentDirectory()), getNormalizedAbsolutePath(f, host.getCurrentDirectory()), getCanonicalFileName)
    );
    const optionMap = serializeCompilerOptions(configParseResult.options, { configFilePath: getNormalizedAbsolutePath(configFileName, host.getCurrentDirectory()), useCaseSensitiveFileNames: host.useCaseSensitiveFileNames });
    const watchOptionMap = configParseResult.watchOptions && serializeWatchOptions(configParseResult.watchOptions);
    const config = {
      compilerOptions: {
        ...optionMapToObject(optionMap),
        showConfig: void 0,
        configFile: void 0,
        configFilePath: void 0,
        help: void 0,
        init: void 0,
        listFiles: void 0,
        listEmittedFiles: void 0,
        project: void 0,
        build: void 0,
        version: void 0
      },
      watchOptions: watchOptionMap && optionMapToObject(watchOptionMap),
      references: map(configParseResult.projectReferences, (r) => ({ ...r, path: r.originalPath ? r.originalPath : "", originalPath: void 0 })),
      files: length(files) ? files : void 0,
      ...((_c = configParseResult.options.configFile) == null ? void 0 : _c.configFileSpecs) ? {
        include: filterSameAsDefaultInclude(configParseResult.options.configFile.configFileSpecs.validatedIncludeSpecs),
        exclude: configParseResult.options.configFile.configFileSpecs.validatedExcludeSpecs
      } : {},
      compileOnSave: !!configParseResult.compileOnSave ? true : void 0
    };
    return config;
  }
  function optionMapToObject(optionMap) {
    return {
      ...arrayFrom(optionMap.entries()).reduce((prev, cur) => ({ ...prev, [cur[0]]: cur[1] }), {})
    };
  }
  function filterSameAsDefaultInclude(specs) {
    if (!length(specs))
      return void 0;
    if (length(specs) !== 1)
      return specs;
    if (specs[0] === defaultIncludeSpec)
      return void 0;
    return specs;
  }
  function matchesSpecs(path, includeSpecs, excludeSpecs, host) {
    if (!includeSpecs)
      return returnTrue;
    const patterns = getFileMatcherPatterns(path, excludeSpecs, includeSpecs, host.useCaseSensitiveFileNames, host.getCurrentDirectory());
    const excludeRe = patterns.excludePattern && getRegexFromPattern(patterns.excludePattern, host.useCaseSensitiveFileNames);
    const includeRe = patterns.includeFilePattern && getRegexFromPattern(patterns.includeFilePattern, host.useCaseSensitiveFileNames);
    if (includeRe) {
      if (excludeRe) {
        return (path2) => !(includeRe.test(path2) && !excludeRe.test(path2));
      }
      return (path2) => !includeRe.test(path2);
    }
    if (excludeRe) {
      return (path2) => excludeRe.test(path2);
    }
    return returnTrue;
  }
  function getCustomTypeMapOfCommandLineOption(optionDefinition) {
    switch (optionDefinition.type) {
      case "string":
      case "number":
      case "boolean":
      case "object":
        return void 0;
      case "list":
      case "listOrElement":
        return getCustomTypeMapOfCommandLineOption(optionDefinition.element);
      default:
        return optionDefinition.type;
    }
  }
  function getNameOfCompilerOptionValue(value, customTypeMap) {
    return forEachEntry(customTypeMap, (mapValue, key) => {
      if (mapValue === value) {
        return key;
      }
    });
  }
  function serializeCompilerOptions(options, pathOptions) {
    return serializeOptionBaseObject(options, getOptionsNameMap(), pathOptions);
  }
  function serializeWatchOptions(options) {
    return serializeOptionBaseObject(options, getWatchOptionsNameMap());
  }
  function serializeOptionBaseObject(options, { optionsNameMap }, pathOptions) {
    const result = /* @__PURE__ */ new Map();
    const getCanonicalFileName = pathOptions && createGetCanonicalFileName(pathOptions.useCaseSensitiveFileNames);
    for (const name in options) {
      if (hasProperty(options, name)) {
        if (optionsNameMap.has(name) && (optionsNameMap.get(name).category === Diagnostics.Command_line_Options || optionsNameMap.get(name).category === Diagnostics.Output_Formatting)) {
          continue;
        }
        const value = options[name];
        const optionDefinition = optionsNameMap.get(name.toLowerCase());
        if (optionDefinition) {
          Debug.assert(optionDefinition.type !== "listOrElement");
          const customTypeMap = getCustomTypeMapOfCommandLineOption(optionDefinition);
          if (!customTypeMap) {
            if (pathOptions && optionDefinition.isFilePath) {
              result.set(name, getRelativePathFromFile(pathOptions.configFilePath, getNormalizedAbsolutePath(value, getDirectoryPath(pathOptions.configFilePath)), getCanonicalFileName));
            } else {
              result.set(name, value);
            }
          } else {
            if (optionDefinition.type === "list") {
              result.set(name, value.map((element) => getNameOfCompilerOptionValue(element, customTypeMap)));
            } else {
              result.set(name, getNameOfCompilerOptionValue(value, customTypeMap));
            }
          }
        }
      }
    }
    return result;
  }
  function getCompilerOptionsDiffValue(options, newLine) {
    const compilerOptionsMap = getSerializedCompilerOption(options);
    return getOverwrittenDefaultOptions();
    function makePadding(paddingLength) {
      return Array(paddingLength + 1).join(" ");
    }
    function getOverwrittenDefaultOptions() {
      const result = [];
      const tab = makePadding(2);
      commandOptionsWithoutBuild.forEach((cmd) => {
        if (!compilerOptionsMap.has(cmd.name)) {
          return;
        }
        const newValue = compilerOptionsMap.get(cmd.name);
        const defaultValue = getDefaultValueForOption(cmd);
        if (newValue !== defaultValue) {
          result.push(`${tab}${cmd.name}: ${newValue}`);
        } else if (hasProperty(defaultInitCompilerOptions, cmd.name)) {
          result.push(`${tab}${cmd.name}: ${defaultValue}`);
        }
      });
      return result.join(newLine) + newLine;
    }
  }
  function getSerializedCompilerOption(options) {
    const compilerOptions = extend(options, defaultInitCompilerOptions);
    return serializeCompilerOptions(compilerOptions);
  }
  function generateTSConfig(options, fileNames, newLine) {
    const compilerOptionsMap = getSerializedCompilerOption(options);
    return writeConfigurations();
    function makePadding(paddingLength) {
      return Array(paddingLength + 1).join(" ");
    }
    function isAllowedOptionForOutput({ category, name, isCommandLineOnly }) {
      const categoriesToSkip = [Diagnostics.Command_line_Options, Diagnostics.Editor_Support, Diagnostics.Compiler_Diagnostics, Diagnostics.Backwards_Compatibility, Diagnostics.Watch_and_Build_Modes, Diagnostics.Output_Formatting];
      return !isCommandLineOnly && category !== void 0 && (!categoriesToSkip.includes(category) || compilerOptionsMap.has(name));
    }
    function writeConfigurations() {
      const categorizedOptions = /* @__PURE__ */ new Map();
      categorizedOptions.set(Diagnostics.Projects, []);
      categorizedOptions.set(Diagnostics.Language_and_Environment, []);
      categorizedOptions.set(Diagnostics.Modules, []);
      categorizedOptions.set(Diagnostics.JavaScript_Support, []);
      categorizedOptions.set(Diagnostics.Emit, []);
      categorizedOptions.set(Diagnostics.Interop_Constraints, []);
      categorizedOptions.set(Diagnostics.Type_Checking, []);
      categorizedOptions.set(Diagnostics.Completeness, []);
      for (const option of optionDeclarations) {
        if (isAllowedOptionForOutput(option)) {
          let listForCategory = categorizedOptions.get(option.category);
          if (!listForCategory)
            categorizedOptions.set(option.category, listForCategory = []);
          listForCategory.push(option);
        }
      }
      let marginLength = 0;
      let seenKnownKeys = 0;
      const entries = [];
      categorizedOptions.forEach((options2, category) => {
        if (entries.length !== 0) {
          entries.push({ value: "" });
        }
        entries.push({ value: `/* ${getLocaleSpecificMessage(category)} */` });
        for (const option of options2) {
          let optionName;
          if (compilerOptionsMap.has(option.name)) {
            optionName = `"${option.name}": ${JSON.stringify(compilerOptionsMap.get(option.name))}${(seenKnownKeys += 1) === compilerOptionsMap.size ? "" : ","}`;
          } else {
            optionName = `// "${option.name}": ${JSON.stringify(getDefaultValueForOption(option))},`;
          }
          entries.push({
            value: optionName,
            description: `/* ${option.description && getLocaleSpecificMessage(option.description) || option.name} */`
          });
          marginLength = Math.max(optionName.length, marginLength);
        }
      });
      const tab = makePadding(2);
      const result = [];
      result.push(`{`);
      result.push(`${tab}"compilerOptions": {`);
      result.push(`${tab}${tab}/* ${getLocaleSpecificMessage(Diagnostics.Visit_https_Colon_Slash_Slashaka_ms_Slashtsconfig_to_read_more_about_this_file)} */`);
      result.push("");
      for (const entry of entries) {
        const { value, description: description2 = "" } = entry;
        result.push(value && `${tab}${tab}${value}${description2 && makePadding(marginLength - value.length + 2) + description2}`);
      }
      if (fileNames.length) {
        result.push(`${tab}},`);
        result.push(`${tab}"files": [`);
        for (let i = 0; i < fileNames.length; i++) {
          result.push(`${tab}${tab}${JSON.stringify(fileNames[i])}${i === fileNames.length - 1 ? "" : ","}`);
        }
        result.push(`${tab}]`);
      } else {
        result.push(`${tab}}`);
      }
      result.push(`}`);
      return result.join(newLine) + newLine;
    }
  }
  function convertToOptionsWithAbsolutePaths(options, toAbsolutePath) {
    const result = {};
    const optionsNameMap = getOptionsNameMap().optionsNameMap;
    for (const name in options) {
      if (hasProperty(options, name)) {
        result[name] = convertToOptionValueWithAbsolutePaths(
          optionsNameMap.get(name.toLowerCase()),
          options[name],
          toAbsolutePath
        );
      }
    }
    if (result.configFilePath) {
      result.configFilePath = toAbsolutePath(result.configFilePath);
    }
    return result;
  }
  function convertToOptionValueWithAbsolutePaths(option, value, toAbsolutePath) {
    if (option && !isNullOrUndefined(value)) {
      if (option.type === "list") {
        const values = value;
        if (option.element.isFilePath && values.length) {
          return values.map(toAbsolutePath);
        }
      } else if (option.isFilePath) {
        return toAbsolutePath(value);
      }
      Debug.assert(option.type !== "listOrElement");
    }
    return value;
  }
  function parseJsonConfigFileContent(json, host, basePath, existingOptions, configFileName, resolutionStack, extraFileExtensions, extendedConfigCache, existingWatchOptions) {
    return parseJsonConfigFileContentWorker(
      json,
      /*sourceFile*/
      void 0,
      host,
      basePath,
      existingOptions,
      existingWatchOptions,
      configFileName,
      resolutionStack,
      extraFileExtensions,
      extendedConfigCache
    );
  }
  function parseJsonSourceFileConfigFileContent(sourceFile, host, basePath, existingOptions, configFileName, resolutionStack, extraFileExtensions, extendedConfigCache, existingWatchOptions) {
    var _a2, _b;
    (_a2 = tracing) == null ? void 0 : _a2.push(tracing.Phase.Parse, "parseJsonSourceFileConfigFileContent", { path: sourceFile.fileName });
    const result = parseJsonConfigFileContentWorker(
      /*json*/
      void 0,
      sourceFile,
      host,
      basePath,
      existingOptions,
      existingWatchOptions,
      configFileName,
      resolutionStack,
      extraFileExtensions,
      extendedConfigCache
    );
    (_b = tracing) == null ? void 0 : _b.pop();
    return result;
  }
  function setConfigFileInOptions(options, configFile) {
    if (configFile) {
      Object.defineProperty(options, "configFile", { enumerable: false, writable: false, value: configFile });
    }
  }
  function isNullOrUndefined(x) {
    return x === void 0 || x === null;
  }
  function directoryOfCombinedPath(fileName, basePath) {
    return getDirectoryPath(getNormalizedAbsolutePath(fileName, basePath));
  }
  function parseJsonConfigFileContentWorker(json, sourceFile, host, basePath, existingOptions = {}, existingWatchOptions, configFileName, resolutionStack = [], extraFileExtensions = [], extendedConfigCache) {
    Debug.assert(json === void 0 && sourceFile !== void 0 || json !== void 0 && sourceFile === void 0);
    const errors = [];
    const parsedConfig = parseConfig(json, sourceFile, host, basePath, configFileName, resolutionStack, errors, extendedConfigCache);
    const { raw } = parsedConfig;
    const options = extend(existingOptions, parsedConfig.options || {});
    const watchOptions = existingWatchOptions && parsedConfig.watchOptions ? extend(existingWatchOptions, parsedConfig.watchOptions) : parsedConfig.watchOptions || existingWatchOptions;
    options.configFilePath = configFileName && normalizeSlashes(configFileName);
    const configFileSpecs = getConfigFileSpecs();
    if (sourceFile)
      sourceFile.configFileSpecs = configFileSpecs;
    setConfigFileInOptions(options, sourceFile);
    const basePathForFileNames = normalizePath(configFileName ? directoryOfCombinedPath(configFileName, basePath) : basePath);
    return {
      options,
      watchOptions,
      fileNames: getFileNames(basePathForFileNames),
      projectReferences: getProjectReferences(basePathForFileNames),
      typeAcquisition: parsedConfig.typeAcquisition || getDefaultTypeAcquisition(),
      raw,
      errors,
      // Wildcard directories (provided as part of a wildcard path) are stored in a
      // file map that marks whether it was a regular wildcard match (with a `*` or `?` token),
      // or a recursive directory. This information is used by filesystem watchers to monitor for
      // new entries in these paths.
      wildcardDirectories: getWildcardDirectories(configFileSpecs, basePathForFileNames, host.useCaseSensitiveFileNames),
      compileOnSave: !!raw.compileOnSave
    };
    function getConfigFileSpecs() {
      const referencesOfRaw = getPropFromRaw("references", (element) => typeof element === "object", "object");
      const filesSpecs = toPropValue(getSpecsFromRaw("files"));
      if (filesSpecs) {
        const hasZeroOrNoReferences = referencesOfRaw === "no-prop" || isArray(referencesOfRaw) && referencesOfRaw.length === 0;
        const hasExtends = hasProperty(raw, "extends");
        if (filesSpecs.length === 0 && hasZeroOrNoReferences && !hasExtends) {
          if (sourceFile) {
            const fileName = configFileName || "tsconfig.json";
            const diagnosticMessage = Diagnostics.The_files_list_in_config_file_0_is_empty;
            const nodeValue = firstDefined(getTsConfigPropArray(sourceFile, "files"), (property) => property.initializer);
            const error = nodeValue ? createDiagnosticForNodeInSourceFile(sourceFile, nodeValue, diagnosticMessage, fileName) : createCompilerDiagnostic(diagnosticMessage, fileName);
            errors.push(error);
          } else {
            createCompilerDiagnosticOnlyIfJson(Diagnostics.The_files_list_in_config_file_0_is_empty, configFileName || "tsconfig.json");
          }
        }
      }
      let includeSpecs = toPropValue(getSpecsFromRaw("include"));
      const excludeOfRaw = getSpecsFromRaw("exclude");
      let isDefaultIncludeSpec = false;
      let excludeSpecs = toPropValue(excludeOfRaw);
      if (excludeOfRaw === "no-prop" && raw.compilerOptions) {
        const outDir = raw.compilerOptions.outDir;
        const declarationDir = raw.compilerOptions.declarationDir;
        if (outDir || declarationDir) {
          excludeSpecs = [outDir, declarationDir].filter((d) => !!d);
        }
      }
      if (filesSpecs === void 0 && includeSpecs === void 0) {
        includeSpecs = [defaultIncludeSpec];
        isDefaultIncludeSpec = true;
      }
      let validatedIncludeSpecs, validatedExcludeSpecs;
      if (includeSpecs) {
        validatedIncludeSpecs = validateSpecs(
          includeSpecs,
          errors,
          /*disallowTrailingRecursion*/
          true,
          sourceFile,
          "include"
        );
      }
      if (excludeSpecs) {
        validatedExcludeSpecs = validateSpecs(
          excludeSpecs,
          errors,
          /*disallowTrailingRecursion*/
          false,
          sourceFile,
          "exclude"
        );
      }
      return {
        filesSpecs,
        includeSpecs,
        excludeSpecs,
        validatedFilesSpec: filter(filesSpecs, isString),
        validatedIncludeSpecs,
        validatedExcludeSpecs,
        pathPatterns: void 0,
        // Initialized on first use
        isDefaultIncludeSpec
      };
    }
    function getFileNames(basePath2) {
      const fileNames = getFileNamesFromConfigSpecs(configFileSpecs, basePath2, options, host, extraFileExtensions);
      if (shouldReportNoInputFiles(fileNames, canJsonReportNoInputFiles(raw), resolutionStack)) {
        errors.push(getErrorForNoInputFiles(configFileSpecs, configFileName));
      }
      return fileNames;
    }
    function getProjectReferences(basePath2) {
      let projectReferences;
      const referencesOfRaw = getPropFromRaw("references", (element) => typeof element === "object", "object");
      if (isArray(referencesOfRaw)) {
        for (const ref of referencesOfRaw) {
          if (typeof ref.path !== "string") {
            createCompilerDiagnosticOnlyIfJson(Diagnostics.Compiler_option_0_requires_a_value_of_type_1, "reference.path", "string");
          } else {
            (projectReferences || (projectReferences = [])).push({
              path: getNormalizedAbsolutePath(ref.path, basePath2),
              originalPath: ref.path,
              prepend: ref.prepend,
              circular: ref.circular
            });
          }
        }
      }
      return projectReferences;
    }
    function toPropValue(specResult) {
      return isArray(specResult) ? specResult : void 0;
    }
    function getSpecsFromRaw(prop) {
      return getPropFromRaw(prop, isString, "string");
    }
    function getPropFromRaw(prop, validateElement, elementTypeName) {
      if (hasProperty(raw, prop) && !isNullOrUndefined(raw[prop])) {
        if (isArray(raw[prop])) {
          const result = raw[prop];
          if (!sourceFile && !every(result, validateElement)) {
            errors.push(createCompilerDiagnostic(Diagnostics.Compiler_option_0_requires_a_value_of_type_1, prop, elementTypeName));
          }
          return result;
        } else {
          createCompilerDiagnosticOnlyIfJson(Diagnostics.Compiler_option_0_requires_a_value_of_type_1, prop, "Array");
          return "not-array";
        }
      }
      return "no-prop";
    }
    function createCompilerDiagnosticOnlyIfJson(message, arg0, arg1) {
      if (!sourceFile) {
        errors.push(createCompilerDiagnostic(message, arg0, arg1));
      }
    }
  }
  function isErrorNoInputFiles(error) {
    return error.code === Diagnostics.No_inputs_were_found_in_config_file_0_Specified_include_paths_were_1_and_exclude_paths_were_2.code;
  }
  function getErrorForNoInputFiles({ includeSpecs, excludeSpecs }, configFileName) {
    return createCompilerDiagnostic(
      Diagnostics.No_inputs_were_found_in_config_file_0_Specified_include_paths_were_1_and_exclude_paths_were_2,
      configFileName || "tsconfig.json",
      JSON.stringify(includeSpecs || []),
      JSON.stringify(excludeSpecs || [])
    );
  }
  function shouldReportNoInputFiles(fileNames, canJsonReportNoInutFiles, resolutionStack) {
    return fileNames.length === 0 && canJsonReportNoInutFiles && (!resolutionStack || resolutionStack.length === 0);
  }
  function canJsonReportNoInputFiles(raw) {
    return !hasProperty(raw, "files") && !hasProperty(raw, "references");
  }
  function updateErrorForNoInputFiles(fileNames, configFileName, configFileSpecs, configParseDiagnostics, canJsonReportNoInutFiles) {
    const existingErrors = configParseDiagnostics.length;
    if (shouldReportNoInputFiles(fileNames, canJsonReportNoInutFiles)) {
      configParseDiagnostics.push(getErrorForNoInputFiles(configFileSpecs, configFileName));
    } else {
      filterMutate(configParseDiagnostics, (error) => !isErrorNoInputFiles(error));
    }
    return existingErrors !== configParseDiagnostics.length;
  }
  function isSuccessfulParsedTsconfig(value) {
    return !!value.options;
  }
  function parseConfig(json, sourceFile, host, basePath, configFileName, resolutionStack, errors, extendedConfigCache) {
    var _a2;
    basePath = normalizeSlashes(basePath);
    const resolvedPath = getNormalizedAbsolutePath(configFileName || "", basePath);
    if (resolutionStack.indexOf(resolvedPath) >= 0) {
      errors.push(createCompilerDiagnostic(Diagnostics.Circularity_detected_while_resolving_configuration_Colon_0, [...resolutionStack, resolvedPath].join(" -> ")));
      return { raw: json || convertToObject(sourceFile, errors) };
    }
    const ownConfig = json ? parseOwnConfigOfJson(json, host, basePath, configFileName, errors) : parseOwnConfigOfJsonSourceFile(sourceFile, host, basePath, configFileName, errors);
    if ((_a2 = ownConfig.options) == null ? void 0 : _a2.paths) {
      ownConfig.options.pathsBasePath = basePath;
    }
    if (ownConfig.extendedConfigPath) {
      resolutionStack = resolutionStack.concat([resolvedPath]);
      const result = { options: {} };
      if (isString(ownConfig.extendedConfigPath)) {
        applyExtendedConfig(result, ownConfig.extendedConfigPath);
      } else {
        ownConfig.extendedConfigPath.forEach((extendedConfigPath) => applyExtendedConfig(result, extendedConfigPath));
      }
      if (!ownConfig.raw.include && result.include)
        ownConfig.raw.include = result.include;
      if (!ownConfig.raw.exclude && result.exclude)
        ownConfig.raw.exclude = result.exclude;
      if (!ownConfig.raw.files && result.files)
        ownConfig.raw.files = result.files;
      if (ownConfig.raw.compileOnSave === void 0 && result.compileOnSave)
        ownConfig.raw.compileOnSave = result.compileOnSave;
      if (sourceFile && result.extendedSourceFiles)
        sourceFile.extendedSourceFiles = arrayFrom(result.extendedSourceFiles.keys());
      ownConfig.options = assign(result.options, ownConfig.options);
      ownConfig.watchOptions = ownConfig.watchOptions && result.watchOptions ? assign(result.watchOptions, ownConfig.watchOptions) : ownConfig.watchOptions || result.watchOptions;
    }
    return ownConfig;
    function applyExtendedConfig(result, extendedConfigPath) {
      const extendedConfig = getExtendedConfig(sourceFile, extendedConfigPath, host, resolutionStack, errors, extendedConfigCache, result);
      if (extendedConfig && isSuccessfulParsedTsconfig(extendedConfig)) {
        const extendsRaw = extendedConfig.raw;
        let relativeDifference;
        const setPropertyInResultIfNotUndefined = (propertyName) => {
          if (extendsRaw[propertyName]) {
            result[propertyName] = map(extendsRaw[propertyName], (path) => isRootedDiskPath(path) ? path : combinePaths(
              relativeDifference || (relativeDifference = convertToRelativePath(getDirectoryPath(extendedConfigPath), basePath, createGetCanonicalFileName(host.useCaseSensitiveFileNames))),
              path
            ));
          }
        };
        setPropertyInResultIfNotUndefined("include");
        setPropertyInResultIfNotUndefined("exclude");
        setPropertyInResultIfNotUndefined("files");
        if (extendsRaw.compileOnSave !== void 0) {
          result.compileOnSave = extendsRaw.compileOnSave;
        }
        assign(result.options, extendedConfig.options);
        result.watchOptions = result.watchOptions && extendedConfig.watchOptions ? assign({}, result.watchOptions, extendedConfig.watchOptions) : result.watchOptions || extendedConfig.watchOptions;
      }
    }
  }
  function parseOwnConfigOfJson(json, host, basePath, configFileName, errors) {
    if (hasProperty(json, "excludes")) {
      errors.push(createCompilerDiagnostic(Diagnostics.Unknown_option_excludes_Did_you_mean_exclude));
    }
    const options = convertCompilerOptionsFromJsonWorker(json.compilerOptions, basePath, errors, configFileName);
    const typeAcquisition = convertTypeAcquisitionFromJsonWorker(json.typeAcquisition, basePath, errors, configFileName);
    const watchOptions = convertWatchOptionsFromJsonWorker(json.watchOptions, basePath, errors);
    json.compileOnSave = convertCompileOnSaveOptionFromJson(json, basePath, errors);
    let extendedConfigPath;
    if (json.extends || json.extends === "") {
      if (!isCompilerOptionsValue(extendsOptionDeclaration, json.extends)) {
        errors.push(createCompilerDiagnostic(Diagnostics.Compiler_option_0_requires_a_value_of_type_1, "extends", getCompilerOptionValueTypeString(extendsOptionDeclaration)));
      } else {
        const newBase = configFileName ? directoryOfCombinedPath(configFileName, basePath) : basePath;
        if (isString(json.extends)) {
          extendedConfigPath = getExtendsConfigPath(json.extends, host, newBase, errors, createCompilerDiagnostic);
        } else {
          extendedConfigPath = [];
          for (const fileName of json.extends) {
            if (isString(fileName)) {
              extendedConfigPath = append(extendedConfigPath, getExtendsConfigPath(fileName, host, newBase, errors, createCompilerDiagnostic));
            } else {
              errors.push(createCompilerDiagnostic(Diagnostics.Compiler_option_0_requires_a_value_of_type_1, "extends", getCompilerOptionValueTypeString(extendsOptionDeclaration.element)));
            }
          }
        }
      }
    }
    return { raw: json, options, watchOptions, typeAcquisition, extendedConfigPath };
  }
  function parseOwnConfigOfJsonSourceFile(sourceFile, host, basePath, configFileName, errors) {
    const options = getDefaultCompilerOptions(configFileName);
    let typeAcquisition;
    let watchOptions;
    let extendedConfigPath;
    let rootCompilerOptions;
    const optionsIterator = {
      onSetValidOptionKeyValueInParent(parentOption, option, value) {
        let currentOption;
        switch (parentOption) {
          case "compilerOptions":
            currentOption = options;
            break;
          case "watchOptions":
            currentOption = watchOptions || (watchOptions = {});
            break;
          case "typeAcquisition":
            currentOption = typeAcquisition || (typeAcquisition = getDefaultTypeAcquisition(configFileName));
            break;
          default:
            Debug.fail("Unknown option");
        }
        currentOption[option.name] = normalizeOptionValue(option, basePath, value);
      },
      onSetValidOptionKeyValueInRoot(key, _keyNode, value, valueNode) {
        switch (key) {
          case "extends":
            const newBase = configFileName ? directoryOfCombinedPath(configFileName, basePath) : basePath;
            if (isString(value)) {
              extendedConfigPath = getExtendsConfigPath(
                value,
                host,
                newBase,
                errors,
                (message, arg0) => createDiagnosticForNodeInSourceFile(sourceFile, valueNode, message, arg0)
              );
            } else {
              extendedConfigPath = [];
              for (let index = 0; index < value.length; index++) {
                const fileName = value[index];
                if (isString(fileName)) {
                  extendedConfigPath = append(extendedConfigPath, getExtendsConfigPath(
                    fileName,
                    host,
                    newBase,
                    errors,
                    (message, arg0) => createDiagnosticForNodeInSourceFile(sourceFile, valueNode.elements[index], message, arg0)
                  ));
                }
              }
            }
            return;
        }
      },
      onSetUnknownOptionKeyValueInRoot(key, keyNode, _value, _valueNode) {
        if (key === "excludes") {
          errors.push(createDiagnosticForNodeInSourceFile(sourceFile, keyNode, Diagnostics.Unknown_option_excludes_Did_you_mean_exclude));
        }
        if (find(commandOptionsWithoutBuild, (opt) => opt.name === key)) {
          rootCompilerOptions = append(rootCompilerOptions, keyNode);
        }
      }
    };
    const json = convertConfigFileToObject(
      sourceFile,
      errors,
      /*reportOptionsErrors*/
      true,
      optionsIterator
    );
    if (!typeAcquisition) {
      typeAcquisition = getDefaultTypeAcquisition(configFileName);
    }
    if (rootCompilerOptions && json && json.compilerOptions === void 0) {
      errors.push(createDiagnosticForNodeInSourceFile(sourceFile, rootCompilerOptions[0], Diagnostics._0_should_be_set_inside_the_compilerOptions_object_of_the_config_json_file, getTextOfPropertyName(rootCompilerOptions[0])));
    }
    return { raw: json, options, watchOptions, typeAcquisition, extendedConfigPath };
  }
  function getExtendsConfigPath(extendedConfig, host, basePath, errors, createDiagnostic) {
    extendedConfig = normalizeSlashes(extendedConfig);
    if (isRootedDiskPath(extendedConfig) || startsWith(extendedConfig, "./") || startsWith(extendedConfig, "../")) {
      let extendedConfigPath = getNormalizedAbsolutePath(extendedConfig, basePath);
      if (!host.fileExists(extendedConfigPath) && !endsWith(extendedConfigPath, ".json" /* Json */)) {
        extendedConfigPath = `${extendedConfigPath}.json`;
        if (!host.fileExists(extendedConfigPath)) {
          errors.push(createDiagnostic(Diagnostics.File_0_not_found, extendedConfig));
          return void 0;
        }
      }
      return extendedConfigPath;
    }
    const resolved = nodeNextJsonConfigResolver(extendedConfig, combinePaths(basePath, "tsconfig.json"), host);
    if (resolved.resolvedModule) {
      return resolved.resolvedModule.resolvedFileName;
    }
    if (extendedConfig === "") {
      errors.push(createDiagnostic(Diagnostics.Compiler_option_0_cannot_be_given_an_empty_string, "extends"));
    } else {
      errors.push(createDiagnostic(Diagnostics.File_0_not_found, extendedConfig));
    }
    return void 0;
  }
  function getExtendedConfig(sourceFile, extendedConfigPath, host, resolutionStack, errors, extendedConfigCache, result) {
    var _a2;
    const path = host.useCaseSensitiveFileNames ? extendedConfigPath : toFileNameLowerCase(extendedConfigPath);
    let value;
    let extendedResult;
    let extendedConfig;
    if (extendedConfigCache && (value = extendedConfigCache.get(path))) {
      ({ extendedResult, extendedConfig } = value);
    } else {
      extendedResult = readJsonConfigFile(extendedConfigPath, (path2) => host.readFile(path2));
      if (!extendedResult.parseDiagnostics.length) {
        extendedConfig = parseConfig(
          /*json*/
          void 0,
          extendedResult,
          host,
          getDirectoryPath(extendedConfigPath),
          getBaseFileName(extendedConfigPath),
          resolutionStack,
          errors,
          extendedConfigCache
        );
      }
      if (extendedConfigCache) {
        extendedConfigCache.set(path, { extendedResult, extendedConfig });
      }
    }
    if (sourceFile) {
      ((_a2 = result.extendedSourceFiles) != null ? _a2 : result.extendedSourceFiles = /* @__PURE__ */ new Set()).add(extendedResult.fileName);
      if (extendedResult.extendedSourceFiles) {
        for (const extenedSourceFile of extendedResult.extendedSourceFiles) {
          result.extendedSourceFiles.add(extenedSourceFile);
        }
      }
    }
    if (extendedResult.parseDiagnostics.length) {
      errors.push(...extendedResult.parseDiagnostics);
      return void 0;
    }
    return extendedConfig;
  }
  function convertCompileOnSaveOptionFromJson(jsonOption, basePath, errors) {
    if (!hasProperty(jsonOption, compileOnSaveCommandLineOption.name)) {
      return false;
    }
    const result = convertJsonOption(compileOnSaveCommandLineOption, jsonOption.compileOnSave, basePath, errors);
    return typeof result === "boolean" && result;
  }
  function convertCompilerOptionsFromJson(jsonOptions, basePath, configFileName) {
    const errors = [];
    const options = convertCompilerOptionsFromJsonWorker(jsonOptions, basePath, errors, configFileName);
    return { options, errors };
  }
  function convertTypeAcquisitionFromJson(jsonOptions, basePath, configFileName) {
    const errors = [];
    const options = convertTypeAcquisitionFromJsonWorker(jsonOptions, basePath, errors, configFileName);
    return { options, errors };
  }
  function getDefaultCompilerOptions(configFileName) {
    const options = configFileName && getBaseFileName(configFileName) === "jsconfig.json" ? { allowJs: true, maxNodeModuleJsDepth: 2, allowSyntheticDefaultImports: true, skipLibCheck: true, noEmit: true } : {};
    return options;
  }
  function convertCompilerOptionsFromJsonWorker(jsonOptions, basePath, errors, configFileName) {
    const options = getDefaultCompilerOptions(configFileName);
    convertOptionsFromJson(getCommandLineCompilerOptionsMap(), jsonOptions, basePath, options, compilerOptionsDidYouMeanDiagnostics, errors);
    if (configFileName) {
      options.configFilePath = normalizeSlashes(configFileName);
    }
    return options;
  }
  function getDefaultTypeAcquisition(configFileName) {
    return { enable: !!configFileName && getBaseFileName(configFileName) === "jsconfig.json", include: [], exclude: [] };
  }
  function convertTypeAcquisitionFromJsonWorker(jsonOptions, basePath, errors, configFileName) {
    const options = getDefaultTypeAcquisition(configFileName);
    convertOptionsFromJson(getCommandLineTypeAcquisitionMap(), jsonOptions, basePath, options, typeAcquisitionDidYouMeanDiagnostics, errors);
    return options;
  }
  function convertWatchOptionsFromJsonWorker(jsonOptions, basePath, errors) {
    return convertOptionsFromJson(
      getCommandLineWatchOptionsMap(),
      jsonOptions,
      basePath,
      /*defaultOptions*/
      void 0,
      watchOptionsDidYouMeanDiagnostics,
      errors
    );
  }
  function convertOptionsFromJson(optionsNameMap, jsonOptions, basePath, defaultOptions, diagnostics, errors) {
    if (!jsonOptions) {
      return;
    }
    for (const id in jsonOptions) {
      const opt = optionsNameMap.get(id);
      if (opt) {
        (defaultOptions || (defaultOptions = {}))[opt.name] = convertJsonOption(opt, jsonOptions[id], basePath, errors);
      } else {
        errors.push(createUnknownOptionError(id, diagnostics, createCompilerDiagnostic));
      }
    }
    return defaultOptions;
  }
  function convertJsonOption(opt, value, basePath, errors) {
    if (isCompilerOptionsValue(opt, value)) {
      const optType = opt.type;
      if (optType === "list" && isArray(value)) {
        return convertJsonOptionOfListType(opt, value, basePath, errors);
      } else if (optType === "listOrElement") {
        return isArray(value) ? convertJsonOptionOfListType(opt, value, basePath, errors) : convertJsonOption(opt.element, value, basePath, errors);
      } else if (!isString(opt.type)) {
        return convertJsonOptionOfCustomType(opt, value, errors);
      }
      const validatedValue = validateJsonOptionValue(opt, value, errors);
      return isNullOrUndefined(validatedValue) ? validatedValue : normalizeNonListOptionValue(opt, basePath, validatedValue);
    } else {
      errors.push(createCompilerDiagnostic(Diagnostics.Compiler_option_0_requires_a_value_of_type_1, opt.name, getCompilerOptionValueTypeString(opt)));
    }
  }
  function normalizeOptionValue(option, basePath, value) {
    if (isNullOrUndefined(value))
      return void 0;
    if (option.type === "listOrElement" && !isArray(value))
      return normalizeOptionValue(option.element, basePath, value);
    else if (option.type === "list" || option.type === "listOrElement") {
      const listOption = option;
      if (listOption.element.isFilePath || !isString(listOption.element.type)) {
        return filter(map(value, (v) => normalizeOptionValue(listOption.element, basePath, v)), (v) => listOption.listPreserveFalsyValues ? true : !!v);
      }
      return value;
    } else if (!isString(option.type)) {
      return option.type.get(isString(value) ? value.toLowerCase() : value);
    }
    return normalizeNonListOptionValue(option, basePath, value);
  }
  function normalizeNonListOptionValue(option, basePath, value) {
    if (option.isFilePath) {
      value = getNormalizedAbsolutePath(value, basePath);
      if (value === "") {
        value = ".";
      }
    }
    return value;
  }
  function validateJsonOptionValue(opt, value, errors) {
    var _a2;
    if (isNullOrUndefined(value))
      return void 0;
    const d = (_a2 = opt.extraValidation) == null ? void 0 : _a2.call(opt, value);
    if (!d)
      return value;
    errors.push(createCompilerDiagnostic(...d));
    return void 0;
  }
  function convertJsonOptionOfCustomType(opt, value, errors) {
    if (isNullOrUndefined(value))
      return void 0;
    const key = value.toLowerCase();
    const val = opt.type.get(key);
    if (val !== void 0) {
      return validateJsonOptionValue(opt, val, errors);
    } else {
      errors.push(createCompilerDiagnosticForInvalidCustomType(opt));
    }
  }
  function convertJsonOptionOfListType(option, values, basePath, errors) {
    return filter(map(values, (v) => convertJsonOption(option.element, v, basePath, errors)), (v) => option.listPreserveFalsyValues ? true : !!v);
  }
  function getFileNamesFromConfigSpecs(configFileSpecs, basePath, options, host, extraFileExtensions = emptyArray) {
    basePath = normalizePath(basePath);
    const keyMapper = createGetCanonicalFileName(host.useCaseSensitiveFileNames);
    const literalFileMap = /* @__PURE__ */ new Map();
    const wildcardFileMap = /* @__PURE__ */ new Map();
    const wildCardJsonFileMap = /* @__PURE__ */ new Map();
    const { validatedFilesSpec, validatedIncludeSpecs, validatedExcludeSpecs } = configFileSpecs;
    const supportedExtensions = getSupportedExtensions(options, extraFileExtensions);
    const supportedExtensionsWithJsonIfResolveJsonModule = getSupportedExtensionsWithJsonIfResolveJsonModule(options, supportedExtensions);
    if (validatedFilesSpec) {
      for (const fileName of validatedFilesSpec) {
        const file = getNormalizedAbsolutePath(fileName, basePath);
        literalFileMap.set(keyMapper(file), file);
      }
    }
    let jsonOnlyIncludeRegexes;
    if (validatedIncludeSpecs && validatedIncludeSpecs.length > 0) {
      for (const file of host.readDirectory(
        basePath,
        flatten(supportedExtensionsWithJsonIfResolveJsonModule),
        validatedExcludeSpecs,
        validatedIncludeSpecs,
        /*depth*/
        void 0
      )) {
        if (fileExtensionIs(file, ".json" /* Json */)) {
          if (!jsonOnlyIncludeRegexes) {
            const includes = validatedIncludeSpecs.filter((s) => endsWith(s, ".json" /* Json */));
            const includeFilePatterns = map(getRegularExpressionsForWildcards(includes, basePath, "files"), (pattern) => `^${pattern}$`);
            jsonOnlyIncludeRegexes = includeFilePatterns ? includeFilePatterns.map((pattern) => getRegexFromPattern(pattern, host.useCaseSensitiveFileNames)) : emptyArray;
          }
          const includeIndex = findIndex(jsonOnlyIncludeRegexes, (re) => re.test(file));
          if (includeIndex !== -1) {
            const key2 = keyMapper(file);
            if (!literalFileMap.has(key2) && !wildCardJsonFileMap.has(key2)) {
              wildCardJsonFileMap.set(key2, file);
            }
          }
          continue;
        }
        if (hasFileWithHigherPriorityExtension(file, literalFileMap, wildcardFileMap, supportedExtensions, keyMapper)) {
          continue;
        }
        removeWildcardFilesWithLowerPriorityExtension(file, wildcardFileMap, supportedExtensions, keyMapper);
        const key = keyMapper(file);
        if (!literalFileMap.has(key) && !wildcardFileMap.has(key)) {
          wildcardFileMap.set(key, file);
        }
      }
    }
    const literalFiles = arrayFrom(literalFileMap.values());
    const wildcardFiles = arrayFrom(wildcardFileMap.values());
    return literalFiles.concat(wildcardFiles, arrayFrom(wildCardJsonFileMap.values()));
  }
  function isExcludedFile(pathToCheck, spec, basePath, useCaseSensitiveFileNames, currentDirectory) {
    const { validatedFilesSpec, validatedIncludeSpecs, validatedExcludeSpecs } = spec;
    if (!length(validatedIncludeSpecs) || !length(validatedExcludeSpecs))
      return false;
    basePath = normalizePath(basePath);
    const keyMapper = createGetCanonicalFileName(useCaseSensitiveFileNames);
    if (validatedFilesSpec) {
      for (const fileName of validatedFilesSpec) {
        if (keyMapper(getNormalizedAbsolutePath(fileName, basePath)) === pathToCheck)
          return false;
      }
    }
    return matchesExcludeWorker(pathToCheck, validatedExcludeSpecs, useCaseSensitiveFileNames, currentDirectory, basePath);
  }
  function invalidDotDotAfterRecursiveWildcard(s) {
    const wildcardIndex = startsWith(s, "**/") ? 0 : s.indexOf("/**/");
    if (wildcardIndex === -1) {
      return false;
    }
    const lastDotIndex = endsWith(s, "/..") ? s.length : s.lastIndexOf("/../");
    return lastDotIndex > wildcardIndex;
  }
  function matchesExclude(pathToCheck, excludeSpecs, useCaseSensitiveFileNames, currentDirectory) {
    return matchesExcludeWorker(
      pathToCheck,
      filter(excludeSpecs, (spec) => !invalidDotDotAfterRecursiveWildcard(spec)),
      useCaseSensitiveFileNames,
      currentDirectory
    );
  }
  function matchesExcludeWorker(pathToCheck, excludeSpecs, useCaseSensitiveFileNames, currentDirectory, basePath) {
    const excludePattern = getRegularExpressionForWildcard(excludeSpecs, combinePaths(normalizePath(currentDirectory), basePath), "exclude");
    const excludeRegex = excludePattern && getRegexFromPattern(excludePattern, useCaseSensitiveFileNames);
    if (!excludeRegex)
      return false;
    if (excludeRegex.test(pathToCheck))
      return true;
    return !hasExtension(pathToCheck) && excludeRegex.test(ensureTrailingDirectorySeparator(pathToCheck));
  }
  function validateSpecs(specs, errors, disallowTrailingRecursion, jsonSourceFile, specKey) {
    return specs.filter((spec) => {
      if (!isString(spec))
        return false;
      const diag2 = specToDiagnostic(spec, disallowTrailingRecursion);
      if (diag2 !== void 0) {
        errors.push(createDiagnostic(...diag2));
      }
      return diag2 === void 0;
    });
    function createDiagnostic(message, spec) {
      const element = getTsConfigPropArrayElementValue(jsonSourceFile, specKey, spec);
      return element ? createDiagnosticForNodeInSourceFile(jsonSourceFile, element, message, spec) : createCompilerDiagnostic(message, spec);
    }
  }
  function specToDiagnostic(spec, disallowTrailingRecursion) {
    Debug.assert(typeof spec === "string");
    if (disallowTrailingRecursion && invalidTrailingRecursionPattern.test(spec)) {
      return [Diagnostics.File_specification_cannot_end_in_a_recursive_directory_wildcard_Asterisk_Asterisk_Colon_0, spec];
    } else if (invalidDotDotAfterRecursiveWildcard(spec)) {
      return [Diagnostics.File_specification_cannot_contain_a_parent_directory_that_appears_after_a_recursive_directory_wildcard_Asterisk_Asterisk_Colon_0, spec];
    }
  }
  function getWildcardDirectories({ validatedIncludeSpecs: include, validatedExcludeSpecs: exclude }, path, useCaseSensitiveFileNames) {
    const rawExcludeRegex = getRegularExpressionForWildcard(exclude, path, "exclude");
    const excludeRegex = rawExcludeRegex && new RegExp(rawExcludeRegex, useCaseSensitiveFileNames ? "" : "i");
    const wildcardDirectories = {};
    if (include !== void 0) {
      const recursiveKeys = [];
      for (const file of include) {
        const spec = normalizePath(combinePaths(path, file));
        if (excludeRegex && excludeRegex.test(spec)) {
          continue;
        }
        const match = getWildcardDirectoryFromSpec(spec, useCaseSensitiveFileNames);
        if (match) {
          const { key, flags } = match;
          const existingFlags = wildcardDirectories[key];
          if (existingFlags === void 0 || existingFlags < flags) {
            wildcardDirectories[key] = flags;
            if (flags === 1 /* Recursive */) {
              recursiveKeys.push(key);
            }
          }
        }
      }
      for (const key in wildcardDirectories) {
        if (hasProperty(wildcardDirectories, key)) {
          for (const recursiveKey of recursiveKeys) {
            if (key !== recursiveKey && containsPath(recursiveKey, key, path, !useCaseSensitiveFileNames)) {
              delete wildcardDirectories[key];
            }
          }
        }
      }
    }
    return wildcardDirectories;
  }
  function getWildcardDirectoryFromSpec(spec, useCaseSensitiveFileNames) {
    const match = wildcardDirectoryPattern.exec(spec);
    if (match) {
      const questionWildcardIndex = spec.indexOf("?");
      const starWildcardIndex = spec.indexOf("*");
      const lastDirectorySeperatorIndex = spec.lastIndexOf(directorySeparator);
      return {
        key: useCaseSensitiveFileNames ? match[0] : toFileNameLowerCase(match[0]),
        flags: questionWildcardIndex !== -1 && questionWildcardIndex < lastDirectorySeperatorIndex || starWildcardIndex !== -1 && starWildcardIndex < lastDirectorySeperatorIndex ? 1 /* Recursive */ : 0 /* None */
      };
    }
    if (isImplicitGlob(spec.substring(spec.lastIndexOf(directorySeparator) + 1))) {
      return {
        key: removeTrailingDirectorySeparator(useCaseSensitiveFileNames ? spec : toFileNameLowerCase(spec)),
        flags: 1 /* Recursive */
      };
    }
    return void 0;
  }
  function hasFileWithHigherPriorityExtension(file, literalFiles, wildcardFiles, extensions, keyMapper) {
    const extensionGroup = forEach(extensions, (group2) => fileExtensionIsOneOf(file, group2) ? group2 : void 0);
    if (!extensionGroup) {
      return false;
    }
    for (const ext of extensionGroup) {
      if (fileExtensionIs(file, ext)) {
        return false;
      }
      const higherPriorityPath = keyMapper(changeExtension(file, ext));
      if (literalFiles.has(higherPriorityPath) || wildcardFiles.has(higherPriorityPath)) {
        if (ext === ".d.ts" /* Dts */ && (fileExtensionIs(file, ".js" /* Js */) || fileExtensionIs(file, ".jsx" /* Jsx */))) {
          continue;
        }
        return true;
      }
    }
    return false;
  }
  function removeWildcardFilesWithLowerPriorityExtension(file, wildcardFiles, extensions, keyMapper) {
    const extensionGroup = forEach(extensions, (group2) => fileExtensionIsOneOf(file, group2) ? group2 : void 0);
    if (!extensionGroup) {
      return;
    }
    for (let i = extensionGroup.length - 1; i >= 0; i--) {
      const ext = extensionGroup[i];
      if (fileExtensionIs(file, ext)) {
        return;
      }
      const lowerPriorityPath = keyMapper(changeExtension(file, ext));
      wildcardFiles.delete(lowerPriorityPath);
    }
  }
  function convertCompilerOptionsForTelemetry(opts) {
    const out = {};
    for (const key in opts) {
      if (hasProperty(opts, key)) {
        const type = getOptionFromName(key);
        if (type !== void 0) {
          out[key] = getOptionValueWithEmptyStrings(opts[key], type);
        }
      }
    }
    return out;
  }
  function getOptionValueWithEmptyStrings(value, option) {
    switch (option.type) {
      case "object":
        return "";
      case "string":
        return "";
      case "number":
        return typeof value === "number" ? value : "";
      case "boolean":
        return typeof value === "boolean" ? value : "";
      case "listOrElement":
        if (!isArray(value))
          return getOptionValueWithEmptyStrings(value, option.element);
      case "list":
        const elementType = option.element;
        return isArray(value) ? value.map((v) => getOptionValueWithEmptyStrings(v, elementType)) : "";
      default:
        return forEachEntry(option.type, (optionEnumValue, optionStringValue) => {
          if (optionEnumValue === value) {
            return optionStringValue;
          }
        });
    }
  }
  function getDefaultValueForOption(option) {
    switch (option.type) {
      case "number":
        return 1;
      case "boolean":
        return true;
      case "string":
        const defaultValue = option.defaultValueDescription;
        return option.isFilePath ? `./${defaultValue && typeof defaultValue === "string" ? defaultValue : ""}` : "";
      case "list":
        return [];
      case "listOrElement":
        return getDefaultValueForOption(option.element);
      case "object":
        return {};
      default:
        const value = firstOrUndefinedIterator(option.type.keys());
        if (value !== void 0)
          return value;
        return Debug.fail("Expected 'option.type' to have entries.");
    }
  }
  var compileOnSaveCommandLineOption, jsxOptionMap, inverseJsxOptionMap, libEntries, libs, libMap, optionsForWatch, commonOptionsWithBuild, targetOptionDeclaration, moduleOptionDeclaration, commandOptionsWithoutBuild, optionDeclarations, semanticDiagnosticsOptionDeclarations, affectsEmitOptionDeclarations, affectsDeclarationPathOptionDeclarations, moduleResolutionOptionDeclarations, sourceFileAffectingCompilerOptions, optionsAffectingProgramStructure, transpileOptionValueCompilerOptions, optionsForBuild, buildOpts, typeAcquisitionDeclarations, optionsNameMapCache, compilerOptionsAlternateMode, defaultInitCompilerOptions, compilerOptionsDidYouMeanDiagnostics, buildOptionsNameMapCache, buildOptionsAlternateMode, buildOptionsDidYouMeanDiagnostics, typeAcquisitionDidYouMeanDiagnostics, watchOptionsNameMapCache, watchOptionsDidYouMeanDiagnostics, commandLineCompilerOptionsMapCache, commandLineWatchOptionsMapCache, commandLineTypeAcquisitionMapCache, extendsOptionDeclaration, _tsconfigRootOptions, defaultIncludeSpec, invalidTrailingRecursionPattern, wildcardDirectoryPattern;
  var init_commandLineParser = __esm({
    "src/compiler/commandLineParser.ts"() {
      "use strict";
      init_ts2();
      compileOnSaveCommandLineOption = {
        name: "compileOnSave",
        type: "boolean",
        defaultValueDescription: false
      };
      jsxOptionMap = new Map(Object.entries({
        "preserve": 1 /* Preserve */,
        "react-native": 3 /* ReactNative */,
        "react": 2 /* React */,
        "react-jsx": 4 /* ReactJSX */,
        "react-jsxdev": 5 /* ReactJSXDev */
      }));
      inverseJsxOptionMap = new Map(mapIterator(jsxOptionMap.entries(), ([key, value]) => ["" + value, key]));
      libEntries = [
        // JavaScript only
        ["es5", "lib.es5.d.ts"],
        ["es6", "lib.es2015.d.ts"],
        ["es2015", "lib.es2015.d.ts"],
        ["es7", "lib.es2016.d.ts"],
        ["es2016", "lib.es2016.d.ts"],
        ["es2017", "lib.es2017.d.ts"],
        ["es2018", "lib.es2018.d.ts"],
        ["es2019", "lib.es2019.d.ts"],
        ["es2020", "lib.es2020.d.ts"],
        ["es2021", "lib.es2021.d.ts"],
        ["es2022", "lib.es2022.d.ts"],
        ["es2023", "lib.es2023.d.ts"],
        ["esnext", "lib.esnext.d.ts"],
        // Host only
        ["dom", "lib.dom.d.ts"],
        ["dom.iterable", "lib.dom.iterable.d.ts"],
        ["webworker", "lib.webworker.d.ts"],
        ["webworker.importscripts", "lib.webworker.importscripts.d.ts"],
        ["webworker.iterable", "lib.webworker.iterable.d.ts"],
        ["scripthost", "lib.scripthost.d.ts"],
        // ES2015 Or ESNext By-feature options
        ["es2015.core", "lib.es2015.core.d.ts"],
        ["es2015.collection", "lib.es2015.collection.d.ts"],
        ["es2015.generator", "lib.es2015.generator.d.ts"],
        ["es2015.iterable", "lib.es2015.iterable.d.ts"],
        ["es2015.promise", "lib.es2015.promise.d.ts"],
        ["es2015.proxy", "lib.es2015.proxy.d.ts"],
        ["es2015.reflect", "lib.es2015.reflect.d.ts"],
        ["es2015.symbol", "lib.es2015.symbol.d.ts"],
        ["es2015.symbol.wellknown", "lib.es2015.symbol.wellknown.d.ts"],
        ["es2016.array.include", "lib.es2016.array.include.d.ts"],
        ["es2017.object", "lib.es2017.object.d.ts"],
        ["es2017.sharedmemory", "lib.es2017.sharedmemory.d.ts"],
        ["es2017.string", "lib.es2017.string.d.ts"],
        ["es2017.intl", "lib.es2017.intl.d.ts"],
        ["es2017.typedarrays", "lib.es2017.typedarrays.d.ts"],
        ["es2018.asyncgenerator", "lib.es2018.asyncgenerator.d.ts"],
        ["es2018.asynciterable", "lib.es2018.asynciterable.d.ts"],
        ["es2018.intl", "lib.es2018.intl.d.ts"],
        ["es2018.promise", "lib.es2018.promise.d.ts"],
        ["es2018.regexp", "lib.es2018.regexp.d.ts"],
        ["es2019.array", "lib.es2019.array.d.ts"],
        ["es2019.object", "lib.es2019.object.d.ts"],
        ["es2019.string", "lib.es2019.string.d.ts"],
        ["es2019.symbol", "lib.es2019.symbol.d.ts"],
        ["es2019.intl", "lib.es2019.intl.d.ts"],
        ["es2020.bigint", "lib.es2020.bigint.d.ts"],
        ["es2020.date", "lib.es2020.date.d.ts"],
        ["es2020.promise", "lib.es2020.promise.d.ts"],
        ["es2020.sharedmemory", "lib.es2020.sharedmemory.d.ts"],
        ["es2020.string", "lib.es2020.string.d.ts"],
        ["es2020.symbol.wellknown", "lib.es2020.symbol.wellknown.d.ts"],
        ["es2020.intl", "lib.es2020.intl.d.ts"],
        ["es2020.number", "lib.es2020.number.d.ts"],
        ["es2021.promise", "lib.es2021.promise.d.ts"],
        ["es2021.string", "lib.es2021.string.d.ts"],
        ["es2021.weakref", "lib.es2021.weakref.d.ts"],
        ["es2021.intl", "lib.es2021.intl.d.ts"],
        ["es2022.array", "lib.es2022.array.d.ts"],
        ["es2022.error", "lib.es2022.error.d.ts"],
        ["es2022.intl", "lib.es2022.intl.d.ts"],
        ["es2022.object", "lib.es2022.object.d.ts"],
        ["es2022.sharedmemory", "lib.es2022.sharedmemory.d.ts"],
        ["es2022.string", "lib.es2022.string.d.ts"],
        ["es2022.regexp", "lib.es2022.regexp.d.ts"],
        ["es2023.array", "lib.es2023.array.d.ts"],
        ["esnext.array", "lib.es2023.array.d.ts"],
        ["esnext.symbol", "lib.es2019.symbol.d.ts"],
        ["esnext.asynciterable", "lib.es2018.asynciterable.d.ts"],
        ["esnext.intl", "lib.esnext.intl.d.ts"],
        ["esnext.bigint", "lib.es2020.bigint.d.ts"],
        ["esnext.string", "lib.es2022.string.d.ts"],
        ["esnext.promise", "lib.es2021.promise.d.ts"],
        ["esnext.weakref", "lib.es2021.weakref.d.ts"],
        ["decorators", "lib.decorators.d.ts"],
        ["decorators.legacy", "lib.decorators.legacy.d.ts"]
      ];
      libs = libEntries.map((entry) => entry[0]);
      libMap = new Map(libEntries);
      optionsForWatch = [
        {
          name: "watchFile",
          type: new Map(Object.entries({
            fixedpollinginterval: 0 /* FixedPollingInterval */,
            prioritypollinginterval: 1 /* PriorityPollingInterval */,
            dynamicprioritypolling: 2 /* DynamicPriorityPolling */,
            fixedchunksizepolling: 3 /* FixedChunkSizePolling */,
            usefsevents: 4 /* UseFsEvents */,
            usefseventsonparentdirectory: 5 /* UseFsEventsOnParentDirectory */
          })),
          category: Diagnostics.Watch_and_Build_Modes,
          description: Diagnostics.Specify_how_the_TypeScript_watch_mode_works,
          defaultValueDescription: 4 /* UseFsEvents */
        },
        {
          name: "watchDirectory",
          type: new Map(Object.entries({
            usefsevents: 0 /* UseFsEvents */,
            fixedpollinginterval: 1 /* FixedPollingInterval */,
            dynamicprioritypolling: 2 /* DynamicPriorityPolling */,
            fixedchunksizepolling: 3 /* FixedChunkSizePolling */
          })),
          category: Diagnostics.Watch_and_Build_Modes,
          description: Diagnostics.Specify_how_directories_are_watched_on_systems_that_lack_recursive_file_watching_functionality,
          defaultValueDescription: 0 /* UseFsEvents */
        },
        {
          name: "fallbackPolling",
          type: new Map(Object.entries({
            fixedinterval: 0 /* FixedInterval */,
            priorityinterval: 1 /* PriorityInterval */,
            dynamicpriority: 2 /* DynamicPriority */,
            fixedchunksize: 3 /* FixedChunkSize */
          })),
          category: Diagnostics.Watch_and_Build_Modes,
          description: Diagnostics.Specify_what_approach_the_watcher_should_use_if_the_system_runs_out_of_native_file_watchers,
          defaultValueDescription: 1 /* PriorityInterval */
        },
        {
          name: "synchronousWatchDirectory",
          type: "boolean",
          category: Diagnostics.Watch_and_Build_Modes,
          description: Diagnostics.Synchronously_call_callbacks_and_update_the_state_of_directory_watchers_on_platforms_that_don_t_support_recursive_watching_natively,
          defaultValueDescription: false
        },
        {
          name: "excludeDirectories",
          type: "list",
          element: {
            name: "excludeDirectory",
            type: "string",
            isFilePath: true,
            extraValidation: specToDiagnostic
          },
          category: Diagnostics.Watch_and_Build_Modes,
          description: Diagnostics.Remove_a_list_of_directories_from_the_watch_process
        },
        {
          name: "excludeFiles",
          type: "list",
          element: {
            name: "excludeFile",
            type: "string",
            isFilePath: true,
            extraValidation: specToDiagnostic
          },
          category: Diagnostics.Watch_and_Build_Modes,
          description: Diagnostics.Remove_a_list_of_files_from_the_watch_mode_s_processing
        }
      ];
      commonOptionsWithBuild = [
        {
          name: "help",
          shortName: "h",
          type: "boolean",
          showInSimplifiedHelpView: true,
          isCommandLineOnly: true,
          category: Diagnostics.Command_line_Options,
          description: Diagnostics.Print_this_message,
          defaultValueDescription: false
        },
        {
          name: "help",
          shortName: "?",
          type: "boolean",
          isCommandLineOnly: true,
          category: Diagnostics.Command_line_Options,
          defaultValueDescription: false
        },
        {
          name: "watch",
          shortName: "w",
          type: "boolean",
          showInSimplifiedHelpView: true,
          isCommandLineOnly: true,
          category: Diagnostics.Command_line_Options,
          description: Diagnostics.Watch_input_files,
          defaultValueDescription: false
        },
        {
          name: "preserveWatchOutput",
          type: "boolean",
          showInSimplifiedHelpView: false,
          category: Diagnostics.Output_Formatting,
          description: Diagnostics.Disable_wiping_the_console_in_watch_mode,
          defaultValueDescription: false
        },
        {
          name: "listFiles",
          type: "boolean",
          category: Diagnostics.Compiler_Diagnostics,
          description: Diagnostics.Print_all_of_the_files_read_during_the_compilation,
          defaultValueDescription: false
        },
        {
          name: "explainFiles",
          type: "boolean",
          category: Diagnostics.Compiler_Diagnostics,
          description: Diagnostics.Print_files_read_during_the_compilation_including_why_it_was_included,
          defaultValueDescription: false
        },
        {
          name: "listEmittedFiles",
          type: "boolean",
          category: Diagnostics.Compiler_Diagnostics,
          description: Diagnostics.Print_the_names_of_emitted_files_after_a_compilation,
          defaultValueDescription: false
        },
        {
          name: "pretty",
          type: "boolean",
          showInSimplifiedHelpView: true,
          category: Diagnostics.Output_Formatting,
          description: Diagnostics.Enable_color_and_formatting_in_TypeScript_s_output_to_make_compiler_errors_easier_to_read,
          defaultValueDescription: true
        },
        {
          name: "traceResolution",
          type: "boolean",
          category: Diagnostics.Compiler_Diagnostics,
          description: Diagnostics.Log_paths_used_during_the_moduleResolution_process,
          defaultValueDescription: false
        },
        {
          name: "diagnostics",
          type: "boolean",
          category: Diagnostics.Compiler_Diagnostics,
          description: Diagnostics.Output_compiler_performance_information_after_building,
          defaultValueDescription: false
        },
        {
          name: "extendedDiagnostics",
          type: "boolean",
          category: Diagnostics.Compiler_Diagnostics,
          description: Diagnostics.Output_more_detailed_compiler_performance_information_after_building,
          defaultValueDescription: false
        },
        {
          name: "generateCpuProfile",
          type: "string",
          isFilePath: true,
          paramType: Diagnostics.FILE_OR_DIRECTORY,
          category: Diagnostics.Compiler_Diagnostics,
          description: Diagnostics.Emit_a_v8_CPU_profile_of_the_compiler_run_for_debugging,
          defaultValueDescription: "profile.cpuprofile"
        },
        {
          name: "generateTrace",
          type: "string",
          isFilePath: true,
          isCommandLineOnly: true,
          paramType: Diagnostics.DIRECTORY,
          category: Diagnostics.Compiler_Diagnostics,
          description: Diagnostics.Generates_an_event_trace_and_a_list_of_types
        },
        {
          name: "incremental",
          shortName: "i",
          type: "boolean",
          category: Diagnostics.Projects,
          description: Diagnostics.Save_tsbuildinfo_files_to_allow_for_incremental_compilation_of_projects,
          transpileOptionValue: void 0,
          defaultValueDescription: Diagnostics.false_unless_composite_is_set
        },
        {
          name: "declaration",
          shortName: "d",
          type: "boolean",
          // Not setting affectsEmit because we calculate this flag might not affect full emit
          affectsBuildInfo: true,
          showInSimplifiedHelpView: true,
          category: Diagnostics.Emit,
          transpileOptionValue: void 0,
          description: Diagnostics.Generate_d_ts_files_from_TypeScript_and_JavaScript_files_in_your_project,
          defaultValueDescription: Diagnostics.false_unless_composite_is_set
        },
        {
          name: "declarationMap",
          type: "boolean",
          // Not setting affectsEmit because we calculate this flag might not affect full emit
          affectsBuildInfo: true,
          showInSimplifiedHelpView: true,
          category: Diagnostics.Emit,
          transpileOptionValue: void 0,
          defaultValueDescription: false,
          description: Diagnostics.Create_sourcemaps_for_d_ts_files
        },
        {
          name: "emitDeclarationOnly",
          type: "boolean",
          // Not setting affectsEmit because we calculate this flag might not affect full emit
          affectsBuildInfo: true,
          showInSimplifiedHelpView: true,
          category: Diagnostics.Emit,
          description: Diagnostics.Only_output_d_ts_files_and_not_JavaScript_files,
          transpileOptionValue: void 0,
          defaultValueDescription: false
        },
        {
          name: "sourceMap",
          type: "boolean",
          // Not setting affectsEmit because we calculate this flag might not affect full emit
          affectsBuildInfo: true,
          showInSimplifiedHelpView: true,
          category: Diagnostics.Emit,
          defaultValueDescription: false,
          description: Diagnostics.Create_source_map_files_for_emitted_JavaScript_files
        },
        {
          name: "inlineSourceMap",
          type: "boolean",
          // Not setting affectsEmit because we calculate this flag might not affect full emit
          affectsBuildInfo: true,
          category: Diagnostics.Emit,
          description: Diagnostics.Include_sourcemap_files_inside_the_emitted_JavaScript,
          defaultValueDescription: false
        },
        {
          name: "assumeChangesOnlyAffectDirectDependencies",
          type: "boolean",
          affectsSemanticDiagnostics: true,
          affectsEmit: true,
          affectsBuildInfo: true,
          category: Diagnostics.Watch_and_Build_Modes,
          description: Diagnostics.Have_recompiles_in_projects_that_use_incremental_and_watch_mode_assume_that_changes_within_a_file_will_only_affect_files_directly_depending_on_it,
          defaultValueDescription: false
        },
        {
          name: "locale",
          type: "string",
          category: Diagnostics.Command_line_Options,
          isCommandLineOnly: true,
          description: Diagnostics.Set_the_language_of_the_messaging_from_TypeScript_This_does_not_affect_emit,
          defaultValueDescription: Diagnostics.Platform_specific
        }
      ];
      targetOptionDeclaration = {
        name: "target",
        shortName: "t",
        type: new Map(Object.entries({
          es3: 0 /* ES3 */,
          es5: 1 /* ES5 */,
          es6: 2 /* ES2015 */,
          es2015: 2 /* ES2015 */,
          es2016: 3 /* ES2016 */,
          es2017: 4 /* ES2017 */,
          es2018: 5 /* ES2018 */,
          es2019: 6 /* ES2019 */,
          es2020: 7 /* ES2020 */,
          es2021: 8 /* ES2021 */,
          es2022: 9 /* ES2022 */,
          esnext: 99 /* ESNext */
        })),
        affectsSourceFile: true,
        affectsModuleResolution: true,
        affectsEmit: true,
        affectsBuildInfo: true,
        paramType: Diagnostics.VERSION,
        showInSimplifiedHelpView: true,
        category: Diagnostics.Language_and_Environment,
        description: Diagnostics.Set_the_JavaScript_language_version_for_emitted_JavaScript_and_include_compatible_library_declarations,
        defaultValueDescription: 1 /* ES5 */
      };
      moduleOptionDeclaration = {
        name: "module",
        shortName: "m",
        type: new Map(Object.entries({
          none: 0 /* None */,
          commonjs: 1 /* CommonJS */,
          amd: 2 /* AMD */,
          system: 4 /* System */,
          umd: 3 /* UMD */,
          es6: 5 /* ES2015 */,
          es2015: 5 /* ES2015 */,
          es2020: 6 /* ES2020 */,
          es2022: 7 /* ES2022 */,
          esnext: 99 /* ESNext */,
          node16: 100 /* Node16 */,
          nodenext: 199 /* NodeNext */
        })),
        affectsModuleResolution: true,
        affectsEmit: true,
        affectsBuildInfo: true,
        paramType: Diagnostics.KIND,
        showInSimplifiedHelpView: true,
        category: Diagnostics.Modules,
        description: Diagnostics.Specify_what_module_code_is_generated,
        defaultValueDescription: void 0
      };
      commandOptionsWithoutBuild = [
        // CommandLine only options
        {
          name: "all",
          type: "boolean",
          showInSimplifiedHelpView: true,
          category: Diagnostics.Command_line_Options,
          description: Diagnostics.Show_all_compiler_options,
          defaultValueDescription: false
        },
        {
          name: "version",
          shortName: "v",
          type: "boolean",
          showInSimplifiedHelpView: true,
          category: Diagnostics.Command_line_Options,
          description: Diagnostics.Print_the_compiler_s_version,
          defaultValueDescription: false
        },
        {
          name: "init",
          type: "boolean",
          showInSimplifiedHelpView: true,
          category: Diagnostics.Command_line_Options,
          description: Diagnostics.Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file,
          defaultValueDescription: false
        },
        {
          name: "project",
          shortName: "p",
          type: "string",
          isFilePath: true,
          showInSimplifiedHelpView: true,
          category: Diagnostics.Command_line_Options,
          paramType: Diagnostics.FILE_OR_DIRECTORY,
          description: Diagnostics.Compile_the_project_given_the_path_to_its_configuration_file_or_to_a_folder_with_a_tsconfig_json
        },
        {
          name: "build",
          type: "boolean",
          shortName: "b",
          showInSimplifiedHelpView: true,
          category: Diagnostics.Command_line_Options,
          description: Diagnostics.Build_one_or_more_projects_and_their_dependencies_if_out_of_date,
          defaultValueDescription: false
        },
        {
          name: "showConfig",
          type: "boolean",
          showInSimplifiedHelpView: true,
          category: Diagnostics.Command_line_Options,
          isCommandLineOnly: true,
          description: Diagnostics.Print_the_final_configuration_instead_of_building,
          defaultValueDescription: false
        },
        {
          name: "listFilesOnly",
          type: "boolean",
          category: Diagnostics.Command_line_Options,
          isCommandLineOnly: true,
          description: Diagnostics.Print_names_of_files_that_are_part_of_the_compilation_and_then_stop_processing,
          defaultValueDescription: false
        },
        // Basic
        targetOptionDeclaration,
        moduleOptionDeclaration,
        {
          name: "lib",
          type: "list",
          element: {
            name: "lib",
            type: libMap,
            defaultValueDescription: void 0
          },
          affectsProgramStructure: true,
          showInSimplifiedHelpView: true,
          category: Diagnostics.Language_and_Environment,
          description: Diagnostics.Specify_a_set_of_bundled_library_declaration_files_that_describe_the_target_runtime_environment,
          transpileOptionValue: void 0
        },
        {
          name: "allowJs",
          type: "boolean",
          affectsModuleResolution: true,
          showInSimplifiedHelpView: true,
          category: Diagnostics.JavaScript_Support,
          description: Diagnostics.Allow_JavaScript_files_to_be_a_part_of_your_program_Use_the_checkJS_option_to_get_errors_from_these_files,
          defaultValueDescription: false
        },
        {
          name: "checkJs",
          type: "boolean",
          showInSimplifiedHelpView: true,
          category: Diagnostics.JavaScript_Support,
          description: Diagnostics.Enable_error_reporting_in_type_checked_JavaScript_files,
          defaultValueDescription: false
        },
        {
          name: "jsx",
          type: jsxOptionMap,
          affectsSourceFile: true,
          affectsEmit: true,
          affectsBuildInfo: true,
          affectsModuleResolution: true,
          paramType: Diagnostics.KIND,
          showInSimplifiedHelpView: true,
          category: Diagnostics.Language_and_Environment,
          description: Diagnostics.Specify_what_JSX_code_is_generated,
          defaultValueDescription: void 0
        },
        {
          name: "outFile",
          type: "string",
          affectsEmit: true,
          affectsBuildInfo: true,
          affectsDeclarationPath: true,
          isFilePath: true,
          paramType: Diagnostics.FILE,
          showInSimplifiedHelpView: true,
          category: Diagnostics.Emit,
          description: Diagnostics.Specify_a_file_that_bundles_all_outputs_into_one_JavaScript_file_If_declaration_is_true_also_designates_a_file_that_bundles_all_d_ts_output,
          transpileOptionValue: void 0
        },
        {
          name: "outDir",
          type: "string",
          affectsEmit: true,
          affectsBuildInfo: true,
          affectsDeclarationPath: true,
          isFilePath: true,
          paramType: Diagnostics.DIRECTORY,
          showInSimplifiedHelpView: true,
          category: Diagnostics.Emit,
          description: Diagnostics.Specify_an_output_folder_for_all_emitted_files
        },
        {
          name: "rootDir",
          type: "string",
          affectsEmit: true,
          affectsBuildInfo: true,
          affectsDeclarationPath: true,
          isFilePath: true,
          paramType: Diagnostics.LOCATION,
          category: Diagnostics.Modules,
          description: Diagnostics.Specify_the_root_folder_within_your_source_files,
          defaultValueDescription: Diagnostics.Computed_from_the_list_of_input_files
        },
        {
          name: "composite",
          type: "boolean",
          // Not setting affectsEmit because we calculate this flag might not affect full emit
          affectsBuildInfo: true,
          isTSConfigOnly: true,
          category: Diagnostics.Projects,
          transpileOptionValue: void 0,
          defaultValueDescription: false,
          description: Diagnostics.Enable_constraints_that_allow_a_TypeScript_project_to_be_used_with_project_references
        },
        {
          name: "tsBuildInfoFile",
          type: "string",
          affectsEmit: true,
          affectsBuildInfo: true,
          isFilePath: true,
          paramType: Diagnostics.FILE,
          category: Diagnostics.Projects,
          transpileOptionValue: void 0,
          defaultValueDescription: ".tsbuildinfo",
          description: Diagnostics.Specify_the_path_to_tsbuildinfo_incremental_compilation_file
        },
        {
          name: "removeComments",
          type: "boolean",
          affectsEmit: true,
          affectsBuildInfo: true,
          showInSimplifiedHelpView: true,
          category: Diagnostics.Emit,
          defaultValueDescription: false,
          description: Diagnostics.Disable_emitting_comments
        },
        {
          name: "noEmit",
          type: "boolean",
          showInSimplifiedHelpView: true,
          category: Diagnostics.Emit,
          description: Diagnostics.Disable_emitting_files_from_a_compilation,
          transpileOptionValue: void 0,
          defaultValueDescription: false
        },
        {
          name: "importHelpers",
          type: "boolean",
          affectsEmit: true,
          affectsBuildInfo: true,
          category: Diagnostics.Emit,
          description: Diagnostics.Allow_importing_helper_functions_from_tslib_once_per_project_instead_of_including_them_per_file,
          defaultValueDescription: false
        },
        {
          name: "importsNotUsedAsValues",
          type: new Map(Object.entries({
            remove: 0 /* Remove */,
            preserve: 1 /* Preserve */,
            error: 2 /* Error */
          })),
          affectsEmit: true,
          affectsSemanticDiagnostics: true,
          affectsBuildInfo: true,
          category: Diagnostics.Emit,
          description: Diagnostics.Specify_emit_Slashchecking_behavior_for_imports_that_are_only_used_for_types,
          defaultValueDescription: 0 /* Remove */
        },
        {
          name: "downlevelIteration",
          type: "boolean",
          affectsEmit: true,
          affectsBuildInfo: true,
          category: Diagnostics.Emit,
          description: Diagnostics.Emit_more_compliant_but_verbose_and_less_performant_JavaScript_for_iteration,
          defaultValueDescription: false
        },
        {
          name: "isolatedModules",
          type: "boolean",
          category: Diagnostics.Interop_Constraints,
          description: Diagnostics.Ensure_that_each_file_can_be_safely_transpiled_without_relying_on_other_imports,
          transpileOptionValue: true,
          defaultValueDescription: false
        },
        {
          name: "verbatimModuleSyntax",
          type: "boolean",
          category: Diagnostics.Interop_Constraints,
          description: Diagnostics.Do_not_transform_or_elide_any_imports_or_exports_not_marked_as_type_only_ensuring_they_are_written_in_the_output_file_s_format_based_on_the_module_setting,
          defaultValueDescription: false
        },
        // Strict Type Checks
        {
          name: "strict",
          type: "boolean",
          // Though this affects semantic diagnostics, affectsSemanticDiagnostics is not set here
          // The value of each strictFlag depends on own strictFlag value or this and never accessed directly.
          // But we need to store `strict` in builf info, even though it won't be examined directly, so that the
          // flags it controls (e.g. `strictNullChecks`) will be retrieved correctly
          affectsBuildInfo: true,
          showInSimplifiedHelpView: true,
          category: Diagnostics.Type_Checking,
          description: Diagnostics.Enable_all_strict_type_checking_options,
          defaultValueDescription: false
        },
        {
          name: "noImplicitAny",
          type: "boolean",
          affectsSemanticDiagnostics: true,
          affectsBuildInfo: true,
          strictFlag: true,
          category: Diagnostics.Type_Checking,
          description: Diagnostics.Enable_error_reporting_for_expressions_and_declarations_with_an_implied_any_type,
          defaultValueDescription: Diagnostics.false_unless_strict_is_set
        },
        {
          name: "strictNullChecks",
          type: "boolean",
          affectsSemanticDiagnostics: true,
          affectsBuildInfo: true,
          strictFlag: true,
          category: Diagnostics.Type_Checking,
          description: Diagnostics.When_type_checking_take_into_account_null_and_undefined,
          defaultValueDescription: Diagnostics.false_unless_strict_is_set
        },
        {
          name: "strictFunctionTypes",
          type: "boolean",
          affectsSemanticDiagnostics: true,
          affectsBuildInfo: true,
          strictFlag: true,
          category: Diagnostics.Type_Checking,
          description: Diagnostics.When_assigning_functions_check_to_ensure_parameters_and_the_return_values_are_subtype_compatible,
          defaultValueDescription: Diagnostics.false_unless_strict_is_set
        },
        {
          name: "strictBindCallApply",
          type: "boolean",
          affectsSemanticDiagnostics: true,
          affectsBuildInfo: true,
          strictFlag: true,
          category: Diagnostics.Type_Checking,
          description: Diagnostics.Check_that_the_arguments_for_bind_call_and_apply_methods_match_the_original_function,
          defaultValueDescription: Diagnostics.false_unless_strict_is_set
        },
        {
          name: "strictPropertyInitialization",
          type: "boolean",
          affectsSemanticDiagnostics: true,
          affectsBuildInfo: true,
          strictFlag: true,
          category: Diagnostics.Type_Checking,
          description: Diagnostics.Check_for_class_properties_that_are_declared_but_not_set_in_the_constructor,
          defaultValueDescription: Diagnostics.false_unless_strict_is_set
        },
        {
          name: "noImplicitThis",
          type: "boolean",
          affectsSemanticDiagnostics: true,
          affectsBuildInfo: true,
          strictFlag: true,
          category: Diagnostics.Type_Checking,
          description: Diagnostics.Enable_error_reporting_when_this_is_given_the_type_any,
          defaultValueDescription: Diagnostics.false_unless_strict_is_set
        },
        {
          name: "useUnknownInCatchVariables",
          type: "boolean",
          affectsSemanticDiagnostics: true,
          affectsBuildInfo: true,
          strictFlag: true,
          category: Diagnostics.Type_Checking,
          description: Diagnostics.Default_catch_clause_variables_as_unknown_instead_of_any,
          defaultValueDescription: false
        },
        {
          name: "alwaysStrict",
          type: "boolean",
          affectsSourceFile: true,
          affectsEmit: true,
          affectsBuildInfo: true,
          strictFlag: true,
          category: Diagnostics.Type_Checking,
          description: Diagnostics.Ensure_use_strict_is_always_emitted,
          defaul